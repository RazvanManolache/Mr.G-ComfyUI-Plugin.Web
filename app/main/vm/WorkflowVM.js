Ext.define('MrG.main.vm.WorkflowVM', {
	extend: 'MrG.base.vm.BasePanelVM',
	data: {
		settingsList: [
			//the options for what to see within workflow
			"hideConnections", "hideInConnections", "showDescription", "hideOutConnections", "hideTitles",
			"hideModifying", "hideConfigure", "showHiddenNodes", "forceShowHiddenFields", "forceHideFields", "hideEditForm", 
			//the options for running the workflow
			"sequenceFields", "selectedRunMode", "runSettings",
			//autosave options
			"autoSaveAfterRun", "autoSave",
			//what to use in output description
			"modifiedFieldsOutputDescription", "visibleFieldsOutputDescription",
			// the options for searching within the workflow
			"searchKeepSelected", "searchUseTitle", "searchUseComfyMenu", "searchUseDescription", "searchUseFields",
			// TODO: not really working
			 "iframeWidth", "iframeHeight", "iframeFlex", "hideComfy",
		],
		//the id of the window that is used for making requests
		comfyClientId: null,

		// #region View options
		// Setting - hide the edit form for the workflow
		hideEditForm: true,
		// Setting - show the description of the workflow
		showDescription: false,
		// Setting - hide all the connections between nodes
		hideConnections: true,
		// Setting - hide the connections that are going into nodes
		hideInConnections: false,
		// Setting - hide the connections that are going out of nodes
		hideOutConnections: false,
		// Setting - auto save the workflow after running
		autoSaveAfterRun: false,
		// Setting - auto save the workflow
		autoSave: false,
		// Setting - use the modified fields for the output description
		modifiedFieldsOutputDescription: false,
		// Setting - use the visible fields for the output description
		visibleFieldsOutputDescription: false,
		// Setting - hide the titles of the nodes
		hideTitles: false,
		// Setting - hide the modifying options for the nodes
		hideModifying: false,
		// Setting - force show the hidden fields of nodes
		forceShowHiddenFields: false,
		// Setting - force hide the fields of nodes
		forceHideFields: false,
		// Setting - force showing the hidden nodes
		showHiddenNodes: false,

		// #endregion View options

		// #region Run options
		// Setting - the selected run mode for the workflow
		selectedRunMode: 'q',
		// Setting - the configuration configured for the fields that use sequence
		sequenceFields: [],
		// Setting - the run settings for the workflow
		runSettings: null,
		// #endregion Run options

		// #region Search options
		// the options for searching within the workflow

		// TODO: allow selection of nodes
		searchKeepSelected: true,
		// can search by node title
		searchUseTitle: true,
		// can search by location in the comfy menu
		searchUseComfyMenu: true,
		// can search by node description
		searchUseDescription: true,
		// can search by node fields
		searchUseFields: true,

		// #endregion Search options

		// to be able to enable/disable field selection for presets and maybe orders (like api)
		fieldsSelection: false,

		// is the comfyui extension for autoconnect installed
		hideautoConnect: true,
		// hide the workflow bottombar
		hideWorkflowBBar: false,
		//the object to use to store the preset
		presetData: new MrG.model.SelectListModel({ field_type: 'MRG_PRESET'}),
		//where to keep the states of fields
		//TODO: make other fields functionality use this one too, don't duplicate stuff
		workflowNodeFields: [],

		
		disableWorkflowSettings: false,

		disableSaveAs: false,
		hideSaveAs: false,

		disableRename: false,
		hideEditDetails: false,

		readOnlyWorkflow: false,
		nodes: [],
		comfyConfig: null,

		hideComfy: false,

		hideNodeClose: false,
		hideConfigure: false,
		hideMoveDown: false,
		hideMoveUp: false,
		hideAddNodeAbove: false,
		hideAddNodeBelow: false,

		canHideNodes: true,

		canSelectNodes: false,
		canSelectMultipleNodes: false,
		selectedNodeIds: [],
		selectedNodesCount: 0,

		

		workflowData: null,
		
		queuedRuns: [],

		// TODO: not used
		disableGenerate: false,
		hideGenerate: false,
		disableUndo: true,
		hideUndo: true,
		disableRedo: true,
		hideRedo: true,
		iframeWidth: '50%',
		iframeHeight: '50%',
		iframeFlex: 4,

		_hideWorkflowOptions: false,
		hideWorkflowRun: false,
		hideWorkflowQueue: false,
		_presetCreation: false,
		
    },
	formulas: {
		hideWorkflowOptions: {
			get: function(get) {
                return get('_hideWorkflowOptions')|| get('readOnlyWorkflow');
			},
			set: function(value) {
                this.set('_hideWorkflowOptions', value);
            }

		},
		autoGeneratedPresetDescription: function (get) {
			var workflowNodeFields = get('workflowNodeFields');
			var autogeneratePresetDescriptions = get('autogeneratePresetDescriptions');
			workflowNodeFields = workflowNodeFields.sort((a, b) => {
				var comp = a.nodeConf.order - b.nodeConf.order
				if (comp != 0) return comp;
				return a.fieldName.localeCompare(b.fieldName);
			})
			var node = "";
			var nodeId = "-1";
			var description = "";
			
			workflowNodeFields.forEach(function (field) {
				if (field.fieldSelected == false) return;
				if (field.nodeType != node || field.nodeId!=nodeId) {
					node = field.nodeType;
					nodeId = field.nodeId;
					description+= node.toUpperCase()+"\n" ;
				}
				description += field.fieldName + ": " + field.fieldConf.value
				if (field.fieldConf.hasSequence) {
					description +=  " - ";
					if (field.fieldConf.sequencePosition < 0) {
						description += "Cust";
					}
					else {
						description += field.fieldConf.sequencePosition + 1;
					}
					description += "/" + field.fieldConf.sequenceTotalCnt;
					description += " - " + field.fieldConf.sequence;
					
				} else {
					
				}
				description += "\n";
			});
			
			if (autogeneratePresetDescriptions) {
				this.set("presetData.description", description);
			}
			return description;


		},
		autoGeneratedPresetTags: function (get) {
			var workflowNodeFields = get('workflowNodeFields');
			var autogeneratePresetTags = get('autogeneratePresetTags');
			// sort array workflowNodeFields by nodeType
			workflowNodeFields = workflowNodeFields.sort((a, b) => {
				var comp = a.nodeType.localeCompare(b.nodeType)
				if (comp != 0) return comp;
				return a.fieldName.localeCompare(b.fieldName);
			})
			var node = "";
			var tags = [];
			var nodeTags = [];


			workflowNodeFields.forEach(function (field) {
				if(field.fieldSelected == false) return;
				if (field.nodeType != node) {
					nodeTags = nodeTags.filter((v, i, a) => a.indexOf(v) === i);
					tags = tags.concat(nodeTags);
					node = field.nodeType;
					tags.push(node.toUpperCase());
					
					nodeTags = [];
				}
				nodeTags.push(field.fieldName);
			});
			nodeTags = nodeTags.filter((v, i, a) => a.indexOf(v) === i);
			tags = tags.concat(nodeTags);
			var tags = tags.join(",");
			if (autogeneratePresetTags) {
				this.set("presetData.tags", tags);
			}
			return tags;
		},
		presetCreation: {
			get: function (get) {
				return get("_presetCreation");
			},
			set: function (value) {
				this.set("fieldsSelection", value);
				this.set("hideWorkflowOptions", value);
				this.set("hideWorkflowBBar", value);
                this.set("_presetCreation", value);
            }

		},
		
		disableNavigateStep: function (get) {
			return get("sequenceFields").filter(a=>a.hasSequence).length == 0;
		},
		pressedShowEditForm: {
			get: function (get) {
				return !get('hideEditForm')
			},
			set: function (value) {
				this.set('hideEditForm', !value);			
			}
		},
		selectedNodesCountText: {
			get: function (get) {				
				return get('selectedNodesCount') + " selected";
			}
		},
		nodeBodyPadding : {
			get: function (get) {
				var ht = get('hideTitles');
				var fhf = get('forceHideFields');
				//var hm = get('hideModifying');
				if (ht || fhf) {
					return 0;
				}
				return 20;
			}
		},
		
		
    },
	stores: {
		emptyLinkStore: { xclass: 'MrG.store.ConnectorStore' },
		portsStore: { xclass: 'MrG.store.ConnectorStore' },

		
	}
});

{"version":3,"sources":["jaydata.js","node_modules/acorn/dist/acorn.js","node_modules/extend/index.js","node_modules/jaydata-dynamic-metadata/lib/annotations.js","node_modules/jaydata-dynamic-metadata/lib/dts.js","node_modules/jaydata-dynamic-metadata/lib/metadata.js","node_modules/jaydata-dynamic-metadata/lib/metadataHandler.js","node_modules/jaydata-dynamic-metadata/lib/service.js","node_modules/jaydata-error-handler/lib/errorHandler.js","node_modules/jaydata-odatajs/index.js","node_modules/jaydata-odatajs/lib/odata.js","node_modules/jaydata-odatajs/lib/odata/batch.js","node_modules/jaydata-odatajs/lib/odata/handler.js","node_modules/jaydata-odatajs/lib/odata/json.js","node_modules/jaydata-odatajs/lib/odata/metadata.js","node_modules/jaydata-odatajs/lib/odata/net-browser.js","node_modules/jaydata-odatajs/lib/odata/odatautils.js","node_modules/jaydata-odatajs/lib/utils.js","node_modules/jaydata-odatajs/lib/xml.js","node_modules/jaydata-promise-handler/lib/promise.js","node_modules/jaydata-promise-handler/lib/promiseHandlerBase.js","node_modules/odata-v4-metadata/lib/edm.js","node_modules/odata-v4-metadata/lib/metacode.js","node_modules/process/browser.js","node_modules/xmldom/dom-parser.js","node_modules/xmldom/dom.js","node_modules/xmldom/sax.js","package.json","src/JaySvcUtil/index.js","src/TypeSystem/Container.js","src/TypeSystem/Extensions.js","src/TypeSystem/PreHtml5Compatible.js","src/TypeSystem/Trace/Logger.js","src/TypeSystem/Trace/Trace.js","src/TypeSystem/src/TypeSystem/TypeSystem.js","src/TypeSystem/Types/src/TypeSystem/Types/Blob.js","src/TypeSystem/Types/Converter.js","src/TypeSystem/Types/EdmTypes.js","src/TypeSystem/Types/Geography.js","src/TypeSystem/Types/Geometry.js","src/TypeSystem/Types/Geospatial.js","src/TypeSystem/Types/Guid.js","src/TypeSystem/Types/SimpleBase.js","src/TypeSystem/Types/Types.js","src/TypeSystem/index.js","src/TypeSystem/initializeJayData.js","src/TypeSystem/initializeJayDataClient.js","src/Types/Access.js","src/Types/Ajax/AjaxStub.js","src/Types/Ajax/ExtJSAjaxWrapper.js","src/Types/Ajax/WinJSAjaxWrapper.js","src/Types/Ajax/jQueryAjaxWrapper.js","src/Types/Authentication/Anonymous.js","src/Types/Authentication/AuthenticationBase.js","src/Types/Authentication/BasicAuth.js","src/Types/Authentication/FacebookAuth.js","src/Types/Entity.js","src/Types/EntityAttachModes.js","src/Types/EntityContext.js","src/Types/EntitySet.js","src/Types/EntityState.js","src/Types/EntityStateManager.js","src/Types/EntityWrapper.js","src/Types/Enum.js","src/Types/Expressions/ArrayLiteralExpression.js","src/Types/Expressions/CallExpression.js","src/Types/Expressions/CodeParser.js","src/Types/Expressions/ConstantExpression.js","src/Types/Expressions/ContinuationExpressionBuilder.js","src/Types/Expressions/EntityExpressions/AssociationInfoExpression.js","src/Types/Expressions/EntityExpressions/CodeExpression.js","src/Types/Expressions/EntityExpressions/CodeToEntityConverter.js","src/Types/Expressions/EntityExpressions/ComplexTypeExpression.js","src/Types/Expressions/EntityExpressions/EntityContextExpression.js","src/Types/Expressions/EntityExpressions/EntityExpression.js","src/Types/Expressions/EntityExpressions/EntityExpressionVisitor.js","src/Types/Expressions/EntityExpressions/EntityFieldExpression.js","src/Types/Expressions/EntityExpressions/EntityFieldOperationExpression.js","src/Types/Expressions/EntityExpressions/EntitySetExpression.js","src/Types/Expressions/EntityExpressions/ExpressionMonitor.js","src/Types/Expressions/EntityExpressions/FilterExpression.js","src/Types/Expressions/EntityExpressions/FrameOperationExpression.js","src/Types/Expressions/EntityExpressions/IncludeExpression.js","src/Types/Expressions/EntityExpressions/MemberInfoExpression.js","src/Types/Expressions/EntityExpressions/OrderExpression.js","src/Types/Expressions/EntityExpressions/ParametricQueryExpression.js","src/Types/Expressions/EntityExpressions/ProjectionExpression.js","src/Types/Expressions/EntityExpressions/QueryExpressionCreator.js","src/Types/Expressions/EntityExpressions/QueryParameterExpression.js","src/Types/Expressions/EntityExpressions/RepresentationExpression.js","src/Types/Expressions/EntityExpressions/ServiceOperationExpression.js","src/Types/Expressions/ExpressionBuilder.js","src/Types/Expressions/ExpressionNode2.js","src/Types/Expressions/FunctionExpression.js","src/Types/Expressions/ObjectFieldExpression.js","src/Types/Expressions/ObjectLiteralExpression.js","src/Types/Expressions/PagingExpression.js","src/Types/Expressions/ParameterExpression.js","src/Types/Expressions/PropertyExpression.js","src/Types/Expressions/SimpleBinaryExpression.js","src/Types/Expressions/ThisExpression.js","src/Types/Expressions/Visitors/ExecutorVisitor.js","src/Types/Expressions/Visitors/ExpTreeVisitor.js","src/Types/Expressions/Visitors/ExpressionVisitor.js","src/Types/Expressions/Visitors/GlobalContextProcessor.js","src/Types/Expressions/Visitors/LambdaParameterProcessor.js","src/Types/Expressions/Visitors/LocalContextProcessor.js","src/Types/Expressions/Visitors/LogicalSchemaBinderVisitor.js","src/Types/Expressions/Visitors/ParameterProcessor.js","src/Types/Expressions/Visitors/ParameterResolverVisitor.js","src/Types/Expressions/Visitors/SetExecutableVisitor.js","src/Types/Expressions/index.js","src/Types/ItemStore.js","src/Types/ModelBinder.js","src/Types/Notifications/ChangeCollector.js","src/Types/Notifications/ChangeCollectorBase.js","src/Types/Notifications/ChangeDistributor.js","src/Types/Notifications/ChangeDistributorBase.js","src/Types/Query.js","src/Types/QueryBuilder.js","src/Types/QueryProvider.js","src/Types/Queryable.js","src/Types/RelatedEntityProxy.js","src/Types/ServiceOperation.js","src/Types/StorageProviderBase.js","src/Types/src/Types/StorageProviderLoader.js","src/Types/StorageProviders/modelBinderConfigCompiler.js","src/Types/Transaction.js","src/Types/Validation/EntityValidation.js","src/Types/Validation/EntityValidationBase.js","src/Types/index.js","src/index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","_dereq_","module","global","factory","define","amd","acorn","this","isInAstralSet","set","pos","isIdentifierStart","astral","nonASCIIidentifierStart","test","String","fromCharCode","astralIdentifierStartCodes","isIdentifierChar","nonASCIIidentifier","astralIdentifierCodes","binop","name","prec","TokenType","beforeExpr","kw","options","keyword","keywordTypes","isNewLine","isArray","obj","Object","prototype","toString","has","propName","hasOwnProperty","getLineInfo","input","offset","line","cur","lineBreakG","lastIndex","match","exec","index","Position","getOptions","opts","opt","defaultOptions","allowReserved","ecmaVersion","onToken","tokens","token","push","onComment","pushComment","array","block","text","start","end","startLoc","endLoc","comment","type","value","locations","loc","SourceLocation","ranges","range","keywordRegexp","words","RegExp","replace","finishNodeAt","node","tryCreateRegexp","src","flags","throwErrorAt","parser","undefined","SyntaxError","raise","message","codePointToString","parse","Parser","parseExpressionAt","p","nextToken","parseExpression","tokenizer","reservedWords","3","5","6","7","strict","strictBind","ecma5AndLessKeywords","keywords","nonASCIIidentifierStartChars","nonASCIIidentifierChars","label","conf","startsExpr","isLoop","isAssign","prefix","postfix","updateContext","tt","num","regexp","string","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","arrow","template","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","source","nonASCIIwhitespace","skipWhiteSpace","col","column","sourceFile","sourceType","onInsertedSemicolon","onTrailingComma","allowReturnOutsideFunction","allowImportExportEverywhere","allowHashBang","program","directSourceFile","preserveParens","plugins","startPos","reserved","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","loadPlugins","lineStart","Math","max","lastIndexOf","curLine","slice","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","potentialArrowAt","inFunction","inGenerator","labels","skipLineComment","isKeyword","word","isReservedWord","extend","pluginConfigs","this$1","plugin","startNode","parseTopLevel","pp","isUseStrict","stmt","expression","raw","eat","next","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","expect","DestructuringErrors","shorthandAssign","trailingComma","checkPatternErrors","refDestructuringErrors","andThrow","trailing","checkExpressionErrors","pp$1","first","body","parseStatement","setStrict","finishNode","loopLabel","kind","switchLabel","isLet","skip","nextCh","charCodeAt","ident","declaration","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseImport","parseExport","maybeName","expr","parseLabeledStatement","parseExpressionStatement","isBreak","parseIdent","lab","pop","parseParenExpression","parseFor","init$1","parseVar","declarations","init","parseForIn","toAssignable","checkLVal","parseFunction","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","raiseRecoverable","empty","handler","clause","param","parseBindingAtom","finalizer","object","i$1","statementStart","allowStrict","oldStrict","update","left","right","isFor","decl","parseVarId","parseMaybeAssign","id","isStatement","allowExpressionBody","initFunction","generator","oldInGen","parseFunctionParams","parseFunctionBody","params","parseBindingList","parseClassId","parseClassSuper","classBody","hadConstructor","method","isGenerator","isMaybeStatic","parsePropertyName","isGetSet","computed","key","parseClassMethod","paramCount","parseMethod","superClass","parseExprSubscripts","parseExprAtom","parens","needsSemi","shouldParseExportStatement","specifiers","parseExportSpecifiers","local","nodes","exported","parseImportSpecifiers","node$1","node$2","imported","pp$2","isBinding","properties","prop","toAssignableList","elements","operator","exprList","last","arg","elt","parseSpread","parseRest","allowNonIdent","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","startNodeAt","checkClashes","pp$3","checkPropClash","propHash","shorthand","proto","other","get","noIn","expressions","afterLeftParse","parseYield","ownDestructuringErrors","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","skipArrowSubscripts","parseSubscripts","base","noCalls","property","callee","arguments","parseExprList","node$3","tag","quasi","parseTemplate","canBeArrow","parseArrowExpression","parseLiteral","regex","pattern","parseParenAndDistinguishExpression","parseNew","val","spreadStart","innerParenStart","innerStartPos","innerStartLoc","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","par","item","empty$1","meta","parseTemplateElement","cooked","tail","curElt","quasis","isPattern","parsePropertyValue","isArrowFunction","isExpression","oldInFunc","oldLabels","useStrict","checkParams","nameHash","liberal","indexOf","delegate","pp$4","err","raisedAt","Node","pp$5","TokContext","isExpr","preserveSpace","override","types","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","readTmplToken","f_expr","pp$6","braceIsBlock","prevType","parent","curContext","out","statementParens","Token","pp$7","isRhino","Packages","getToken","Symbol","iterator","self","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","ch","loop","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readRadixNumber","readString","str","regexpUnicodeSupport","escaped","inClass","charAt","content","mods","readWord1","tmp","tmpFlags","validFlags","_match","Number","readInt","radix","len","total","Infinity","startsWithDot","isFloat","octal","parseFloat","parseInt","readCodePoint","codePos","readHexChar","quote","chunkStart","readEscapedChar","inTemplate","octalStr","substr","escStart","esc","version","tokTypes","tokContexts","defineProperty","2","hasOwn","toStr","arr","Array","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","constructor","copy","copyIsArray","clone","target","deep","Annotations","includes","annotations","processedAnnotations","Org.OData.Core.V1.Computed","annotationInfo","typeDef","definition","propDef","annotation","bool","required","Org.OData.Core.V1.OptimisticConcurrency","propertyPaths","forEach","concurrencyMode","addInclude","include","processEntityPropertyAnnotations","typeName","isStatic","annot","processEntityAnnotations","processEntitySetAnnotations","path","processSchemaAnnotations","qualifier","targetParts","fullTypeName","preProcessAnnotation","metadataKey","resolveAnnotationTypeAlias","term","addAnnotation","fullName","valueResolverFuncName","annotationType","Reflect","defineMetadata","annotationsText","JSON","stringify","valueUnknown","valueBinary","binary","valueBool","valueDate","date","valueDateTimeOffset","dateTimeOffset","valueDecimal","decimal","valueDuration","duration","valueEnumMember","enumMember","valueFloat","valueGuid","guid","valueInt","valueString","valueTimeOfDay","timeOfDay","valuePropertyPath","valueNavigationPropertyPath","navigationPropertyPaths","valueAnnotationPath","annotationPaths","valueNull","4","JayData","annotations_1","dts_1","containsField","field","cb","parsebool","b","d","_collectionRegex","Metadata","$data","metadata","container","Container","baseType","entitySetType","contextType","collectionBaseType","annotationHandler","_getMaxValue","maxValue","MAX_VALUE","createTypeDefinition","propertySchema","v","elementType","createReturnTypeDefinition","returnType","createProperty","entityFullName","entitySchema","nullable","maxLength","keys","propertyRefs","some","pr","createNavigationProperty","inverseProperty","createEntityDefinition","props","map","bind","navigationProps","navigationProperties","concat","result","reduce","c","createEntityType","namespace","staticDefinition","openType","createEnumOption","enumFullName","isNaN","createEnumDefinition","enumSchema","members","createEnumType","underlyingType","createEntitySetProperty","entitySetSchema","contextSchema","entityType","indexBy","fieldName","pick","createContextDefinition","entitySets","es","apply","createContextType","contextImportMethods","actionImports","functionImports","createMethodParameter","parameter","paramDef","applyBoundMethod","actionInfo","ns","typeDefinitions","parameters","isBound","bindingParameter_1","shift","filteredContextDefinitions","filter","ctx","setName","actions","filteredTypeDefinitions","methodFullName_1","methodImportInfo","action","processMetadata","createdTypes","serviceMethods","references","ref","dtsModules","dts","dataServices","schemas","schema","enumTypes","ct","complexTypes","entityTypes","et","m","defs","functions","entityContainer","contexts","contextFullName","orderTypeDefinitions","dtsm","dtsPart","srcPart","dp","_createPropertyDefString","join","ctr","_typeToTS","splice","debug","console","log","generateTypes","resolveType","url","withCredentials","maxDataServiceVersion","autoCreateContext","contextName","mod","contextTypes","ordered","dependants","dependantCount","dependantItems","./annotations","./dts","odata_v4_metadata_1","metadata_1","_odatajs","odatajs","MetadataHandler","prepareRequest","oData","error","edmMetadata","Edm","Edmx","metadataParser","isAssignableTo","EntityContext","_createFactoryFunc","load","Promise","resolve","reject","serviceUrl","metadataUrl","serivceUri","requestData","requestUri","headers","data","metadataHandler","_appendBasicAuth","user","password","request","ctxType","config","cfg","oDataServiceHost","Authorization","__encodeBase64","chr1","chr2","chr3","enc1","enc2","enc3","enc4","b64array","base64","./metadata","jaydata-odatajs","odata-v4-metadata","metadataHandler_1","jaydata_error_handler_1","jaydata_promise_handler_1","metadataHandler_2","ServiceParams","DynamicMetadata","service","serviceUri","callback","getParam","pHandler","PromiseHandler","_callback","createCallback","then","storeAlias","serviceName","addStore","isDefault","success","getPromise","initService","onReady","Exception","use","dynamicMetadata","paramValue","./metadataHandler","jaydata-error-handler","jaydata-promise-handler","8","__extends","__","create","captureStackTrace","_getStackTrace","Guard","requireValue","requireType","typeOrTypes","exception","intellisense","isNullOrUndefined","9","major","minor","build","utils","xml","inBrowser","window","./lib/odata.js","./lib/utils.js","./lib/xml.js","10","dispatchHandler","handlerMethod","requestOrResponse","handlers","odataUtils","odataHandler","odataMetadata","webNet","odataNet","net","odataJson","json","batch","assigned","throwErrorCallback","defined","MAX_DATA_SERVICE_VERSION","invokeRequest","jsonHandler","textHandler","defaultSuccess","alert","defaultError","defaultHandler","read","response","write","accept","defaultMetadata","urlOrRequest","httpClient","defaultHttpClient","recognizeDates","callbackParameterName","formatQueryString","enableJsonpCallback","bIsSuccessHandlerError","parseMetadata","csdlMetadataDocument","batchHandler","partHandler","./odata/batch.js","./odata/handler.js","./odata/json.js","./odata/metadata.js","./odata/net-browser.js","./odata/odatautils.js","./utils.js","11","hex16","floor","random","createBoundary","currentBoundary","boundaries","batchParser","boundary","contentType","__batchResponses","readBatch","handlerContext","batchSerializer","cType","batchMediaType","mediaType","writeBatch","delimiter","readTo","readLine","responses","partEnd","position","changeResponses","partHeaders","readHeaders","partContentType","readResponse","__changeResponses","statusCode","parts","responseHeaderRegex","normalizeHeaders","statusText","responseStatusRegex","substring","isBatch","batchBoundary","batchParts","__batchRequests","writeBatchPartDelimiter","writeBatchPart","contentTypeProperties","part","nested","changeSet","__changeRequests","changeSetBoundary","partContext","writeRequest","trimString","./../utils.js","./handler.js","./odatautils.js","12","contentTypeParts","contentTypeParams","contentTypeToString","createReadWriteContext","dataServiceVersion","rwContext","fixRequestHeader","fixDataServiceVersionHeader","dsv","maxVersion","getRequestOrResponseHeader","getContentType","getDataServiceVersion","matches","versionRE","handlerAccepts","handlerRead","parseCallback","readContext","handlerWrite","serializeCallback","writeContext","textParse","textSerialize","oDataUtils","13","jsonParser","metadataContentType","model","payloadFormat","getFormatKind","addMinimalMetadataToJsonPayload","addFullMetadataToJsonPayload","jsonSerializer","jsonContentType","newdata","formatJsonRequestPayload","jsonReplacer","isPrimitive","newArrayData","isJsonSerializableProperty","attribute","jsonSerializableMetadata","jsonMakePayloadInfo","isObject","isGeographyEdmType","isGeometryEdmType","convertDatesNoEdm","typeFromObject","addType","checkProperties","objectInfoType","baseURI","curType","propertyValue","lookupProperty","lookupEntityType","isCollectionType","addTypeColNoEdm","addTypeNoEdm","addMetadataToJsonMinimalPayloadComplex","convertDates","contextUrlAnnotation","payloadInfo","createPayloadInfo","detectedPayloadKind","PAYLOADTYPE_VALUE","addMetadataToJsonMinimalPayloadEntity","PAYLOADTYPE_FEED","addMetadataToJsonMinimalPayloadFeed","PAYLOADTYPE_ENTRY","PAYLOADTYPE_COLLECTION","addMetadataToJsonMinimalPayloadCollection","PAYLOADTYPE_PROPERTY","PAYLOADTYPE_SVCDOC","PAYLOADTYPE_LINKS","feedInfo","entry","entries","items","entryInfo","contentTypeOdata","objectInfo","keyType","lastIdSegment","jsonGetEntryKey","propertyType","lookupComplexType","collectionInfo","propertyName","parseDate","parseDateTimeOffset","parseDuration","parseTime","formatLiteral","formatRawLiteral","encodeURIComponent","convertByteArrayToHexString","minutesToOffset","minutes","sign","hours","formatNumberWidth","parseJsonDateString","jsonDateRE","Date","parseInt10","mins","current","getUTCMinutes","setUTCMinutes","__edmType","__offset","valueOf","parseContextUriFragment","fragments","ret","isNullProperty","PAYLOADTYPE_ENTITY_REF_LINKS","PAYLOADTYPE_ENTITY_REF_LINK","fragmentParts","fragment","rCount","inPharenthesis","startsWith","projection","jsonIsPrimitiveType","lookupDefaultEntityContainer","entitySet","lookupEntitySet","singleton","lookupSingleton","endsWith","tmp12","deltaKind","DELTATYPE_FEED","DELTATYPE_DELETED_ENTRY","DELTATYPE_LINK","DELTATYPE_DELETED_LINK","metadataUri","fragmentStart","entityModel","entityInstanceKey","entityKeys","propertyRef","isPrimitiveEdmType","oDataHandler","odataNs","odataAnnotationPrefix","formatDuration","formatDateTimeOffset","getCanonicalTimezone","isComplex","jsonMediaType","_","14","schemaElement","attributes","scriptCase","firstTwo","toUpperCase","toLowerCase","getChildSchema","parentSchema","candidateName","elementName","multipleElements","isEdmNamespace","nsURI","edmNs1","parseConceptualModelElement","element","localName","xmlLocalName","xmlNamespaceURI","elementSchema","xmlAttributes","xmlnsNS","schemaName","odataMetaXmlNs","contains","xmlChildElements","child","childSchema","xmlInnerText","doc","xmlParse","root","xmlFirstChildElement","oDSxml","normalizeURI","xmlNS","ado","http","adoDs","edmxNs","xmlMediaType","Action","ActionImport","Annotation","AnnotationPath","Apply","And","Or","Not","Eq","Ne","Gt","Ge","Lt","Le","Binary","Bool","Cast","Collection","ComplexType","DateTimeOffset","Decimal","Duration","EntityContainer","EntitySet","EntityType","EnumMember","EnumType","Float","Function","FunctionImport","Guid","If","Int","IsOf","Key","LabeledElement","LabeledElementReference","Member","NavigationProperty","NavigationPropertyBinding","NavigationPropertyPath","Null","OnDelete","Path","Parameter","Property","PropertyPath","PropertyRef","PropertyValue","Record","ReferentialConstraint","ReturnType","Schema","Singleton","Term","TimeOfDay","TypeDefinition","UrlRef","DataServices","Reference","Include","IncludeAnnotations","./../xml.js","15","canUseJSONP","createIFrame","iframe","document","createElement","style","display","attributeEncodedUrl","html","getElementsByTagName","appendChild","writeHtmlToIFrame","createXmlHttpRequest","XMLHttpRequest","ActiveXObject","isAbsoluteUrl","isLocalUrl","location","locationDomain","protocol","host","removeCallback","tick","ticks","removeIFrame","parentNode","removeChild","readResponseHeaders","xhr","responseHeaders","getAllResponseHeaders","header","frameDocument","contentWindow","contentDocument","open","delay","that","abort","handleTimeout","onreadystatechange","readyState","status","responseText","setRequestHeader","timeoutMS","timeout","ontimeout","send","timeoutId","tickText","succeeded","clearTimeout","Content-Type","OData-Version","setTimeout","queryStringParams","qIndex","16","forEachSchema","formatMilliseconds","ms","formatDateTimeOffsetJSON","getTime","hasOffset","isDateTimeOffset","timezone","parseTimezone","getUTCHours","h","setUTCHours","year","getUTCFullYear","month","getUTCMonth","getUTCMilliseconds","__ns","getUTCDate","getUTCSeconds","days","seconds","width","append","getCollectionType","isCollection","colData","results","collectionTypeRE","isDate","isDeferred","__metadata","deferred","__deferred","uri","isEntry","isFeed","feedData","geographyEdmTypes","geographyTypes","geometryEdmTypes","geometryTypes","isNamedStream","mediaResource","__mediaresource","media_src","primitiveEdmTypes","navigationPropertyKind","propertyModel","relationship","find","lookupInMetadata","lookupInSchema","singletons","lookupEntityContainer","lookupFunctionImport","functionImport","lookupNavigationPropertyType","navigationProperty","rel","association","nameOnly","removeNamespace","associations","role","toRole","lookupNavigationPropertyEntitySet","sourceEntitySetName","associationSet","containers","associationSets","j","getEntitySetInfo","entitySetName","info","containerName","leftParts","rightParts","leftVersion","rightVersion","lowerName","normalName","normalHeaders","parseBool","parseDateTimeMaybeOffset","withOffset","nullOnError","parseDateTimeRE","direction","setUTCFullYear","parseTimeOfDay","parseTimeOfDayRE","parseTimeRE","years","months","offsetHours","offsetMinutes","Accept","async","traverseInternal","owner","traverse","dataItemTypeName","valueTypeName","EDM","EDM_BOOLEAN","EDM_BYTE","EDM_SBYTE","EDM_INT16","EDM_INT32","EDM_INT64","EDM_SINGLE","EDM_DOUBLE","EDM_DECIMAL","EDM_STRING","EDM_BINARY","EDM_DATE","EDM_DATETIMEOFFSET","EDM_DURATION","EDM_GUID","EDM_TIMEOFDAY","GEOGRAPHY","EDM_GEOGRAPHY","EDM_GEOGRAPHY_POINT","EDM_GEOGRAPHY_LINESTRING","EDM_GEOGRAPHY_POLYGON","EDM_GEOGRAPHY_COLLECTION","EDM_GEOGRAPHY_MULTIPOLYGON","EDM_GEOGRAPHY_MULTILINESTRING","EDM_GEOGRAPHY_MULTIPOINT","GEOGRAPHY_POINT","GEOGRAPHY_LINESTRING","GEOGRAPHY_POLYGON","GEOGRAPHY_COLLECTION","GEOGRAPHY_MULTIPOLYGON","GEOGRAPHY_MULTILINESTRING","GEOGRAPHY_MULTIPOINT","GEOMETRY","EDM_GEOMETRY","EDM_GEOMETRY_POINT","EDM_GEOMETRY_LINESTRING","EDM_GEOMETRY_POLYGON","EDM_GEOMETRY_COLLECTION","EDM_GEOMETRY_MULTIPOLYGON","EDM_GEOMETRY_MULTILINESTRING","EDM_GEOMETRY_MULTIPOINT","GEOMETRY_POINT","GEOMETRY_LINESTRING","GEOMETRY_POLYGON","GEOMETRY_COLLECTION","GEOMETRY_MULTIPOLYGON","GEOMETRY_MULTILINESTRING","GEOMETRY_MULTIPOINT","GEOJSON_POINT","GEOJSON_LINESTRING","GEOJSON_POLYGON","GEOJSON_MULTIPOINT","GEOJSON_MULTILINESTRING","GEOJSON_MULTIPOLYGON","GEOJSON_GEOMETRYCOLLECTION","content-type","content-encoding","content-length","odata-version","accept-charset","if-match","if-none-match","odata-isolation","odata-maxversion","prefer","content-id","content-transfer-encoding","etag","odata-entityid","preference-applied","retry-after","17","args","djsassert","condition","values","renameProperty","oldName","newName","trim","undefinedDefault","defaultValue","getURIInfo","isAbsolute","uriRegEx","uriPartNames","scheme","getURIFromInfo","uriInfo","authority","query","normalizeURICase","uriAuthorityRegEx","pctEncodingRegEx","baseInfo","normInfo","mergeUriPathWithBase","removeDotsFromPath","uriPath","basePath","segment","atob","decodeBase64","binaryStr","hexValue","hexValues","binaryString","base65IndexValue","getBase64IndexValue","binaryValue","addBase64Padding","byteArray","numberOfBytes","intValue","character","asciiCode","asciiOfA","differenceBetweenZanda","getJsonValueArraryLength","sliceJsonValueArray","concatJsonValueArray","concatData","search","format","defaultFormatKind","formatKind","normalizedFormat","activeXObject","progId","18","hasLeadingOrTrailingWhitespace","re","isWhitespace","ws","isWhitespacePreserveContext","domElement","nodeType","xmlAttributeValue","isXmlNSDeclaration","domAttribute","nodeName","safeSetProperty","setProperty","msXmlDom3","msxml3","msXmlDom","msxml","msXmlParse","dom","loadXML","parseError","errorCode","xmlThrowParserError","reason","srcText","exceptionOrReason","errorXmlText","domParser","DOMParser","parseFromString","documentElement","namespaceURI","mozillaParserErroNS","srcTextElement","xmlNodeValue","xhtmlNS","xmlFirstDescendantElement","siblings","cursor","firstChild","nextSibling","xmlQualifiedName","xmlAppendText","domNode","textNode","attr","xmlAttributeNode","xmlNewAttribute","ownerDocument","xmlAppendChild","onAttributeCallback","getNamedItemNS","getQualifiedItem","xmlBaseURI","onElementCallback","xmlTraverse","xmlFindElementByPath","xmlFindNodeByPath","lastSegmentStart","nodePath","parentPath","xmlFirstElementMaybeRecursive","getElementsByTagNameNS","recursive","firstElement","isExpectedNamespace","isExpectedNodeName","xmlElement","whitespacePreserveContext","whitespaceAlreadyRemoved","preserveWhiteSpace","shouldInclude","baseName","nodeValue","onChildCallback","subtrees","proceed","xmlSiblingElement","sibling","xmlDom","implementation","createDocument","xmlAppendChildren","children","xmlNewText","setAttributeNodeNS","setAttributeNode","qualifiedName","createAttributeNS","createNode","xmlNewElement","createElementNS","nampespaceURI","xmlNewNSDeclaration","xmlNewFragment","tempDom","tempRoot","importNode","createDocumentFragment","importedChild","createTextNode","xmlNewNodeByPath","xmlFindNode","xmlNewNode","xmlNode","childNode","xmlSerialize","xmlSerializer","XMLSerializer","serializer","serializeToString","xmlSerializeDescendants","childNodes","fragmentRoot","w3org","xmldom","19","promiseHandlerBase_1","promise","settings","PromiseHandlerBase","createCallbackSettings","CallbackSettings","notify","compatibilityMode","onReject","onResolveOrReject","PromiseNotImplemented","./promiseHandlerBase","20","always","fail","isRejected","isResolved","pipe","progress","state","defaultSuccessCallback","defaultNotifyCallback","defaultErrorCallback","defaultSettings","wrapCode","fn","21","__decorate","decorators","desc","getOwnPropertyDescriptor","decorate","k","metacode","PrimitiveType","className","Boolean","Byte","Double","Int16","Int32","Int64","SByte","Single","Stream","Geography","GeographyPoint","GeographyLineString","GeographyPolygon","GeographyMultiPoint","GeographyMultiLineString","GeographyMultiPolygon","GeographyCollection","Geometry","GeometryPoint","GeometryLineString","GeometryPolygon","GeometryMultiPoint","GeometryMultiLineString","GeometryMultiPolygon","GeometryCollection","MemberAttribute","parseAs","AttributeFunctionChain","mapArray","sourceField","primitiveAnnotationValue","x","annotationTypeSelector","AnnotationTypes","EdmItemBase","loadFrom","getPrototypeOf","getMembers","membername","getAttributeValue","invoke","Invokable","rt","ReferenceInclude","edm","BinaryAnnotation","BoolAnnotation","DateAnnotation","DateTimeOffsetAnnotation","DecimalAnnotation","DurationAnnotation","EnumMemberAnnotation","FloatAnnotation","GuidAnnotation","IntAnnotation","StringAnnotation","TimeOfDayAnnotation","PropertyPathAnnotation","NavigationPropertyPathAnnotation","AnnotationPathAnnotation","NullAnnotation","float","int","propertyPath","navigationPropertyPath","annotationPath","null","./metacode","22","isUndefined","definitionPropName","attributeName","registerMember","def","md","getDecoratorValue","presentedValue","descriptor","decoratorValue","enumerable","configurable","memberName","steps","_i","instance","ParseAttribute","defaultValueAttribute","parseAttribute","decorator","typeArgument","23","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","run","Item","fun","noop","process","nextTick","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","24","locator","buildErrorHandler","errorImpl","domBuilder","isCallback","msg","errorHandler","_locator","DOMHandler","cdata","lineNumber","columnNumber","systemId","_toString","chars","java","lang","appendElement","hander","currentElement","mimeType","sax","XMLReader","defaultNSMap","xmlns","entityMap","lt","gt","amp","quot","apos","setDocumentLocator","nbsp","startDocument","DOMImplementation","documentURI","startElement","qName","attrs","el","getURI","getValue","getQName","getOffset","endElement","tagName","startPrefixMapping","endPrefixMapping","processingInstruction","ins","createProcessingInstruction","ignorableWhitespace","characters","charNode","createCDATASection","skippedEntity","endDocument","normalize","comm","createComment","startCDATA","endCDATA","startDTD","publicId","impl","createDocumentType","dt","warning","warn","fatalError","./dom","./sax","25","dest","Class","Super","pt","ppt","__proto__","DOMException","ExceptionMessage","NodeList","LiveNodeList","refresh","_node","_refresh","_updateLiveList","list","inc","_inc","ls","__set__","NamedNodeMap","_findNodeIndex","_addNamedNode","newAttr","oldAttr","ownerElement","_onRemoveAttribute","_onAddAttribute","_removeNamedNode","NOT_FOUND_ERR","features","_features","feature","_xmlEncoder","_visitNode","Document","_nsMap","remove","_onUpdateChild","newChild","cs","_removeChild","previous","previousSibling","lastChild","_insertBefore","nextChild","cp","DOCUMENT_FRAGMENT_NODE","newFirst","newLast","pre","_appendSingleChild","Element","Attr","CharacterData","Text","Comment","CDATASection","DocumentType","Notation","Entity","EntityReference","DocumentFragment","ProcessingInstruction","buf","attributeSorter","isHTML","ELEMENT_NODE","htmlns","sort","DOCUMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_TYPE_NODE","pubid","sysid","sub","internalSubset","PROCESSING_INSTRUCTION_NODE","ENTITY_REFERENCE_NODE","node2","cloneNode","attrs2","_ownerElement","getTextContent","NodeType","ENTITY_NODE","NOTATION_NODE","ExceptionCode","INDEX_SIZE_ERR","DOMSTRING_SIZE_ERR","HIERARCHY_REQUEST_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR","NO_DATA_ALLOWED_ERR","NO_MODIFICATION_ALLOWED_ERR","INUSE_ATTRIBUTE_ERR","NOT_SUPPORTED_ERR","INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR","getNamedItem","setNamedItem","setNamedItemNS","removeNamedItem","removeNamedItemNS","hasFeature","doctype","insertBefore","refChild","replaceChild","oldChild","hasChildNodes","appendData","isSupported","hasAttributes","lookupPrefix","lookupNamespaceURI","isDefaultNamespace","importedNode","getElementById","rtv","getAttribute","createAttribute","specified","createEntityReference","pl","hasAttribute","getAttributeNode","setAttribute","removeAttribute","removeAttributeNode","removeAttributeNS","old","getAttributeNodeNS","hasAttributeNS","getAttributeNS","setAttributeNS","substringData","count","insertData","replaceData","deleteData","splitText","newText","newNode","$$length","26","defaultNSMapCopy","fixedFromCharCode","surrogate1","surrogate2","entityReplacer","appendText","xt","lineEnd","linePattern","parseStack","currentNSMap","closeMap","tagStart","localNSMap","parseInstruction","parseDCC","ElementAttributes","parseElementStartPart","copyLocator","closed","fixSelfClosed","parseHtmlSpecialContent","attrName","S_TAG","S_ATTR","S_EQ","S_ATTR_S","add","S_E","S_V","setTagName","S_S","S_C","nsp","nsPrefix","_copy","elStartEnd","elEndStart","matchs","lastMatch","endDTD","_set_proto_","thiz","reg","nameStartChar","nameChar","tagNamePattern","getLocalName","27","description","homepage","author","dependencies","btoa","jaydata-dynamic-metadata","contributors","repository","engines","license","devDependencies","babel","babel-eslint","babel-plugin-add-module-exports","babel-preset-es2015","babel-register","babelify","browserify","browserify-derequire","browserify-shim","chai","del","google-closure-compiler","gulp","gulp-babel","gulp-browserify","gulp-change","gulp-closure-compiler","gulp-concat","gulp-derequire","gulp-eslint","gulp-footer","gulp-header","gulp-nightwatch","gulp-nuget-pack","gulp-rename","gulp-replace","gulp-sourcemaps","gulp-uglify","gulp-vinyl-zip","gulp-webserver","istanbul","jaguarjs-jsdoc","jsdoc","minimist","nightwatch","npm","selenium-standalone","vinyl-buffer","vinyl-source-stream","yargs","jquery","angular","Handlebars","kendo","ko","q","Ext","scripts","stest","28","_interopRequireDefault","__esModule","default","_index","_index2","_jaydataDynamicMetadata","../TypeSystem/index.js","29","ContainerCtor","parentContainer","addPendingResolution","onResolved","pendingResolutions","addChildContainer","classNames","consolidatedClassNames","classTypes","mappedTo","IoC","inst","createInstance","mapType","aliasTypeOrName","realTypeOrName","_jaydataErrorHandler","aliasT","getType","realT","aliasPos","realPos","isPrimitiveType","_initializeJayData2","Integer","Time","Day","SimpleBase","Geospatial","GeographyBase","GeometryBase","resolveName","tPos","typeOrName","posT","doNotThrow","tp","getName","getTypes","getTypeName","toHexString","isTypeRegistered","unregisterType","getDefault","getIndex","resolveByIndex","registerType","nameOrNamesArray","factoryFunc","namesArray","shortName","creatorFnc","annotate","typePos","pending","_converters","from","to","converters","convertTo","tType","eType","sourceTypeName","targetType","targetTypeName","registerConverter","sourceOrToConverters","toConverterOrFromConverters","fromConverter","targetName","sourceName","typeSystem","createOrGetNamespace","__namespace","ContainerInstance","_initializeJayData","./Extensions.js","./initializeJayData.js","30","StringFunctions","31","getOwnPropertyNames","names","F","hasDontEnumBug","propertyIsEnumerable","dontEnums","dontEnumsLength","TypeError","defineProperties","defines","thisArg","trimLeft","trimRight","oThis","aArgs","fToBind","fNOP","fBound","Uint8Array","_Uint8Array","_x","buffer","byteLength","byteOffset","getter","setter","makeAccessor","RangeError","32","_TypeSystem","_TypeSystem2","TraceBase","unshift","getDateFormat","getHours","getMinutes","getSeconds","getMilliseconds","../TypeSystem.js","33","Trace","34","MemberDefinition","$C","_Extensions","_Container","_modelHolder","setModelContainer","modelHolder","getModelContainer","defaults","openTypeDefaultPropertyName","openTypeDefaultType","openTypeDefaultValue","__global","setGlobal","memberDefinitionData","definedClass","MemberTypes","writable","asFunction","dataType","originalType","originalElementType","MemberDefinitionCollection","ClassEngineBase","createPropertyDescriptor","classFunction","pd","storeProperty","retrieveProperty","createStorePropertyDescriptor","createGetMethod","tran","getProperty","createSetMethod","_value","translateDefinition","memDef","addChildThunk","referencedType","childResolverThunks","resolveForwardDeclarations","memberDefinition","holder","resolverThunks","thunk","toJSON","memberDefinitionPrefix","clearCache","arrayCache","pubMapPropsCache","keyPropsCache","propByTypeCache","pubMapMethodsCache","pubMapPropNamesCache","asArray","getPublicMappedProperties","notMapped","getPublicMappedPropertyNames","getKeyProperties","getPublicMappedMethods","getPropertyByType","getMember","setMember","__enum","navProperty","complexProperty","baseClass","instanceDefinition","classDefinition","defineEx","baseClasses","Base","classNameParts","shortClassName","models","classFunctionBuilder","buildType","_classNameParts","_root","innerNS","baseCount","baseTypes","inheritedTypeProcessor","bodyBuilder","bases","mixin","propagation","propagateTo","memberDefinitions","$constructor","inheritsFrom","inheritedTo","staticDefs","staticDefinitions","buildMember","openTypeDefinition","buildStaticMembers","classConstructor","openTypePropertyName","definedOpenTypeMember","getMemberDefinition","memberType","buildInstanceMembers","mixins","buildInstanceMixins","__class","addMethod","addProperty","propertyDescriptor","origGet","origSet","addField","buildMethod","classMember","buildProperty","__setPropertyfunctions","withoutGetSetMethod","pdGetMethod","pdSetMethod","memberCollectionName","memberListDefinition","copyMembers","il","logMessage","mixinList","propagations","buildInstancePropagation","buildInstanceMixin","typeObj","memberDefs","itemName","ContainerClass","createContainer","backingFieldName","getterOrType","setterOrGetter","_type","_getter","_setter","storeOnObject","addMember","isClassMember","describeField","from$data.Object","hasMetadata","getAllMetadata","getMetadataKeys","getMetadata","setMetadata","ConstructorParameter","paramIndex","createCallbackSetting","callBack","defaultSetting","setting","createCtorParams","indexes","thisObj","paramArray","writePropertyValues","writeProperties","prototypeProperty","writeProperty","member","debugWith","cArgs","fdebug","./Container.js","./PreHtml5Compatible.js","_process","35","_btoa","_btoa2","bufferOrArray","eval","Blob","createFromHexString","toBase64","toArray","toDataURL","$data.String","blob","$data.Array","$data.Number","packIEEE754","reverse","$data.Boolean","req","URL","createObjectURL","ArrayBuffer","36","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_VALUE","$data.Date","time","metrics","parseFromDate","getFullYear","getMonth","getDate","day","ebits","fbits","ln","bits","bytes","bias","pow","abs","min","LN2","round","unpackIEEE754","NaN","IEEE754","toISOString","$data.ObjectID","$data.Function","proxyConverter","defaultConverter","37","Edm_Boolean","Edm_Binary","Edm_DateTime","Edm_DateTimeOffset","Edm_Time","Edm_TimeOfDay","Edm_Date","Edm_Duration","Edm_Decimal","Edm_Float","Edm_Single","Edm_Double","Edm_Guid","Edm_Int16","Edm_Int32","Edm_Int64","Edm_Byte","Edm_SByte","Edm_String","Edm_GeographyPoint","Edm_GeographyLineString","Edm_GeographyPolygon","Edm_GeographyMultiPoint","Edm_GeographyMultiLineString","Edm_GeographyMultiPolygon","Edm_GeographyCollection","Edm_GeometryPoint","Edm_GeometryLineString","Edm_GeometryPolygon","Edm_GeometryMultiPoint","Edm_GeometryMultiLineString","Edm_GeometryMultiPolygon","Edm_GeometryCollection","oDataEdmMapping","$data.Byte","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.DateTimeOffset","$data.Time","$data.Day","$data.Duration","$data.Blob","$data.Integer","$data.Int32","$data.GeographyPoint","$data.GeographyLineString","$data.GeographyPolygon","$data.GeographyMultiPoint","$data.GeographyMultiLineString","$data.GeographyMultiPolygon","$data.GeographyCollection","$data.GeometryPoint","$data.GeometryLineString","$data.GeometryPolygon","$data.GeometryMultiPoint","$data.GeometryMultiLineString","$data.GeometryMultiPolygon","$data.GeometryCollection","$data.Guid","38","crs","defaultCrs","validateGeoJSON","disableSRID","strData","lparenIdx","registered","stringifyToUrl","geoData","validMembers","_ret","getSRID","g","buildArray","coordinates","geoType","isValid","lon","lat","longitude","latitude","lng","point","tl","tr","bl","br","topLeft","bottomRight","topRight","bottomLeft","polygon","rings","polyPoints","pairs","polygons","geometries","geometry","39","y","40","41","parseGuid","NewGuid","createGuid","CHARS","guidString","uuid","42","43","ObjectID","mongoDBDriver","44","_Types","_Trace","_Logger","_SimpleBase","_Geospatial","_Geography","_Geometry","_Guid","_Blob","_EdmTypes","_Converter","_jaydataPromiseHandler","./Trace/Logger.js","./Trace/Trace.js","./TypeSystem.js","./Types/Blob.js","./Types/Converter.js","./Types/EdmTypes.js","./Types/Geography.js","./Types/Geometry.js","./Types/Geospatial.js","./Types/Guid.js","./Types/SimpleBase.js","./Types/Types.js","45","_interopRequireWildcard","newObj","_initializeJayDataClient","_initializeJayDataClient2","_acorn","_package","pkg","timeEnd","versionNumber","Acorn","../../package.json","./initializeJayDataClient.js","46","_data_handler","47","isAuthorized","access","sets","clbWrapper","pHandlerResult","getAccessBitmaskFromPermission","Access","None","Create","Read","Update","Delete","DeleteBatch","Execute","48","ajax","clb","../../TypeSystem/index.js","49","Ajax","50","WinJS","dataTypes","convert","dataTypeContext","successClb","errorClb","progressClb","51","jQuery","52","Authentication","AuthenticationBase","configuration","Authenticated","Login","callbacks","Logout","CreateRequest","53","54","Username","Password","origBeforeSend","beforeSend","55","Url_code","type_code","scope","Url_token","type_token","access_token","app_id","provider","stateCallbacks","_processRequestToken","andChar","verification_data","56","Event","EventSubscriber","sender","detachHandler","subscriberList","attach","detach","fire","eventData","snder","snd","subscriber","ex","fireCancelAble","EventData","eventName","PropertyChangeEventData","oldValue","newValue","PropertyValidationEventData","errors","cancel","initData","newInstanceOptions","thisType","__copyPropertiesToInstance","setDefaultValues","typeMemDefs","memDefNames","memberDef","ConcurrencyMode","Fixed","converter","entityBuilder","changedProperties","entityState","Id","Name","equals","entity","entityPk","propertyChanging","monitorChanges","_propertyChanging","propertyChanged","_propertyChanged","propertyValidationError","_propertyValidationError","origValue","Validation","ValidateEntityField","errorEventData","isValidated","EntityState","Unchanged","Modified","_setPropertyChanged","Transaction","loadItemProperty","storeToken","ValidationErrors","ValidateEntity","ValidationError","resetChanges","_changedProperties","ItemStore","EntityInstanceRemove","save","EntityInstanceSave","EntityInstanceRefresh","getFieldUrl","_getContextPromise","EntityInheritedTypeProcessor","defaultValues","dv","addEventListener","delegateName","removeEventListener","raiseEvent","getFieldNames","_def","keyFields","keyProp","57","defaultMode","AllChanged","memDefs","KeepChanges","Default","58","defaultDatabaseName","enableRelatedEntityReadMethods","relatedEntityReadMethodPrefix","relatedEntityProxyPrefix","ComplexTypes","Enums","Associations","LogicalType","LogicalTypeName","PhysicalType","PhysicalTypeName","EventHandlers","TableName","TableOptions","ContextType","Roles","initParam","From","FromType","FromMultiplicity","FromPropertyName","To","ToType","ToMultiplicity","ToPropertyName","Association","storageProviderCfg","ContextRegister","queryCache","databaseName","lazyLoad","trackChanges","_entitySetReferences","_storageModel","_isOK","origSuccessInitProvider","_successInitProvider","errorOrContext","getStorageModel","providerList","_initStorageModelSync","_initStorageModelNavigationProperties","_initializeEntitySets","StorageProviderLoader","providerType","storageProvider","setContext","stateManager","EntityStateManager","_storageModelCache","_applyRelatedEntityMethodsToTypes","_initializeStorageModel","_applyRelatedEntityMethodsToContext","checkPermission","_initializeStore","ready","beginTransaction","readParam","isWrite","tables","_beginTran","_isReturnTransaction","transaction","_applyTransaction","isReturnTransaction","getDataType","memDef_dataType","ctor","storageModel","BaseType","ItemName","sm","tableName","tableOptions","eventHandlers","_initializeActions","initializeStore","_createNavPropStorageModel","logicalType","it","StorageModel","_convertLogicalTypeNameToPhysical","_memDefArray","itemResolvedDataType","roles","indices","beforeCreate","beforeRead","beforeUpdate","beforeDelete","afterCreate","afterRead","afterUpdate","afterDelete","_inheritanceMemberDefinitions","memdefs","_buildDbInstanceDefinition","dbEntityInstanceDefinition","memDefResolvedDataType","supportedDataTypes","Enum","_build_EnumDefinition","_buildDbType_navigationPropertyComplite","_buildDbType_Collection_OneManyDefinition","_buildDbType_ElementType_OneManyDefinition","fields","_buildDbType_ElementType_OneOneDefinition","_buildDbType_addComplexTypePropertyDefinition","_buildDbType_modifyInstanceDefinition","dbEntityClassDefinition","_buildDbType_generateConvertToFunction","_buildDbType_modifyClassDefinition","esDef","actionKeys","actionName","actionDef","refStorageModel","refMemDefs","pubDefs","refMemDef","_addNavigationPropertyDefinition","complexType","_createComplexElement","refereedType","refereedStorageModel","associationType","_addAssociationElement","definedBy","refereedMemberDefinition","associationName","fromType","fromMultiplicity","fromPropName","toType","toMultiplicity","toPropName","converterGroups","fieldConverter","createEnumConverter","converterGroup","SqLiteFieldMapping","onReadyFunction","getEntitySetFromElementType","executeQuery","queryable","Query","defaultType","returnTransaction","executeQuerySuccess","executeQueryError","getEntitySets","authorizedFn","readyFn","QueryCache","isInCache","rawDataList","callbackFn","Expressions","ExpressionType","BatchDelete","isCacheable","addToCache","buildResultSet","QueryResultModifier","successResult","Find","Count","Some","Every","First","__count","totalCount","_buildContinuationFunction","batchExecuteQuery","queryableOptions","cbWrapper","methodOperationMappings","single","every","removeAll","methodFrameMappings","returnFunc","qOptions","queryOption","Queryable","entityContext","_checkOperation","executableQueries","frameExpressionName","FrameOperator","queryExpression","preparator","createQueryExpressionCreator","Visit","event","createQueryable","queryResults","supportedContextOperation","batchExecuteQueryExpression","createBatchExecuteQueryExpression","batchResult","hasError","errorValue","readIterator","queries","iteratorCallback","itTransaction","lastTran","saveChanges","reset","changedEntities","trackedEntities","skipItems","additionalEntities","entityCachedItem","sModel","skipSave","changeStoredProperty","pMemDef","multiplicity","processEntityTypeBeforeEventHandler","smPhyMemDefs","ism","navProp","navPropertyName","connectedDataList","dependentOn","discoverDependentItemEntityState","temp","additionalDependentOn","Added","memDefType","isDependentProperty","createAll","modifyAll","Deleted","deleteAll","cancelEvent","innerCallback","_postProcessSavedItems","ies","cmd","cmdAll","ed","all","im","ix","onbeforeCreate","onbeforeUpdate","onbeforeDelete","processEntityTypeAfterEventHandler","onafterCreate","onafterUpdate","onafterDelete","bulkInsert","datas","currentEntitySet","actualEntitySet","ChangeCollector","Notifications","ChangeCollectorBase","processChangedData","oes","physicalData","forEachEntitySet","isSingleSide","assoc","filterFunc","filterParams","memDefKey","getTraceString","logInfo","resolveBinaryOperator","frameType","resolveUnaryOperator","resolveFieldOperation","operation","resolveSetOperations","resolveTypeOperations","resolveContextOperations","_generateServiceOperationQueryable","functionName","returnEntitySet","tempOperation","generateServiceOperation","mode","EntityWrapper","getEntity","attachOrGet","addMany","entities","collection","keyDef","esName","newMemberName","_relatedEntityGetMethod","memberElementType","_createRelatedEntityProxyClass","proxyClassName","RelatedEntityProxy","navigation","keyValue","proxyClass","keyV","serviceMethod","lastParam","boundItem","virtualEntitySet","paramConstExpression","createConstantExpression","ec","createEntityContextExpression","memberdef","createServiceOperationExpression","createMemberInfoExpression","isTerminated","_runQuery","__storageModelCache","59","EntitySchemaConfig","entitySetState","created","active","collectionName","createNew","addNew","_item","on_ready","_trackEntity","EntityAttachMode","attachMode","existsItem","trackedEnt","idx","Detached","_expression","createEntitySetExpression","60","61","62","63","createEnum","enumType","enumDefinition","__enumType","getEnumDef","isValueCalculation","hasIndex","enumDef","enumValA","enumName","enumValO","enumOptions","enumVal","getEnumName","enumValue","enumClass","64","ExpressionNode","ArrayLiteral","65","Call","66","scopeContext","lambdaParams","resolver","errorMessage","errorDetails","ParserBuild","Esprima","AST","ASTParser","parseCode","Build2","tree","createExpression","ParserExpressionStatement","ParserBlockStatement","ParserReturnStatement","ParserMemberExpression","PropertyExpression","ConstantExpression","ParserIdentifier","ParserParameter","LambdaParameterReference","ParameterReference","ParserObjectExpression","ParserProperty","ObjectLiteralExpression","ParserArrayExpression","ArrayLiteralExpression","ObjectFieldExpression","ParserArrowFunctionExpression","ParserFunctionExpression","parameterResolutionCompatibility","LambdaParameter","owningFunction","FunctionExpression","ParameterExpression","ParserLogicalExpression","ParserBinaryExpression","ParserOperators","==","expressionType","Equal","===","EqualTyped","!=","NotEqual","!==","NotEqualTyped",">","GreaterThen",">=","GreaterThenOrEqual","<=","LessThenOrEqual","<","LessThen","&&","||","&","AndBitwise","|","OrBitwise","+","Add","-","Subtract","/","Divide","%","Modulo","*","Multiply","[","ArrayIndex","in","In","ParserUnaryOperators","arity","Positive","operand","Negative","++true","Increment","--true","Decrement","++false","!","--false","ParserUnaryExpression","UnaryExpression","ParserUpdateExpression","SimpleBinaryExpression","ParserThisExpression","ThisExpression","ParserLiteral","ParserCallExpression","CallExpression","67","Constant","68","EntityExpressionVisitor","compile","findContext","skipExists","skipSize","take","pageSize","VisitPagingExpression","Take","amount","Skip","constExp","createPagingExpression","69","associationInfo","AssociationInfo","../../../TypeSystem/index.js","70","Code","71","ExpressionVisitor","VisitBinary","refExpression","constExpr","memInfo","selector","MemberInfoExpression","fieldType","constExprType","resultExp","operatorResolution","createSimpleBinaryExpression","VisitUnary","createUnaryExpression","VisitParameter","createEntityExpression","lambdaParameters","lambda","VisitThis","createQueryParameterExpression","queryParameters","VisitFunction","VisitCall","exp","EntitySetExpression","FrameOperationExpression","getJSON","setExpr","res","frameTypeFactory","QueryParameterExpression","argValues","EntityFieldExpression","EntityFieldOperationExpression","createEntityFieldOperationExpression","_resolveFunctionArguments","createFrameOperationExpression","EntityExpression","createEntityFunctionOperationExpression","EntityContextExpression","createContextFunctionOperationExpression","VisitProperty","memberDefinitionExp","storageField","createEntityFieldExpression","assocInfo","setExpression","createAssociationInfoExpression","ee","createComplexTypeExpression","ComplexTypeExpression","memDefExp","72","Com","73","74","ServiceOperationExpression","memdef","findMember","75","lambdaTypes","canVisit","visitorName","VisitToArrayExpression","createToArrayExpression","VisitForEachExpression","createForEachExpression","VisitMemberInfoExpression","VisitSingleExpression","createSingleExpression","VisitFirstExpression","createFirstExpression","VisitSomeExpression","createSomeExpression","VisitFindExpression","createFindExpression","subMember","VisitEveryExpression","createEveryExpression","VisitCountExpression","createCountExpression","VisitBatchDeleteExpression","createBatchDeleteExpression","VisitBatchExecuteQueryExpression","newQueries","equal","VisitObjectLiteralExpression","newValues","ofe","createObjectLiteralExpression","VisitObjectFieldExpression","newExpression","createObjectFieldExpression","VisitIncludeExpression","createIncludeExpression","VisitUnaryExpression","resolution","VisitSimpleBinaryExpression","VisitEntityContextExpression","VisitCodeExpression","VisitComplexTypeExpression","VisitEntityExpression","VisitEntityFieldExpression","VisitEntityFieldOperationExpression","VisitParametricQueryExpression","createParametricQueryExpression","VisitEntitySetExpression","VisitInlineCountExpression","createInlineCountExpression","VisitFilterExpression","createFilterExpression","VisitProjectionExpression","createProjectionExpression","projectionAs","VisitOrderExpression","createOrderExpression","76","EntityField","77","EntityFieldOperation","78","CodeExpression","ParametricQueryExpression","storage_type","AssociationInfoExpression","FindExpression","resultType","79","monitorDefinition","methodName","VisitExpressionNode","expressionTypeName","MonitorExpressionNode","MutateExpressionNode","80","Filter","InlineCount","BatchExecuteQuery","ForEach","ToArray","81","FrameOperation","EntityFunctionOperation","ContextFunctionOperation","82","83","MemberInfo","84","nType","OrderBy","85","ParametricQuery","86","Projection","87","VisitServiceOperationExpression","jsCodeTree","createCodeParser","constantResolver","createConstantValueResolver","parameterProcessor","createParameterResolverVisitor","code2entity","createCodeToEntityConverter","entityExpression","88","QueryParameter","89","90","ServiceOperation","91","_isLambdaParam","_isParam","paramContext","_isParamRoot","paramsName","Build","expNode","BuildMethodCall","BuildMember","BuildEquality","BuildBinary","BuildArrayAccess","BuildUnary","BuildIncDec","BuildNewExpression","BuildLiteral","BuildDecision","BuildVariable","BuildBoolLiteral","ExpressionNodeTypes","NewExpressionNode","LiteralExpressionNode","MEMBERACCESS","subType","operationName","missingParameterName","VariableExpressionNode","jsonAssign","JsonAssignExpressionNode","JSONASSIGN","MemberAccessExpressionNode","second","UnaryExpressionNode","IncDecExpressionNode","BinaryExpressionNode","EqualityExpressionNode","DecisionExpressionNode","third","MethodcallExpressionNode","argNodes","ArrayAccessExpressionNode","92","jsonify","Variable","MemberAccess","New","This","ObjectLiteral","ObjectField","Unknown","EntityMember","EntityBinary","ComplexEntityField","OrderByDescending","IndexedPhysicalAnd","IndexedLogicalAnd","IndexedLogicalOr","IndexedLogicalIn","BinaryOperator","binaryOperators","getOperator","unaryOperators","timeIt","iterations","OperatorTypes","UNARY","INCDEC","DECISION","METHODCALL","NEW","ARRAYACCESS","UNKNOWN","executable","origToJSON","_expressionType","93","paramStrings","bodyString","94","95","namesAndValues","96","97","98","99","100","101","ExpTreeVisitor","VisitVariable","eNode","VisitMember","chain","GetMemberChain","operandValue","valueType","VisitIncDec","suffix","leftValue","rightValue","VisitEquality","VisitDecision","VisitMethodCall","VisitArray","VisitArrayAccess","arrayNode","indexNode","102","_deep","LITERAL","VisitLiteral","VARIABLE","BINARY","EQUALITY","VisitNew","VisitJsonAssign","eNodes","ok","memberAccess","103","VisitConstant","VisitObjectLiteral","VisitObjectField","VisitArrayLiteral","VisitEntityContext","createArrayLiteralExpression","104","ParameterProcessor","canResolve","paramExpression","resultValue","paramsObject","globalResolver","createGlobalContextProcessor","paramResolver","105","lambdaParameterTypeInfos","paramIndices","fnParams","lambdaParamType","createParameterExpression","106","GlobalContextProcessor","evalMethod","107","binder","mem","memberResolver","createPropertyExpression","108","109","lambdaParamCache","paramCache","allLocal","paramNode","lambdaParam","isExecutable","convertToValue","visitors","110","firstMember","isLambdaParam","isLocalParam","111","_ExpressionNode","_ArrayLiteralExpression","_CallExpression","_CodeParser","_ConstantExpression","_FunctionExpression","_ObjectFieldExpression","_ObjectLiteralExpression","_PagingExpression","_ParameterExpression","_PropertyExpression","_SimpleBinaryExpression","_ThisExpression","_ExpressionVisitor","_ParameterProcessor","_GlobalContextProcessor","_LocalContextProcessor","_LambdaParameterProcessor","_ParameterResolverVisitor","_LogicalSchemaBinderVisitor","_ExpTreeVisitor","_SetExecutableVisitor","_ExecutorVisitor","_ExpressionBuilder","_AssociationInfoExpression","_CodeExpression","_CodeToEntityConverter","_ComplexTypeExpression","_EntityContextExpression","_EntityExpression","_EntityExpressionVisitor","_ExpressionMonitor","_EntityFieldExpression","_EntityFieldOperationExpression","_EntitySetExpression","_FrameOperationExpression","_FilterExpression","_IncludeExpression","_MemberInfoExpression","_OrderExpression","_ParametricQueryExpression","_ProjectionExpression","_QueryExpressionCreator","_QueryParameterExpression","_RepresentationExpression","_ServiceOperationExpression","_ContinuationExpressionBuilder","./ArrayLiteralExpression.js","./CallExpression.js","./CodeParser.js","./ConstantExpression.js","./ContinuationExpressionBuilder.js","./EntityExpressions/AssociationInfoExpression.js","./EntityExpressions/CodeExpression.js","./EntityExpressions/CodeToEntityConverter.js","./EntityExpressions/ComplexTypeExpression.js","./EntityExpressions/EntityContextExpression.js","./EntityExpressions/EntityExpression.js","./EntityExpressions/EntityExpressionVisitor.js","./EntityExpressions/EntityFieldExpression.js","./EntityExpressions/EntityFieldOperationExpression.js","./EntityExpressions/EntitySetExpression.js","./EntityExpressions/ExpressionMonitor.js","./EntityExpressions/FilterExpression.js","./EntityExpressions/FrameOperationExpression.js","./EntityExpressions/IncludeExpression.js","./EntityExpressions/MemberInfoExpression.js","./EntityExpressions/OrderExpression.js","./EntityExpressions/ParametricQueryExpression.js","./EntityExpressions/ProjectionExpression.js","./EntityExpressions/QueryExpressionCreator.js","./EntityExpressions/QueryParameterExpression.js","./EntityExpressions/RepresentationExpression.js","./EntityExpressions/ServiceOperationExpression.js","./ExpressionBuilder.js","./ExpressionNode2.js","./FunctionExpression.js","./ObjectFieldExpression.js","./ObjectLiteralExpression.js","./PagingExpression.js","./ParameterExpression.js","./PropertyExpression.js","./SimpleBinaryExpression.js","./ThisExpression.js","./Visitors/ExecutorVisitor.js","./Visitors/ExpTreeVisitor.js","./Visitors/ExpressionVisitor.js","./Visitors/GlobalContextProcessor.js","./Visitors/LambdaParameterProcessor.js","./Visitors/LocalContextProcessor.js","./Visitors/LogicalSchemaBinderVisitor.js","./Visitors/ParameterProcessor.js","./Visitors/ParameterResolverVisitor.js","./Visitors/SetExecutableVisitor.js","112","itemStoreConfig","aliases","resetStoreToDefault","addItemStoreAlias","storeConfigs","stores","_setTypeStoreConfig","contextFactoryOrToken","contextPromise","preContext","_getDefaultItemStoreFactory","_setStoreAlias","_getStoreAlias","alias","_getStoreContext","aliasOrToken","nullIfInvalid","_getStoreEntitySet","instanceOrType","initStoreConfig","storeConfig","contextDef","inMemoryType","_storeToken","contextOrAlias","_resolveFromContext","hint","_getSaveMode","keepStore","_getKeyObjectFromEntity","loadedEntity","readAll","EntityTypeReadAll","EntityTypeRead","EntityTypeRemoveAll","EntityTypeRemove","EntityTypeGet","EntityTypeSave","EntityTypeAddMany","itemCount","EntityTypeItemCount","EntityTypeQuery","takeFirst","EntityTypeTakeFirst","setStore","EntityTypeSetStore","singleParam","_findByIdQueryable","predicate","thisArgs","initDatas","defStoreConfig","dataSource","ds","parsedApiUrl","apiUrl","keysProps","keyDefs","modelBinderConfig","$type","$item","navProps","ItemStoreClass","MemberWrapper","setKey","setComputed","setRequired","setNullable","changeDefinition","113","providerName","providerConfiguration","modelBinderOptimization","RegisteredStorageProviders","_deepExtend","_finalize","_buildSelector","$selector","iter","_buildKey","typeIndex","$source","$value","fromDb","$keys","keycacheName","itemForKey","resolvedType","isEntityType","isEnum","openTypeProperty","entityTypeIndex","114","buildData","resObj","enumerableMemDefCollection","115","entityContextData","entityData","Distrbutor","distributeData","ChangeDistributorBase","116","broadcastUrl","succes","117","collectorData","118","ModelBinder","119","_fragments","selectedFragment","_binderConfig","_binderConfigPropertyStack","selectTextPart","getTextPart","addText","textParticle","addParameter","selectModelBinderProperty","popModelBinderProperty","resetModelBinderProperty","addKeyField","120","requiresExpressions","resultHandler","121","rootExpression","createCodeExpression","expressionSource","FilterExpression","where","codeExpression","select","onResult","countExpression","iteratorFunc","forEachExpression","onResult_items","toArrayExpression","toLiveArray","doAction","successFunc","prev","filterPredicate","singleExpression","someExpression","everyExpression","takeExp","order","orderString","orderByDescending","orderBy","firstExpression","supportedSetOperations","findExpression","include2","includeExp","withInlineCount","inlineCountExp","withCount","batchDeleteExpression","toTraceString","invokable","122","entityKeyObject","_entityKeyObject","_navigationProperty","_parent","_context","_ctxFactory","_getContext","proxyChains","_chainToArray","firstProxy","_createQueryable","missingKeyCount","_lastEntityKeys","_save","odataContext","queryText","originalEntity","originalInitData","delete","123","propertyDef","argObj","paramConfig","124","storageProviders","DbCreationType","Merge","DropTableIfChanged","DropTableIfChange","DropAllExistingTables","ErrorIfChange","DropDbIfChange","schemaConfiguration","providers","loadRawData","buildIndependentBlocks","changedItems","edgesTo","edgesFrom","currentDependency","ixDependendOn","referredBy","independentBlocks","currentBlock","cbix","dependentNodes","_buildPagingMethod","continuation","ContinuationExpressionBuilder","continuationResult","buildDbType_modifyInstanceDefinition","buildDbType_copyPropertyDefinition","propertyDefinition","refProp","cPropertyDef","buildDbType_createConstrain","foreignType","keyPropertyName","constrain","addToEntityDef","foreignPropName","keyProperties","constraint","dependentMemDef","navigationPropertyName","buildDbType_generateConvertToFunction","logicalEntity","dbInstance","complexInstance","cmpType","supportedFieldOperations","allowedIn","allowedType","supportedBinaryOperators","mapTo","supportedUnaryOperators","not","makePhysicalTypeDefinition","entityDefinition","supportedAutoincrementKeys","onRegisterProvider","registerProvider","getProvider","125","supported","indexedDB","webkitIndexedDB","mozIndexedDB","msIndexedDB","href","localStorage","scriptLoadTimeout","scriptLoadInterval","npmModules","indexedDb","InMemory","LocalStore","mongoDB","webApi","sqLite","webSql","storm","ProviderNames","cacheKey","_fallbackCache","selectedProvider","currentProvider","getVirtual","loadProvider","loadNpmModule","mappedName","getUrl","loader","loadScript","loadScriptElement","successful","jaydataScriptMin","querySelector","jaydataScript","getHttpRequest","oXmlHttp","watcher","iteration","loadInterval","head","script","ceil","virtualProviders","fallbacks","StorageProviderLoaderBase","126","_includes","projectionExpression","selectorContext","hasIncludeProjectionExpression","includePath","includeProjectionExpression","VisitFrameOperationExpression","opDef","ProjectionExpression","paramCounter","visitor","modelBinder","FindProjectionVisitor","_inculdes","visitorContext","VisitAssociationInfoExpression","oDataProvider","_query","_isoDataProvider","depth","_defaultModelBinder","builder","createqueryBuilder","VisitExpression","VisitConstantExpression","projVisitor","createFindProjectionVisitor","projContext","DefaultSelection","_addPropertyToModelBinderConfig","arrayElementType","_addComplexTypeProperties","allIncludes","custom","excludeDeepInclude","incName","tmpStorageModel","hasProjection","VisitEntityAsProjection","mapping","currentInclude","tmpIncludes","tmpDepth","_tmpIncludes","_tmpDepth","of","127","_objectId","oncomplete","onerror","128","validators","definedValue","customValidator","minValue","minLength","_getGroupValidations","validations","validator","EntityValidationBase","valueNotSet","fieldValidate","getValidationValue","validationName","convertableValidation","typeToConvert","getValidationMessage","defaultMessage","eMessage","createValidationError","supportedValidations","Defaults","$data.Object","validationTypeName","validatonGroup","validation","EntityValidation","129","Message","PropertyDefinition","Type","130","_index3","_EntityValidationBase","_EntityValidation","_ChangeDistributorBase","_ChangeCollectorBase","_ChangeDistributor","_ChangeCollector","_Transaction","_Access","_Entity","_Enum","_RelatedEntityProxy","_EntityContext","_QueryProvider","_ModelBinder","_QueryBuilder","_Query","_Queryable","_EntitySet","_EntityState","_EntityAttachModes","_EntityStateManager","_ItemStore","_StorageProviderLoader","_StorageProviderBase","_ServiceOperation","_EntityWrapper","_jQueryAjaxWrapper","_WinJSAjaxWrapper","_ExtJSAjaxWrapper","_AjaxStub","_modelBinderConfigCompiler","_AuthenticationBase","_Anonymous","_FacebookAuth","_BasicAuth","./Access.js","./Ajax/AjaxStub.js","./Ajax/ExtJSAjaxWrapper.js","./Ajax/WinJSAjaxWrapper.js","./Ajax/jQueryAjaxWrapper.js","./Authentication/Anonymous.js","./Authentication/AuthenticationBase.js","./Authentication/BasicAuth.js","./Authentication/FacebookAuth.js","./Entity.js","./EntityAttachModes.js","./EntityContext.js","./EntitySet.js","./EntityState.js","./EntityStateManager.js","./EntityWrapper.js","./Enum.js","./Expressions/index.js","./ItemStore.js","./ModelBinder.js","./Notifications/ChangeCollector.js","./Notifications/ChangeCollectorBase.js","./Notifications/ChangeDistributor.js","./Notifications/ChangeDistributorBase.js","./Query.js","./QueryBuilder.js","./QueryProvider.js","./Queryable.js","./RelatedEntityProxy.js","./ServiceOperation.js","./StorageProviderBase.js","./StorageProviderLoader.js","./StorageProviders/modelBinderConfigCompiler.js","./Transaction.js","./Validation/EntityValidation.js","./Validation/EntityValidationBase.js","jaydata/core","_index5","_index7","./JaySvcUtil/index.js","./TypeSystem/index.js","./Types/Expressions/index.js","./Types/index.js","interopRequire"],"mappings":"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,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,IAAA,IAAA,GAAA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,KAAA,GAAA,IAAA,KAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,IAAA,GAAA,GAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,KAAA,MAAA,GAAA,KAAA,GAAA,IAAA,EAAA,KAAA,MAAA,KACAG,GAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAA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","file":"jaydata.min.js","sourcesContent":["﻿// JayData 1.5.10 \r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(){\r\n\r\nvar \r\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.acorn = global.acorn || {})));\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    7: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  }\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  }\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i]\n      if (pos > code) return false\n      pos += set[i + 1]\n      if (pos >= code) return true\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) return code === 36\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) return code === 36\n    if (code < 58) return true\n    if (code < 65) return false\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label\n    this.keyword = conf.keyword\n    this.beforeExpr = !!conf.beforeExpr\n    this.startsExpr = !!conf.startsExpr\n    this.isLoop = !!conf.isLoop\n    this.isAssign = !!conf.isAssign\n    this.prefix = !!conf.prefix\n    this.postfix = !!conf.postfix\n    this.binop = conf.binop || null\n    this.updateContext = null\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true};\n  var startsExpr = {startsExpr: true};\n  // Map keyword names to token types.\n\n  var keywordTypes = {}\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name\n    return keywordTypes[name] = new TokenType(name, options)\n  }\n\n  var tt = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=\", 6),\n    relational: binop(\"</>\", 7),\n    bitShift: binop(\"<</>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\"),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\"),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  }\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\n  var lineBreakG = new RegExp(lineBreak.source, \"g\")\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code == 0x2029\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\"\n  }\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return Object.prototype.hasOwnProperty.call(obj, propName)\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line\n    this.column = col\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start\n    this.end = end\n    if (p.sourceFile !== null) this.source = p.sourceFile\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur\n      var match = lineBreakG.exec(input)\n      if (match && match.index < offset) {\n        ++line\n        cur = match.index + match[0].length\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n    // be either 3, or 5, or 6. This influences support for strict\n    // mode, the set of reserved words, support for getters and\n    // setters and other features. The default is 6.\n    ecmaVersion: 6,\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // th position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false,\n    plugins: {}\n  }\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {}\n    for (var opt in defaultOptions)\n      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n    if (options.allowReserved == null)\n      options.allowReserved = options.ecmaVersion < 5\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken\n      options.onToken = function (token) { return tokens.push(token); }\n    }\n    if (isArray(options.onComment))\n      options.onComment = pushComment(options, options.onComment)\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function (block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? 'Block' : 'Line',\n        value: text,\n        start: start,\n        end: end\n      }\n      if (options.locations)\n        comment.loc = new SourceLocation(this, startLoc, endLoc)\n      if (options.ranges)\n        comment.range = [start, end]\n      array.push(comment)\n    }\n  }\n\n  // Registered plugins\n  var plugins = {}\n\n  function keywordRegexp(words) {\n    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options)\n    this.sourceFile = options.sourceFile\n    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n    var reserved = options.allowReserved ? \"\" :\n        reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\")\n    this.reservedWords = keywordRegexp(reserved)\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n    this.reservedWordsStrict = keywordRegexp(reservedStrict)\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n    this.input = String(input)\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false\n\n    // Load plugins\n    this.loadPlugins(options.plugins)\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos))\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n    } else {\n      this.pos = this.lineStart = 0\n      this.curLine = 1\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = tt.eof\n    // For tokens that include more information than their type, the value\n    this.value = null\n    // Its start and end offset\n    this.start = this.end = this.pos\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition()\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null\n    this.lastTokStart = this.lastTokEnd = this.pos\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext()\n    this.exprAllowed = true\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\"\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false\n    // Labels in scope.\n    this.labels = []\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n      this.skipLineComment(2)\n  };\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\n  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\n  Parser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name])\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n      var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = plugins[name]\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n      plugin(this$1, pluginConfigs[name])\n    }\n  };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode()\n    this.nextToken()\n    return this.parseTopLevel(node)\n  };\n\n  var pp = Parser.prototype\n\n  // ## Parser utilities\n\n  // Test whether a statement node is the string literal `\"use strict\"`.\n\n  pp.isUseStrict = function(stmt) {\n    return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"Literal\" &&\n      stmt.expression.raw.slice(1, -1) === \"use strict\"\n  }\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === tt.name && this.value === name\n  }\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    return this.value === name && this.eat(tt.name)\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) this.unexpected()\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === tt.eof ||\n      this.type === tt.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  }\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n      return true\n    }\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n  }\n\n  pp.afterTrailingComma = function(tokType) {\n    if (this.type == tokType) {\n      if (this.options.onTrailingComma)\n        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n      this.next()\n      return true\n    }\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected()\n  }\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n  }\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = 0\n    this.trailingComma = 0\n  };\n\n  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma\n    if (!andThrow) return !!trailing\n    if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\")\n  }\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign\n    if (!andThrow) return !!pos\n    if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n  }\n\n  var pp$1 = Parser.prototype\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var this$1 = this;\n\n    var first = true\n    if (!node.body) node.body = []\n    while (this.type !== tt.eof) {\n      var stmt = this$1.parseStatement(true, true)\n      node.body.push(stmt)\n      if (first) {\n        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)\n        first = false\n      }\n    }\n    this.next()\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType\n    }\n    return this.finishNode(node, \"Program\")\n  }\n\n  var loopLabel = {kind: \"loop\"};\n  var switchLabel = {kind: \"switch\"};\n  pp$1.isLet = function() {\n    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n    skipWhiteSpace.lastIndex = this.pos\n    var skip = skipWhiteSpace.exec(this.input)\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n    if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n    if (isIdentifierStart(nextCh, true)) {\n      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n      var ident = this.input.slice(next, pos)\n      if (!this.isKeyword(ident)) return true\n    }\n    return false\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(declaration, topLevel) {\n    var starttype = this.type, node = this.startNode(), kind\n\n    if (this.isLet()) {\n      starttype = tt._var\n      kind = \"let\"\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case tt._debugger: return this.parseDebuggerStatement(node)\n    case tt._do: return this.parseDoStatement(node)\n    case tt._for: return this.parseForStatement(node)\n    case tt._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n      return this.parseFunctionStatement(node)\n    case tt._class:\n      if (!declaration) this.unexpected()\n      return this.parseClass(node, true)\n    case tt._if: return this.parseIfStatement(node)\n    case tt._return: return this.parseReturnStatement(node)\n    case tt._switch: return this.parseSwitchStatement(node)\n    case tt._throw: return this.parseThrowStatement(node)\n    case tt._try: return this.parseTryStatement(node)\n    case tt._const: case tt._var:\n      kind = kind || this.value\n      if (!declaration && kind != \"var\") this.unexpected()\n      return this.parseVarStatement(node, kind)\n    case tt._while: return this.parseWhileStatement(node)\n    case tt._with: return this.parseWithStatement(node)\n    case tt.braceL: return this.parseBlock()\n    case tt.semi: return this.parseEmptyStatement(node)\n    case tt._export:\n    case tt._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n        if (!this.inModule)\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n      }\n      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value, expr = this.parseExpression()\n      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n        return this.parseLabeledStatement(node, maybeName, expr)\n      else return this.parseExpressionStatement(node, expr)\n    }\n  }\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var this$1 = this;\n\n    var isBreak = keyword == \"break\"\n    this.next()\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n    else if (this.type !== tt.name) this.unexpected()\n    else {\n      node.label = this.parseIdent()\n      this.semicolon()\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    for (var i = 0; i < this.labels.length; ++i) {\n      var lab = this$1.labels[i]\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n        if (node.label && isBreak) break\n      }\n    }\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  }\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n  }\n\n  pp$1.parseDoStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    this.expect(tt._while)\n    node.test = this.parseParenExpression()\n    if (this.options.ecmaVersion >= 6)\n      this.eat(tt.semi)\n    else\n      this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    this.expect(tt.parenL)\n    if (this.type === tt.semi) return this.parseFor(node, null)\n    var isLet = this.isLet()\n    if (this.type === tt._var || this.type === tt._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n      this.next()\n      this.parseVar(init$1, true, kind)\n      this.finishNode(init$1, \"VariableDeclaration\")\n      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n          !(kind !== \"var\" && init$1.declarations[0].init))\n        return this.parseForIn(node, init$1)\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors\n    var init = this.parseExpression(true, refDestructuringErrors)\n    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      this.toAssignable(init)\n      this.checkLVal(init)\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return this.parseFor(node, init)\n  }\n\n  pp$1.parseFunctionStatement = function(node) {\n    this.next()\n    return this.parseFunction(node, true)\n  }\n\n  pp$1.parseIfStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement(false)\n    node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null\n    return this.finishNode(node, \"IfStatement\")\n  }\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      this.raise(this.start, \"'return' outside of function\")\n    this.next()\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n  }\n\n  pp$1.parseSwitchStatement = function(node) {\n    var this$1 = this;\n\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.expect(tt.braceL)\n    this.labels.push(switchLabel)\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n      if (this$1.type === tt._case || this$1.type === tt._default) {\n        var isCase = this$1.type === tt._case\n        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this$1.startNode())\n        cur.consequent = []\n        this$1.next()\n        if (isCase) {\n          cur.test = this$1.parseExpression()\n        } else {\n          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n          sawDefault = true\n          cur.test = null\n        }\n        this$1.expect(tt.colon)\n      } else {\n        if (!cur) this$1.unexpected()\n        cur.consequent.push(this$1.parseStatement(true))\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.next() // Closing brace\n    this.labels.pop()\n    return this.finishNode(node, \"SwitchStatement\")\n  }\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next()\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n  }\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = []\n\n  pp$1.parseTryStatement = function(node) {\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.type === tt._catch) {\n      var clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.parseBindingAtom()\n      this.checkLVal(clause.param, true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer)\n      this.raise(node.start, \"Missing catch or finally clause\")\n    return this.finishNode(node, \"TryStatement\")\n  }\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next()\n    this.parseVar(node, false, kind)\n    this.semicolon()\n    return this.finishNode(node, \"VariableDeclaration\")\n  }\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"WhileStatement\")\n  }\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement(false)\n    return this.finishNode(node, \"WithStatement\")\n  }\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n  }\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.labels.length; ++i)\n      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n      var label = this$1.labels[i$1]\n      if (label.statementStart == node.start) {\n        label.statementStart = this$1.start\n        label.kind = kind\n      } else break\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n    node.body = this.parseStatement(true)\n    this.labels.pop()\n    node.label = expr\n    return this.finishNode(node, \"LabeledStatement\")\n  }\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExpressionStatement\")\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(allowStrict) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, oldStrict\n    node.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      var stmt = this$1.parseStatement(true)\n      node.body.push(stmt)\n      if (first && allowStrict && this$1.isUseStrict(stmt)) {\n        oldStrict = this$1.strict\n        this$1.setStrict(this$1.strict = true)\n      }\n      first = false\n    }\n    if (oldStrict === false) this.setStrict(false)\n    return this.finishNode(node, \"BlockStatement\")\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init\n    this.expect(tt.semi)\n    node.test = this.type === tt.semi ? null : this.parseExpression()\n    this.expect(tt.semi)\n    node.update = this.type === tt.parenR ? null : this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"ForStatement\")\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n    this.next()\n    node.left = init\n    node.right = this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, type)\n  }\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    var this$1 = this;\n\n    node.declarations = []\n    node.kind = kind\n    for (;;) {\n      var decl = this$1.startNode()\n      this$1.parseVarId(decl)\n      if (this$1.eat(tt.eq)) {\n        decl.init = this$1.parseMaybeAssign(isFor)\n      } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n        this$1.unexpected()\n      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n      } else {\n        decl.init = null\n      }\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n      if (!this$1.eat(tt.comma)) break\n    }\n    return node\n  }\n\n  pp$1.parseVarId = function(decl) {\n    decl.id = this.parseBindingAtom()\n    this.checkLVal(decl.id, true)\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseFunction = function(node, isStatement, allowExpressionBody) {\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = this.eat(tt.star)\n    var oldInGen = this.inGenerator\n    this.inGenerator = node.generator\n    if (isStatement || this.type === tt.name)\n      node.id = this.parseIdent()\n    this.parseFunctionParams(node)\n    this.parseFunctionBody(node, allowExpressionBody)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  }\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false, true)\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    var this$1 = this;\n\n    this.next()\n    this.parseClassId(node, isStatement)\n    this.parseClassSuper(node)\n    var classBody = this.startNode()\n    var hadConstructor = false\n    classBody.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (this$1.eat(tt.semi)) continue\n      var method = this$1.startNode()\n      var isGenerator = this$1.eat(tt.star)\n      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n      this$1.parsePropertyName(method)\n      method.static = isMaybeStatic && this$1.type !== tt.parenL\n      if (method.static) {\n        if (isGenerator) this$1.unexpected()\n        isGenerator = this$1.eat(tt.star)\n        this$1.parsePropertyName(method)\n      }\n      method.kind = \"method\"\n      var isGetSet = false\n      if (!method.computed) {\n        var key = method.key;\n        if (!isGenerator && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n          isGetSet = true\n          method.kind = key.name\n          key = this$1.parsePropertyName(method)\n        }\n        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n            key.type === \"Literal\" && key.value === \"constructor\")) {\n          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n          method.kind = \"constructor\"\n          hadConstructor = true\n        }\n      }\n      this$1.parseClassMethod(classBody, method, isGenerator)\n      if (isGetSet) {\n        var paramCount = method.kind === \"get\" ? 0 : 1\n        if (method.value.params.length !== paramCount) {\n          var start = method.value.start\n          if (method.kind === \"get\")\n            this$1.raiseRecoverable(start, \"getter should have no params\")\n          else\n            this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n        }\n        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n          this$1.raise(method.value.params[0].start, \"Setter cannot use rest params\")\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\")\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  }\n\n  pp$1.parseClassMethod = function(classBody, method, isGenerator) {\n    method.value = this.parseMethod(isGenerator)\n    classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n\n  pp$1.parseClassId = function(node, isStatement) {\n    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n  }\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n  }\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node) {\n    var this$1 = this;\n\n    this.next()\n    // export * from '...'\n    if (this.eat(tt.star)) {\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      this.semicolon()\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(tt._default)) { // export default ...\n      var parens = this.type == tt.parenL\n      var expr = this.parseMaybeAssign()\n      var needsSemi = true\n      if (!parens && (expr.type == \"FunctionExpression\" ||\n                      expr.type == \"ClassExpression\")) {\n        needsSemi = false\n        if (expr.id) {\n          expr.type = expr.type == \"FunctionExpression\"\n            ? \"FunctionDeclaration\"\n            : \"ClassDeclaration\"\n        }\n      }\n      node.declaration = expr\n      if (needsSemi) this.semicolon()\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(true)\n      node.specifiers = []\n      node.source = null\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null\n      node.specifiers = this.parseExportSpecifiers()\n      if (this.eatContextual(\"from\")) {\n        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      } else {\n        // check for keywords used as local names\n        for (var i = 0; i < node.specifiers.length; i++) {\n          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n            this$1.unexpected(node.specifiers[i].local.start)\n          }\n        }\n\n        node.source = null\n      }\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  }\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword || this.isLet()\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node = this$1.startNode()\n      node.local = this$1.parseIdent(this$1.type === tt._default)\n      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n    }\n    return nodes\n  }\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next()\n    // import '...'\n    if (this.type === tt.string) {\n      node.specifiers = empty\n      node.source = this.parseExprAtom()\n    } else {\n      node.specifiers = this.parseImportSpecifiers()\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    }\n    this.semicolon()\n    return this.finishNode(node, \"ImportDeclaration\")\n  }\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    if (this.type === tt.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode()\n      node.local = this.parseIdent()\n      this.checkLVal(node.local, true)\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n      if (!this.eat(tt.comma)) return nodes\n    }\n    if (this.type === tt.star) {\n      var node$1 = this.startNode()\n      this.next()\n      this.expectContextual(\"as\")\n      node$1.local = this.parseIdent()\n      this.checkLVal(node$1.local, true)\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n      return nodes\n    }\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node$2 = this$1.startNode()\n      node$2.imported = this$1.parseIdent(true)\n      if (this$1.eatContextual(\"as\")) {\n        node$2.local = this$1.parseIdent()\n      } else {\n        node$2.local = node$2.imported\n        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raise(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n      }\n      this$1.checkLVal(node$2.local, true)\n      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n    }\n    return nodes\n  }\n\n  var pp$2 = Parser.prototype\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding) {\n    var this$1 = this;\n\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\"\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i]\n          if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n          this$1.toAssignable(prop.value, isBinding)\n        }\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\"\n        this.toAssignableList(node.elements, isBinding)\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\"\n          delete node.operator\n          // falls through to AssignmentPattern\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n          break\n        }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\")\n          this.raise(node.right.start, \"Yield expression cannot be a default value\")\n        break\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding)\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) break\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\")\n      }\n    }\n    return node\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var this$1 = this;\n\n    var end = exprList.length\n    if (end) {\n      var last = exprList[end - 1]\n      if (last && last.type == \"RestElement\") {\n        --end\n      } else if (last && last.type == \"SpreadElement\") {\n        last.type = \"RestElement\"\n        var arg = last.argument\n        this.toAssignable(arg, isBinding)\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n          this.unexpected(arg.start)\n        --end\n      }\n\n      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        this.unexpected(last.argument.start)\n    }\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i]\n      if (elt) this$1.toAssignable(elt, isBinding)\n    }\n    return exprList\n  }\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n\n  pp$2.parseRest = function(allowNonIdent) {\n    var node = this.startNode()\n    this.next()\n\n    // RestElement inside of a function parameter must be an identifier\n    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\n    return this.finishNode(node, \"RestElement\")\n  }\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion < 6) return this.parseIdent()\n    switch (this.type) {\n    case tt.name:\n      return this.parseIdent()\n\n    case tt.bracketL:\n      var node = this.startNode()\n      this.next()\n      node.elements = this.parseBindingList(tt.bracketR, true, true)\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case tt.braceL:\n      return this.parseObj(true)\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (first) first = false\n      else this$1.expect(tt.comma)\n      if (allowEmpty && this$1.type === tt.comma) {\n        elts.push(null)\n      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break\n      } else if (this$1.type === tt.ellipsis) {\n        var rest = this$1.parseRest(allowNonIdent)\n        this$1.parseBindingListItem(rest)\n        elts.push(rest)\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n        this$1.expect(close)\n        break\n      } else {\n        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n        this$1.parseBindingListItem(elem)\n        elts.push(elem)\n      }\n    }\n    return elts\n  }\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom()\n    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.right = this.parseMaybeAssign()\n    return this.finishNode(node, \"AssignmentPattern\")\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  pp$2.checkLVal = function(expr, isBinding, checkClashes) {\n    var this$1 = this;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          this.raiseRecoverable(expr.start, \"Argument name clash\")\n        checkClashes[expr.name] = true\n      }\n      break\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++)\n        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n        var elem = expr.elements[i$1]\n        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes)\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes)\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes)\n      break\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n    }\n  }\n\n  var pp$3 = Parser.prototype\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash) {\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      return\n    var key = prop.key;\n    var name\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n        propHash.proto = true\n      }\n      return\n    }\n    name = \"$\" + name\n    var other = propHash[name]\n    if (other) {\n      var isGetSet = kind !== \"init\"\n      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n        this.raiseRecoverable(key.start, \"Redefinition of property\")\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      }\n    }\n    other[kind] = true\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n    if (this.type === tt.comma) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.expressions = [expr]\n      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n    var ownDestructuringErrors = false\n    if (!refDestructuringErrors) {\n      refDestructuringErrors = new DestructuringErrors\n      ownDestructuringErrors = true\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    if (this.type == tt.parenL || this.type == tt.name)\n      this.potentialArrowAt = this.start\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n    if (this.type.isAssign) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n      var node = this.startNodeAt(startPos, startLoc)\n      node.operator = this.value\n      node.left = this.type === tt.eq ? this.toAssignable(left) : left\n      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly\n      this.checkLVal(left)\n      this.next()\n      node.right = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return left\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprOps(noIn, refDestructuringErrors)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    if (this.eat(tt.question)) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.test = expr\n      node.consequent = this.parseMaybeAssign()\n      this.expect(tt.colon)\n      node.alternate = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  }\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop\n    if (prec != null && (!noIn || this.type !== tt._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n        var op = this.value\n        this.next()\n        var startPos = this.start, startLoc = this.startLoc\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  }\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.operator = op\n    node.right = right\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, expr\n    if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === tt.incDec\n      node.operator = this.value\n      node.prefix = true\n      this.next()\n      node.argument = this.parseMaybeUnary(null, true)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n      if (update) this.checkLVal(node.argument)\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n      else sawUnary = true\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors)\n      if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.operator = this$1.value\n        node$1.prefix = false\n        node$1.argument = expr\n        this$1.checkLVal(expr)\n        this$1.next()\n        expr = this$1.finishNode(node$1, \"UpdateExpression\")\n      }\n    }\n\n    if (!sawUnary && this.eat(tt.starstar))\n      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n    else\n      return expr\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprAtom(refDestructuringErrors)\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n    return this.parseSubscripts(expr, startPos, startLoc)\n  }\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var this$1 = this;\n\n    for (;;) {\n      if (this$1.eat(tt.dot)) {\n        var node = this$1.startNodeAt(startPos, startLoc)\n        node.object = base\n        node.property = this$1.parseIdent(true)\n        node.computed = false\n        base = this$1.finishNode(node, \"MemberExpression\")\n      } else if (this$1.eat(tt.bracketL)) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.object = base\n        node$1.property = this$1.parseExpression()\n        node$1.computed = true\n        this$1.expect(tt.bracketR)\n        base = this$1.finishNode(node$1, \"MemberExpression\")\n      } else if (!noCalls && this$1.eat(tt.parenL)) {\n        var node$2 = this$1.startNodeAt(startPos, startLoc)\n        node$2.callee = base\n        node$2.arguments = this$1.parseExprList(tt.parenR, false)\n        base = this$1.finishNode(node$2, \"CallExpression\")\n      } else if (this$1.type === tt.backQuote) {\n        var node$3 = this$1.startNodeAt(startPos, startLoc)\n        node$3.tag = base\n        node$3.quasi = this$1.parseTemplate()\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n      } else {\n        return base\n      }\n    }\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    var node, canBeArrow = this.potentialArrowAt == this.start\n    switch (this.type) {\n    case tt._super:\n      if (!this.inFunction)\n        this.raise(this.start, \"'super' outside of function or class\")\n\n    case tt._this:\n      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n      node = this.startNode()\n      this.next()\n      return this.finishNode(node, type)\n\n    case tt.name:\n      var startPos = this.start, startLoc = this.startLoc\n      var id = this.parseIdent(this.type !== tt.name)\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow))\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id])\n      return id\n\n    case tt.regexp:\n      var value = this.value\n      node = this.parseLiteral(value.value)\n      node.regex = {pattern: value.pattern, flags: value.flags}\n      return node\n\n    case tt.num: case tt.string:\n      return this.parseLiteral(this.value)\n\n    case tt._null: case tt._true: case tt._false:\n      node = this.startNode()\n      node.value = this.type === tt._null ? null : this.type === tt._true\n      node.raw = this.type.keyword\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case tt.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow)\n\n    case tt.bracketL:\n      node = this.startNode()\n      this.next()\n      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case tt.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case tt._function:\n      node = this.startNode()\n      this.next()\n      return this.parseFunction(node, false)\n\n    case tt._class:\n      return this.parseClass(this.startNode(), false)\n\n    case tt._new:\n      return this.parseNew()\n\n    case tt.backQuote:\n      return this.parseTemplate()\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode()\n    node.value = value\n    node.raw = this.input.slice(this.start, this.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n  }\n\n  pp$3.parseParenExpression = function() {\n    this.expect(tt.parenL)\n    var val = this.parseExpression()\n    this.expect(tt.parenR)\n    return val\n  }\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, val\n    if (this.options.ecmaVersion >= 6) {\n      this.next()\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc\n      var exprList = [], first = true\n      var refDestructuringErrors = new DestructuringErrors, spreadStart, innerParenStart\n      while (this.type !== tt.parenR) {\n        first ? first = false : this$1.expect(tt.comma)\n        if (this$1.type === tt.ellipsis) {\n          spreadStart = this$1.start\n          exprList.push(this$1.parseParenItem(this$1.parseRest()))\n          break\n        } else {\n          if (this$1.type === tt.parenL && !innerParenStart) {\n            innerParenStart = this$1.start\n          }\n          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc\n      this.expect(tt.parenR)\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, true)\n        if (innerParenStart) this.unexpected(innerParenStart)\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length) this.unexpected(this.lastTokStart)\n      if (spreadStart) this.unexpected(spreadStart)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc)\n        val.expressions = exprList\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n      } else {\n        val = exprList[0]\n      }\n    } else {\n      val = this.parseParenExpression()\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc)\n      par.expression = val\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  }\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  }\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = []\n\n  pp$3.parseNew = function() {\n    var node = this.startNode()\n    var meta = this.parseIdent(true)\n    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n      node.meta = meta\n      node.property = this.parseIdent(true)\n      if (node.property.name !== \"target\")\n        this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n      if (!this.inFunction)\n        this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, false)\n    else node.arguments = empty$1\n    return this.finishNode(node, \"NewExpression\")\n  }\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function() {\n    var elem = this.startNode()\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.value\n    }\n    this.next()\n    elem.tail = this.type === tt.backQuote\n    return this.finishNode(elem, \"TemplateElement\")\n  }\n\n  pp$3.parseTemplate = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    node.expressions = []\n    var curElt = this.parseTemplateElement()\n    node.quasis = [curElt]\n    while (!curElt.tail) {\n      this$1.expect(tt.dollarBraceL)\n      node.expressions.push(this$1.parseExpression())\n      this$1.expect(tt.braceR)\n      node.quasis.push(curElt = this$1.parseTemplateElement())\n    }\n    this.next()\n    return this.finishNode(node, \"TemplateLiteral\")\n  }\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var prop = this$1.startNode(), isGenerator, startPos, startLoc\n      if (this$1.options.ecmaVersion >= 6) {\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this$1.start\n          startLoc = this$1.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this$1.eat(tt.star)\n      }\n      this$1.parsePropertyName(prop)\n      this$1.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n      this$1.checkPropClash(prop, propHash)\n      node.properties.push(this$1.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n      prop.kind = \"init\"\n    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n      if (isPattern) this.unexpected()\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type != tt.comma && this.type != tt.braceR)) {\n      if (isGenerator || isPattern) this.unexpected()\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n      var paramCount = prop.kind === \"get\" ? 0 : 1\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start\n        if (prop.kind === \"get\")\n          this.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this.raiseRecoverable(start, \"setter should have exactly one param\")\n      }\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (this.keywords.test(prop.key.name) ||\n          (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) ||\n          (this.inGenerator && prop.key.name == \"yield\"))\n        this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n      prop.kind = \"init\"\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else if (this.type === tt.eq && refDestructuringErrors) {\n        if (!refDestructuringErrors.shorthandAssign)\n          refDestructuringErrors.shorthandAssign = this.start\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else {\n        prop.value = prop.key\n      }\n      prop.shorthand = true\n    } else this.unexpected()\n  }\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(tt.bracketL)) {\n        prop.computed = true\n        prop.key = this.parseMaybeAssign()\n        this.expect(tt.bracketR)\n        return prop.key\n      } else {\n        prop.computed = false\n      }\n    }\n    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n  }\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false\n      node.expression = false\n    }\n  }\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator) {\n    var node = this.startNode(), oldInGen = this.inGenerator\n    this.inGenerator = isGenerator\n    this.initFunction(node)\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = isGenerator\n    this.parseFunctionBody(node, false)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"FunctionExpression\")\n  }\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params) {\n    var oldInGen = this.inGenerator\n    this.inGenerator = false\n    this.initFunction(node)\n    node.params = this.toAssignableList(params, true)\n    this.parseFunctionBody(node, true)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  }\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction) {\n    var isExpression = isArrowFunction && this.type !== tt.braceL\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign()\n      node.expression = true\n    } else {\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldInFunc = this.inFunction, oldLabels = this.labels\n      this.inFunction = true; this.labels = []\n      node.body = this.parseBlock(true)\n      node.expression = false\n      this.inFunction = oldInFunc; this.labels = oldLabels\n    }\n\n    // If this is a strict mode function, verify that argument names\n    // are not repeated, and it does not try to bind the words `eval`\n    // or `arguments`.\n    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null;\n    if (this.strict || useStrict) {\n      var oldStrict = this.strict\n      this.strict = true\n      if (node.id)\n        this.checkLVal(node.id, true)\n      this.checkParams(node, useStrict)\n      this.strict = oldStrict\n    } else if (isArrowFunction) {\n      this.checkParams(node, useStrict)\n    }\n  }\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node, useStrict) {\n      var this$1 = this;\n\n      var nameHash = {}\n      for (var i = 0; i < node.params.length; i++) {\n        if (useStrict && this$1.options.ecmaVersion >= 7 && node.params[i].type !== \"Identifier\")\n          this$1.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        this$1.checkLVal(node.params[i], true, nameHash)\n      }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n      } else first = false\n\n      var elt\n      if (allowEmpty && this$1.type === tt.comma)\n        elt = null\n      else if (this$1.type === tt.ellipsis) {\n        elt = this$1.parseSpread(refDestructuringErrors)\n        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n          refDestructuringErrors.trailingComma = this$1.lastTokStart\n        }\n      } else\n        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n      elts.push(elt)\n    }\n    return elts\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal) {\n    var node = this.startNode()\n    if (liberal && this.options.allowReserved == \"never\") liberal = false\n    if (this.type === tt.name) {\n      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n          (this.options.ecmaVersion >= 6 ||\n           this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n        this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n      if (!liberal && this.inGenerator && this.value === \"yield\")\n        this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n      node.name = this.value\n    } else if (liberal && this.type.keyword) {\n      node.name = this.type.keyword\n    } else {\n      this.unexpected()\n    }\n    this.next()\n    return this.finishNode(node, \"Identifier\")\n  }\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function() {\n    var node = this.startNode()\n    this.next()\n    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var pp$4 = Parser.prototype\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos)\n    message += \" (\" + loc.line + \":\" + loc.column + \")\"\n    var err = new SyntaxError(message)\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n    throw err\n  }\n\n  pp$4.raiseRecoverable = pp$4.raise\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  }\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$5 = Parser.prototype\n\n  pp$5.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  }\n\n  pp$5.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type\n    node.end = pos\n    if (this.options.locations)\n      node.loc.end = loc\n    if (this.options.ranges)\n      node.range[1] = pos\n    return node\n  }\n\n  pp$5.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  }\n\n  // Finish node at given position\n\n  pp$5.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  }\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", true),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n    f_expr: new TokContext(\"function\", true)\n  }\n\n  var pp$6 = Parser.prototype\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  }\n\n  pp$6.braceIsBlock = function(prevType) {\n    if (prevType === tt.colon) {\n      var parent = this.curContext()\n      if (parent === types.b_stat || parent === types.b_expr)\n        return !parent.isExpr\n    }\n    if (prevType === tt._return)\n      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n      return true\n    if (prevType == tt.braceL)\n      return this.curContext() === types.b_stat\n    return !this.exprAllowed\n  }\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type\n    if (type.keyword && prevType == tt.dot)\n      this.exprAllowed = false\n    else if (update = type.updateContext)\n      update.call(this, prevType)\n    else\n      this.exprAllowed = type.beforeExpr\n  }\n\n  // Token-specific context update code\n\n  tt.parenR.updateContext = tt.braceR.updateContext = function() {\n    if (this.context.length == 1) {\n      this.exprAllowed = true\n      return\n    }\n    var out = this.context.pop()\n    if (out === types.b_stat && this.curContext() === types.f_expr) {\n      this.context.pop()\n      this.exprAllowed = false\n    } else if (out === types.b_tmpl) {\n      this.exprAllowed = true\n    } else {\n      this.exprAllowed = !out.isExpr\n    }\n  }\n\n  tt.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n    this.exprAllowed = true\n  }\n\n  tt.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl)\n    this.exprAllowed = true\n  }\n\n  tt.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n    this.context.push(statementParens ? types.p_stat : types.p_expr)\n    this.exprAllowed = true\n  }\n\n  tt.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  }\n\n  tt._function.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n      this.context.push(types.f_expr)\n    this.exprAllowed = false\n  }\n\n  tt.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      this.context.pop()\n    else\n      this.context.push(types.q_tmpl)\n    this.exprAllowed = false\n  }\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  };\n\n  // ## Tokenizer\n\n  var pp$7 = Parser.prototype\n\n  // Are we running under Rhino?\n  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n  // Move to the next token\n\n  pp$7.next = function() {\n    if (this.options.onToken)\n      this.options.onToken(new Token(this))\n\n    this.lastTokEnd = this.end\n    this.lastTokStart = this.start\n    this.lastTokEndLoc = this.endLoc\n    this.lastTokStartLoc = this.startLoc\n    this.nextToken()\n  }\n\n  pp$7.getToken = function() {\n    this.next()\n    return new Token(this)\n  }\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    pp$7[Symbol.iterator] = function () {\n      var self = this\n      return {next: function () {\n        var token = self.getToken()\n        return {\n          done: token.type === tt.eof,\n          value: token\n        }\n      }}\n    }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$7.setStrict = function(strict) {\n    var this$1 = this;\n\n    this.strict = strict\n    if (this.type !== tt.num && this.type !== tt.string) return\n    this.pos = this.start\n    if (this.options.locations) {\n      while (this.pos < this.lineStart) {\n        this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1\n        --this$1.curLine\n      }\n    }\n    this.nextToken()\n  }\n\n  pp$7.curContext = function() {\n    return this.context[this.context.length - 1]\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$7.nextToken = function() {\n    var curContext = this.curContext()\n    if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n    this.start = this.pos\n    if (this.options.locations) this.startLoc = this.curPosition()\n    if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n    if (curContext.override) return curContext.override(this)\n    else this.readToken(this.fullCharCodeAtPos())\n  }\n\n  pp$7.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      return this.readWord()\n\n    return this.getTokenFromCode(code)\n  }\n\n  pp$7.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos)\n    if (code <= 0xd7ff || code >= 0xe000) return code\n    var next = this.input.charCodeAt(this.pos + 1)\n    return (code << 10) + next - 0x35fdc00\n  }\n\n  pp$7.skipBlockComment = function() {\n    var this$1 = this;\n\n    var startLoc = this.options.onComment && this.curPosition()\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n    this.pos = end + 2\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start\n      var match\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this$1.curLine\n        this$1.lineStart = match.index + match[0].length\n      }\n    }\n    if (this.options.onComment)\n      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  pp$7.skipLineComment = function(startSkip) {\n    var this$1 = this;\n\n    var start = this.pos\n    var startLoc = this.options.onComment && this.curPosition()\n    var ch = this.input.charCodeAt(this.pos+=startSkip)\n    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this$1.pos\n      ch = this$1.input.charCodeAt(this$1.pos)\n    }\n    if (this.options.onComment)\n      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$7.skipSpace = function() {\n    var this$1 = this;\n\n    loop: while (this.pos < this.input.length) {\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      switch (ch) {\n        case 32: case 160: // ' '\n          ++this$1.pos\n          break\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n            ++this$1.pos\n          }\n        case 10: case 8232: case 8233:\n          ++this$1.pos\n          if (this$1.options.locations) {\n            ++this$1.curLine\n            this$1.lineStart = this$1.pos\n          }\n          break\n        case 47: // '/'\n          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n            case 42: // '*'\n              this$1.skipBlockComment()\n              break\n            case 47:\n              this$1.skipLineComment(2)\n              break\n            default:\n              break loop\n          }\n          break\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this$1.pos\n          } else {\n            break loop\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$7.finishToken = function(type, val) {\n    this.end = this.pos\n    if (this.options.locations) this.endLoc = this.curPosition()\n    var prevType = this.type\n    this.type = type\n    this.value = val\n\n    this.updateContext(prevType)\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$7.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next >= 48 && next <= 57) return this.readNumber(true)\n    var next2 = this.input.charCodeAt(this.pos + 2)\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3\n      return this.finishToken(tt.ellipsis)\n    } else {\n      ++this.pos\n      return this.finishToken(tt.dot)\n    }\n  }\n\n  pp$7.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.slash, 1)\n  }\n\n  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    var tokentype = code === 42 ? tt.star : tt.modulo\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && next === 42) {\n      ++size\n      tokentype = tt.starstar\n      next = this.input.charCodeAt(this.pos + 2)\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tokentype, size)\n  }\n\n  pp$7.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n  }\n\n  pp$7.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.bitwiseXOR, 1)\n  }\n\n  pp$7.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) {\n      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3)\n        this.skipSpace()\n        return this.nextToken()\n      }\n      return this.finishOp(tt.incDec, 2)\n    }\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.plusMin, 1)\n  }\n\n  pp$7.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n      return this.finishOp(tt.bitShift, size)\n    }\n    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n        this.input.charCodeAt(this.pos + 3) == 45) {\n      if (this.inModule) this.unexpected()\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    if (next === 61) size = 2\n    return this.finishOp(tt.relational, size)\n  }\n\n  pp$7.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2\n      return this.finishToken(tt.arrow)\n    }\n    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n  }\n\n  pp$7.getTokenFromCode = function(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n      // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(tt.parenL)\n    case 41: ++this.pos; return this.finishToken(tt.parenR)\n    case 59: ++this.pos; return this.finishToken(tt.semi)\n    case 44: ++this.pos; return this.finishToken(tt.comma)\n    case 91: ++this.pos; return this.finishToken(tt.bracketL)\n    case 93: ++this.pos; return this.finishToken(tt.bracketR)\n    case 123: ++this.pos; return this.finishToken(tt.braceL)\n    case 125: ++this.pos; return this.finishToken(tt.braceR)\n    case 58: ++this.pos; return this.finishToken(tt.colon)\n    case 63: ++this.pos; return this.finishToken(tt.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) break\n      ++this.pos\n      return this.finishToken(tt.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1)\n      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n      // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(tt.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n  }\n\n  pp$7.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size)\n    this.pos += size\n    return this.finishToken(type, str)\n  }\n\n  // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n    try {\n      return new RegExp(src, flags)\n    } catch (e) {\n      if (throwErrorAt !== undefined) {\n        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n        throw e\n      }\n    }\n  }\n\n  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\n  pp$7.readRegexp = function() {\n    var this$1 = this;\n\n    var escaped, inClass, start = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n      var ch = this$1.input.charAt(this$1.pos)\n      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n      if (!escaped) {\n        if (ch === \"[\") inClass = true\n        else if (ch === \"]\" && inClass) inClass = false\n        else if (ch === \"/\" && !inClass) break\n        escaped = ch === \"\\\\\"\n      } else escaped = false\n      ++this$1.pos\n    }\n    var content = this.input.slice(start, this.pos)\n    ++this.pos\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1()\n    var tmp = content, tmpFlags = \"\"\n    if (mods) {\n      var validFlags = /^[gim]*$/\n      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n      if (mods.indexOf(\"u\") >= 0) {\n        if (regexpUnicodeSupport) {\n          tmpFlags = \"u\"\n        } else {\n          // Replace each astral symbol and every Unicode escape sequence that\n          // possibly represents an astral symbol or a paired surrogate with a\n          // single ASCII symbol to avoid throwing on regular expressions that\n          // are only valid in combination with the `/u` flag.\n          // Note: replacing with the ASCII symbol `x` might cause false\n          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n          // be replaced by `[x-b]` which throws an error.\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n            code = Number(\"0x\" + code)\n            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n            return \"x\"\n          })\n          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n          tmpFlags = tmpFlags.replace(\"u\", \"\")\n        }\n      }\n    }\n    // Detect invalid regular expressions.\n    var value = null\n    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n    // so don't do detection if we are running under Rhino\n    if (!isRhino) {\n      tryCreateRegexp(tmp, tmpFlags, start, this)\n      // Get a regular expression object for this pattern-flag pair, or `null` in\n      // case the current environment doesn't support the flags it uses.\n      value = tryCreateRegexp(content, mods)\n    }\n    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$7.readInt = function(radix, len) {\n    var this$1 = this;\n\n    var start = this.pos, total = 0\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this$1.input.charCodeAt(this$1.pos), val\n      if (code >= 97) val = code - 97 + 10 // a\n      else if (code >= 65) val = code - 65 + 10 // A\n      else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n      else val = Infinity\n      if (val >= radix) break\n      ++this$1.pos\n      total = total * radix + val\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) return null\n\n    return total\n  }\n\n  pp$7.readRadixNumber = function(radix) {\n    this.pos += 2 // 0x\n    var val = this.readInt(radix)\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$7.readNumber = function(startsWithDot) {\n    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    var next = this.input.charCodeAt(this.pos)\n    if (next === 46) { // '.'\n      ++this.pos\n      this.readInt(10)\n      isFloat = true\n      next = this.input.charCodeAt(this.pos)\n    }\n    if (next === 69 || next === 101) { // 'eE'\n      next = this.input.charCodeAt(++this.pos)\n      if (next === 43 || next === 45) ++this.pos // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n      isFloat = true\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n    var str = this.input.slice(start, this.pos), val\n    if (isFloat) val = parseFloat(str)\n    else if (!octal || str.length === 1) val = parseInt(str, 10)\n    else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n    else val = parseInt(str, 8)\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$7.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code\n\n    if (ch === 123) {\n      if (this.options.ecmaVersion < 6) this.unexpected()\n      var codePos = ++this.pos\n      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n      ++this.pos\n      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n    } else {\n      code = this.readHexChar(4)\n    }\n    return code\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code)\n    code -= 0x10000\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$7.readString = function(quote) {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = ++this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === quote) break\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(false)\n        chunkStart = this$1.pos\n      } else {\n        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n        ++this$1.pos\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++)\n    return this.finishToken(tt.string, out)\n  }\n\n  // Reads template string tokens.\n\n  pp$7.readTmplToken = function() {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n          if (ch === 36) {\n            this$1.pos += 2\n            return this$1.finishToken(tt.dollarBraceL)\n          } else {\n            ++this$1.pos\n            return this$1.finishToken(tt.backQuote)\n          }\n        }\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        return this$1.finishToken(tt.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(true)\n        chunkStart = this$1.pos\n      } else if (isNewLine(ch)) {\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        ++this$1.pos\n        switch (ch) {\n          case 13:\n            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n          case 10:\n            out += \"\\n\"\n            break\n          default:\n            out += String.fromCharCode(ch)\n            break\n        }\n        if (this$1.options.locations) {\n          ++this$1.curLine\n          this$1.lineStart = this$1.pos\n        }\n        chunkStart = this$1.pos\n      } else {\n        ++this$1.pos\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  pp$7.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos)\n    ++this.pos\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n      return \"\"\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n        var octal = parseInt(octalStr, 8)\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1)\n          octal = parseInt(octalStr, 8)\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\")\n        }\n        this.pos += octalStr.length - 1\n        return String.fromCharCode(octal)\n      }\n      return String.fromCharCode(ch)\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$7.readHexChar = function(len) {\n    var codePos = this.pos\n    var n = this.readInt(16, len)\n    if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n    return n\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$7.readWord1 = function() {\n    var this$1 = this;\n\n    this.containsEsc = false\n    var word = \"\", first = true, chunkStart = this.pos\n    var astral = this.options.ecmaVersion >= 6\n    while (this.pos < this.input.length) {\n      var ch = this$1.fullCharCodeAtPos()\n      if (isIdentifierChar(ch, astral)) {\n        this$1.pos += ch <= 0xffff ? 1 : 2\n      } else if (ch === 92) { // \"\\\"\n        this$1.containsEsc = true\n        word += this$1.input.slice(chunkStart, this$1.pos)\n        var escStart = this$1.pos\n        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n        ++this$1.pos\n        var esc = this$1.readCodePoint()\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          this$1.raise(escStart, \"Invalid Unicode escape\")\n        word += codePointToString(esc)\n        chunkStart = this$1.pos\n      } else {\n        break\n      }\n      first = false\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$7.readWord = function() {\n    var word = this.readWord1()\n    var type = tt.name\n    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n      type = keywordTypes[word]\n    return this.finishToken(type, word)\n  }\n\n  var version = \"3.3.0\"\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return new Parser(options, input).parse()\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    var p = new Parser(options, input, pos)\n    p.nextToken()\n    return p.parseExpression()\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return new Parser(options, input)\n  }\n\n  exports.version = version;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokenizer = tokenizer;\n  exports.Parser = Parser;\n  exports.plugins = plugins;\n  exports.defaultOptions = defaultOptions;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.getLineInfo = getLineInfo;\n  exports.Node = Node;\n  exports.TokenType = TokenType;\n  exports.tokTypes = tt;\n  exports.TokContext = TokContext;\n  exports.tokContexts = types;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.Token = Token;\n  exports.isNewLine = isNewLine;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n},{}],3:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar Annotations = (function () {\r\n    function Annotations() {\r\n        this.includes = [];\r\n        this.annotations = [];\r\n        this.processedAnnotations = {\r\n            \"Org.OData.Core.V1.Computed\": function (annotationInfo, typeDef) {\r\n                if (typeDef.definition && annotationInfo.property && typeDef.definition[annotationInfo.property]) {\r\n                    var propDef = typeDef.definition[annotationInfo.property];\r\n                    if (annotationInfo.annotation.bool === 'true') {\r\n                        if (propDef.required) {\r\n                            delete propDef.required;\r\n                        }\r\n                        propDef.computed = true;\r\n                    }\r\n                }\r\n            },\r\n            \"Org.OData.Core.V1.OptimisticConcurrency\": function (annotationInfo, typeDef) {\r\n                if (typeDef.definition && Array.isArray(annotationInfo.annotation.propertyPaths)) {\r\n                    annotationInfo.annotation.propertyPaths.forEach(function (property) {\r\n                        var propDef = typeDef.definition[property];\r\n                        if (propDef) {\r\n                            propDef.concurrencyMode = 'fixed';\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n    Annotations.prototype.addInclude = function (include) {\r\n        this.includes.push(include);\r\n    };\r\n    Annotations.prototype.processEntityPropertyAnnotations = function (typeName, property, annotations, isStatic) {\r\n        var _this = this;\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        annotations.forEach(function (annot) {\r\n            _this.annotations.push({\r\n                typeName: typeName,\r\n                property: property,\r\n                annotation: annot,\r\n                isStatic: isStatic\r\n            });\r\n        });\r\n    };\r\n    Annotations.prototype.processEntityAnnotations = function (typeName, annotations, isStatic) {\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        return this.processEntitySetAnnotations(typeName, annotations, isStatic);\r\n    };\r\n    Annotations.prototype.processEntitySetAnnotations = function (typeName, annotations, isStatic) {\r\n        var _this = this;\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        annotations.forEach(function (annot) {\r\n            var property = annot.path;\r\n            _this.annotations.push({\r\n                typeName: typeName,\r\n                property: property,\r\n                annotation: annot,\r\n                isStatic: isStatic\r\n            });\r\n        });\r\n    };\r\n    Annotations.prototype.processSchemaAnnotations = function (target, annotations, qualifier, isStatic) {\r\n        var _this = this;\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        annotations.forEach(function (annot) {\r\n            var targetParts = target.split('/');\r\n            var fullTypeName = targetParts[0];\r\n            var property = targetParts[1];\r\n            _this.annotations.push({\r\n                typeName: fullTypeName,\r\n                property: property,\r\n                annotation: annot,\r\n                qualifier: qualifier,\r\n                isStatic: isStatic\r\n            });\r\n        });\r\n    };\r\n    Annotations.prototype.preProcessAnnotation = function (typeDef) {\r\n        var _this = this;\r\n        this.annotations.forEach(function (annotationInfo) {\r\n            if (annotationInfo.typeName !== typeDef.typeName)\r\n                return;\r\n            var property = annotationInfo.property;\r\n            var annotation = annotationInfo.annotation;\r\n            var metadataKey = _this.resolveAnnotationTypeAlias(annotation.term);\r\n            if (annotation.qualifier) {\r\n                metadataKey = annotation.qualifier + ':' + metadataKey;\r\n            }\r\n            if (annotationInfo.qualifier) {\r\n                metadataKey = annotationInfo.qualifier + ':' + metadataKey;\r\n            }\r\n            if (typeof _this.processedAnnotations[metadataKey] === 'function') {\r\n                _this.processedAnnotations[metadataKey](annotationInfo, typeDef);\r\n            }\r\n        });\r\n    };\r\n    Annotations.prototype.addAnnotation = function (type) {\r\n        var _this = this;\r\n        this.annotations.forEach(function (annotationInfo) {\r\n            if (type.fullName !== annotationInfo.typeName)\r\n                return;\r\n            var property = annotationInfo.property;\r\n            var annotation = annotationInfo.annotation;\r\n            var value = undefined;\r\n            var valueResolverFuncName = 'value' + annotation.annotationType;\r\n            if (valueResolverFuncName in _this && typeof _this[valueResolverFuncName] === 'function') {\r\n                value = _this[valueResolverFuncName](annotation);\r\n            }\r\n            var metadataKey = _this.resolveAnnotationTypeAlias(annotation.term);\r\n            if (annotation.qualifier) {\r\n                metadataKey = annotation.qualifier + ':' + metadataKey;\r\n            }\r\n            if (annotationInfo.qualifier) {\r\n                metadataKey = annotationInfo.qualifier + ':' + metadataKey;\r\n            }\r\n            if (typeof Reflect !== 'undefined' && typeof Reflect.defineMetadata === 'function') {\r\n                if (property) {\r\n                    Reflect.defineMetadata(metadataKey, value, annotationInfo.isStatic ? type : type.prototype, property);\r\n                }\r\n                else {\r\n                    Reflect.defineMetadata(metadataKey, value, annotationInfo.isStatic ? type : type.prototype);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Annotations.prototype.annotationsText = function () {\r\n        var _this = this;\r\n        var src = 'if (typeof Reflect !== \"undefined\" && typeof Reflect.defineMetadata === \"function\") {\\n';\r\n        this.annotations.forEach(function (annotationInfo) {\r\n            var property = annotationInfo.property;\r\n            var annotation = annotationInfo.annotation;\r\n            var value = undefined;\r\n            var valueResolverFuncName = 'value' + annotation.annotationType;\r\n            if (valueResolverFuncName in _this && typeof _this[valueResolverFuncName] === 'function') {\r\n                value = _this[valueResolverFuncName](annotation);\r\n            }\r\n            var metadataKey = _this.resolveAnnotationTypeAlias(annotation.term);\r\n            if (annotation.qualifier) {\r\n                metadataKey = annotation.qualifier + ':' + metadataKey;\r\n            }\r\n            if (annotationInfo.qualifier) {\r\n                metadataKey = annotationInfo.qualifier + ':' + metadataKey;\r\n            }\r\n            var type = 'types[\"' + annotationInfo.typeName + '\"]' + (annotationInfo.isStatic ? '' : '.prototype');\r\n            if (property) {\r\n                src += '  Reflect.defineMetadata(\"' + metadataKey + '\", ' + JSON.stringify(value) + ', ' + type + ', \"' + property + '\")\\n';\r\n            }\r\n            else {\r\n                src += '  Reflect.defineMetadata(\"' + metadataKey + '\", ' + JSON.stringify(value) + ', ' + type + ')\\n';\r\n            }\r\n        });\r\n        src += '}\\n\\n';\r\n        return src;\r\n    };\r\n    Annotations.prototype.resolveAnnotationTypeAlias = function (term) {\r\n        for (var i = 0; i < this.includes.length; i++) {\r\n            var include = this.includes[i];\r\n            if (term.indexOf(include['alias'] + '.') === 0) {\r\n                return include['namespace'] + term.substr(include['alias'].length);\r\n            }\r\n        }\r\n        return term;\r\n    };\r\n    Annotations.prototype.valueUnknown = function (a) {\r\n        return undefined;\r\n    };\r\n    Annotations.prototype.valueBinary = function (a) {\r\n        return a.binary;\r\n    };\r\n    Annotations.prototype.valueBool = function (a) {\r\n        return a.bool;\r\n    };\r\n    Annotations.prototype.valueDate = function (a) {\r\n        return a.date;\r\n    };\r\n    Annotations.prototype.valueDateTimeOffset = function (a) {\r\n        return a.dateTimeOffset;\r\n    };\r\n    Annotations.prototype.valueDecimal = function (a) {\r\n        return a.decimal;\r\n    };\r\n    Annotations.prototype.valueDuration = function (a) {\r\n        return a.duration;\r\n    };\r\n    Annotations.prototype.valueEnumMember = function (a) {\r\n        return a.enumMember;\r\n    };\r\n    Annotations.prototype.valueFloat = function (a) {\r\n        return a.float;\r\n    };\r\n    Annotations.prototype.valueGuid = function (a) {\r\n        return a.guid;\r\n    };\r\n    Annotations.prototype.valueInt = function (a) {\r\n        return a.int;\r\n    };\r\n    Annotations.prototype.valueString = function (a) {\r\n        return a.string;\r\n    };\r\n    Annotations.prototype.valueTimeOfDay = function (a) {\r\n        return a.timeOfDay;\r\n    };\r\n    Annotations.prototype.valuePropertyPath = function (a) {\r\n        return a.propertyPaths;\r\n    };\r\n    Annotations.prototype.valueNavigationPropertyPath = function (a) {\r\n        return a.navigationPropertyPaths;\r\n    };\r\n    Annotations.prototype.valueAnnotationPath = function (a) {\r\n        return a.annotationPaths;\r\n    };\r\n    Annotations.prototype.valueNull = function (a) {\r\n        return null;\r\n    };\r\n    return Annotations;\r\n}());\r\nexports.Annotations = Annotations;\r\n\n},{}],4:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar JayData = (function () {\r\n    function JayData() {\r\n    }\r\n    JayData.src = \"declare module $data{\\r\\n    class Geography{}\\r\\n    class GeographyLineString{}\\r\\n    class GeographyPolygon{}\\r\\n    class GeographyMultiPoint{}\\r\\n    class GeographyMultiPolygon{}\\r\\n    class GeographyMultiLineString{}\\r\\n    class GeographyCollection{}\\r\\n\\r\\n    class Geometry{}\\r\\n    class GeometryLineString{}\\r\\n    class GeometryPolygon{}\\r\\n    class GeometryMultiPoint{}\\r\\n    class GeometryMultiPolygon{}\\r\\n    class GeometryMultiLineString{}\\r\\n    class GeometryCollection{}\\r\\n    \\r\\n    const enum EntityState{\\r\\n        Detached = 0,\\r\\n        Unchanged = 10,\\r\\n        Added = 20,\\r\\n        Modified = 30,\\r\\n        Deleted = 40\\r\\n    }\\r\\n    \\r\\n    interface MemberDefinition{\\r\\n        name: string;\\r\\n        type: any;\\r\\n        dataType: any;\\r\\n        elementType: any;\\r\\n        originalType: any;\\r\\n        kind: string;\\r\\n        classMember: boolean;\\r\\n        set: (value:any) => void;\\r\\n        get: () => any;\\r\\n        value: any;\\r\\n        initialValue: any;\\r\\n        method: Function;\\r\\n        enumerable: boolean;\\r\\n        configurable: boolean;\\r\\n        key: boolean;\\r\\n        computed: boolean;\\r\\n        storeOnObject: boolean;\\r\\n        monitorChanges: boolean;\\r\\n    }\\r\\n    \\r\\n    interface Event{\\r\\n        attach(eventHandler: (sender: any, event: any) => void ): void;\\r\\n        detach(eventHandler: () => void ): void;\\r\\n        fire(e: any, sender: any): void;\\r\\n    }\\r\\n\\r\\n    class Base<T>{\\r\\n        constructor();\\r\\n        getType: () => typeof Base;\\r\\n        \\r\\n        static addProperty(name:string, getterOrType:string | Function, setterOrGetter?:Function, setter?:Function): void;\\r\\n        static addMember(name:string, definition:any, isClassMember?:boolean): void;\\r\\n        static describeField(name:string, definition:any): void;\\r\\n        \\r\\n        static hasMetadata(key:string, property?:string): boolean;\\r\\n        static getAllMetadata(property?:string): any;\\r\\n        static getMetadata(key:string, property?:string): any;\\r\\n        static setMetadata(key:string, value:any, property?:string): void;\\r\\n    }\\r\\n    \\r\\n    class Enum extends Base<Enum>{\\r\\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Enum>;\\r\\n    }\\r\\n    function createEnum(name:string, enumType:any, enumDefinition?:any): Base<Enum>;\\r\\n    \\r\\n    class Entity extends Base<Entity>{\\r\\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Entity>;\\r\\n        \\r\\n        entityState: EntityState;\\r\\n        changedProperties: MemberDefinition[];\\r\\n        \\r\\n        propertyChanging: Event;\\r\\n        propertyChanged: Event;\\r\\n        propertyValidationError: Event;\\r\\n        isValid: boolean;\\r\\n    }\\r\\n    \\r\\n    class EntitySet<Ttype extends typeof Entity, T extends Entity> extends Queryable<T>{\\r\\n        add(item: T): T;\\r\\n        add(initData: {}): T;\\r\\n        attach(item: T): void;\\r\\n        attach(item: {}): void;\\r\\n        attachOrGet(item: T): T;\\r\\n        attachOrGet(item: {}): T;\\r\\n        detach(item: T): void;\\r\\n        detach(item: {}): void;\\r\\n        remove(item: T): void;\\r\\n        remove(item: {}): void;\\r\\n        elementType: Ttype;\\r\\n    }\\r\\n    \\r\\n    class EntityContext extends Base<EntityContext>{\\r\\n        constructor(config?: any);\\r\\n        onReady(): Promise<EntityContext>;\\r\\n        saveChanges(): Promise<number>;\\r\\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<EntityContext>;\\r\\n    }\\r\\n\\r\\n    class Queryable<T extends Entity | Edm.Primitive>{\\r\\n        filter(predicate: (it: T) => boolean, thisArg?: any): Queryable<T>;\\r\\n        filter(predicate: string, thisArg?: any): Queryable<T>;\\r\\n        map(projection: (it: T) => any): Queryable<any>;\\r\\n        map(projection: string): Queryable<any>;\\r\\n        orderBy(predicate: (it: T) => void): Queryable<T>;\\r\\n        orderBy(predicate: string): Queryable<T>;\\r\\n        orderByDescending(predicate: (it: T) => void): Queryable<T>;\\r\\n        orderByDescending(predicate: string): Queryable<T>;\\r\\n        include(selector: string): Queryable<T>;\\r\\n        skip(amount: number): Queryable<T>;\\r\\n        take(amount: number): Queryable<T>;\\r\\n        forEach(handler: (it: T) => void): Promise<T>;\\r\\n        length(): Promise<number>;\\r\\n        toArray(): Promise<T[]>;\\r\\n        single(predicate: (it: T) => boolean, params?: any): Promise<T>;\\r\\n        single(predicate: string, params?: any): Promise<T>;\\r\\n        first(predicate?: (it: T) => boolean, params?: any): Promise<T>;\\r\\n        first(predicate?: string, params?: any): Promise<T>;\\r\\n        removeAll(): Promise<number>;\\r\\n    }\\r\\n    class ServiceAction{}\\r\\n    class ServiceFunction{}\\r\\n    \\r\\n    function implementation(name:string): typeof Base;\\r\\n}\\r\\n\\r\\ndeclare module Edm {\\r\\n    type Boolean = boolean;\\r\\n    type Binary = Uint8Array;\\r\\n    type DateTime = Date;\\r\\n    type DateTimeOffset = Date;\\r\\n    type Duration = string;\\r\\n    type TimeOfDay = string;\\r\\n    type Date = string;\\r\\n    type Time = string;\\r\\n    type Decimal = string;\\r\\n    type Single = number;\\r\\n    type Float = number;\\r\\n    type Double = number;\\r\\n    type Guid = string;\\r\\n    type Int16 = number;\\r\\n    type Int32 = number;\\r\\n    type Int64 = string;\\r\\n    type Byte = number;\\r\\n    type SByte = number;\\r\\n    type String = string;\\r\\n    type GeographyPoint = $data.Geography;\\r\\n    type GeographyLineString = $data.GeographyLineString;\\r\\n    type GeographyPolygon = $data.GeographyPolygon;\\r\\n    type GeographyMultiPoint = $data.GeographyMultiPoint;\\r\\n    type GeographyMultiPolygon = $data.GeographyMultiPolygon;\\r\\n    type GeographyMultiLineString = $data.GeographyMultiLineString;\\r\\n    type GeographyCollection = $data.GeographyCollection;\\r\\n    type GeometryPoint = $data.Geometry;\\r\\n    type GeometryLineString = $data.GeometryLineString;\\r\\n    type GeometryPolygon = $data.GeometryPolygon;\\r\\n    type GeometryMultiPoint = $data.GeometryMultiPoint;\\r\\n    type GeometryMultiPolygon = $data.GeometryMultiPolygon;\\r\\n    type GeometryMultiLineString = $data.GeometryMultiLineString;\\r\\n    type GeometryCollection = $data.GeometryCollection;\\r\\n    type Primitive =\\r\\n        Boolean | Binary | Guid | DateTime | DateTimeOffset | Duration | TimeOfDay | Date | Time |\\r\\n        Decimal | Single | Float | Double | Int16 | Int32 | Int64 | Byte | SByte | String |\\r\\n        GeographyPoint | GeographyLineString | GeographyPolygon | GeographyMultiPoint | GeographyMultiLineString | GeographyMultiPolygon | GeographyCollection |\\r\\n        GeometryPoint | GeometryLineString | GeometryPolygon | GeometryMultiPoint | GeometryMultiLineString | GeometryMultiPolygon | GeometryCollection;\\r\\n}\";\r\n    return JayData;\r\n}());\r\nexports.JayData = JayData;\r\n\n},{}],5:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar annotations_1 = _dereq_('./annotations');\r\nvar dts_1 = _dereq_('./dts');\r\nvar containsField = function (obj, field, cb) {\r\n    // if (field in (obj || {})) {\r\n    //     cb(obj[field])\r\n    // }\r\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\r\n        cb(obj[field]);\r\n    }\r\n};\r\nvar parsebool = function (b, d) {\r\n    if (\"boolean\" === typeof b) {\r\n        return b;\r\n    }\r\n    switch (b) {\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return d;\r\n    }\r\n};\r\nvar _collectionRegex = /^Collection\\((.*)\\)$/;\r\nvar dtsTypeMapping = {\r\n    'Edm.Boolean': 'boolean',\r\n    'Edm.Binary': 'Uint8Array',\r\n    'Edm.DateTime': 'Date',\r\n    'Edm.DateTimeOffset': 'Date',\r\n    'Edm.Time': 'string',\r\n    'Edm.Duration': 'string',\r\n    'Edm.TimeOfDay': 'string',\r\n    'Edm.Date': 'string',\r\n    'Edm.Decimal': 'string',\r\n    'Edm.Single': 'number',\r\n    'Edm.Float': 'number',\r\n    'Edm.Double': 'number',\r\n    'Edm.Guid': 'string',\r\n    'Edm.Int16': 'number',\r\n    'Edm.Int32': 'number',\r\n    'Edm.Int64': 'string',\r\n    'Edm.Byte': 'number',\r\n    'Edm.SByte': 'number',\r\n    'Edm.String': 'string',\r\n    'Edm.GeographyPoint': '$data.Geography',\r\n    'Edm.GeographyLineString': '$data.GeographyLineString',\r\n    'Edm.GeographyPolygon': '$data.GeographyPolygon',\r\n    'Edm.GeographyMultiPoint': '$data.GeographyMultiPoint',\r\n    'Edm.GeographyMultiPolygon': '$data.GeographyMultiPolygon',\r\n    'Edm.GeographyMultiLineString': '$data.GeographyMultiLineString',\r\n    'Edm.GeographyCollection': '$data.GeographyCollection',\r\n    'Edm.GeometryPoint': '$data.Geometry',\r\n    'Edm.GeometryLineString': '$data.GeometryLineString',\r\n    'Edm.GeometryPolygon': '$data.GeometryPolygon',\r\n    'Edm.GeometryMultiPoint': '$data.GeometryMultiPoint',\r\n    'Edm.GeometryMultiPolygon': '$data.GeometryMultiPolygon',\r\n    'Edm.GeometryMultiLineString': '$data.GeometryMultiLineString',\r\n    'Edm.GeometryCollection': '$data.GeometryCollection'\r\n};\r\nvar Metadata = (function () {\r\n    function Metadata($data, options, metadata) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.metadata = metadata;\r\n        this.options.container = this.$data.Container; //this.options.container || $data.createContainer()\r\n        this.options.baseType = this.options.baseType || '$data.Entity';\r\n        this.options.entitySetType = this.options.entitySetType || '$data.EntitySet';\r\n        this.options.contextType = this.options.contextType || '$data.EntityContext';\r\n        this.options.collectionBaseType = this.options.collectionBaseType || 'Array';\r\n        this.annotationHandler = new annotations_1.Annotations();\r\n    }\r\n    Metadata.prototype._getMaxValue = function (maxValue) {\r\n        if (\"number\" === typeof maxValue)\r\n            return maxValue;\r\n        if (\"max\" === maxValue)\r\n            return Number.MAX_VALUE;\r\n        return parseInt(maxValue);\r\n    };\r\n    Metadata.prototype.createTypeDefinition = function (propertySchema, definition) {\r\n        var _this = this;\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.type = _this.options.collectionBaseType;\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.type = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createReturnTypeDefinition = function (propertySchema, definition) {\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.returnType = '$data.Queryable';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.returnType = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createProperty = function (entityFullName, entitySchema, propertySchema) {\r\n        var _this = this;\r\n        var self = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"maxLength\", function (v) {\r\n            definition.maxLength = _this._getMaxValue(v);\r\n        });\r\n        containsField(entitySchema, \"key\", function (keys) {\r\n            if (keys.propertyRefs.some(function (pr) { return pr.name === propertySchema.name; })) {\r\n                definition.key = true;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityPropertyAnnotations(entityFullName, propertySchema.name, v);\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createNavigationProperty = function (entityFullName, entitySchema, propertySchema) {\r\n        var _this = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"partner\", function (p) {\r\n            definition.inverseProperty = p;\r\n        });\r\n        if (!definition.inverseProperty) {\r\n            definition.inverseProperty = '$$unbound';\r\n        }\r\n        containsField(propertySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityPropertyAnnotations(entityFullName, propertySchema.name, v);\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createEntityDefinition = function (entitySchema, entityFullName) {\r\n        var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entityFullName, entitySchema));\r\n        var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entityFullName, entitySchema));\r\n        props = props.concat(navigationProps);\r\n        var result = props.reduce(function (p, c) {\r\n            p[c.name] = c.definition;\r\n            return p;\r\n        }, {});\r\n        return result;\r\n    };\r\n    Metadata.prototype.createEntityType = function (entitySchema, namespace) {\r\n        var _this = this;\r\n        var baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType);\r\n        var entityFullName = namespace + \".\" + entitySchema.name;\r\n        var definition = this.createEntityDefinition(entitySchema, entityFullName);\r\n        var staticDefinition = {};\r\n        containsField(entitySchema, \"openType\", function (v) {\r\n            if (parsebool(v, false)) {\r\n                staticDefinition.openType = { value: true };\r\n            }\r\n        });\r\n        containsField(entitySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityAnnotations(entityFullName, v);\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: entityFullName,\r\n            baseType: baseType,\r\n            params: [entityFullName, this.options.container, definition, staticDefinition],\r\n            definition: definition,\r\n            type: 'entity'\r\n        };\r\n    };\r\n    Metadata.prototype.createEnumOption = function (enumFullName, entitySchema, propertySchema, i) {\r\n        var _this = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {\r\n            name: propertySchema.name,\r\n            index: i\r\n        };\r\n        containsField(propertySchema, \"value\", function (value) {\r\n            var v = +value;\r\n            if (!isNaN(v)) {\r\n                definition.value = v;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityPropertyAnnotations(enumFullName, propertySchema.name, v, true);\r\n        });\r\n        return definition;\r\n    };\r\n    Metadata.prototype.createEnumDefinition = function (enumSchema, enumFullName) {\r\n        var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumFullName, enumSchema));\r\n        return props;\r\n    };\r\n    Metadata.prototype.createEnumType = function (enumSchema, namespace) {\r\n        var _this = this;\r\n        var self = this;\r\n        var enumFullName = namespace + \".\" + enumSchema.name;\r\n        var definition = this.createEnumDefinition(enumSchema, enumFullName);\r\n        containsField(enumSchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityAnnotations(enumFullName, v, true);\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: enumFullName,\r\n            baseType: '$data.Enum',\r\n            params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\r\n            definition: definition,\r\n            type: 'enum'\r\n        };\r\n    };\r\n    Metadata.prototype.createEntitySetProperty = function (entitySetSchema, contextSchema) {\r\n        var _this = this;\r\n        //var c = this.options.container\r\n        var t = entitySetSchema.entityType; //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\r\n        var prop = {\r\n            name: entitySetSchema.name,\r\n            definition: {\r\n                type: this.options.entitySetType,\r\n                elementType: t\r\n            }\r\n        };\r\n        containsField(entitySetSchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntitySetAnnotations(t, v);\r\n        });\r\n        return prop;\r\n    };\r\n    Metadata.prototype.indexBy = function (fieldName, pick) {\r\n        return [function (p, c) { p[c[fieldName]] = c[pick]; return p; }, {}];\r\n    };\r\n    Metadata.prototype.createContextDefinition = function (contextSchema, namespace) {\r\n        var _this = this;\r\n        var props = (contextSchema.entitySets || []).map(function (es) { return _this.createEntitySetProperty(es, contextSchema); });\r\n        var result = props.reduce.apply(props, this.indexBy(\"name\", \"definition\"));\r\n        return result;\r\n    };\r\n    Metadata.prototype.createContextType = function (contextSchema, namespace) {\r\n        if (Array.isArray(contextSchema)) {\r\n            throw new Error(\"Array type is not supported here\");\r\n        }\r\n        var definition = this.createContextDefinition(contextSchema, namespace);\r\n        var baseType = this.options.contextType;\r\n        var typeName = namespace + \".\" + contextSchema.name;\r\n        var contextImportMethods = [];\r\n        contextSchema.actionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.actionImports);\r\n        contextSchema.functionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.functionImports);\r\n        return {\r\n            namespace: namespace,\r\n            typeName: typeName,\r\n            baseType: baseType,\r\n            params: [typeName, this.options.container, definition],\r\n            definition: definition,\r\n            type: 'context',\r\n            contextImportMethods: contextImportMethods\r\n        };\r\n    };\r\n    Metadata.prototype.createMethodParameter = function (parameter, definition) {\r\n        var paramDef = {\r\n            name: parameter.name\r\n        };\r\n        this.createTypeDefinition(parameter, paramDef);\r\n        definition.params.push(paramDef);\r\n    };\r\n    Metadata.prototype.applyBoundMethod = function (actionInfo, ns, typeDefinitions, type) {\r\n        var _this = this;\r\n        var definition = {\r\n            type: type,\r\n            namespace: ns,\r\n            returnType: null,\r\n            params: []\r\n        };\r\n        containsField(actionInfo, \"returnType\", function (value) {\r\n            _this.createReturnTypeDefinition(value, definition);\r\n        });\r\n        var parameters = [].concat(actionInfo.parameters);\r\n        parameters.forEach(function (p) { return _this.createMethodParameter(p, definition); });\r\n        if (parsebool(actionInfo.isBound, false)) {\r\n            var bindingParameter_1 = definition.params.shift();\r\n            if (bindingParameter_1.type === this.options.collectionBaseType) {\r\n                var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.namespace === ns && d.type === 'context'; });\r\n                filteredContextDefinitions.forEach(function (ctx) {\r\n                    for (var setName in ctx.definition) {\r\n                        var set = ctx.definition[setName];\r\n                        if (set.elementType === bindingParameter_1.elementType) {\r\n                            set.actions = set.actions || {};\r\n                            set.actions[actionInfo.name] = definition;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var filteredTypeDefinitions = typeDefinitions.filter(function (d) { return d.typeName === bindingParameter_1.type && d.type === 'entity'; });\r\n                filteredTypeDefinitions.forEach(function (t) {\r\n                    t.definition[actionInfo.name] = definition;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            delete definition.namespace;\r\n            var methodFullName_1 = ns + '.' + actionInfo.name;\r\n            var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.type === 'context'; });\r\n            filteredContextDefinitions.forEach(function (ctx) {\r\n                ctx.contextImportMethods.forEach(function (methodImportInfo) {\r\n                    if (methodImportInfo.action === methodFullName_1 || methodImportInfo.function === methodFullName_1) {\r\n                        ctx.definition[actionInfo.name] = definition;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Metadata.prototype.processMetadata = function (createdTypes) {\r\n        var _this = this;\r\n        var types = createdTypes || [];\r\n        var typeDefinitions = [];\r\n        var serviceMethods = [];\r\n        containsField(this.metadata, \"references\", function (references) {\r\n            references.forEach(function (ref) {\r\n                containsField(ref, \"includes\", function (includes) {\r\n                    includes.forEach(function (include) {\r\n                        _this.annotationHandler.addInclude(include);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        var dtsModules = {};\r\n        types.dts = '/*//////////////////////////////////////////////////////////////////////////////////////\\n' +\r\n            '//////     Autogenerated by JaySvcUtil http://JayData.org for more info        /////////\\n' +\r\n            '//////                      OData  V4  TypeScript                              /////////\\n' +\r\n            '//////////////////////////////////////////////////////////////////////////////////////*/\\n\\n';\r\n        types.dts += dts_1.JayData.src + '\\n\\n';\r\n        //types.dts += 'declare module Edm {\\n' + Object.keys(dtsTypeMapping).map(t => '    type ' + t.split('.')[1] + ' = ' + dtsTypeMapping[t] + ';').join('\\n') + '\\n}\\n\\n';\r\n        var self = this;\r\n        this.metadata.dataServices.schemas.forEach(function (schema) {\r\n            var ns = schema.namespace;\r\n            dtsModules[ns] = ['declare module ' + ns + ' {', '}'];\r\n            if (schema.enumTypes) {\r\n                var enumTypes = schema.enumTypes.map(function (ct) { return _this.createEnumType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, enumTypes);\r\n            }\r\n            if (schema.complexTypes) {\r\n                var complexTypes = schema.complexTypes.map(function (ct) { return _this.createEntityType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, complexTypes);\r\n            }\r\n            if (schema.entityTypes) {\r\n                var entityTypes = schema.entityTypes.map(function (et) { return _this.createEntityType(et, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, entityTypes);\r\n            }\r\n            if (schema.actions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.actions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceAction'); }; }));\r\n            }\r\n            if (schema.functions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.functions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceFunction'); }; }));\r\n            }\r\n            if (schema.entityContainer) {\r\n                var contexts = schema.entityContainer.map(function (ctx) { return _this.createContextType(ctx, self.options.namespace || ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, contexts);\r\n            }\r\n            //console.log('annotations', schema)\r\n            containsField(schema, 'annotations', function (annotations) {\r\n                annotations.forEach(function (annot) {\r\n                    containsField(annot, \"target\", function (target) {\r\n                        containsField(annot, \"annotations\", function (v) {\r\n                            _this.annotationHandler.processSchemaAnnotations(target, v, annot.qualifier);\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        serviceMethods.forEach(function (m) { return m(typeDefinitions); });\r\n        var contextFullName;\r\n        types.src = '(function(mod) {\\n' +\r\n            '  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports, require(\"jaydata/core\")); // CommonJS\\n' +\r\n            '  if (typeof define == \"function\" && define.amd) return define([\"exports\", \"jaydata/core\"], mod); // AMD\\n' +\r\n            '  mod($data.generatedContext || ($data.generatedContext = {}), $data); // Plain browser env\\n' +\r\n            '})(function(exports, $data) {\\n\\n' +\r\n            'var types = {};\\n\\n';\r\n        typeDefinitions = this.orderTypeDefinitions(typeDefinitions);\r\n        types.push.apply(types, typeDefinitions.map(function (d) {\r\n            _this.annotationHandler.preProcessAnnotation(d);\r\n            var dtsm = dtsModules[d.namespace];\r\n            if (!dtsm) {\r\n                dtsm = dtsModules[d.namespace] = ['declare module ' + d.namespace + ' {', '}'];\r\n            }\r\n            var dtsPart = [];\r\n            var srcPart = '';\r\n            if (d.baseType == '$data.Enum') {\r\n                dtsPart.push('    export enum ' + d.typeName.split('.').pop() + ' {');\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0) {\r\n                    Object.keys(d.params[3]).forEach(function (dp) { return dtsPart.push('        ' + d.params[3][dp].name + ','); });\r\n                }\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = $data.createEnum(\"' + d.params[0] + '\", [\\n' +\r\n                    Object.keys(d.params[3]).map(function (dp) { return '  ' + _this._createPropertyDefString(d.params[3][dp]); }).join(',\\n') +\r\n                    '\\n]);\\n\\n';\r\n            }\r\n            else {\r\n                dtsPart.push('    export class ' + d.typeName.split('.').pop() + ' extends ' + d.baseType + ' {');\r\n                if (d.baseType == self.options.contextType) {\r\n                    dtsPart.push('        onReady(): Promise<' + d.typeName.split('.').pop() + '>;');\r\n                    dtsPart.push('');\r\n                }\r\n                else {\r\n                    dtsPart.push('        constructor();');\r\n                    var ctr = '        constructor(initData: { ';\r\n                    if (d.params[2] && Object.keys(d.params[2]).length > 0) {\r\n                        ctr += Object.keys(d.params[2]).map(function (dp) { return dp + '?: ' + (d.params[2][dp].type == 'Array' ? d.params[2][dp].elementType + '[]' : d.params[2][dp].type); }).join('; ');\r\n                    }\r\n                    ctr += ' });';\r\n                    dtsPart.push(ctr);\r\n                    dtsPart.push('');\r\n                }\r\n                var typeName = d.baseType;\r\n                if (d.baseType == _this.options.contextType) {\r\n                    srcPart += 'exports.type = ';\r\n                    contextFullName = d.typeName;\r\n                }\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = ' +\r\n                    (typeName == _this.options.baseType || typeName == _this.options.contextType ? ('$data(\"' + typeName + '\")') : 'types[\"' + typeName + '\"]') +\r\n                    '.extend(\"' + d.params[0] + '\", ';\r\n                if (d.params[2] && Object.keys(d.params[2]).length > 0) {\r\n                    srcPart += '{\\n' + Object.keys(d.params[2]).map(function (dp) { return '  ' + dp + ': ' + _this._createPropertyDefString(d.params[2][dp]); }).join(',\\n') + '\\n}';\r\n                    if (d.baseType == _this.options.contextType) {\r\n                        Object.keys(d.params[2]).forEach(function (dp) { return dtsPart.push('        ' + dp + ': ' + _this._typeToTS(d.params[2][dp].type, d.params[2][dp].elementType, d.params[2][dp]) + ';'); });\r\n                    }\r\n                    else {\r\n                        Object.keys(d.params[2]).forEach(function (dp) { return dtsPart.push('        ' + dp + ': ' + _this._typeToTS(d.params[2][dp].type, d.params[2][dp].elementType, d.params[2][dp]) + ';'); });\r\n                    }\r\n                }\r\n                else\r\n                    srcPart += 'null';\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0) {\r\n                    srcPart += ', {\\n' + Object.keys(d.params[3]).map(function (dp) { return '  ' + dp + ': ' + _this._createPropertyDefString(d.params[3][dp]); }).join(',\\n') + '\\n}';\r\n                }\r\n                srcPart += ');\\n\\n';\r\n            }\r\n            types.src += srcPart;\r\n            dtsPart.push('    }');\r\n            dtsm.splice(1, 0, dtsPart.join('\\n'));\r\n            if (_this.options.debug)\r\n                console.log('Type generated:', d.params[0]);\r\n            if (_this.options.generateTypes !== false) {\r\n                var baseType = _this.options.container.resolveType(d.baseType);\r\n                var type = baseType.extend.apply(baseType, d.params);\r\n                _this.annotationHandler.addAnnotation(type);\r\n                return type;\r\n            }\r\n        }));\r\n        types.src += 'var ctxType = exports.type;\\n' +\r\n            'exports.factory = function(config){\\n' +\r\n            '  if (ctxType){\\n' +\r\n            '    var cfg = $data.typeSystem.extend({\\n' +\r\n            '      name: \"oData\",\\n' +\r\n            '      oDataServiceHost: \"' + (this.options.url && this.options.url.replace('/$metadata', '') || '') + '\",\\n' +\r\n            '      withCredentials: ' + (this.options.withCredentials || false) + ',\\n' +\r\n            '      maxDataServiceVersion: \"' + (this.options.maxDataServiceVersion || '4.0') + '\"\\n' +\r\n            '    }, config);\\n' +\r\n            '    return new ctxType(cfg);\\n' +\r\n            '  }else{\\n' +\r\n            '    return null;\\n' +\r\n            '  }\\n' +\r\n            '};\\n\\n';\r\n        if (this.options.autoCreateContext) {\r\n            var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n            types.src += 'exports[\"' + contextName + '\"] = exports.factory();\\n\\n';\r\n        }\r\n        types.src += this.annotationHandler.annotationsText();\r\n        types.src += '});';\r\n        types.dts += Object.keys(dtsModules).filter(function (m) { return dtsModules[m] && dtsModules[m].length > 2; }).map(function (m) { return dtsModules[m].join('\\n\\n'); }).join('\\n\\n');\r\n        if (contextFullName) {\r\n            var mod = ['\\n\\nexport var type: typeof ' + contextFullName + ';',\r\n                'export var factory: (config:any) => ' + contextFullName + ';'];\r\n            if (this.options.autoCreateContext) {\r\n                var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n                mod.push('export var ' + contextName + ': ' + contextFullName + ';');\r\n            }\r\n            types.dts += mod.join('\\n');\r\n        }\r\n        if (this.options.generateTypes === false) {\r\n            types.length = 0;\r\n        }\r\n        return types;\r\n    };\r\n    Metadata.prototype._createPropertyDefString = function (definition) {\r\n        if (definition.concurrencyMode) {\r\n            return JSON.stringify(definition).replace('\"concurrencyMode\":\"fixed\"}', '\"concurrencyMode\":$data.ConcurrencyMode.Fixed}');\r\n        }\r\n        else {\r\n            return JSON.stringify(definition);\r\n        }\r\n    };\r\n    Metadata.prototype._typeToTS = function (type, elementType, definition) {\r\n        var _this = this;\r\n        if (type == this.options.entitySetType) {\r\n            return '$data.EntitySet<typeof ' + elementType + ', ' + elementType + '>';\r\n        }\r\n        else if (type == '$data.Queryable') {\r\n            return '$data.Queryable<' + elementType + '>';\r\n        }\r\n        else if (type == this.options.collectionBaseType) {\r\n            return elementType + '[]';\r\n        }\r\n        else if (type == '$data.ServiceAction') {\r\n            return '{ (' + (definition.params.length > 0 ? definition.params.map(function (p) { return p.name + ': ' + _this._typeToTS(p.type, p.elementType, p); }).join(', ') : '') + '): Promise<void>; }';\r\n        }\r\n        else if (type == '$data.ServiceFunction') {\r\n            var t = this._typeToTS(definition.returnType, definition.elementType, definition);\r\n            if (t.indexOf('$data.Queryable') < 0)\r\n                t = 'Promise<' + t + '>';\r\n            return '{ (' + (definition.params.length > 0 ? definition.params.map(function (p) { return p.name + ': ' + _this._typeToTS(p.type, p.elementType, p); }).join(', ') : '') + '): ' + t + '; }';\r\n        }\r\n        else\r\n            return type;\r\n    };\r\n    Metadata.prototype.orderTypeDefinitions = function (typeDefinitions) {\r\n        var contextTypes = typeDefinitions.filter(function (t) { return t.type === 'context'; });\r\n        var ordered = [];\r\n        var dependants = [].concat(typeDefinitions.filter(function (t) { return t.type !== 'context'; }));\r\n        var addedTypes;\r\n        var baseType = this.options.baseType;\r\n        var dependantCount = Number.MAX_VALUE;\r\n        while (dependants.length) {\r\n            var dependantItems = [].concat(dependants);\r\n            dependants.length = 0;\r\n            dependantItems.forEach(function (typeDef) {\r\n                if (dependantCount === dependantItems.length ||\r\n                    typeDef.type !== \"entity\" ||\r\n                    typeDef.baseType === baseType ||\r\n                    ordered.some(function (t) { return t.typeName === typeDef.baseType; })) {\r\n                    ordered.push(typeDef);\r\n                }\r\n                else {\r\n                    dependants.push(typeDef);\r\n                }\r\n            });\r\n            dependantCount = dependantItems.length;\r\n        }\r\n        return ordered.concat(contextTypes);\r\n    };\r\n    return Metadata;\r\n}());\r\nexports.Metadata = Metadata;\r\n\n},{\"./annotations\":3,\"./dts\":4}],6:[function(_dereq_,module,exports){\n\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar odata_v4_metadata_1 = _dereq_('odata-v4-metadata');\r\nvar metadata_1 = _dereq_('./metadata');\r\nvar _odatajs = _dereq_('jaydata-odatajs');\r\nvar extend = _dereq_('extend');\r\nexports.odatajs = _odatajs;\r\nvar MetadataHandler = (function () {\r\n    function MetadataHandler($data, options) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.prepareRequest = options.prepareRequest || function () { };\r\n        if (typeof exports.odatajs === 'undefined' || typeof exports.odatajs.oData === 'undefined') {\r\n            console.error('Not Found!:', 'odatajs is required');\r\n        }\r\n        else {\r\n            this.oData = exports.odatajs.oData;\r\n        }\r\n    }\r\n    MetadataHandler.prototype.parse = function (text) {\r\n        var _this = this;\r\n        var edmMetadata = new odata_v4_metadata_1.Edm.Edmx(this.oData.metadata.metadataParser(null, text));\r\n        var metadata = new metadata_1.Metadata(this.$data, this.options, edmMetadata);\r\n        var types = metadata.processMetadata();\r\n        var contextType = types.filter(function (t) { return t.isAssignableTo(_this.$data.EntityContext); })[0];\r\n        var factory = this._createFactoryFunc(contextType);\r\n        factory.type = contextType;\r\n        factory.src = types.src;\r\n        return factory;\r\n    };\r\n    MetadataHandler.prototype.load = function () {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var serviceUrl = self.options.url.replace('/$metadata', '');\r\n            var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata';\r\n            self.options.serivceUri = serviceUrl;\r\n            var requestData = [\r\n                {\r\n                    requestUri: metadataUrl,\r\n                    method: self.options.method || \"GET\",\r\n                    headers: self.options.headers || {}\r\n                },\r\n                function (data) {\r\n                    var edmMetadata = new odata_v4_metadata_1.Edm.Edmx(data);\r\n                    var metadata = new metadata_1.Metadata(self.$data, self.options, edmMetadata);\r\n                    var types = metadata.processMetadata();\r\n                    var contextType = types.filter(function (t) { return t.isAssignableTo(self.$data.EntityContext); })[0];\r\n                    var factory = self._createFactoryFunc(contextType);\r\n                    factory.type = contextType;\r\n                    factory.src = types.src;\r\n                    factory.dts = types.dts;\r\n                    resolve(factory);\r\n                },\r\n                reject,\r\n                self.oData.metadataHandler\r\n            ];\r\n            self._appendBasicAuth(requestData[0], self.options.user, self.options.password, self.options.withCredentials);\r\n            self.prepareRequest.call(self, requestData);\r\n            self.oData.request.apply(self.oData, requestData);\r\n        });\r\n    };\r\n    MetadataHandler.prototype._createFactoryFunc = function (ctxType) {\r\n        var _this = this;\r\n        return function (config) {\r\n            if (ctxType) {\r\n                var cfg = extend({\r\n                    name: 'oData',\r\n                    oDataServiceHost: _this.options.url.replace('/$metadata', ''),\r\n                    user: _this.options.user,\r\n                    password: _this.options.password,\r\n                    withCredentials: _this.options.withCredentials,\r\n                    maxDataServiceVersion: _this.options.maxDataServiceVersion || '4.0'\r\n                }, config);\r\n                return new ctxType(cfg);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n    };\r\n    MetadataHandler.prototype._appendBasicAuth = function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials) {\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    };\r\n    MetadataHandler.prototype.__encodeBase64 = function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n            \"QRSTUVWXYZabcdef\" +\r\n            \"ghijklmnopqrstuv\" +\r\n            \"wxyz0123456789+/\" +\r\n            \"=\";\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            }\r\n            else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            base64 = base64 +\r\n                b64array.charAt(enc1) +\r\n                b64array.charAt(enc2) +\r\n                b64array.charAt(enc3) +\r\n                b64array.charAt(enc4);\r\n        } while (i < input.length);\r\n        return base64;\r\n    };\r\n    return MetadataHandler;\r\n}());\r\nexports.MetadataHandler = MetadataHandler;\r\n\n},{\"./metadata\":5,\"extend\":2,\"jaydata-odatajs\":9,\"odata-v4-metadata\":21}],7:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar extend = _dereq_('extend');\r\nvar metadataHandler_1 = _dereq_('./metadataHandler');\r\nvar jaydata_error_handler_1 = _dereq_('jaydata-error-handler');\r\nvar jaydata_promise_handler_1 = _dereq_('jaydata-promise-handler');\r\nvar metadataHandler_2 = _dereq_('./metadataHandler');\r\nexports.MetadataHandler = metadataHandler_2.MetadataHandler;\r\nexports.odatajs = metadataHandler_2.odatajs;\r\nvar ServiceParams = (function () {\r\n    function ServiceParams() {\r\n        this.config = {};\r\n    }\r\n    return ServiceParams;\r\n}());\r\nexports.ServiceParams = ServiceParams;\r\nvar DynamicMetadata = (function () {\r\n    function DynamicMetadata($data) {\r\n        this.$data = $data;\r\n    }\r\n    DynamicMetadata.prototype.service = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = this.$data && this.$data.PromiseHandler ? new this.$data.PromiseHandler() : new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        var self = this;\r\n        new metadataHandler_1.MetadataHandler(this.$data, params.config).load().then(function (factory) {\r\n            var type = factory.type;\r\n            //register to local store\r\n            var storeAlias = params.config.serviceName || params.config.storeAlias;\r\n            if (storeAlias && 'addStore' in self.$data) {\r\n                self.$data.addStore(storeAlias, factory, params.config.isDefault === undefined || params.config.isDefault);\r\n            }\r\n            _callback.success(factory, type);\r\n        }, function (err) {\r\n            _callback.error(err);\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.prototype.initService = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = this.$data && this.$data.PromiseHandler ? new this.$data.PromiseHandler() : new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        this.service(params.config.url, params.config, {\r\n            success: function (factory) {\r\n                var ctx = factory();\r\n                if (ctx) {\r\n                    return ctx.onReady().then(function (ctx) {\r\n                        ctx.factory = factory;\r\n                        ctx.type = factory.type;\r\n                        _callback.success(ctx, factory, factory.type);\r\n                    }, _callback.error);\r\n                }\r\n                return _callback.error(new jaydata_error_handler_1.Exception(\"Missing Context Type\"));\r\n            },\r\n            error: _callback.error\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.use = function ($data) {\r\n        var dynamicMetadata = new DynamicMetadata($data);\r\n        $data.service = dynamicMetadata.service;\r\n        $data.initService = dynamicMetadata.initService;\r\n    };\r\n    DynamicMetadata.getParam = function (paramValue, params) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    params.callback = paramValue;\r\n                }\r\n                else {\r\n                    params.config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                params.callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return DynamicMetadata;\r\n}());\r\nexports.DynamicMetadata = DynamicMetadata;\r\n\n},{\"./metadataHandler\":6,\"extend\":2,\"jaydata-error-handler\":8,\"jaydata-promise-handler\":19}],8:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Exception = (function (_super) {\r\n    __extends(Exception, _super);\r\n    function Exception(message, name, data) {\r\n        _super.call(this);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n        this.name = name || \"Exception\";\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n    Exception.prototype._getStackTrace = function () { };\r\n    return Exception;\r\n}(Error));\r\nexports.Exception = Exception;\r\nvar Guard = (function () {\r\n    function Guard() {\r\n    }\r\n    Guard.requireValue = function (name, value) {\r\n        if (typeof value === 'undefined' || value === null) {\r\n            Guard.raise(name + \" requires a value other than undefined or null\");\r\n        }\r\n    };\r\n    Guard.requireType = function (name, value, typeOrTypes) {\r\n        var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\r\n        return types.some(function (item) {\r\n            switch (typeof item) {\r\n                case \"string\":\r\n                    return typeof value === item;\r\n                case \"function\":\r\n                    return value instanceof item;\r\n                default:\r\n                    Guard.raise(\"Unknown type format : \" + typeof item + \" for: \" + name);\r\n            }\r\n        });\r\n    };\r\n    Guard.raise = function (exception) {\r\n        if (typeof exports.intellisense === 'undefined') {\r\n            if (exception instanceof Exception) {\r\n                console.error(exception.name + ':', exception.message + '\\n', exception);\r\n            }\r\n            else {\r\n                console.error(exception);\r\n            }\r\n            throw exception;\r\n        }\r\n    };\r\n    Guard.isNullOrUndefined = function (value) {\r\n        return value === undefined || value === null;\r\n    };\r\n    return Guard;\r\n}());\r\nexports.Guard = Guard;\r\n\n},{}],9:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\nvar odatajs = {};\r\n\r\nodatajs.version = {\r\n    major: 4,\r\n    minor: 0,\r\n    build: 1\r\n};\r\n\r\n// core stuff, alway needed\r\nodatajs.utils = _dereq_('./lib/utils.js');\r\n\r\n// only neede for xml metadata\r\nodatajs.xml = _dereq_('./lib/xml.js');\r\n\r\n// only need in browser case\r\nodatajs.oData = _dereq_('./lib/odata.js');\r\n\r\nif (odatajs.utils.inBrowser()) {\r\n    //expose to browsers window object\r\n    window.odatajs = odatajs;\r\n} \r\n\r\nif(typeof module !== 'undefined'){\r\n    //expose in commonjs style\r\n    odatajs.node = \"node\";\r\n    module.exports = odatajs;\r\n}\r\n\n},{\"./lib/odata.js\":10,\"./lib/utils.js\":17,\"./lib/xml.js\":18}],10:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n /** @module odata */\r\n\r\n// Imports\r\nvar utils = _dereq_('./utils.js');\r\n\r\nvar odataUtils    = exports.utils     = _dereq_('./odata/odatautils.js');\r\nvar odataHandler  = exports.handler   = _dereq_('./odata/handler.js');\r\nvar odataMetadata = exports.metadata  = _dereq_('./odata/metadata.js');\r\nvar webNet = _dereq_('./odata/net-browser.js');\r\nvar odataNet      = exports.net       = utils.inBrowser() ? webNet : _dereq_('' + './odata/net.js');\r\nvar odataJson     = exports.json      = _dereq_('./odata/json.js');\r\n                    exports.batch     = _dereq_('./odata/batch.js');\r\n                    \r\n\r\nvar assigned = utils.assigned;\r\n\r\nvar defined = utils.defined;\r\nvar throwErrorCallback = utils.throwErrorCallback;\r\n\r\nvar invokeRequest = odataUtils.invokeRequest;\r\nvar MAX_DATA_SERVICE_VERSION = odataHandler.MAX_DATA_SERVICE_VERSION;\r\nvar prepareRequest = odataUtils.prepareRequest;\r\nvar metadataParser = odataMetadata.metadataParser;\r\n\r\n// CONTENT START\r\n\r\nvar handlers = [odataJson.jsonHandler, odataHandler.textHandler];\r\n\r\n/** Dispatches an operation to handlers.\r\n * @param {String} handlerMethod - Name of handler method to invoke.\r\n * @param {Object} requestOrResponse - request/response argument for delegated call.\r\n * @param {Object} context - context argument for delegated call.\r\n */\r\nfunction dispatchHandler(handlerMethod, requestOrResponse, context) {\r\n\r\n    var i, len;\r\n    for (i = 0, len = handlers.length; i < len && !handlers[i][handlerMethod](requestOrResponse, context); i++) {\r\n    }\r\n\r\n    if (i === len) {\r\n        throw { message: \"no handler for data\" };\r\n    }\r\n}\r\n\r\n/** Default success handler for OData.\r\n * @param data - Data to process.\r\n */\r\nexports.defaultSuccess = function (data) {\r\n\r\n    window.alert(window.JSON.stringify(data));\r\n};\r\n\r\nexports.defaultError = throwErrorCallback;\r\n\r\nexports.defaultHandler = {\r\n\r\n        /** Reads the body of the specified response by delegating to JSON handlers.\r\n        * @param response - Response object.\r\n        * @param context - Operation context.\r\n        */\r\n        read: function (response, context) {\r\n\r\n            if (response && assigned(response.body) && response.headers[\"Content-Type\"]) {\r\n                dispatchHandler(\"read\", response, context);\r\n            }\r\n        },\r\n\r\n        /** Write the body of the specified request by delegating to JSON handlers.\r\n        * @param request - Reques tobject.\r\n        * @param context - Operation context.\r\n        */\r\n        write: function (request, context) {\r\n\r\n            dispatchHandler(\"write\", request, context);\r\n        },\r\n\r\n        maxDataServiceVersion: MAX_DATA_SERVICE_VERSION,\r\n        accept: \"application/json;q=0.9, */*;q=0.1\"\r\n    };\r\n\r\nexports.defaultMetadata = []; //TODO check why is the defaultMetadata an Array? and not an Object.\r\n\r\n/** Reads data from the specified URL.\r\n * @param urlOrRequest - URL to read data from.\r\n * @param {Function} [success] - \r\n * @param {Function} [error] - \r\n * @param {Object} [handler] - \r\n * @param {Object} [httpClient] - \r\n * @param {Object} [metadata] - \r\n */\r\nexports.read = function (urlOrRequest, success, error, handler, httpClient, metadata) {\r\n\r\n    var request;\r\n    if (urlOrRequest instanceof String || typeof urlOrRequest === \"string\") {\r\n        request = { requestUri: urlOrRequest };\r\n    } else {\r\n        request = urlOrRequest;\r\n    }\r\n\r\n    return exports.request(request, success, error, handler, httpClient, metadata);\r\n};\r\n\r\n/** Sends a request containing OData payload to a server.\r\n * @param {Object} request - Object that represents the request to be sent.\r\n * @param {Function} [success] - \r\n * @param {Function} [error] - \r\n * @param {Object} [handler] - \r\n * @param {Object} [httpClient] - \r\n * @param {Object} [metadata] - \r\n */\r\nexports.request = function (request, success, error, handler, httpClient, metadata) {\r\n\r\n    success = success || exports.defaultSuccess;\r\n    error = error || exports.defaultError;\r\n    handler = handler || exports.defaultHandler;\r\n    httpClient = httpClient || odataNet.defaultHttpClient;\r\n    metadata = metadata || exports.defaultMetadata;\r\n\r\n    // Augment the request with additional defaults.\r\n    request.recognizeDates = utils.defined(request.recognizeDates, odataJson.jsonHandler.recognizeDates);\r\n    request.callbackParameterName = utils.defined(request.callbackParameterName, odataNet.defaultHttpClient.callbackParameterName);\r\n    request.formatQueryString = utils.defined(request.formatQueryString, odataNet.defaultHttpClient.formatQueryString);\r\n    request.enableJsonpCallback = utils.defined(request.enableJsonpCallback, odataNet.defaultHttpClient.enableJsonpCallback);\r\n\r\n    // Create the base context for read/write operations, also specifying complete settings.\r\n    var context = {\r\n        metadata: metadata,\r\n        recognizeDates: request.recognizeDates,\r\n        callbackParameterName: request.callbackParameterName,\r\n        formatQueryString: request.formatQueryString,\r\n        enableJsonpCallback: request.enableJsonpCallback\r\n    };\r\n\r\n    try {\r\n        odataUtils.prepareRequest(request, handler, context);\r\n        return odataUtils.invokeRequest(request, success, error, handler, httpClient, context);\r\n    } catch (err) {\r\n        // errors in success handler for sync requests are catched here and result in error handler calls. \r\n        // So here we fix this and throw that error further.\r\n        if (err.bIsSuccessHandlerError) {\r\n            throw err;\r\n        } else {\r\n            error(err);\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/** Parses the csdl metadata to ODataJS metatdata format. This method can be used when the metadata is retrieved using something other than odatajs\r\n * @param {string} csdlMetadataDocument - A string that represents the entire csdl metadata.\r\n * @returns {Object} An object that has the representation of the metadata in odatajs format.\r\n */\r\nexports.parseMetadata = function (csdlMetadataDocument) {\r\n\r\n    return metadataParser(null, csdlMetadataDocument);\r\n};\r\n\r\n// Configure the batch handler to use the default handler for the batch parts.\r\nexports.batch.batchHandler.partHandler = exports.defaultHandler;\r\nexports.metadataHandler =  odataMetadata.metadataHandler;\r\nexports.jsonHandler =  odataJson.jsonHandler;\r\n\n},{\"./odata/batch.js\":11,\"./odata/handler.js\":12,\"./odata/json.js\":13,\"./odata/metadata.js\":14,\"./odata/net-browser.js\":15,\"./odata/odatautils.js\":16,\"./utils.js\":17}],11:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odata/batch */\r\n\r\nvar utils    = _dereq_('./../utils.js');\r\nvar odataUtils    = _dereq_('./odatautils.js');\r\nvar odataHandler = _dereq_('./handler.js');\r\n\r\nvar extend = utils.extend;\r\nvar isArray = utils.isArray;\r\nvar trimString = utils.trimString;\r\n\r\nvar contentType = odataHandler.contentType;\r\nvar handler = odataHandler.handler;\r\nvar isBatch = odataUtils.isBatch;\r\nvar MAX_DATA_SERVICE_VERSION = odataHandler.MAX_DATA_SERVICE_VERSION;\r\nvar normalizeHeaders = odataUtils.normalizeHeaders;\r\n//TODO var payloadTypeOf = odata.payloadTypeOf;\r\nvar prepareRequest = odataUtils.prepareRequest;\r\n\r\n\r\n// Imports\r\n\r\n// CONTENT START\r\nvar batchMediaType = \"multipart/mixed\";\r\nvar responseStatusRegex = /^HTTP\\/1\\.\\d (\\d{3}) (.*)$/i;\r\nvar responseHeaderRegex = /^([^()<>@,;:\\\\\"\\/[\\]?={} \\t]+)\\s?:\\s?(.*)/;\r\n\r\n/** Calculates a random 16 bit number and returns it in hexadecimal format.\r\n * @returns {String} A 16-bit number in hex format.\r\n */\r\nfunction hex16() {\r\n\r\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);\r\n}\r\n\r\n/** Creates a string that can be used as a multipart request boundary.\r\n * @param {String} [prefix] - \r\n * @returns {String} Boundary string of the format: <prefix><hex16>-<hex16>-<hex16>\r\n */\r\nfunction createBoundary(prefix) {\r\n\r\n    return prefix + hex16() + \"-\" + hex16() + \"-\" + hex16();\r\n}\r\n\r\n/** Gets the handler for data serialization of individual requests / responses in a batch.\r\n * @param context - Context used for data serialization.\r\n * @returns Handler object\r\n */\r\nfunction partHandler(context) {\r\n\r\n    return context.handler.partHandler;\r\n}\r\n\r\n/** Gets the current boundary used for parsing the body of a multipart response.\r\n * @param context - Context used for parsing a multipart response.\r\n * @returns {String} Boundary string.\r\n */\r\nfunction currentBoundary(context) {\r\n    var boundaries = context.boundaries;\r\n    return boundaries[boundaries.length - 1];\r\n}\r\n\r\n/** Parses a batch response.\r\n * @param handler - This handler.\r\n * @param {String} text - Batch text.\r\n * @param {Object} context - Object with parsing context.\r\n * @return An object representation of the batch.\r\n */\r\nfunction batchParser(handler, text, context) {\r\n\r\n    var boundary = context.contentType.properties[\"boundary\"];\r\n    return { __batchResponses: readBatch(text, { boundaries: [boundary], handlerContext: context }) };\r\n}\r\n\r\n/** Serializes a batch object representation into text.\r\n * @param handler - This handler.\r\n * @param {Object} data - Representation of a batch.\r\n * @param {Object} context - Object with parsing context.\r\n * @return An text representation of the batch object; undefined if not applicable.#\r\n */\r\nfunction batchSerializer(handler, data, context) {\r\n\r\n    var cType = context.contentType = context.contentType || contentType(batchMediaType);\r\n    if (cType.mediaType === batchMediaType) {\r\n        return writeBatch(data, context);\r\n    }\r\n}\r\n\r\n/** Parses a multipart/mixed response body from from the position defined by the context.\r\n * @param {String}  text - Body of the multipart/mixed response.\r\n * @param context - Context used for parsing.\r\n * @return Array of objects representing the individual responses.\r\n */\r\nfunction readBatch(text, context) {\r\n    var delimiter = \"--\" + currentBoundary(context);\r\n\r\n    // Move beyond the delimiter and read the complete batch\r\n    readTo(text, context, delimiter);\r\n\r\n    // Ignore the incoming line\r\n    readLine(text, context);\r\n\r\n    // Read the batch parts\r\n    var responses = [];\r\n    var partEnd = null;\r\n\r\n    while (partEnd !== \"--\" && context.position < text.length) {\r\n        var partHeaders = readHeaders(text, context);\r\n        var partContentType = contentType(partHeaders[\"Content-Type\"]);\r\n\r\n        var changeResponses;\r\n        if (partContentType && partContentType.mediaType === batchMediaType) {\r\n            context.boundaries.push(partContentType.properties.boundary);\r\n            try {\r\n                changeResponses = readBatch(text, context);\r\n            } catch (e) {\r\n                e.response = readResponse(text, context, delimiter);\r\n                changeResponses = [e];\r\n            }\r\n            responses.push({ __changeResponses: changeResponses });\r\n            context.boundaries.pop();\r\n            readTo(text, context, \"--\" + currentBoundary(context));\r\n        } else {\r\n            if (!partContentType || partContentType.mediaType !== \"application/http\") {\r\n                throw { message: \"invalid MIME part type \" };\r\n            }\r\n            // Skip empty line\r\n            readLine(text, context);\r\n            // Read the response\r\n            var response = readResponse(text, context, delimiter);\r\n            try {\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                    partHandler(context.handlerContext).read(response, context.handlerContext);\r\n                } else {\r\n                    // Keep track of failed responses and continue processing the batch.\r\n                    response = { message: \"HTTP request failed\", response: response };\r\n                }\r\n            } catch (e) {\r\n                response = e;\r\n            }\r\n\r\n            responses.push(response);\r\n        }\r\n\r\n        partEnd = text.substr(context.position, 2);\r\n\r\n        // Ignore the incoming line.\r\n        readLine(text, context);\r\n    }\r\n    return responses;\r\n}\r\n\r\n/** Parses the http headers in the text from the position defined by the context.\r\n * @param {String} text - Text containing an http response's headers\r\n * @param context - Context used for parsing.\r\n * @returns Object containing the headers as key value pairs.\r\n * This function doesn't support split headers and it will stop reading when it hits two consecutive line breaks.\r\n*/\r\nfunction readHeaders(text, context) {\r\n    var headers = {};\r\n    var parts;\r\n    var line;\r\n    var pos;\r\n\r\n    do {\r\n        pos = context.position;\r\n        line = readLine(text, context);\r\n        parts = responseHeaderRegex.exec(line);\r\n        if (parts !== null) {\r\n            headers[parts[1]] = parts[2];\r\n        } else {\r\n            // Whatever was found is not a header, so reset the context position.\r\n            context.position = pos;\r\n        }\r\n    } while (line && parts);\r\n\r\n    normalizeHeaders(headers);\r\n\r\n    return headers;\r\n}\r\n\r\n/** Parses an HTTP response.\r\n * @param {String} text -Text representing the http response.\r\n * @param context optional - Context used for parsing.\r\n * @param {String} delimiter -String used as delimiter of the multipart response parts.\r\n * @return Object representing the http response.\r\n */\r\nfunction readResponse(text, context, delimiter) {\r\n    // Read the status line.\r\n    var pos = context.position;\r\n    var match = responseStatusRegex.exec(readLine(text, context));\r\n\r\n    var statusCode;\r\n    var statusText;\r\n    var headers;\r\n\r\n    if (match) {\r\n        statusCode = match[1];\r\n        statusText = match[2];\r\n        headers = readHeaders(text, context);\r\n        readLine(text, context);\r\n    } else {\r\n        context.position = pos;\r\n    }\r\n\r\n    return {\r\n        statusCode: statusCode,\r\n        statusText: statusText,\r\n        headers: headers,\r\n        body: readTo(text, context, \"\\r\\n\" + delimiter)\r\n    };\r\n}\r\n\r\n/** Returns a substring from the position defined by the context up to the next line break (CRLF).\r\n * @param {String} text - Input string.\r\n * @param context - Context used for reading the input string.\r\n * @returns {String} Substring to the first ocurrence of a line break or null if none can be found. \r\n */\r\nfunction readLine(text, context) {\r\n\r\n    return readTo(text, context, \"\\r\\n\");\r\n}\r\n\r\n/** Returns a substring from the position given by the context up to value defined by the str parameter and increments the position in the context.\r\n * @param {String} text - Input string.\r\n * @param context - Context used for reading the input string.\r\n * @param {String} [str] - Substring to read up to.\r\n * @returns {String} Substring to the first ocurrence of str or the end of the input string if str is not specified. Null if the marker is not found.\r\n */\r\nfunction readTo(text, context, str) {\r\n    var start = context.position || 0;\r\n    var end = text.length;\r\n    if (str) {\r\n        end = text.indexOf(str, start);\r\n        if (end === -1) {\r\n            return null;\r\n        }\r\n        context.position = end + str.length;\r\n    } else {\r\n        context.position = end;\r\n    }\r\n\r\n    return text.substring(start, end);\r\n}\r\n\r\n/** Serializes a batch request object to a string.\r\n * @param data - Batch request object in payload representation format\r\n * @param context - Context used for the serialization\r\n * @returns {String} String representing the batch request\r\n */\r\nfunction writeBatch(data, context) {\r\n    if (!isBatch(data)) {\r\n        throw { message: \"Data is not a batch object.\" };\r\n    }\r\n\r\n    var batchBoundary = createBoundary(\"batch_\");\r\n    var batchParts = data.__batchRequests;\r\n    var batch = \"\";\r\n    var i, len;\r\n    for (i = 0, len = batchParts.length; i < len; i++) {\r\n        batch += writeBatchPartDelimiter(batchBoundary, false) +\r\n                 writeBatchPart(batchParts[i], context);\r\n    }\r\n    batch += writeBatchPartDelimiter(batchBoundary, true);\r\n\r\n    // Register the boundary with the request content type.\r\n    var contentTypeProperties = context.contentType.properties;\r\n    contentTypeProperties.boundary = batchBoundary;\r\n\r\n    return batch;\r\n}\r\n\r\n/** Creates the delimiter that indicates that start or end of an individual request.\r\n * @param {String} boundary Boundary string used to indicate the start of the request\r\n * @param {Boolean} close - Flag indicating that a close delimiter string should be generated\r\n * @returns {String} Delimiter string\r\n */\r\nfunction writeBatchPartDelimiter(boundary, close) {\r\n    var result = \"\\r\\n--\" + boundary;\r\n    if (close) {\r\n        result += \"--\";\r\n    }\r\n\r\n    return result + \"\\r\\n\";\r\n}\r\n\r\n/** Serializes a part of a batch request to a string. A part can be either a GET request or\r\n * a change set grouping several CUD (create, update, delete) requests.\r\n * @param part - Request or change set object in payload representation format\r\n * @param context - Object containing context information used for the serialization\r\n * @param {boolean} [nested] - \r\n * @returns {String} String representing the serialized part\r\n * A change set is an array of request objects and they cannot be nested inside other change sets.\r\n */\r\nfunction writeBatchPart(part, context, nested) {\r\n    \r\n\r\n    var changeSet = part.__changeRequests;\r\n    var result;\r\n    if (isArray(changeSet)) {\r\n        if (nested) {\r\n            throw { message: \"Not Supported: change set nested in other change set\" };\r\n        }\r\n\r\n        var changeSetBoundary = createBoundary(\"changeset_\");\r\n        result = \"Content-Type: \" + batchMediaType + \"; boundary=\" + changeSetBoundary + \"\\r\\n\";\r\n        var i, len;\r\n        for (i = 0, len = changeSet.length; i < len; i++) {\r\n            result += writeBatchPartDelimiter(changeSetBoundary, false) +\r\n                 writeBatchPart(changeSet[i], context, true);\r\n        }\r\n\r\n        result += writeBatchPartDelimiter(changeSetBoundary, true);\r\n    } else {\r\n        result = \"Content-Type: application/http\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n\";\r\n        var partContext = extend({}, context);\r\n        partContext.handler = handler;\r\n        partContext.request = part;\r\n        partContext.contentType = null;\r\n\r\n        prepareRequest(part, partHandler(context), partContext);\r\n        result += writeRequest(part);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Serializes a request object to a string.\r\n * @param request - Request object to serialize\r\n * @returns {String} String representing the serialized request\r\n */\r\nfunction writeRequest(request) {\r\n    var result = (request.method ? request.method : \"GET\") + \" \" + request.requestUri + \" HTTP/1.1\\r\\n\";\r\n    for (var name in request.headers) {\r\n        if (request.headers[name]) {\r\n            result = result + name + \": \" + request.headers[name] + \"\\r\\n\";\r\n        }\r\n    }\r\n\r\n    result += \"\\r\\n\";\r\n\r\n    if (request.body) {\r\n        result += request.body;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\n\r\n/** batchHandler (see {@link module:odata/batch~batchParser}) */\r\nexports.batchHandler = handler(batchParser, batchSerializer, batchMediaType, MAX_DATA_SERVICE_VERSION);\r\n\r\n/** batchSerializer (see {@link module:odata/batch~batchSerializer}) */\r\nexports.batchSerializer = batchSerializer;\r\n\r\n/** writeRequest (see {@link module:odata/batch~writeRequest}) */\r\nexports.writeRequest = writeRequest;\n},{\"./../utils.js\":17,\"./handler.js\":12,\"./odatautils.js\":16}],12:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odata/handler */\r\n\r\n\r\nvar utils    = _dereq_('./../utils.js');\r\nvar oDataUtils    = _dereq_('./odatautils.js');\r\n\r\n// Imports.\r\nvar assigned = utils.assigned;\r\nvar extend = utils.extend;\r\nvar trimString = utils.trimString;\r\nvar maxVersion = oDataUtils.maxVersion;\r\nvar MAX_DATA_SERVICE_VERSION = \"4.0\";\r\n\r\n/** Parses a string into an object with media type and properties.\r\n * @param {String} str - String with media type to parse.\r\n * @return null if the string is empty; an object with 'mediaType' and a 'properties' dictionary otherwise.\r\n */\r\nfunction contentType(str) {\r\n\r\n    if (!str) {\r\n        return null;\r\n    }\r\n\r\n    var contentTypeParts = str.split(\";\");\r\n    var properties = {};\r\n\r\n    var i, len;\r\n    for (i = 1, len = contentTypeParts.length; i < len; i++) {\r\n        var contentTypeParams = contentTypeParts[i].split(\"=\");\r\n        properties[trimString(contentTypeParams[0])] = contentTypeParams[1];\r\n    }\r\n\r\n    return { mediaType: trimString(contentTypeParts[0]), properties: properties };\r\n}\r\n\r\n/** Serializes an object with media type and properties dictionary into a string.\r\n * @param contentType - Object with media type and properties dictionary to serialize.\r\n * @return String representation of the media type object; undefined if contentType is null or undefined.\r\n */\r\nfunction contentTypeToString(contentType) {\r\n    if (!contentType) {\r\n        return undefined;\r\n    }\r\n\r\n    var result = contentType.mediaType;\r\n    var property;\r\n    for (property in contentType.properties) {\r\n        result += \";\" + property + \"=\" + contentType.properties[property];\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Creates an object that is going to be used as the context for the handler's parser and serializer.\r\n * @param contentType - Object with media type and properties dictionary.\r\n * @param {String} dataServiceVersion - String indicating the version of the protocol to use.\r\n * @param context - Operation context.\r\n * @param handler - Handler object that is processing a resquest or response.\r\n * @return Context object.\r\n */\r\nfunction createReadWriteContext(contentType, dataServiceVersion, context, handler) {\r\n\r\n    var rwContext = {};\r\n    extend(rwContext, context);\r\n    extend(rwContext, {\r\n        contentType: contentType,\r\n        dataServiceVersion: dataServiceVersion,\r\n        handler: handler\r\n    });\r\n\r\n    return rwContext;\r\n}\r\n\r\n/** Sets a request header's value. If the header has already a value other than undefined, null or empty string, then this method does nothing.\r\n * @param request - Request object on which the header will be set.\r\n * @param {String} name - Header name.\r\n * @param {String} value - Header value.\r\n */\r\nfunction fixRequestHeader(request, name, value) {\r\n    if (!request) {\r\n        return;\r\n    }\r\n\r\n    var headers = request.headers;\r\n    if (!headers[name]) {\r\n        headers[name] = value;\r\n    }\r\n}\r\n\r\n/** Sets the DataServiceVersion header of the request if its value is not yet defined or of a lower version.\r\n * @param request - Request object on which the header will be set.\r\n * @param {String} version - Version value.\r\n *  If the request has already a version value higher than the one supplied the this function does nothing.\r\n */\r\nfunction fixDataServiceVersionHeader(request, version) {   \r\n\r\n    if (request) {\r\n        var headers = request.headers;\r\n        var dsv = headers[\"OData-Version\"];\r\n        headers[\"OData-Version\"] = dsv ? maxVersion(dsv, version) : version;\r\n    }\r\n}\r\n\r\n/** Gets the value of a request or response header.\r\n * @param requestOrResponse - Object representing a request or a response.\r\n * @param {String} name - Name of the header to retrieve.\r\n * @returns {String} String value of the header; undefined if the header cannot be found.\r\n */\r\nfunction getRequestOrResponseHeader(requestOrResponse, name) {\r\n\r\n    var headers = requestOrResponse.headers;\r\n    return (headers && headers[name]) || undefined;\r\n}\r\n\r\n/** Gets the value of the Content-Type header from a request or response.\r\n * @param requestOrResponse - Object representing a request or a response.\r\n * @returns {Object} Object with 'mediaType' and a 'properties' dictionary; null in case that the header is not found or doesn't have a value.\r\n */\r\nfunction getContentType(requestOrResponse) {\r\n\r\n    return contentType(getRequestOrResponseHeader(requestOrResponse, \"Content-Type\"));\r\n}\r\n\r\nvar versionRE = /^\\s?(\\d+\\.\\d+);?.*$/;\r\n/** Gets the value of the DataServiceVersion header from a request or response.\r\n * @param requestOrResponse - Object representing a request or a response.\r\n * @returns {String} Data service version; undefined if the header cannot be found.\r\n */\r\nfunction getDataServiceVersion(requestOrResponse) {\r\n\r\n    var value = getRequestOrResponseHeader(requestOrResponse, \"OData-Version\");\r\n    if (value) {\r\n        var matches = versionRE.exec(value);\r\n        if (matches && matches.length) {\r\n            return matches[1];\r\n        }\r\n    }\r\n\r\n    // Fall through and return undefined.\r\n}\r\n\r\n/** Checks that a handler can process a particular mime type.\r\n * @param handler - Handler object that is processing a resquest or response.\r\n * @param cType - Object with 'mediaType' and a 'properties' dictionary.\r\n * @returns {Boolean} True if the handler can process the mime type; false otherwise.\r\n *\r\n * The following check isn't as strict because if cType.mediaType = application/; it will match an accept value of \"application/xml\";\r\n * however in practice we don't not expect to see such \"suffixed\" mimeTypes for the handlers.\r\n */\r\nfunction handlerAccepts(handler, cType) {\r\n    return handler.accept.indexOf(cType.mediaType) >= 0;\r\n}\r\n\r\n/** Invokes the parser associated with a handler for reading the payload of a HTTP response.\r\n * @param handler - Handler object that is processing the response.\r\n * @param {Function} parseCallback - Parser function that will process the response payload.\r\n * @param response - HTTP response whose payload is going to be processed.\r\n * @param context - Object used as the context for processing the response.\r\n * @returns {Boolean} True if the handler processed the response payload and the response.data property was set; false otherwise.\r\n */\r\nfunction handlerRead(handler, parseCallback, response, context) {\r\n\r\n    if (!response || !response.headers) {\r\n        return false;\r\n    }\r\n\r\n    var cType = getContentType(response);\r\n    var version = getDataServiceVersion(response) || \"\";\r\n    var body = response.body;\r\n\r\n    if (!assigned(body)) {\r\n        return false;\r\n    }\r\n\r\n    if (handlerAccepts(handler, cType)) {\r\n        var readContext = createReadWriteContext(cType, version, context, handler);\r\n        readContext.response = response;\r\n        response.data = parseCallback(handler, body, readContext);\r\n        return response.data !== undefined;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Invokes the serializer associated with a handler for generating the payload of a HTTP request.\r\n * @param handler - Handler object that is processing the request.\r\n * @param {Function} serializeCallback - Serializer function that will generate the request payload.\r\n * @param request - HTTP request whose payload is going to be generated.\r\n * @param context - Object used as the context for serializing the request.\r\n * @returns {Boolean} True if the handler serialized the request payload and the request.body property was set; false otherwise.\r\n */\r\nfunction handlerWrite(handler, serializeCallback, request, context) {\r\n    if (!request || !request.headers) {\r\n        return false;\r\n    }\r\n\r\n    var cType = getContentType(request);\r\n    var version = getDataServiceVersion(request);\r\n\r\n    if (!cType || handlerAccepts(handler, cType)) {\r\n        var writeContext = createReadWriteContext(cType, version, context, handler);\r\n        writeContext.request = request;\r\n\r\n        request.body = serializeCallback(handler, request.data, writeContext);\r\n\r\n        if (request.body !== undefined) {\r\n            fixDataServiceVersionHeader(request, writeContext.dataServiceVersion || \"4.0\");\r\n\r\n            fixRequestHeader(request, \"Content-Type\", contentTypeToString(writeContext.contentType));\r\n            fixRequestHeader(request, \"OData-MaxVersion\", handler.maxDataServiceVersion);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Creates a handler object for processing HTTP requests and responses.\r\n * @param {Function} parseCallback - Parser function that will process the response payload.\r\n * @param {Function} serializeCallback - Serializer function that will generate the request payload.\r\n * @param {String} accept - String containing a comma separated list of the mime types that this handler can work with.\r\n * @param {String} maxDataServiceVersion - String indicating the highest version of the protocol that this handler can work with.\r\n * @returns {Object} Handler object.\r\n */\r\nfunction handler(parseCallback, serializeCallback, accept, maxDataServiceVersion) {\r\n\r\n    return {\r\n        accept: accept,\r\n        maxDataServiceVersion: maxDataServiceVersion,\r\n\r\n        read: function (response, context) {\r\n            return handlerRead(this, parseCallback, response, context);\r\n        },\r\n\r\n        write: function (request, context) {\r\n            return handlerWrite(this, serializeCallback, request, context);\r\n        }\r\n    };\r\n}\r\n\r\nfunction textParse(handler, body /*, context */) {\r\n    return body;\r\n}\r\n\r\nfunction textSerialize(handler, data /*, context */) {\r\n    if (assigned(data)) {\r\n        return data.toString();\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexports.textHandler = handler(textParse, textSerialize, \"text/plain\", MAX_DATA_SERVICE_VERSION);\r\nexports.contentType = contentType;\r\nexports.contentTypeToString = contentTypeToString;\r\nexports.handler = handler;\r\nexports.createReadWriteContext = createReadWriteContext;\r\nexports.fixRequestHeader = fixRequestHeader;\r\nexports.getRequestOrResponseHeader = getRequestOrResponseHeader;\r\nexports.getContentType = getContentType;\r\nexports.getDataServiceVersion = getDataServiceVersion;\r\nexports.MAX_DATA_SERVICE_VERSION = MAX_DATA_SERVICE_VERSION;\n},{\"./../utils.js\":17,\"./odatautils.js\":16}],13:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n/** @module odata/json */\r\n\r\n\r\n\r\nvar utils        = _dereq_('./../utils.js');\r\nvar oDataUtils   = _dereq_('./odatautils.js');\r\nvar oDataHandler = _dereq_('./handler.js');\r\n\r\nvar odataNs = \"odata\";\r\nvar odataAnnotationPrefix = odataNs + \".\";\r\nvar contextUrlAnnotation = \"@\" + odataAnnotationPrefix + \"context\";\r\n\r\nvar assigned = utils.assigned;\r\nvar defined = utils.defined;\r\nvar isArray = utils.isArray;\r\n//var isDate = utils.isDate;\r\nvar isObject = utils.isObject;\r\n//var normalizeURI = utils.normalizeURI;\r\nvar parseInt10 = utils.parseInt10;\r\nvar getFormatKind = utils.getFormatKind;\r\nvar convertByteArrayToHexString = utils.convertByteArrayToHexString;\r\n\r\n\r\nvar formatDateTimeOffset = oDataUtils.formatDateTimeOffset;\r\nvar formatDuration = oDataUtils.formatDuration;\r\nvar formatNumberWidth = oDataUtils.formatNumberWidth;\r\nvar getCanonicalTimezone = oDataUtils.getCanonicalTimezone;\r\nvar handler = oDataUtils.handler;\r\nvar isComplex = oDataUtils.isComplex;\r\nvar isPrimitive = oDataUtils.isPrimitive;\r\nvar isCollectionType = oDataUtils.isCollectionType;\r\nvar lookupComplexType = oDataUtils.lookupComplexType;\r\nvar lookupEntityType = oDataUtils.lookupEntityType;\r\nvar lookupSingleton = oDataUtils.lookupSingleton;\r\nvar lookupEntitySet = oDataUtils.lookupEntitySet;\r\nvar lookupDefaultEntityContainer = oDataUtils.lookupDefaultEntityContainer;\r\nvar lookupProperty = oDataUtils.lookupProperty;\r\nvar MAX_DATA_SERVICE_VERSION = oDataUtils.MAX_DATA_SERVICE_VERSION;\r\nvar maxVersion = oDataUtils.maxVersion;\r\n\r\nvar isPrimitiveEdmType = oDataUtils.isPrimitiveEdmType;\r\nvar isGeographyEdmType = oDataUtils.isGeographyEdmType;\r\nvar isGeometryEdmType = oDataUtils.isGeometryEdmType;\r\n\r\nvar PAYLOADTYPE_FEED = \"f\";\r\nvar PAYLOADTYPE_ENTRY = \"e\";\r\nvar PAYLOADTYPE_PROPERTY = \"p\";\r\nvar PAYLOADTYPE_COLLECTION = \"c\";\r\nvar PAYLOADTYPE_ENUMERATION_PROPERTY = \"enum\";\r\nvar PAYLOADTYPE_SVCDOC = \"s\";\r\nvar PAYLOADTYPE_ENTITY_REF_LINK = \"erl\";\r\nvar PAYLOADTYPE_ENTITY_REF_LINKS = \"erls\";\r\n\r\nvar PAYLOADTYPE_VALUE = \"v\";\r\n\r\nvar PAYLOADTYPE_DELTA = \"d\";\r\nvar DELTATYPE_FEED = \"f\";\r\nvar DELTATYPE_DELETED_ENTRY = \"de\";\r\nvar DELTATYPE_LINK = \"l\";\r\nvar DELTATYPE_DELETED_LINK = \"dl\";\r\n\r\nvar jsonMediaType = \"application/json\";\r\nvar jsonContentType = oDataHandler.contentType(jsonMediaType);\r\n\r\nvar jsonSerializableMetadata = [\"@odata.id\", \"@odata.type\"];\r\n\r\n\r\n\r\n\r\n\r\n/** Extend JSON OData payload with metadata\r\n * @param handler - This handler.\r\n * @param text - Payload text (this parser also handles pre-parsed objects).\r\n * @param {Object} context - Object with parsing context.\r\n * @return An object representation of the OData payload.\r\n */\r\nfunction jsonParser(handler, text, context) {\r\n    var recognizeDates = defined(context.recognizeDates, handler.recognizeDates);\r\n    var model = context.metadata;\r\n    var json = (typeof text === \"string\") ? JSON.parse(text) : text;\r\n    var metadataContentType;\r\n    if (assigned(context.contentType) && assigned(context.contentType.properties)) {\r\n        metadataContentType = context.contentType.properties[\"odata.metadata\"]; //TODO convert to lower before comparism\r\n    }\r\n\r\n    var payloadFormat = getFormatKind(metadataContentType, 1); // none: 0, minimal: 1, full: 2\r\n\r\n    // No errors should be throw out if we could not parse the json payload, instead we should just return the original json object.\r\n    if (payloadFormat === 0) {\r\n        return json;\r\n    }\r\n    else if (payloadFormat === 1) {\r\n        return addMinimalMetadataToJsonPayload(json, model, recognizeDates);\r\n    }\r\n    else if (payloadFormat === 2) {\r\n        // to do: using the EDM Model to get the type of each property instead of just guessing.\r\n        return addFullMetadataToJsonPayload(json, model, recognizeDates);\r\n    }\r\n    else {\r\n        return json;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// The regular expression corresponds to something like this:\r\n// /Date(123+60)/\r\n//\r\n// This first number is date ticks, the + may be a - and is optional,\r\n// with the second number indicating a timezone offset in minutes.\r\n//\r\n// On the wire, the leading and trailing forward slashes are\r\n// escaped without being required to so the chance of collisions is reduced;\r\n// however, by the time we see the objects, the characters already\r\n// look like regular forward slashes.\r\nvar jsonDateRE = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n\r\n// Some JSON implementations cannot produce the character sequence \\/\r\n// which is needed to format DateTime and DateTimeOffset into the\r\n// JSON string representation defined by the OData protocol.\r\n// See the history of this file for a candidate implementation of\r\n// a 'formatJsonDateString' function.\r\n\r\n\r\nvar jsonReplacer = function (_, value) {\r\n    /// <summary>JSON replacer function for converting a value to its JSON representation.</summary>\r\n    /// <param value type=\"Object\">Value to convert.</param>\r\n    /// <returns type=\"String\">JSON representation of the input value.</returns>\r\n    /// <remarks>\r\n    ///   This method is used during JSON serialization and invoked only by the JSON.stringify function.\r\n    ///   It should never be called directly.\r\n    /// </remarks>\r\n\r\n    if (value && value.__edmType === \"Edm.Time\") {\r\n        return formatDuration(value);\r\n    } else {\r\n        return value;\r\n    }\r\n};\r\n\r\n/** Serializes a ODataJs payload structure to the wire format which can be send to the server\r\n * @param handler - This handler.\r\n * @param data - Data to serialize.\r\n * @param {Object} context - Object with serialization context.\r\n * @returns {String} The string representation of data.\r\n */\r\nfunction jsonSerializer(handler, data, context) {\r\n\r\n    var dataServiceVersion = context.dataServiceVersion || \"4.0\";\r\n    var cType = context.contentType = context.contentType || jsonContentType;\r\n\r\n    if (cType && cType.mediaType === jsonContentType.mediaType) {\r\n        context.dataServiceVersion = maxVersion(dataServiceVersion, \"4.0\");\r\n        var newdata = formatJsonRequestPayload(data);\r\n        if (newdata) {\r\n            return JSON.stringify(newdata,jsonReplacer);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n\r\n\r\n\r\n/** Convert OData objects for serialisation in to a new data structure\r\n * @param data - Data to serialize.\r\n * @returns {String} The string representation of data.\r\n */\r\nfunction formatJsonRequestPayload(data) {\r\n    if (!data) {\r\n        return data;\r\n    }\r\n\r\n    if (isPrimitive(data)) {\r\n        return data;\r\n    }\r\n\r\n    if (isArray(data)) {\r\n        var newArrayData = [];\r\n        var i, len;\r\n        for (i = 0, len = data.length; i < len; i++) {\r\n            newArrayData[i] = formatJsonRequestPayload(data[i]);\r\n        }\r\n\r\n        return newArrayData;\r\n    }\r\n\r\n    var newdata = {};\r\n    for (var property in data) {\r\n        if (isJsonSerializableProperty(property)) {\r\n            newdata[property] = formatJsonRequestPayload(data[property]);\r\n        }\r\n    }\r\n\r\n    return newdata;\r\n}\r\n\r\n/** Determine form the attribute name if the attribute is a serializable property\r\n * @param attribute\r\n * @returns {boolean}\r\n */\r\nfunction isJsonSerializableProperty(attribute) {\r\n    if (!attribute) {\r\n        return false;\r\n    }\r\n\r\n    if (attribute.indexOf(\"@odata.\") == -1) {\r\n        return true;\r\n    }\r\n\r\n    var i, len;\r\n    for (i = 0, len = jsonSerializableMetadata.length; i < len; i++) {\r\n        var name = jsonSerializableMetadata[i];\r\n        if (attribute.indexOf(name) != -1) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Creates an object containing information for the json payload.\r\n * @param {String} kind - JSON payload kind\r\n * @param {String} type - Type name of the JSON payload.\r\n * @returns {Object} Object with kind and type fields.\r\n */\r\nfunction jsonMakePayloadInfo(kind, type) {\r\n    return { kind: kind, type: type || null };\r\n}\r\n\r\n\r\n\r\n/** Add metadata to an JSON payload complex object containing full metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addFullMetadataToJsonPayload(data, model, recognizeDates) {\r\n    var type;\r\n    if (utils.isObject(data)) {\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                if (key.indexOf('@') === -1) {\r\n                    if (utils.isArray(data[key])) {\r\n                        for (var i = 0; i < data[key].length; ++i) {\r\n                            addFullMetadataToJsonPayload(data[key][i], model, recognizeDates);\r\n                        }\r\n                    } else if (utils.isObject(data[key])) {\r\n                        if (data[key] !== null) {\r\n                            //don't step into geo.. objects\r\n                            type = data[key+'@odata.type'];\r\n                            if (!type) {\r\n                                //type unknown\r\n                                addFullMetadataToJsonPayload(data[key], model, recognizeDates);\r\n                            } else {\r\n                                type = type.substring(1);\r\n                                if  (isGeographyEdmType(type) || isGeometryEdmType(type)) {\r\n                                    // don't add type info for geo* types\r\n                                } else {\r\n                                    addFullMetadataToJsonPayload(data[key], model, recognizeDates);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        type = data[key + '@odata.type'];\r\n\r\n                        // On .Net OData library, some basic EDM type is omitted, e.g. Edm.String, Edm.Int, and etc.\r\n                        // For the full metadata payload, we need to full fill the @data.type for each property if it is missing.\r\n                        // We do this is to help the OlingoJS consumers to easily get the type of each property.\r\n                        if (!assigned(type)) {\r\n                            // Guessing the \"type\" from the type of the value is not the right way here.\r\n                            // To do: we need to get the type from metadata instead of guessing.\r\n                            var typeFromObject = typeof data[key];\r\n                            if (typeFromObject === 'string') {\r\n                                addType(data, key, 'String');\r\n                            } else if (typeFromObject === 'boolean') {\r\n                                addType(data, key, 'Boolean');\r\n                            } else if (typeFromObject === 'number') {\r\n                                if (data[key] % 1 === 0) { // has fraction\r\n                                    addType(data, key, 'Int32'); // the biggst integer\r\n                                } else {\r\n                                    addType(data, key, 'Decimal'); // the biggst float single,doulbe,decimal\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (recognizeDates) {\r\n                                convertDatesNoEdm(data, key, type.substring(1));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/** Loop through the properties of an JSON payload object, look up the type info of the property and call\r\n * the appropriate add*MetadataToJsonPayloadObject function\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} objectInfoType - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction checkProperties(data, objectInfoType, baseURI, model, recognizeDates) {\r\n    for (var name in data) {\r\n        if (name.indexOf(\"@\") === -1) {\r\n            var curType = objectInfoType;\r\n            var propertyValue = data[name];\r\n            var property = lookupProperty(curType.property,name); //TODO SK add check for parent type\r\n\r\n            while (( property === null) && (curType.baseType !== undefined)) {\r\n                curType = lookupEntityType(curType.baseType, model);\r\n                property = lookupProperty(curType.property,name);\r\n            }\r\n\r\n            if ( isArray(propertyValue)) {\r\n                //data[name+'@odata.type'] = '#' + property.type;\r\n                if (isCollectionType(property.type)) {\r\n                    addTypeColNoEdm(data,name,property.type.substring(11,property.type.length-1));\r\n                } else {\r\n                    addTypeNoEdm(data,name,property.type);\r\n                }\r\n\r\n\r\n                for ( var i = 0; i < propertyValue.length; i++) {\r\n                    addMetadataToJsonMinimalPayloadComplex(propertyValue[i], property, baseURI, model, recognizeDates);\r\n                }\r\n            } else if (isObject(propertyValue) && (propertyValue !== null)) {\r\n                addMetadataToJsonMinimalPayloadComplex(propertyValue, property, baseURI, model, recognizeDates);\r\n            } else {\r\n                //data[name+'@odata.type'] = '#' + property.type;\r\n                addTypeNoEdm(data,name,property.type);\r\n                if (recognizeDates) {\r\n                    convertDates(data, name, property.type);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/** Add metadata to an JSON payload object containing minimal metadata\r\n * @param {Object} data - Json response payload object\r\n * @param {Object} model - Object describing an OData conceptual schema\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n * @returns {Object} Object in the library's representation.\r\n */\r\nfunction addMinimalMetadataToJsonPayload(data, model, recognizeDates) {\r\n\r\n    if (!assigned(model) || isArray(model)) {\r\n        return data;\r\n    }\r\n\r\n    var baseURI = data[contextUrlAnnotation];\r\n    var payloadInfo = createPayloadInfo(data, model);\r\n\r\n    switch (payloadInfo.detectedPayloadKind) {\r\n\r\n        case PAYLOADTYPE_VALUE:\r\n            if (payloadInfo.type !== null) {\r\n                return addMetadataToJsonMinimalPayloadEntity(data, payloadInfo, baseURI, model, recognizeDates);\r\n            } else {\r\n                return addTypeNoEdm(data,'value', payloadInfo.typeName);\r\n            }\r\n\r\n        case PAYLOADTYPE_FEED:\r\n            return addMetadataToJsonMinimalPayloadFeed(data, model, payloadInfo, baseURI, recognizeDates);\r\n\r\n        case PAYLOADTYPE_ENTRY:\r\n            return addMetadataToJsonMinimalPayloadEntity(data, payloadInfo, baseURI, model, recognizeDates);\r\n\r\n        case PAYLOADTYPE_COLLECTION:\r\n            return addMetadataToJsonMinimalPayloadCollection(data, model, payloadInfo, baseURI, recognizeDates);\r\n\r\n        case PAYLOADTYPE_PROPERTY:\r\n            if (payloadInfo.type !== null) {\r\n                return addMetadataToJsonMinimalPayloadEntity(data, payloadInfo, baseURI, model, recognizeDates);\r\n            } else {\r\n                return addTypeNoEdm(data,'value', payloadInfo.typeName);\r\n            }\r\n\r\n        case PAYLOADTYPE_SVCDOC:\r\n            return data;\r\n\r\n        case PAYLOADTYPE_LINKS:\r\n            return data;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/** Add metadata to an JSON payload feed object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {Object} model - Metadata model\r\n * @param {String} feedInfo - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadFeed(data, model, feedInfo, baseURI, recognizeDates) {\r\n    var entries = [];\r\n    var items = data.value;\r\n    var i,len;\r\n    var entry;\r\n    for (i = 0, len = items.length; i < len; i++) {\r\n        var item = items[i];\r\n        if ( defined(item['@odata.type'])) { // in case of mixed feeds\r\n            var typeName = item['@odata.type'].substring(1);\r\n            var type = lookupEntityType( typeName, model);\r\n            var entryInfo = {\r\n                contentTypeOdata : feedInfo.contentTypeOdata,\r\n                detectedPayloadKind : feedInfo.detectedPayloadKind,\r\n                name : feedInfo.name,\r\n                type : type,\r\n                typeName : typeName\r\n            };\r\n\r\n            entry = addMetadataToJsonMinimalPayloadEntity(item, entryInfo, baseURI, model, recognizeDates);\r\n        } else {\r\n            entry = addMetadataToJsonMinimalPayloadEntity(item, feedInfo, baseURI, model, recognizeDates);\r\n        }\r\n\r\n        entries.push(entry);\r\n    }\r\n    data.value = entries;\r\n    return data;\r\n}\r\n\r\n\r\n/** Add metadata to an JSON payload entity object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} objectInfo - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadEntity(data, objectInfo, baseURI, model, recognizeDates) {\r\n    addType(data,'',objectInfo.typeName);\r\n\r\n    var keyType = objectInfo.type;\r\n    while ((defined(keyType)) && ( keyType.key === undefined) && (keyType.baseType !== undefined)) {\r\n        keyType = lookupEntityType(keyType.baseType, model);\r\n    }\r\n\r\n    if (keyType.key !== undefined) {\r\n        var lastIdSegment = objectInfo.name + jsonGetEntryKey(data, keyType);\r\n        data['@odata.id'] = baseURI.substring(0, baseURI.lastIndexOf(\"$metadata\")) + lastIdSegment;\r\n        data['@odata.editLink'] = lastIdSegment;\r\n    }\r\n\r\n    //var serviceURI = baseURI.substring(0, baseURI.lastIndexOf(\"$metadata\"));\r\n\r\n    checkProperties(data, objectInfo.type, baseURI, model, recognizeDates);\r\n\r\n    return data;\r\n}\r\n\r\n/** Add metadata to an JSON payload complex object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} property - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadComplex(data, property, baseURI, model, recognizeDates) {\r\n    var type = property.type;\r\n    if (isCollectionType(property.type)) {\r\n        type =property.type.substring(11,property.type.length-1);\r\n    }\r\n\r\n    addType(data,'',property.type);\r\n\r\n    var propertyType = lookupComplexType(type, model);\r\n    if (propertyType === null)  {\r\n        return; //TODO check what to do if the type is not known e.g. type #GeometryCollection\r\n    }\r\n\r\n    checkProperties(data, propertyType, baseURI, model, recognizeDates);\r\n}\r\n\r\n/** Add metadata to an JSON payload collection object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {Object} model - Metadata model\r\n * @param {String} collectionInfo - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadCollection(data, model, collectionInfo, baseURI, recognizeDates) {\r\n\r\n    addTypeColNoEdm(data,'', collectionInfo.typeName);\r\n\r\n    if (collectionInfo.type !== null) {\r\n        var entries = [];\r\n\r\n        var items = data.value;\r\n        var i,len;\r\n        var entry;\r\n        for (i = 0, len = items.length; i < len; i++) {\r\n            var item = items[i];\r\n            if ( defined(item['@odata.type'])) { // in case of mixed collections\r\n                var typeName = item['@odata.type'].substring(1);\r\n                var type = lookupEntityType( typeName, model);\r\n                var entryInfo = {\r\n                    contentTypeOdata : collectionInfo.contentTypeOdata,\r\n                    detectedPayloadKind : collectionInfo.detectedPayloadKind,\r\n                    name : collectionInfo.name,\r\n                    type : type,\r\n                    typeName : typeName\r\n                };\r\n\r\n                entry = addMetadataToJsonMinimalPayloadEntity(item, entryInfo, baseURI, model, recognizeDates);\r\n            } else {\r\n                entry = addMetadataToJsonMinimalPayloadEntity(item, collectionInfo, baseURI, model, recognizeDates);\r\n            }\r\n\r\n            entries.push(entry);\r\n        }\r\n        data.value = entries;\r\n    }\r\n    return data;\r\n}\r\n\r\n/** Add an OData type tag to an JSON payload object\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} name - Name of the property whose type is set\r\n * @param {String} value - Type name\r\n */\r\nfunction addType(data, name, value ) {\r\n    var fullName = name + '@odata.type';\r\n\r\n    if ( data[fullName] === undefined) {\r\n        data[fullName] = '#' + value;\r\n    }\r\n}\r\n\r\n/** Add an OData type tag to an JSON payload object collection (without \"Edm.\" namespace)\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} name - Name of the property whose type is set\r\n * @param {String} typeName - Type name\r\n */\r\nfunction addTypeColNoEdm(data, name, typeName ) {\r\n    var fullName = name + '@odata.type';\r\n\r\n    if ( data[fullName] === undefined) {\r\n        if ( typeName.substring(0,4)==='Edm.') {\r\n            data[fullName] = '#Collection('+typeName.substring(4)+ ')';\r\n        } else {\r\n            data[fullName] = '#Collection('+typeName+ ')';\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/** Add an OData type tag to an JSON payload object (without \"Edm.\" namespace)\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} name - Name of the property whose type is set\r\n * @param {String} value - Type name\r\n */\r\nfunction addTypeNoEdm(data, name, value ) {\r\n    var fullName = name + '@odata.type';\r\n\r\n    if ( data[fullName] === undefined) {\r\n        if ( value.substring(0,4)==='Edm.') {\r\n            data[fullName] = '#' + value.substring(4);\r\n        } else {\r\n            data[fullName] = '#' + value;\r\n        }\r\n    }\r\n    return data;\r\n}\r\n/** Convert the date/time format of an property from the JSON payload object (without \"Edm.\" namespace)\r\n * @param {Object} data - Data structure to be extended\r\n * @param propertyName - Name of the property to be changed\r\n * @param type - Type\r\n */\r\nfunction convertDates(data, propertyName,type) {\r\n    if (type === 'Edm.Date') {\r\n        data[propertyName] = oDataUtils.parseDate(data[propertyName], true);\r\n    } else if (type === 'Edm.DateTimeOffset') {\r\n        data[propertyName] = oDataUtils.parseDateTimeOffset(data[propertyName], true);\r\n    } else if (type === 'Edm.Duration') {\r\n        data[propertyName] = oDataUtils.parseDuration(data[propertyName], true);\r\n    } else if (type === 'Edm.Time') {\r\n        data[propertyName] = oDataUtils.parseTime(data[propertyName], true);\r\n    }\r\n}\r\n\r\n/** Convert the date/time format of an property from the JSON payload object\r\n * @param {Object} data - Data structure to be extended\r\n * @param propertyName - Name of the property to be changed\r\n * @param type - Type\r\n */\r\nfunction convertDatesNoEdm(data, propertyName,type) {\r\n    if (type === 'Date') {\r\n        data[propertyName] = oDataUtils.parseDate(data[propertyName], true);\r\n    } else if (type === 'DateTimeOffset') {\r\n        data[propertyName] = oDataUtils.parseDateTimeOffset(data[propertyName], true);\r\n    } else if (type === 'Duration') {\r\n        data[propertyName] = oDataUtils.parseDuration(data[propertyName], true);\r\n    } else if (type === 'Time') {\r\n        data[propertyName] = oDataUtils.parseTime(data[propertyName], true);\r\n    }\r\n}\r\n\r\n/** Formats a value according to Uri literal format\r\n * @param value - Value to be formatted.\r\n * @param type - Edm type of the value\r\n * @returns {string} Value after formatting\r\n */\r\nfunction formatLiteral(value, type) {\r\n\r\n    value = \"\" + formatRawLiteral(value, type);\r\n    value = encodeURIComponent(value.replace(\"'\", \"''\"));\r\n    switch ((type)) {\r\n        case \"Edm.Binary\":\r\n            return \"X'\" + value + \"'\";\r\n        case \"Edm.DateTime\":\r\n            return \"datetime\" + \"'\" + value + \"'\";\r\n        case \"Edm.DateTimeOffset\":\r\n            return \"datetimeoffset\" + \"'\" + value + \"'\";\r\n        case \"Edm.Decimal\":\r\n            return value + \"M\";\r\n        case \"Edm.Guid\":\r\n            return \"guid\" + \"'\" + value + \"'\";\r\n        case \"Edm.Int64\":\r\n            return value + \"L\";\r\n        case \"Edm.Float\":\r\n            return value + \"f\";\r\n        case \"Edm.Double\":\r\n            return value + \"D\";\r\n        case \"Edm.Geography\":\r\n            return \"geography\" + \"'\" + value + \"'\";\r\n        case \"Edm.Geometry\":\r\n            return \"geometry\" + \"'\" + value + \"'\";\r\n        case \"Edm.Time\":\r\n            return \"time\" + \"'\" + value + \"'\";\r\n        case \"Edm.String\":\r\n            return \"'\" + value + \"'\";\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\n/** convert raw byteArray to hexString if the property is an binary property\r\n * @param value - Value to be formatted.\r\n * @param type - Edm type of the value\r\n * @returns {string} Value after formatting\r\n */\r\nfunction formatRawLiteral(value, type) {\r\n    switch (type) {\r\n        case \"Edm.Binary\":\r\n            return convertByteArrayToHexString(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\n/** Formats the given minutes into (+/-)hh:mm format.\r\n * @param {Number} minutes - Number of minutes to format.\r\n * @returns {String} The minutes in (+/-)hh:mm format.\r\n */\r\nfunction minutesToOffset(minutes) {\r\n\r\n    var sign;\r\n    if (minutes < 0) {\r\n        sign = \"-\";\r\n        minutes = -minutes;\r\n    } else {\r\n        sign = \"+\";\r\n    }\r\n\r\n    var hours = Math.floor(minutes / 60);\r\n    minutes = minutes - (60 * hours);\r\n\r\n    return sign + formatNumberWidth(hours, 2) + \":\" + formatNumberWidth(minutes, 2);\r\n}\r\n\r\n/** Parses the JSON Date representation into a Date object.\r\n * @param {String} value - String value.\r\n * @returns {Date} A Date object if the value matches one; falsy otherwise.\r\n */\r\nfunction parseJsonDateString(value) {\r\n\r\n    var arr = value && jsonDateRE.exec(value);\r\n    if (arr) {\r\n        // 0 - complete results; 1 - ticks; 2 - sign; 3 - minutes\r\n        var result = new Date(parseInt10(arr[1]));\r\n        if (arr[2]) {\r\n            var mins = parseInt10(arr[3]);\r\n            if (arr[2] === \"-\") {\r\n                mins = -mins;\r\n            }\r\n\r\n            // The offset is reversed to get back the UTC date, which is\r\n            // what the API will eventually have.\r\n            var current = result.getUTCMinutes();\r\n            result.setUTCMinutes(current - mins);\r\n            result.__edmType = \"Edm.DateTimeOffset\";\r\n            result.__offset = minutesToOffset(mins);\r\n        }\r\n        if (!isNaN(result.valueOf())) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Allow undefined to be returned.\r\n}\r\n\r\n/** Creates an object containing information for the context\r\n * @param {String} fragments - Uri fragment\r\n * @param {Object} model - Object describing an OData conceptual schema\r\n * @returns {Object} type(optional)  object containing type information for entity- and complex-types ( null if a typeName is a primitive)\r\n */\r\nfunction parseContextUriFragment( fragments, model ) {\r\n    var ret = {};\r\n\r\n    if (fragments.indexOf('/') === -1 ) {\r\n        if (fragments.length === 0) {\r\n            // Capter 10.1\r\n            ret.detectedPayloadKind = PAYLOADTYPE_SVCDOC;\r\n            return ret;\r\n        } else if (fragments === 'Edm.Null') {\r\n            // Capter 10.15\r\n            ret.detectedPayloadKind = PAYLOADTYPE_VALUE;\r\n            ret.isNullProperty = true;\r\n            return ret;\r\n        } else if (fragments === 'Collection($ref)') {\r\n            // Capter 10.11\r\n            ret.detectedPayloadKind = PAYLOADTYPE_ENTITY_REF_LINKS;\r\n            return ret;\r\n        } else if (fragments === '$ref') {\r\n            // Capter 10.12\r\n            ret.detectedPayloadKind = PAYLOADTYPE_ENTITY_REF_LINK;\r\n            return ret;\r\n        } else {\r\n            //TODO check for navigation resource\r\n        }\r\n    }\r\n\r\n    ret.type = undefined;\r\n    ret.typeName = undefined;\r\n\r\n    var fragmentParts = fragments.split(\"/\");\r\n    var type;\r\n\r\n    for(var i = 0; i < fragmentParts.length; ++i) {\r\n        var fragment = fragmentParts[i];\r\n        if (ret.typeName === undefined) {\r\n            //preparation\r\n            if ( fragment.indexOf('(') !== -1 ) {\r\n                //remove the query function, cut fragment to matching '('\r\n                var index = fragment.length - 2 ;\r\n                for ( var rCount = 1; rCount > 0 && index > 0; --index) {\r\n                    if ( fragment.charAt(index)=='(') {\r\n                        rCount --;\r\n                    } else if ( fragment.charAt(index)==')') {\r\n                        rCount ++;\r\n                    }\r\n                }\r\n\r\n                if (index === 0) {\r\n                    //TODO throw error\r\n                }\r\n\r\n                //remove the projected entity from the fragment; TODO decide if we want to store the projected entity\r\n                var inPharenthesis = fragment.substring(index+2,fragment.length - 1);\r\n                fragment = fragment.substring(0,index+1);\r\n\r\n                if (utils.startsWith(fragment, 'Collection')) {\r\n                    ret.detectedPayloadKind = PAYLOADTYPE_COLLECTION;\r\n                    // Capter 10.14\r\n                    ret.typeName = inPharenthesis;\r\n\r\n                    type = lookupEntityType(ret.typeName, model);\r\n                    if ( type !== null) {\r\n                        ret.type = type;\r\n                        continue;\r\n                    }\r\n                    type = lookupComplexType(ret.typeName, model);\r\n                    if ( type !== null) {\r\n                        ret.type = type;\r\n                        continue;\r\n                    }\r\n\r\n                    ret.type = null;//in case of #Collection(Edm.String) only lastTypeName is filled\r\n                    continue;\r\n                } else {\r\n                    // projection: Capter 10.7, 10.8 and 10.9\r\n                    ret.projection = inPharenthesis;\r\n                }\r\n            }\r\n\r\n\r\n            if (jsonIsPrimitiveType(fragment)) {\r\n                ret.typeName = fragment;\r\n                ret.type = null;\r\n                ret.detectedPayloadKind = PAYLOADTYPE_VALUE;\r\n                continue;\r\n            }\r\n\r\n            var container = lookupDefaultEntityContainer(model);\r\n\r\n            //check for entity\r\n            var entitySet = lookupEntitySet(container.entitySet, fragment);\r\n            if ( entitySet !== null) {\r\n                ret.typeName = entitySet.entityType;\r\n                ret.type = lookupEntityType( ret.typeName, model);\r\n                ret.name = fragment;\r\n                ret.detectedPayloadKind = PAYLOADTYPE_FEED;\r\n                // Capter 10.2\r\n                continue;\r\n            }\r\n\r\n            //check for singleton\r\n            var singleton = lookupSingleton(container.singleton, fragment);\r\n            if ( singleton !== null) {\r\n                ret.typeName = singleton.entityType;\r\n                ret.type = lookupEntityType( ret.typeName, model);\r\n                ret.name = fragment;\r\n                ret.detectedPayloadKind =  PAYLOADTYPE_ENTRY;\r\n                // Capter 10.4\r\n                continue;\r\n            }\r\n\r\n\r\n\r\n            //TODO throw ERROR\r\n        } else {\r\n            //check for $entity\r\n            if (utils.endsWith(fragment, '$entity') && (ret.detectedPayloadKind === PAYLOADTYPE_FEED)) {\r\n                //TODO ret.name = fragment;\r\n                ret.detectedPayloadKind = PAYLOADTYPE_ENTRY;\r\n                // Capter 10.3 and 10.6\r\n                continue;\r\n            }\r\n\r\n            //check for derived types\r\n            if (fragment.indexOf('.') !== -1) {\r\n                // Capter 10.6\r\n                ret.typeName = fragment;\r\n                type = lookupEntityType(ret.typeName, model);\r\n                if ( type !== null) {\r\n                    ret.type = type;\r\n                    continue;\r\n                }\r\n                type = lookupComplexType(ret.typeName, model);\r\n                if ( type !== null) {\r\n                    ret.type = type;\r\n                    continue;\r\n                }\r\n\r\n                //TODO throw ERROR invalid type\r\n            }\r\n\r\n            //check for property value\r\n            if ( ret.detectedPayloadKind === PAYLOADTYPE_FEED || ret.detectedPayloadKind === PAYLOADTYPE_ENTRY) {\r\n                var property = lookupProperty(ret.type.property, fragment);\r\n                if (property !== null) {\r\n                    //PAYLOADTYPE_COLLECTION\r\n                    ret.typeName = property.type;\r\n\r\n\r\n                    if (utils.startsWith(property.type, 'Collection')) {\r\n                        ret.detectedPayloadKind = PAYLOADTYPE_COLLECTION;\r\n                        var tmp12 =  property.type.substring(10+1,property.type.length - 1);\r\n                        ret.typeName = tmp12;\r\n                        ret.type = lookupComplexType(tmp12, model);\r\n                        ret.detectedPayloadKind = PAYLOADTYPE_COLLECTION;\r\n                    } else {\r\n                        ret.type = lookupComplexType(property.type, model);\r\n                        ret.detectedPayloadKind = PAYLOADTYPE_PROPERTY;\r\n                    }\r\n\r\n                    ret.name = fragment;\r\n                    // Capter 10.15\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (fragment === '$delta') {\r\n                ret.deltaKind = DELTATYPE_FEED;\r\n                continue;\r\n            } else if (utils.endsWith(fragment, '/$deletedEntity')) {\r\n                ret.deltaKind = DELTATYPE_DELETED_ENTRY;\r\n                continue;\r\n            } else if (utils.endsWith(fragment, '/$link')) {\r\n                ret.deltaKind = DELTATYPE_LINK;\r\n                continue;\r\n            } else if (utils.endsWith(fragment, '/$deletedLink')) {\r\n                ret.deltaKind = DELTATYPE_DELETED_LINK;\r\n                continue;\r\n            }\r\n            //TODO throw ERROr\r\n        }\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\n\r\n/** Infers the information describing the JSON payload from its metadata annotation, structure, and data model.\r\n * @param {Object} data - Json response payload object.\r\n * @param {Object} model - Object describing an OData conceptual schema.\r\n * If the arguments passed to the function don't convey enough information about the payload to determine without doubt that the payload is a feed then it\r\n * will try to use the payload object structure instead.  If the payload looks like a feed (has value property that is an array or non-primitive values) then\r\n * the function will report its kind as PAYLOADTYPE_FEED unless the inferFeedAsComplexType flag is set to true. This flag comes from the user request\r\n * and allows the user to control how the library behaves with an ambigous JSON payload.\r\n * @return Object with kind and type fields. Null if there is no metadata annotation or the payload info cannot be obtained..\r\n */\r\nfunction createPayloadInfo(data, model) {\r\n    var metadataUri = data[contextUrlAnnotation];\r\n    if (!metadataUri || typeof metadataUri !== \"string\") {\r\n        return null;\r\n    }\r\n\r\n    var fragmentStart = metadataUri.lastIndexOf(\"#\");\r\n    if (fragmentStart === -1) {\r\n        return jsonMakePayloadInfo(PAYLOADTYPE_SVCDOC);\r\n    }\r\n\r\n    var fragment = metadataUri.substring(fragmentStart + 1);\r\n    return parseContextUriFragment(fragment,model);\r\n}\r\n/** Gets the key of an entry.\r\n * @param {Object} data - JSON entry.\r\n * @param {Object} data - EDM entity model for key loockup.\r\n * @returns {string} Entry instance key.\r\n */\r\nfunction jsonGetEntryKey(data, entityModel) {\r\n\r\n    var entityInstanceKey;\r\n    var entityKeys = entityModel.key[0].propertyRef;\r\n    var type;\r\n    entityInstanceKey = \"(\";\r\n    if (entityKeys.length == 1) {\r\n        type = lookupProperty(entityModel.property, entityKeys[0].name).type;\r\n        entityInstanceKey += formatLiteral(data[entityKeys[0].name], type);\r\n    } else {\r\n        var first = true;\r\n        for (var i = 0; i < entityKeys.length; i++) {\r\n            if (!first) {\r\n                entityInstanceKey += \",\";\r\n            } else {\r\n                first = false;\r\n            }\r\n            type = lookupProperty(entityModel.property, entityKeys[i].name).type;\r\n            entityInstanceKey += entityKeys[i].name + \"=\" + formatLiteral(data[entityKeys[i].name], type);\r\n        }\r\n    }\r\n    entityInstanceKey += \")\";\r\n    return entityInstanceKey;\r\n}\r\n/** Determines whether a type name is a primitive type in a JSON payload.\r\n * @param {String} typeName - Type name to test.\r\n * @returns {Boolean} True if the type name an EDM primitive type or an OData spatial type; false otherwise.\r\n */\r\nfunction jsonIsPrimitiveType(typeName) {\r\n    return isPrimitiveEdmType(typeName) || isGeographyEdmType(typeName) || isGeometryEdmType(typeName);\r\n}\r\n\r\n\r\nvar jsonHandler = oDataHandler.handler(jsonParser, jsonSerializer, jsonMediaType, MAX_DATA_SERVICE_VERSION);\r\njsonHandler.recognizeDates = false;\r\n\r\nexports.createPayloadInfo = createPayloadInfo;\r\nexports.jsonHandler = jsonHandler;\r\nexports.jsonParser = jsonParser;\r\nexports.jsonSerializer = jsonSerializer;\r\nexports.parseJsonDateString = parseJsonDateString;\n},{\"./../utils.js\":17,\"./handler.js\":12,\"./odatautils.js\":16}],14:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odata/metadata */\r\n\r\nvar utils    = _dereq_('./../utils.js');\r\nvar oDSxml    = _dereq_('./../xml.js');\r\nvar odataHandler    = _dereq_('./handler.js');\r\n\r\n\r\n\r\n// imports \r\nvar contains = utils.contains;\r\nvar normalizeURI = utils.normalizeURI;\r\nvar xmlAttributes = oDSxml.xmlAttributes;\r\nvar xmlChildElements = oDSxml.xmlChildElements;\r\nvar xmlFirstChildElement = oDSxml.xmlFirstChildElement;\r\nvar xmlInnerText = oDSxml.xmlInnerText;\r\nvar xmlLocalName = oDSxml.xmlLocalName;\r\nvar xmlNamespaceURI = oDSxml.xmlNamespaceURI;\r\nvar xmlNS = oDSxml.xmlNS;\r\nvar xmlnsNS = oDSxml.xmlnsNS;\r\nvar xmlParse = oDSxml.xmlParse;\r\n\r\nvar ado = oDSxml.http + \"docs.oasis-open.org/odata/\";      // http://docs.oasis-open.org/odata/\r\nvar adoDs = ado + \"ns\";                             // http://docs.oasis-open.org/odata/ns\r\nvar edmxNs = adoDs + \"/edmx\";                       // http://docs.oasis-open.org/odata/ns/edmx\r\nvar edmNs1 = adoDs + \"/edm\";                        // http://docs.oasis-open.org/odata/ns/edm\r\nvar odataMetaXmlNs = adoDs + \"/metadata\";           // http://docs.oasis-open.org/odata/ns/metadata\r\nvar MAX_DATA_SERVICE_VERSION = odataHandler.MAX_DATA_SERVICE_VERSION;\r\n\r\nvar xmlMediaType = \"application/xml\";\r\n\r\n/** Creates an object that describes an element in an schema.\r\n * @param {Array} attributes - List containing the names of the attributes allowed for this element.\r\n * @param {Array} elements - List containing the names of the child elements allowed for this element.\r\n * @param {Boolean} text - Flag indicating if the element's text value is of interest or not.\r\n * @param {String} ns - Namespace to which the element belongs to.\r\n * If a child element name ends with * then it is understood by the schema that that child element can appear 0 or more times.\r\n * @returns {Object} Object with attributes, elements, text, and ns fields.\r\n */\r\nfunction schemaElement(attributes, elements, text, ns) {\r\n\r\n    return {\r\n        attributes: attributes,\r\n        elements: elements,\r\n        text: text || false,\r\n        ns: ns\r\n    };\r\n}\r\n\r\n// It's assumed that all elements may have Documentation children and Annotation elements.\r\n// See http://docs.oasis-open.org/odata/odata/v4.0/cs01/part3-csdl/odata-v4.0-cs01-part3-csdl.html for a CSDL reference.\r\nvar schema = {\r\n    elements: {\r\n        Action: schemaElement(\r\n        /*attributes*/[\"Name\", \"IsBound\", \"EntitySetPath\"],\r\n        /*elements*/[\"ReturnType\", \"Parameter*\", \"Annotation*\"]\r\n        ),\r\n        ActionImport: schemaElement(\r\n        /*attributes*/[\"Name\", \"Action\", \"EntitySet\", \"Annotation*\"]\r\n        ),\r\n        Annotation: schemaElement(\r\n        /*attributes*/[\"Term\", \"Qualifier\", \"Binary\", \"Bool\", \"Date\", \"DateTimeOffset\", \"Decimal\", \"Duration\", \"EnumMember\", \"Float\", \"Guid\", \"Int\", \"String\", \"TimeOfDay\", \"AnnotationPath\", \"NavigationPropertyPath\", \"Path\", \"PropertyPath\", \"UrlRef\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n        AnnotationPath: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Annotations: schemaElement(\r\n        /*attributes*/[\"Target\", \"Qualifier\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        Apply: schemaElement(\r\n        /*attributes*/[\"Function\"],\r\n        /*elements*/[\"String*\", \"Path*\", \"LabeledElement*\", \"Annotation*\"]\r\n        ),\r\n        And: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Or: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Not: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Eq: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Ne: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Gt: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Ge: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Lt: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Le: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Binary: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Bool: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Cast: schemaElement(\r\n        /*attributes*/[\"Type\"],\r\n        /*elements*/[\"Path*\", \"Annotation*\"]\r\n        ),\r\n        Collection: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\"]\r\n        ),\r\n        ComplexType: schemaElement(\r\n        /*attributes*/[\"Name\", \"BaseType\", \"Abstract\", \"OpenType\"],\r\n        /*elements*/[\"Property*\", \"NavigationProperty*\", \"Annotation*\"]\r\n        ),\r\n        Date: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        DateTimeOffset: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Decimal: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Duration: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        EntityContainer: schemaElement(\r\n        /*attributes*/[\"Name\", \"Extends\"],\r\n        /*elements*/[\"EntitySet*\", \"Singleton*\", \"ActionImport*\", \"FunctionImport*\", \"Annotation*\"]\r\n        ),\r\n        EntitySet: schemaElement(\r\n        /*attributes*/[\"Name\", \"EntityType\", \"IncludeInServiceDocument\"],\r\n        /*elements*/[\"NavigationPropertyBinding*\", \"Annotation*\"]\r\n        ),\r\n        EntityType: schemaElement(\r\n        /*attributes*/[\"Name\", \"BaseType\", \"Abstract\", \"OpenType\", \"HasStream\"],\r\n        /*elements*/[\"Key*\", \"Property*\", \"NavigationProperty*\", \"Annotation*\"]\r\n        ),\r\n        EnumMember: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        EnumType: schemaElement(\r\n        /*attributes*/[\"Name\", \"UnderlyingType\", \"IsFlags\"],\r\n        /*elements*/[\"Member*\"]\r\n        ),\r\n        Float: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Function: schemaElement(\r\n        /*attributes*/[\"Name\", \"IsBound\", \"IsComposable\", \"EntitySetPath\"],\r\n        /*elements*/[\"ReturnType\", \"Parameter*\", \"Annotation*\"]\r\n        ),\r\n        FunctionImport: schemaElement(\r\n        /*attributes*/[\"Name\", \"Function\", \"EntitySet\", \"IncludeInServiceDocument\", \"Annotation*\"]\r\n        ),\r\n        Guid: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        If: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Path*\", \"String*\", \"Annotation*\"]\r\n        ),\r\n        Int: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        IsOf: schemaElement(\r\n        /*attributes*/[\"Type\", \"MaxLength\", \"Precision\", \"Scale\", \"Unicode\", \"SRID\", \"DefaultValue\", \"Annotation*\"],\r\n        /*elements*/[\"Path*\"]\r\n        ),\r\n        Key: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"PropertyRef*\"]\r\n        ),\r\n        LabeledElement: schemaElement(\r\n        /*attributes*/[\"Name\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n        LabeledElementReference: schemaElement(\r\n        /*attributes*/[\"Term\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\"]\r\n        ),\r\n        Member: schemaElement(\r\n        /*attributes*/[\"Name\", \"Value\"],\r\n        /*element*/[\"Annotation*\"]\r\n        ),\r\n        NavigationProperty: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"Nullable\", \"Partner\", \"ContainsTarget\"],\r\n        /*elements*/[\"ReferentialConstraint*\", \"OnDelete*\", \"Annotation*\"]\r\n        ),\r\n        NavigationPropertyBinding: schemaElement(\r\n        /*attributes*/[\"Path\", \"Target\"]\r\n        ),\r\n        NavigationPropertyPath: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Null: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        OnDelete: schemaElement(\r\n        /*attributes*/[\"Action\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        Path: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Parameter: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"SRID\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        Property: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"Unicode\", \"SRID\", \"DefaultValue\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        PropertyPath: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        PropertyRef: schemaElement(\r\n        /*attributes*/[\"Name\", \"Alias\"]\r\n        ),\r\n        PropertyValue: schemaElement(\r\n        /*attributes*/[\"Property\", \"Path\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n        Record: schemaElement(\r\n        /*attributes*/null,\r\n        /*Elements*/[\"PropertyValue*\", \"Property*\", \"Annotation*\"]\r\n        ),\r\n        ReferentialConstraint: schemaElement(\r\n        /*attributes*/[\"Property\", \"ReferencedProperty\", \"Annotation*\"]\r\n        ),\r\n        ReturnType: schemaElement(\r\n        /*attributes*/[\"Type\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"SRID\"]\r\n        ),\r\n        String: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Schema: schemaElement(\r\n        /*attributes*/[\"Namespace\", \"Alias\"],\r\n        /*elements*/[\"Action*\", \"Annotations*\", \"Annotation*\", \"ComplexType*\", \"EntityContainer\", \"EntityType*\", \"EnumType*\", \"Function*\", \"Term*\", \"TypeDefinition*\", \"Annotation*\"]\r\n        ),\r\n        Singleton: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\"],\r\n        /*elements*/[\"NavigationPropertyBinding*\", \"Annotation*\"]\r\n        ),\r\n        Term: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"BaseTerm\", \"DefaultValue \", \"AppliesTo\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"SRID\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        TimeOfDay: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        TypeDefinition: schemaElement(\r\n        /*attributes*/[\"Name\", \"UnderlyingType\", \"MaxLength\", \"Unicode\", \"Precision\", \"Scale\", \"SRID\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        UrlRef: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n\r\n        // See http://msdn.microsoft.com/en-us/library/dd541238(v=prot.10) for an EDMX reference.\r\n        Edmx: schemaElement(\r\n        /*attributes*/[\"Version\"],\r\n        /*elements*/[\"DataServices\", \"Reference*\"],\r\n        /*text*/false,\r\n        /*ns*/edmxNs\r\n        ),\r\n        DataServices: schemaElement(\r\n        /*attributes*/[\"m:MaxDataServiceVersion\", \"m:DataServiceVersion\"],\r\n        /*elements*/[\"Schema*\"],\r\n        /*text*/false,\r\n        /*ns*/edmxNs\r\n        ),\r\n        Reference: schemaElement(\r\n        /*attributes*/[\"Uri\"],\r\n        /*elements*/[\"Include*\", \"IncludeAnnotations*\", \"Annotation*\"]\r\n        ),\r\n        Include: schemaElement(\r\n        /*attributes*/[\"Namespace\", \"Alias\"]\r\n        ),\r\n        IncludeAnnotations: schemaElement(\r\n        /*attributes*/[\"TermNamespace\", \"Qualifier\", \"TargetNamespace\"]\r\n        )\r\n    }\r\n};\r\n\r\n\r\n/** Converts a Pascal-case identifier into a camel-case identifier.\r\n * @param {String} text - Text to convert.\r\n * @returns {String} Converted text.\r\n * If the text starts with multiple uppercase characters, it is left as-is.\r\n */\r\nfunction scriptCase(text) {\r\n\r\n    if (!text) {\r\n        return text;\r\n    }\r\n\r\n    if (text.length > 1) {\r\n        var firstTwo = text.substr(0, 2);\r\n        if (firstTwo === firstTwo.toUpperCase()) {\r\n            return text;\r\n        }\r\n\r\n        return text.charAt(0).toLowerCase() + text.substr(1);\r\n    }\r\n\r\n    return text.charAt(0).toLowerCase();\r\n}\r\n\r\n/** Gets the schema node for the specified element.\r\n * @param {Object} parentSchema - Schema of the parent XML node of 'element'.\r\n * @param candidateName - XML element name to consider.\r\n * @returns {Object} The schema that describes the specified element; null if not found.\r\n */\r\nfunction getChildSchema(parentSchema, candidateName) {\r\n\r\n    var elements = parentSchema.elements;\r\n    if (!elements) {\r\n        return null;\r\n    }\r\n\r\n    var i, len;\r\n    for (i = 0, len = elements.length; i < len; i++) {\r\n        var elementName = elements[i];\r\n        var multipleElements = false;\r\n        if (elementName.charAt(elementName.length - 1) === \"*\") {\r\n            multipleElements = true;\r\n            elementName = elementName.substr(0, elementName.length - 1);\r\n        }\r\n\r\n        if (candidateName === elementName) {\r\n            var propertyName = scriptCase(elementName);\r\n            return { isArray: multipleElements, propertyName: propertyName };\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Checks whether the specifies namespace URI is one of the known CSDL namespace URIs.\r\n * @param {String} nsURI - Namespace URI to check.\r\n * @returns {Boolean} true if nsURI is a known CSDL namespace; false otherwise.\r\n */\r\nfunction isEdmNamespace(nsURI) {\r\n\r\n    return nsURI === edmNs1;\r\n}\r\n\r\n/** Parses a CSDL document.\r\n * @param element - DOM element to parse.\r\n * @returns {Object} An object describing the parsed element.\r\n */\r\nfunction parseConceptualModelElement(element) {\r\n\r\n    var localName = xmlLocalName(element);\r\n    var nsURI = xmlNamespaceURI(element);\r\n    var elementSchema = schema.elements[localName];\r\n    if (!elementSchema) {\r\n        return null;\r\n    }\r\n\r\n    if (elementSchema.ns) {\r\n        if (nsURI !== elementSchema.ns) {\r\n            return null;\r\n        }\r\n    } else if (!isEdmNamespace(nsURI)) {\r\n        return null;\r\n    }\r\n\r\n    var item = {};\r\n    var attributes = elementSchema.attributes || [];\r\n    xmlAttributes(element, function (attribute) {\r\n\r\n        var localName = xmlLocalName(attribute);\r\n        var nsURI = xmlNamespaceURI(attribute);\r\n        var value = attribute.value;\r\n\r\n        // Don't do anything with xmlns attributes.\r\n        if (nsURI === xmlnsNS) {\r\n            return;\r\n        }\r\n\r\n        // Currently, only m: for metadata is supported as a prefix in the internal schema table,\r\n        // un-prefixed element names imply one a CSDL element.\r\n        var schemaName = null;\r\n        if (isEdmNamespace(nsURI) || nsURI === null) {\r\n            schemaName = \"\";\r\n        } else if (nsURI === odataMetaXmlNs) {\r\n            schemaName = \"m:\";\r\n        }\r\n\r\n        if (schemaName !== null) {\r\n            schemaName += localName;\r\n\r\n            if (contains(attributes, schemaName)) {\r\n                item[scriptCase(localName)] = value;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    xmlChildElements(element, function (child) {\r\n        var localName = xmlLocalName(child);\r\n        var childSchema = getChildSchema(elementSchema, localName);\r\n        if (childSchema) {\r\n            if (childSchema.isArray) {\r\n                var arr = item[childSchema.propertyName];\r\n                if (!arr) {\r\n                    arr = [];\r\n                    item[childSchema.propertyName] = arr;\r\n                }\r\n                arr.push(parseConceptualModelElement(child));\r\n            } else {\r\n                item[childSchema.propertyName] = parseConceptualModelElement(child);\r\n            }\r\n        } \r\n    });\r\n\r\n    if (elementSchema.text) {\r\n        item.text = xmlInnerText(element);\r\n    }\r\n\r\n    return item;\r\n}\r\n\r\n/** Parses a metadata document.\r\n * @param handler - This handler.\r\n * @param {String} text - Metadata text.\r\n * @returns An object representation of the conceptual model.\r\n */\r\nfunction metadataParser(handler, text) {\r\n\r\n    var doc = xmlParse(text);\r\n    var root = xmlFirstChildElement(doc);\r\n    return parseConceptualModelElement(root) || undefined;\r\n}\r\n\r\n\r\n\r\nexports.metadataHandler = odataHandler.handler(metadataParser, null, xmlMediaType, MAX_DATA_SERVICE_VERSION);\r\n\r\nexports.schema = schema;\r\nexports.scriptCase = scriptCase;\r\nexports.getChildSchema = getChildSchema;\r\nexports.parseConceptualModelElement = parseConceptualModelElement;\r\nexports.metadataParser = metadataParser;\n},{\"./../utils.js\":17,\"./../xml.js\":18,\"./handler.js\":12}],15:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n/** @module odata/net */\r\n/*for browser*/\r\n\r\n\r\nvar utils    = _dereq_('./../utils.js');\r\n// Imports.\r\n\r\nvar defined = utils.defined;\r\nvar delay = utils.delay;\r\n\r\nvar ticks = 0;\r\n\r\n/* Checks whether the specified request can be satisfied with a JSONP request.\r\n * @param request - Request object to check.\r\n * @returns {Boolean} true if the request can be satisfied; false otherwise.\r\n\r\n * Requests that 'degrade' without changing their meaning by going through JSONP\r\n * are considered usable.\r\n *\r\n * We allow data to come in a different format, as the servers SHOULD honor the Accept\r\n * request but may in practice return content with a different MIME type.\r\n */\r\nfunction canUseJSONP(request) {\r\n    \r\n    return !(request.method && request.method !== \"GET\");\r\n\r\n\r\n}\r\n\r\n/** Creates an IFRAME tag for loading the JSONP script\r\n * @param {String} url - The source URL of the script\r\n * @returns {HTMLElement} The IFRAME tag\r\n */\r\nfunction createIFrame(url) {\r\n    var iframe = window.document.createElement(\"IFRAME\");\r\n    iframe.style.display = \"none\";\r\n\r\n    var attributeEncodedUrl = url.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\");\r\n    var html = \"<html><head><script type=\\\"text/javascript\\\" src=\\\"\" + attributeEncodedUrl + \"\\\"><\\/script><\\/head><body><\\/body><\\/html>\";\r\n\r\n    var body = window.document.getElementsByTagName(\"BODY\")[0];\r\n    body.appendChild(iframe);\r\n\r\n    writeHtmlToIFrame(iframe, html);\r\n    return iframe;\r\n}\r\n\r\n/** Creates a XmlHttpRequest object.\r\n * @returns {XmlHttpRequest} XmlHttpRequest object.\r\n */\r\nfunction createXmlHttpRequest() {\r\n    if (window.XMLHttpRequest) {\r\n        return new window.XMLHttpRequest();\r\n    }\r\n    var exception;\r\n    if (window.ActiveXObject) {\r\n        try {\r\n            return new window.ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\r\n        } catch (_) {\r\n            try {\r\n                return new window.ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\r\n            } catch (e) {\r\n                exception = e;\r\n            }\r\n        }\r\n    } else {\r\n        exception = { message: \"XMLHttpRequest not supported\" };\r\n    }\r\n    throw exception;\r\n}\r\n\r\n/** Checks whether the specified URL is an absolute URL.\r\n * @param {String} url - URL to check.\r\n * @returns {Boolean} true if the url is an absolute URL; false otherwise.\r\n*/\r\nfunction isAbsoluteUrl(url) {\r\n    return url.indexOf(\"http://\") === 0 ||\r\n        url.indexOf(\"https://\") === 0 ||\r\n        url.indexOf(\"file://\") === 0;\r\n}\r\n\r\n/** Checks whether the specified URL is local to the current context.\r\n * @param {String} url - URL to check.\r\n * @returns {Boolean} true if the url is a local URL; false otherwise.\r\n */\r\nfunction isLocalUrl(url) {\r\n\r\n    if (!isAbsoluteUrl(url)) {\r\n        return true;\r\n    }\r\n\r\n    // URL-embedded username and password will not be recognized as same-origin URLs.\r\n    var location = window.location;\r\n    var locationDomain = location.protocol + \"//\" + location.host + \"/\";\r\n    return (url.indexOf(locationDomain) === 0);\r\n}\r\n\r\n/** Removes a callback used for a JSONP request.\r\n * @param {String} name - Function name to remove.\r\n * @param {Number} tick - Tick count used on the callback.\r\n */\r\nfunction removeCallback(name, tick) {\r\n    try {\r\n        delete window[name];\r\n    } catch (err) {\r\n        window[name] = undefined;\r\n        if (tick === ticks - 1) {\r\n            ticks -= 1;\r\n        }\r\n    }\r\n}\r\n\r\n/** Removes an iframe.\r\n * @param {Object} iframe - The iframe to remove.\r\n * @returns {Object} Null value to be assigned to iframe reference.\r\n */\r\nfunction removeIFrame(iframe) {\r\n    if (iframe) {\r\n        writeHtmlToIFrame(iframe, \"\");\r\n        iframe.parentNode.removeChild(iframe);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Reads response headers into array.\r\n * @param {XMLHttpRequest} xhr - HTTP request with response available.\r\n * @param {Array} headers - Target array to fill with name/value pairs.\r\n */\r\nfunction readResponseHeaders(xhr, headers) {\r\n\r\n    var responseHeaders = xhr.getAllResponseHeaders().split(/\\r?\\n/);\r\n    var i, len;\r\n    for (i = 0, len = responseHeaders.length; i < len; i++) {\r\n        if (responseHeaders[i]) {\r\n            var header = responseHeaders[i].split(\": \");\r\n            headers[header[0]] = header[1];\r\n        }\r\n    }\r\n}\r\n\r\n/** Writes HTML to an IFRAME document.\r\n * @param {HTMLElement} iframe - The IFRAME element to write to.\r\n * @param {String} html - The HTML to write.\r\n */\r\nfunction writeHtmlToIFrame(iframe, html) {\r\n    var frameDocument = (iframe.contentWindow) ? iframe.contentWindow.document : iframe.contentDocument.document;\r\n    frameDocument.open();\r\n    frameDocument.write(html);\r\n    frameDocument.close();\r\n}\r\n\r\nexports.defaultHttpClient = {\r\n    callbackParameterName: \"$callback\",\r\n\r\n    formatQueryString: \"$format=json\",\r\n\r\n    enableJsonpCallback: false,\r\n\r\n    /** Performs a network request.\r\n     * @param {Object} request - Request description\r\n     * @param {Function} success - Success callback with the response object.\r\n     * @param {Function} error - Error callback with an error object.\r\n     * @returns {Object} Object with an 'abort' method for the operation.\r\n     */\r\n    request: function createRequest() {\r\n\r\n        var that = this;\r\n\r\n\r\n        return function(request, success, error) {\r\n\r\n        var result = {};\r\n        var xhr = null;\r\n        var done = false;\r\n        var iframe;\r\n\r\n        result.abort = function () {\r\n            iframe = removeIFrame(iframe);\r\n            if (done) {\r\n                return;\r\n            }\r\n\r\n            done = true;\r\n            if (xhr) {\r\n                xhr.abort();\r\n                xhr = null;\r\n            }\r\n\r\n            error({ message: \"Request aborted\" });\r\n        };\r\n\r\n        var handleTimeout = function () {\r\n            iframe = removeIFrame(iframe);\r\n            if (!done) {\r\n                done = true;\r\n                xhr = null;\r\n                error({ message: \"Request timed out\" });\r\n            }\r\n        };\r\n\r\n        var name;\r\n        var url = request.requestUri;\r\n        var enableJsonpCallback = defined(request.enableJsonpCallback , that.enableJsonpCallback);\r\n        var callbackParameterName = defined(request.callbackParameterName, that.callbackParameterName);\r\n        var formatQueryString = defined(request.formatQueryString, that.formatQueryString);\r\n        if (!enableJsonpCallback || isLocalUrl(url)) {\r\n\r\n            xhr = createXmlHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (done || xhr === null || xhr.readyState !== 4) {\r\n                    return;\r\n                }\r\n\r\n                // Workaround for XHR behavior on IE.\r\n                var statusText = xhr.statusText;\r\n                var statusCode = xhr.status;\r\n                if (statusCode === 1223) {\r\n                    statusCode = 204;\r\n                    statusText = \"No Content\";\r\n                }\r\n\r\n                var headers = [];\r\n                readResponseHeaders(xhr, headers);\r\n\r\n                var response = { requestUri: url, statusCode: statusCode, statusText: statusText, headers: headers, body: xhr.responseText };\r\n\r\n                done = true;\r\n                xhr = null;\r\n                if (statusCode >= 200 && statusCode <= 299) {\r\n                    success(response);\r\n                } else {\r\n                    error({ message: \"HTTP request failed\", request: request, response: response });\r\n                }\r\n            };\r\n\r\n            xhr.open(request.method || \"GET\", url, true, request.user, request.password);\r\n\r\n            // Set the name/value pairs.\r\n            if (request.headers) {\r\n                for (name in request.headers) {\r\n                    xhr.setRequestHeader(name, request.headers[name]);\r\n                }\r\n            }\r\n\r\n            // Set the timeout if available.\r\n            if (request.timeoutMS) {\r\n                xhr.timeout = request.timeoutMS;\r\n                xhr.ontimeout = handleTimeout;\r\n            }\r\n            \r\n            if(typeof request.body === 'undefined'){\r\n                xhr.send();\r\n            } else {\r\n                xhr.send(request.body);\r\n            }\r\n        } else {\r\n            if (!canUseJSONP(request)) {\r\n                throw { message: \"Request is not local and cannot be done through JSONP.\" };\r\n            }\r\n\r\n            var tick = ticks;\r\n            ticks += 1;\r\n            var tickText = tick.toString();\r\n            var succeeded = false;\r\n            var timeoutId;\r\n            name = \"handleJSONP_\" + tickText;\r\n            window[name] = function (data) {\r\n                iframe = removeIFrame(iframe);\r\n                if (!done) {\r\n                    succeeded = true;\r\n                    window.clearTimeout(timeoutId);\r\n                    removeCallback(name, tick);\r\n\r\n                    // Workaround for IE8 and IE10 below where trying to access data.constructor after the IFRAME has been removed\r\n                    // throws an \"unknown exception\"\r\n                    if (window.ActiveXObject) {\r\n                        data = window.JSON.parse(window.JSON.stringify(data));\r\n                    }\r\n\r\n\r\n                    var headers;\r\n                    if (!formatQueryString || formatQueryString == \"$format=json\") {\r\n                        headers = { \"Content-Type\": \"application/json;odata.metadata=minimal\", \"OData-Version\": \"4.0\" };\r\n                    } else {\r\n                        // the formatQueryString should be in the format of \"$format=xxx\", xxx should be one of the application/json;odata.metadata=minimal(none or full)\r\n                        // set the content-type with the string xxx which stars from index 8.\r\n                        headers = { \"Content-Type\": formatQueryString.substring(8), \"OData-Version\": \"4.0\" };\r\n                    }\r\n\r\n                    // Call the success callback in the context of the parent window, instead of the IFRAME\r\n                    delay(function () {\r\n                        removeIFrame(iframe);\r\n                        success({ body: data, statusCode: 200, headers: headers });\r\n                    });\r\n                }\r\n            };\r\n\r\n            // Default to two minutes before timing out, 1000 ms * 60 * 2 = 120000.\r\n            var timeoutMS = (request.timeoutMS) ? request.timeoutMS : 120000;\r\n            timeoutId = window.setTimeout(handleTimeout, timeoutMS);\r\n\r\n            var queryStringParams = callbackParameterName + \"=parent.\" + name;\r\n            if (formatQueryString) {\r\n                queryStringParams += \"&\" + formatQueryString;\r\n            }\r\n\r\n            var qIndex = url.indexOf(\"?\");\r\n            if (qIndex === -1) {\r\n                url = url + \"?\" + queryStringParams;\r\n            } else if (qIndex === url.length - 1) {\r\n                url = url + queryStringParams;\r\n            } else {\r\n                url = url + \"&\" + queryStringParams;\r\n            }\r\n\r\n            iframe = createIFrame(url);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    }()\r\n};\r\n\r\n\r\n\r\nexports.canUseJSONP = canUseJSONP;\r\nexports.isAbsoluteUrl = isAbsoluteUrl;\r\nexports.isLocalUrl = isLocalUrl;\n},{\"./../utils.js\":17}],16:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n /** @module odata/utils */\r\n\r\nvar utils    = _dereq_('./../utils.js');\r\n\r\n// Imports\r\nvar assigned = utils.assigned;\r\nvar contains = utils.contains;\r\nvar find = utils.find;\r\nvar isArray = utils.isArray;\r\nvar isDate = utils.isDate;\r\nvar isObject = utils.isObject;\r\nvar parseInt10 = utils.parseInt10;\r\n\r\n\r\n/** Gets the type name of a data item value that belongs to a feed, an entry, a complex type property, or a collection property\r\n * @param {string} value - Value of the data item from which the type name is going to be retrieved.\r\n * @param {object} [metadata] - Object containing metadata about the data tiem.\r\n * @returns {string} Data item type name; null if the type name cannot be found within the value or the metadata\r\n * This function will first try to get the type name from the data item's value itself if it is an object with a __metadata property; otherwise\r\n * it will try to recover it from the metadata.  If both attempts fail, it will return null.\r\n */\r\nvar dataItemTypeName = function (value, metadata) {\r\n    var valueTypeName = ((value && value.__metadata) || {}).type;\r\n    return valueTypeName || (metadata ? metadata.type : null);\r\n};\r\n\r\nvar EDM = \"Edm.\";\r\nvar EDM_BOOLEAN = EDM + \"Boolean\";\r\nvar EDM_BYTE = EDM + \"Byte\";\r\nvar EDM_SBYTE = EDM + \"SByte\";\r\nvar EDM_INT16 = EDM + \"Int16\";\r\nvar EDM_INT32 = EDM + \"Int32\";\r\nvar EDM_INT64 = EDM + \"Int64\";\r\nvar EDM_SINGLE = EDM + \"Single\";\r\nvar EDM_DOUBLE = EDM + \"Double\";\r\nvar EDM_DECIMAL = EDM + \"Decimal\";\r\nvar EDM_STRING = EDM + \"String\";\r\n\r\nvar EDM_BINARY = EDM + \"Binary\";\r\nvar EDM_DATE = EDM + \"Date\";\r\nvar EDM_DATETIMEOFFSET = EDM + \"DateTimeOffset\";\r\nvar EDM_DURATION = EDM + \"Duration\";\r\nvar EDM_GUID = EDM + \"Guid\";\r\nvar EDM_TIMEOFDAY = EDM + \"Time\";\r\n\r\nvar GEOGRAPHY = \"Geography\";\r\nvar EDM_GEOGRAPHY = EDM + GEOGRAPHY;\r\nvar EDM_GEOGRAPHY_POINT = EDM_GEOGRAPHY + \"Point\";\r\nvar EDM_GEOGRAPHY_LINESTRING = EDM_GEOGRAPHY + \"LineString\";\r\nvar EDM_GEOGRAPHY_POLYGON = EDM_GEOGRAPHY + \"Polygon\";\r\nvar EDM_GEOGRAPHY_COLLECTION = EDM_GEOGRAPHY + \"Collection\";\r\nvar EDM_GEOGRAPHY_MULTIPOLYGON = EDM_GEOGRAPHY + \"MultiPolygon\";\r\nvar EDM_GEOGRAPHY_MULTILINESTRING = EDM_GEOGRAPHY + \"MultiLineString\";\r\nvar EDM_GEOGRAPHY_MULTIPOINT = EDM_GEOGRAPHY + \"MultiPoint\";\r\n\r\nvar GEOGRAPHY_POINT = GEOGRAPHY + \"Point\";\r\nvar GEOGRAPHY_LINESTRING = GEOGRAPHY + \"LineString\";\r\nvar GEOGRAPHY_POLYGON = GEOGRAPHY + \"Polygon\";\r\nvar GEOGRAPHY_COLLECTION = GEOGRAPHY + \"Collection\";\r\nvar GEOGRAPHY_MULTIPOLYGON = GEOGRAPHY + \"MultiPolygon\";\r\nvar GEOGRAPHY_MULTILINESTRING = GEOGRAPHY + \"MultiLineString\";\r\nvar GEOGRAPHY_MULTIPOINT = GEOGRAPHY + \"MultiPoint\";\r\n\r\nvar GEOMETRY = \"Geometry\";\r\nvar EDM_GEOMETRY = EDM + GEOMETRY;\r\nvar EDM_GEOMETRY_POINT = EDM_GEOMETRY + \"Point\";\r\nvar EDM_GEOMETRY_LINESTRING = EDM_GEOMETRY + \"LineString\";\r\nvar EDM_GEOMETRY_POLYGON = EDM_GEOMETRY + \"Polygon\";\r\nvar EDM_GEOMETRY_COLLECTION = EDM_GEOMETRY + \"Collection\";\r\nvar EDM_GEOMETRY_MULTIPOLYGON = EDM_GEOMETRY + \"MultiPolygon\";\r\nvar EDM_GEOMETRY_MULTILINESTRING = EDM_GEOMETRY + \"MultiLineString\";\r\nvar EDM_GEOMETRY_MULTIPOINT = EDM_GEOMETRY + \"MultiPoint\";\r\n\r\nvar GEOMETRY_POINT = GEOMETRY + \"Point\";\r\nvar GEOMETRY_LINESTRING = GEOMETRY + \"LineString\";\r\nvar GEOMETRY_POLYGON = GEOMETRY + \"Polygon\";\r\nvar GEOMETRY_COLLECTION = GEOMETRY + \"Collection\";\r\nvar GEOMETRY_MULTIPOLYGON = GEOMETRY + \"MultiPolygon\";\r\nvar GEOMETRY_MULTILINESTRING = GEOMETRY + \"MultiLineString\";\r\nvar GEOMETRY_MULTIPOINT = GEOMETRY + \"MultiPoint\";\r\n\r\nvar GEOJSON_POINT = \"Point\";\r\nvar GEOJSON_LINESTRING = \"LineString\";\r\nvar GEOJSON_POLYGON = \"Polygon\";\r\nvar GEOJSON_MULTIPOINT = \"MultiPoint\";\r\nvar GEOJSON_MULTILINESTRING = \"MultiLineString\";\r\nvar GEOJSON_MULTIPOLYGON = \"MultiPolygon\";\r\nvar GEOJSON_GEOMETRYCOLLECTION = \"GeometryCollection\";\r\n\r\nvar primitiveEdmTypes = [\r\n    EDM_STRING,\r\n    EDM_INT32,\r\n    EDM_INT64,\r\n    EDM_BOOLEAN,\r\n    EDM_DOUBLE,\r\n    EDM_SINGLE,\r\n    EDM_DATE,\r\n    EDM_DATETIMEOFFSET,\r\n    EDM_DURATION,\r\n    EDM_TIMEOFDAY,\r\n    EDM_DECIMAL,\r\n    EDM_GUID,\r\n    EDM_BYTE,\r\n    EDM_INT16,\r\n    EDM_SBYTE,\r\n    EDM_BINARY\r\n];\r\n\r\nvar geometryEdmTypes = [\r\n    EDM_GEOMETRY,\r\n    EDM_GEOMETRY_POINT,\r\n    EDM_GEOMETRY_LINESTRING,\r\n    EDM_GEOMETRY_POLYGON,\r\n    EDM_GEOMETRY_COLLECTION,\r\n    EDM_GEOMETRY_MULTIPOLYGON,\r\n    EDM_GEOMETRY_MULTILINESTRING,\r\n    EDM_GEOMETRY_MULTIPOINT\r\n];\r\n\r\nvar geometryTypes = [\r\n    GEOMETRY,\r\n    GEOMETRY_POINT,\r\n    GEOMETRY_LINESTRING,\r\n    GEOMETRY_POLYGON,\r\n    GEOMETRY_COLLECTION,\r\n    GEOMETRY_MULTIPOLYGON,\r\n    GEOMETRY_MULTILINESTRING,\r\n    GEOMETRY_MULTIPOINT\r\n];\r\n\r\nvar geographyEdmTypes = [\r\n    EDM_GEOGRAPHY,\r\n    EDM_GEOGRAPHY_POINT,\r\n    EDM_GEOGRAPHY_LINESTRING,\r\n    EDM_GEOGRAPHY_POLYGON,\r\n    EDM_GEOGRAPHY_COLLECTION,\r\n    EDM_GEOGRAPHY_MULTIPOLYGON,\r\n    EDM_GEOGRAPHY_MULTILINESTRING,\r\n    EDM_GEOGRAPHY_MULTIPOINT\r\n];\r\n\r\nvar geographyTypes = [\r\n    GEOGRAPHY,\r\n    GEOGRAPHY_POINT,\r\n    GEOGRAPHY_LINESTRING,\r\n    GEOGRAPHY_POLYGON,\r\n    GEOGRAPHY_COLLECTION,\r\n    GEOGRAPHY_MULTIPOLYGON,\r\n    GEOGRAPHY_MULTILINESTRING,\r\n    GEOGRAPHY_MULTIPOINT\r\n];\r\n\r\n/** Invokes a function once per schema in metadata.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @param {Function} callback - Callback function to invoke once per schema.\r\n * @returns The first truthy value to be returned from the callback; null or the last falsy value otherwise.\r\n */\r\nfunction forEachSchema(metadata, callback) {\r\n    \r\n\r\n    if (!metadata) {\r\n        return null;\r\n    }\r\n\r\n    if (isArray(metadata)) {\r\n        var i, len, result;\r\n        for (i = 0, len = metadata.length; i < len; i++) {\r\n            result = forEachSchema(metadata[i], callback);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    } else {\r\n        if (metadata.dataServices) {\r\n            return forEachSchema(metadata.dataServices.schema, callback);\r\n        }\r\n\r\n        return callback(metadata);\r\n    }\r\n}\r\n\r\n/** Formats a millisecond and a nanosecond value into a single string.\r\n * @param {Number} ms - Number of milliseconds to format.\r\n * @param {Number} ns - Number of nanoseconds to format.\r\n * @returns {String} Formatted text.\r\n * If the value is already as string it's returned as-is.\r\n */\r\nfunction formatMilliseconds(ms, ns) {\r\n\r\n    // Avoid generating milliseconds if not necessary.\r\n    if (ms === 0) {\r\n        ms = \"\";\r\n    } else {\r\n        ms = \".\" + formatNumberWidth(ms.toString(), 3);\r\n    }\r\n    if (ns > 0) {\r\n        if (ms === \"\") {\r\n            ms = \".000\";\r\n        }\r\n        ms += formatNumberWidth(ns.toString(), 4);\r\n    }\r\n    return ms;\r\n}\r\n\r\nfunction formatDateTimeOffsetJSON(value) {\r\n    return \"\\/Date(\" + value.getTime() + \")\\/\";\r\n}\r\n\r\n/** Formats a DateTime or DateTimeOffset value a string.\r\n * @param {Date} value - Value to format\r\n * @returns {String} Formatted text.\r\n * If the value is already as string it's returned as-is\r\n´*/\r\nfunction formatDateTimeOffset(value) {\r\n\r\n    if (typeof value === \"string\") {\r\n        return value;\r\n    }\r\n\r\n    var hasOffset = isDateTimeOffset(value);\r\n    var offset = getCanonicalTimezone(value.__offset);\r\n    if (hasOffset && offset !== \"Z\") {\r\n        // We're about to change the value, so make a copy.\r\n        value = new Date(value.valueOf());\r\n\r\n        var timezone = parseTimezone(offset);\r\n        var hours = value.getUTCHours() + (timezone.d * timezone.h);\r\n        var minutes = value.getUTCMinutes() + (timezone.d * timezone.m);\r\n\r\n        value.setUTCHours(hours, minutes);\r\n    } else if (!hasOffset) {\r\n        // Don't suffix a 'Z' for Edm.DateTime values.\r\n        offset = \"\";\r\n    }\r\n\r\n    var year = value.getUTCFullYear();\r\n    var month = value.getUTCMonth() + 1;\r\n    var sign = \"\";\r\n    if (year <= 0) {\r\n        year = -(year - 1);\r\n        sign = \"-\";\r\n    }\r\n\r\n    var ms = formatMilliseconds(value.getUTCMilliseconds(), value.__ns);\r\n\r\n    return sign +\r\n        formatNumberWidth(year, 4) + \"-\" +\r\n        formatNumberWidth(month, 2) + \"-\" +\r\n        formatNumberWidth(value.getUTCDate(), 2) + \"T\" +\r\n        formatNumberWidth(value.getUTCHours(), 2) + \":\" +\r\n        formatNumberWidth(value.getUTCMinutes(), 2) + \":\" +\r\n        formatNumberWidth(value.getUTCSeconds(), 2) +\r\n        ms + offset;\r\n}\r\n\r\n/** Converts a duration to a string in xsd:duration format.\r\n * @param {Object} value - Object with ms and __edmType properties.\r\n * @returns {String} String representation of the time object in xsd:duration format.\r\n */\r\nfunction formatDuration(value) {\r\n\r\n    var ms = value.ms;\r\n\r\n    var sign = \"\";\r\n    if (ms < 0) {\r\n        sign = \"-\";\r\n        ms = -ms;\r\n    }\r\n\r\n    var days = Math.floor(ms / 86400000);\r\n    ms -= 86400000 * days;\r\n    var hours = Math.floor(ms / 3600000);\r\n    ms -= 3600000 * hours;\r\n    var minutes = Math.floor(ms / 60000);\r\n    ms -= 60000 * minutes;\r\n    var seconds = Math.floor(ms / 1000);\r\n    ms -= seconds * 1000;\r\n\r\n    return sign + \"P\" +\r\n           formatNumberWidth(days, 2) + \"DT\" +\r\n           formatNumberWidth(hours, 2) + \"H\" +\r\n           formatNumberWidth(minutes, 2) + \"M\" +\r\n           formatNumberWidth(seconds, 2) +\r\n           formatMilliseconds(ms, value.ns) + \"S\";\r\n}\r\n\r\n/** Formats the specified value to the given width.\r\n * @param {Number} value - Number to format (non-negative).\r\n * @param {Number} width - Minimum width for number.\r\n * @param {Boolean} append - Flag indicating if the value is padded at the beginning (false) or at the end (true).\r\n * @returns {String} Text representation.\r\n */\r\nfunction formatNumberWidth(value, width, append) {\r\n    var result = value.toString(10);\r\n    while (result.length < width) {\r\n        if (append) {\r\n            result += \"0\";\r\n        } else {\r\n            result = \"0\" + result;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Gets the canonical timezone representation.\r\n * @param {String} timezone - Timezone representation.\r\n * @returns {String} An 'Z' string if the timezone is absent or 0; the timezone otherwise.\r\n */\r\nfunction getCanonicalTimezone(timezone) {\r\n\r\n    return (!timezone || timezone === \"Z\" || timezone === \"+00:00\" || timezone === \"-00:00\") ? \"Z\" : timezone;\r\n}\r\n\r\n/** Gets the type of a collection type name.\r\n * @param {String} typeName - Type name of the collection.\r\n * @returns {String} Type of the collection; null if the type name is not a collection type.\r\n */\r\nfunction getCollectionType(typeName) {\r\n\r\n    if (typeof typeName === \"string\") {\r\n        var end = typeName.indexOf(\")\", 10);\r\n        if (typeName.indexOf(\"Collection(\") === 0 && end > 0) {\r\n            return typeName.substring(11, end);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Sends a request containing OData payload to a server.\r\n* @param request - Object that represents the request to be sent..\r\n* @param success - Callback for a successful read operation.\r\n* @param error - Callback for handling errors.\r\n* @param handler - Handler for data serialization.\r\n* @param httpClient - HTTP client layer.\r\n* @param context - Context used for processing the request\r\n*/\r\nfunction invokeRequest(request, success, error, handler, httpClient, context) {\r\n\r\n    return httpClient.request(request, function (response) {\r\n        try {\r\n            if (response.headers) {\r\n                normalizeHeaders(response.headers);\r\n            }\r\n\r\n            if (response.data === undefined && response.statusCode !== 204) {\r\n                handler.read(response, context);\r\n            }\r\n        } catch (err) {\r\n            if (err.request === undefined) {\r\n                err.request = request;\r\n            }\r\n            if (err.response === undefined) {\r\n                err.response = response;\r\n            }\r\n            error(err);\r\n            return;\r\n        }\r\n        // errors in success handler for sync requests result in error handler calls. So here we fix this. \r\n        try {\r\n            success(response.data, response);\r\n        } catch (err) {\r\n            err.bIsSuccessHandlerError = true;\r\n            throw err;\r\n        }\r\n    }, error);\r\n}\r\n\r\n/** Tests whether a value is a batch object in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a batch object; false otherwise.\r\n */\r\nfunction isBatch(value) {\r\n\r\n    return isComplex(value) && isArray(value.__batchRequests);\r\n}\r\n\r\n// Regular expression used for testing and parsing for a collection type.\r\nvar collectionTypeRE = /Collection\\((.*)\\)/;\r\n\r\n/** Tests whether a value is a collection value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @param {String} typeName - Type name of the value. This is used to disambiguate from a collection property value.\r\n * @returns {Boolean} True is the value is a feed value; false otherwise.\r\n */\r\nfunction isCollection(value, typeName) {\r\n\r\n    var colData = value && value.results || value;\r\n    return !!colData &&\r\n        (isCollectionType(typeName)) ||\r\n        (!typeName && isArray(colData) && !isComplex(colData[0]));\r\n}\r\n\r\n/** Checks whether the specified type name is a collection type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is the name of a collection type; false otherwise.\r\n */\r\nfunction isCollectionType(typeName) {\r\n    return collectionTypeRE.test(typeName);\r\n}\r\n\r\n/** Tests whether a value is a complex type value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a complex type value; false otherwise.\r\n */\r\nfunction isComplex(value) {\r\n\r\n    return !!value &&\r\n        isObject(value) &&\r\n        !isArray(value) &&\r\n        !isDate(value);\r\n}\r\n\r\n/** Checks whether a Date object is DateTimeOffset value\r\n * @param {Date} value - Value to check\r\n * @returns {Boolean} true if the value is a DateTimeOffset, false otherwise.\r\n */\r\nfunction isDateTimeOffset(value) {\r\n    return (value.__edmType === \"Edm.DateTimeOffset\" || (!value.__edmType && value.__offset));\r\n}\r\n\r\n/** Tests whether a value is a deferred navigation property in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a deferred navigation property; false otherwise.\r\n */\r\nfunction isDeferred(value) {\r\n\r\n    if (!value && !isComplex(value)) {\r\n        return false;\r\n    }\r\n    var metadata = value.__metadata || {};\r\n    var deferred = value.__deferred || {};\r\n    return !metadata.type && !!deferred.uri;\r\n}\r\n\r\n/** Tests whether a value is an entry object in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is an entry object; false otherwise.\r\n */\r\nfunction isEntry(value) {\r\n\r\n    return isComplex(value) && value.__metadata && \"uri\" in value.__metadata;\r\n}\r\n\r\n/** Tests whether a value is a feed value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @param {String} typeName - Type name of the value. This is used to disambiguate from a collection property value.\r\n * @returns {Boolean} True is the value is a feed value; false otherwise.\r\n */\r\nfunction isFeed(value, typeName) {\r\n\r\n    var feedData = value && value.results || value;\r\n    return isArray(feedData) && (\r\n        (!isCollectionType(typeName)) &&\r\n        (isComplex(feedData[0]))\r\n    );\r\n}\r\n\r\n/** Checks whether the specified type name is a geography EDM type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is a geography EDM type; false otherwise.\r\n */\r\nfunction isGeographyEdmType(typeName) {\r\n    //check with edm\r\n    return contains(geographyEdmTypes, typeName) ||\r\n        (typeName.indexOf('.') === -1 && contains(geographyTypes, typeName));\r\n        \r\n}\r\n\r\n/** Checks whether the specified type name is a geometry EDM type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is a geometry EDM type; false otherwise.\r\n */\r\nfunction isGeometryEdmType(typeName) {\r\n    return contains(geometryEdmTypes, typeName) ||\r\n        (typeName.indexOf('.') === -1 && contains(geometryTypes, typeName));\r\n}\r\n\r\n\r\n\r\n/** Tests whether a value is a named stream value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a named stream; false otherwise.\r\n */\r\nfunction isNamedStream(value) {\r\n\r\n    if (!value && !isComplex(value)) {\r\n        return false;\r\n    }\r\n    var metadata = value.__metadata;\r\n    var mediaResource = value.__mediaresource;\r\n    return !metadata && !!mediaResource && !!mediaResource.media_src;\r\n}\r\n\r\n/** Tests whether a value is a primitive type value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a primitive type value.\r\n * Date objects are considered primitive types by the library.\r\n */\r\nfunction isPrimitive(value) {\r\n\r\n    return isDate(value) ||\r\n        typeof value === \"string\" ||\r\n        typeof value === \"number\" ||\r\n        typeof value === \"boolean\";\r\n}\r\n\r\n/** Checks whether the specified type name is a primitive EDM type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is a primitive EDM type; false otherwise.\r\n */\r\nfunction isPrimitiveEdmType(typeName) {\r\n\r\n    return contains(primitiveEdmTypes, typeName);\r\n}\r\n\r\n/** Gets the kind of a navigation property value.\r\n * @param value - Value of the navigation property.\r\n * @param {Object} [propertyModel] - Object that describes the navigation property in an OData conceptual schema.\r\n * @returns {String} String value describing the kind of the navigation property; null if the kind cannot be determined.\r\n */\r\nfunction navigationPropertyKind(value, propertyModel) {\r\n\r\n    if (isDeferred(value)) {\r\n        return \"deferred\";\r\n    }\r\n    if (isEntry(value)) {\r\n        return \"entry\";\r\n    }\r\n    if (isFeed(value)) {\r\n        return \"feed\";\r\n    }\r\n    if (propertyModel && propertyModel.relationship) {\r\n        if (value === null || value === undefined || !isFeed(value)) {\r\n            return \"entry\";\r\n        }\r\n        return \"feed\";\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Looks up a property by name.\r\n * @param {Array} properties - Array of property objects as per EDM metadata (may be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The property object; null if not found.\r\n */\r\nfunction lookupProperty(properties, name) {\r\n\r\n    return find(properties, function (property) {\r\n        return property.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up a type object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @param {String} kind - Kind of object to look for as per EDM metadata.\r\n * @returns An type description if the name is found; null otherwise\r\n */\r\nfunction lookupInMetadata(name, metadata, kind) {\r\n\r\n    return (name) ? forEachSchema(metadata, function (schema) {\r\n        return lookupInSchema(name, schema, kind);\r\n    }) : null;\r\n}\r\n\r\n/** Looks up a entity set by name.\r\n * @param {Array} entitySets - Array of entity set objects as per EDM metadata( may be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The entity set object; null if not found.\r\n */\r\nfunction lookupEntitySet(entitySets, name) {\r\n\r\n    return find(entitySets, function (entitySet) {\r\n        return entitySet.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up a entity set by name.\r\n * @param {Array} singletons - Array of entity set objects as per EDM metadata (may be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The entity set object; null if not found.\r\n */\r\nfunction lookupSingleton(singletons, name) {\r\n\r\n    return find(singletons, function (singleton) {\r\n        return singleton.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up a complex type object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns A complex type description if the name is found; null otherwise.\r\n */\r\nfunction lookupComplexType(name, metadata) {\r\n\r\n    return lookupInMetadata(name, metadata, \"complexType\");\r\n}\r\n\r\n/** Looks up an entity type object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns An entity type description if the name is found; null otherwise.\r\n */\r\nfunction lookupEntityType(name, metadata) {\r\n\r\n    return lookupInMetadata(name, metadata, \"entityType\");\r\n}\r\n\r\n\r\n/** Looks up an\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns An entity container description if the name is found; null otherwise.\r\n */\r\nfunction lookupDefaultEntityContainer(metadata) {\r\n\r\n    return forEachSchema(metadata, function (schema) {\r\n        if (isObject(schema.entityContainer)) { \r\n            return schema.entityContainer;\r\n        }\r\n    });\r\n}\r\n\r\n/** Looks up an entity container object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns An entity container description if the name is found; null otherwise.\r\n */\r\nfunction lookupEntityContainer(name, metadata) {\r\n\r\n    return lookupInMetadata(name, metadata, \"entityContainer\");\r\n}\r\n\r\n/** Looks up a function import by name.\r\n * @param {Array} functionImports - Array of function import objects as per EDM metadata (May be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The entity set object; null if not found.\r\n */\r\nfunction lookupFunctionImport(functionImports, name) {\r\n    return find(functionImports, function (functionImport) {\r\n        return functionImport.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up the target entity type for a navigation property.\r\n * @param {Object} navigationProperty - \r\n * @param {Object} metadata - \r\n * @returns {String} The entity type name for the specified property, null if not found.\r\n */\r\nfunction lookupNavigationPropertyType(navigationProperty, metadata) {\r\n\r\n    var result = null;\r\n    if (navigationProperty) {\r\n        var rel = navigationProperty.relationship;\r\n        var association = forEachSchema(metadata, function (schema) {\r\n            // The name should be the namespace qualified name in 'ns'.'type' format.\r\n            var nameOnly = removeNamespace(schema.namespace, rel);\r\n            var associations = schema.association;\r\n            if (nameOnly && associations) {\r\n                var i, len;\r\n                for (i = 0, len = associations.length; i < len; i++) {\r\n                    if (associations[i].name === nameOnly) {\r\n                        return associations[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n\r\n        if (association) {\r\n            var end = association.end[0];\r\n            if (end.role !== navigationProperty.toRole) {\r\n                end = association.end[1];\r\n                // For metadata to be valid, end.role === navigationProperty.toRole now.\r\n            }\r\n            result = end.type;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Looks up the target entityset name for a navigation property.\r\n * @param {Object} navigationProperty - \r\n * @param {Object} sourceEntitySetName -\r\n * @param {Object} metadata -\r\n * metadata\r\n * @returns {String} The entityset name for the specified property, null if not found.\r\n */\r\nfunction lookupNavigationPropertyEntitySet(navigationProperty, sourceEntitySetName, metadata) {\r\n\r\n    if (navigationProperty) {\r\n        var rel = navigationProperty.relationship;\r\n        var associationSet = forEachSchema(metadata, function (schema) {\r\n            var containers = schema.entityContainer;\r\n            for (var i = 0; i < containers.length; i++) {\r\n                var associationSets = containers[i].associationSet;\r\n                if (associationSets) {\r\n                    for (var j = 0; j < associationSets.length; j++) {\r\n                        if (associationSets[j].association == rel) {\r\n                            return associationSets[j];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n        if (associationSet && associationSet.end[0] && associationSet.end[1]) {\r\n            return (associationSet.end[0].entitySet == sourceEntitySetName) ? associationSet.end[1].entitySet : associationSet.end[0].entitySet;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Gets the entitySet info, container name and functionImports for an entitySet\r\n * @param {Object} entitySetName -\r\n * @param {Object} metadata - \r\n * @returns {Object} The info about the entitySet.\r\n */\r\nfunction getEntitySetInfo(entitySetName, metadata) {\r\n\r\n    var info = forEachSchema(metadata, function (schema) {\r\n        var container = schema.entityContainer;\r\n        var entitySets = container.entitySet;\r\n        if (entitySets) {\r\n            for (var j = 0; j < entitySets.length; j++) {\r\n                if (entitySets[j].name == entitySetName) {\r\n                    return { entitySet: entitySets[j], containerName: container.name, functionImport: container.functionImport };\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    });\r\n\r\n    return info;\r\n}\r\n\r\n/** Given an expected namespace prefix, removes it from a full name.\r\n * @param {String} ns - Expected namespace.\r\n * @param {String} fullName - Full name in 'ns'.'name' form.\r\n * @returns {String} The local name, null if it isn't found in the expected namespace.\r\n */\r\nfunction removeNamespace(ns, fullName) {\r\n\r\n    if (fullName.indexOf(ns) === 0 && fullName.charAt(ns.length) === \".\") {\r\n        return fullName.substr(ns.length + 1);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Looks up a schema object by name.\r\n * @param {String} name - Name (assigned).\r\n * @param schema - Schema object as per EDM metadata.\r\n * @param {String} kind - Kind of object to look for as per EDM metadata.\r\n * @returns An entity type description if the name is found; null otherwise.\r\n */\r\nfunction lookupInSchema(name, schema, kind) {\r\n\r\n    if (name && schema) {\r\n        // The name should be the namespace qualified name in 'ns'.'type' format.\r\n        var nameOnly = removeNamespace(schema.namespace, name);\r\n        if (nameOnly) {\r\n            return find(schema[kind], function (item) {\r\n                return item.name === nameOnly;\r\n            });\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Compares to version strings and returns the higher one.\r\n * @param {String} left - Version string in the form \"major.minor.rev\"\r\n * @param {String} right - Version string in the form \"major.minor.rev\"\r\n * @returns {String} The higher version string.\r\n */\r\nfunction maxVersion(left, right) {\r\n\r\n    if (left === right) {\r\n        return left;\r\n    }\r\n\r\n    var leftParts = left.split(\".\");\r\n    var rightParts = right.split(\".\");\r\n\r\n    var len = (leftParts.length >= rightParts.length) ?\r\n        leftParts.length :\r\n        rightParts.length;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n        var leftVersion = leftParts[i] && parseInt10(leftParts[i]);\r\n        var rightVersion = rightParts[i] && parseInt10(rightParts[i]);\r\n        if (leftVersion > rightVersion) {\r\n            return left;\r\n        }\r\n        if (leftVersion < rightVersion) {\r\n            return right;\r\n        }\r\n    }\r\n}\r\n\r\nvar normalHeaders = {\r\n    // Headers shared by request and response\r\n    \"content-type\": \"Content-Type\",\r\n    \"content-encoding\": \"Content-Encoding\",\r\n    \"content-length\": \"Content-Length\",\r\n    \"odata-version\": \"OData-Version\",\r\n    \r\n    // Headers used by request\r\n    \"accept\": \"Accept\",\r\n    \"accept-charset\": \"Accept-Charset\",\r\n    \"if-match\": \"If-Match\",\r\n    \"if-none-match\": \"If-None-Match\",\r\n    \"odata-isolation\": \"OData-Isolation\",\r\n    \"odata-maxversion\": \"OData-MaxVersion\",\r\n    \"prefer\": \"Prefer\",\r\n    \"content-id\": \"Content-ID\",\r\n    \"content-transfer-encoding\": \"Content-Transfer-Encoding\",\r\n    \r\n    // Headers used by response\r\n    \"etag\": \"ETag\",\r\n    \"location\": \"Location\",\r\n    \"odata-entityid\": \"OData-EntityId\",\r\n    \"preference-applied\": \"Preference-Applied\",\r\n    \"retry-after\": \"Retry-After\"\r\n};\r\n\r\n/** Normalizes headers so they can be found with consistent casing.\r\n * @param {Object} headers - Dictionary of name/value pairs.\r\n */\r\nfunction normalizeHeaders(headers) {\r\n\r\n    for (var name in headers) {\r\n        var lowerName = name.toLowerCase();\r\n        var normalName = normalHeaders[lowerName];\r\n        if (normalName && name !== normalName) {\r\n            var val = headers[name];\r\n            delete headers[name];\r\n            headers[normalName] = val;\r\n        }\r\n    }\r\n}\r\n\r\n/** Parses a string into a boolean value.\r\n * @param propertyValue - Value to parse.\r\n * @returns {Boolean} true if the property value is 'true'; false otherwise.\r\n */\r\nfunction parseBool(propertyValue) {\r\n\r\n    if (typeof propertyValue === \"boolean\") {\r\n        return propertyValue;\r\n    }\r\n\r\n    return typeof propertyValue === \"string\" && propertyValue.toLowerCase() === \"true\";\r\n}\r\n\r\n\r\n// The captured indices for this expression are:\r\n// 0     - complete input\r\n// 1,2,3 - year with optional minus sign, month, day\r\n// 4,5,6 - hours, minutes, seconds\r\n// 7     - optional milliseconds\r\n// 8     - everything else (presumably offset information)\r\nvar parseDateTimeRE = /^(-?\\d{4,})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})(?::(\\d{2}))?(?:\\.(\\d+))?(.*)$/;\r\n\r\n/** Parses a string into a DateTime value.\r\n * @param {String} value - Value to parse.\r\n * @param {Boolean} withOffset - Whether offset is expected.\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {Date} The parsed value.\r\n */\r\nfunction parseDateTimeMaybeOffset(value, withOffset, nullOnError) {\r\n\r\n    // We cannot parse this in cases of failure to match or if offset information is specified.\r\n    var parts = parseDateTimeRE.exec(value);\r\n    var offset = (parts) ? getCanonicalTimezone(parts[8]) : null;\r\n\r\n    if (!parts || (!withOffset && offset !== \"Z\")) {\r\n        if (nullOnError) {\r\n            return null;\r\n        }\r\n        throw { message: \"Invalid date/time value\" };\r\n    }\r\n\r\n    // Pre-parse years, account for year '0' being invalid in dateTime.\r\n    var year = parseInt10(parts[1]);\r\n    if (year <= 0) {\r\n        year++;\r\n    }\r\n\r\n    // Pre-parse optional milliseconds, fill in default. Fail if value is too precise.\r\n    var ms = parts[7];\r\n    var ns = 0;\r\n    if (!ms) {\r\n        ms = 0;\r\n    } else {\r\n        if (ms.length > 7) {\r\n            if (nullOnError) {\r\n                return null;\r\n            }\r\n            throw { message: \"Cannot parse date/time value to given precision.\" };\r\n        }\r\n\r\n        ns = formatNumberWidth(ms.substring(3), 4, true);\r\n        ms = formatNumberWidth(ms.substring(0, 3), 3, true);\r\n\r\n        ms = parseInt10(ms);\r\n        ns = parseInt10(ns);\r\n    }\r\n\r\n    // Pre-parse other time components and offset them if necessary.\r\n    var hours = parseInt10(parts[4]);\r\n    var minutes = parseInt10(parts[5]);\r\n    var seconds = parseInt10(parts[6]) || 0;\r\n    if (offset !== \"Z\") {\r\n        // The offset is reversed to get back the UTC date, which is\r\n        // what the API will eventually have.\r\n        var timezone = parseTimezone(offset);\r\n        var direction = -(timezone.d);\r\n        hours += timezone.h * direction;\r\n        minutes += timezone.m * direction;\r\n    }\r\n\r\n    // Set the date and time separately with setFullYear, so years 0-99 aren't biased like in Date.UTC.\r\n    var result = new Date();\r\n    result.setUTCFullYear(\r\n        year,                       // Year.\r\n        parseInt10(parts[2]) - 1,   // Month (zero-based for Date.UTC and setFullYear).\r\n        parseInt10(parts[3])        // Date.\r\n        );\r\n    result.setUTCHours(hours, minutes, seconds, ms);\r\n\r\n    if (isNaN(result.valueOf())) {\r\n        if (nullOnError) {\r\n            return null;\r\n        }\r\n        throw { message: \"Invalid date/time value\" };\r\n    }\r\n\r\n    if (withOffset) {\r\n        result.__edmType = \"Edm.DateTimeOffset\";\r\n        result.__offset = offset;\r\n    }\r\n\r\n    if (ns) {\r\n        result.__ns = ns;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Parses a string into a Date object.\r\n * @param {String} propertyValue - Value to parse.\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {Date} The parsed with year, month, day set, time values are set to 0\r\n */\r\nfunction parseDate(propertyValue, nullOnError) {\r\n    var parts = propertyValue.split('-');\r\n\r\n    if (parts.length != 3 && nullOnError) {\r\n        return null;\r\n    }\r\n    return new Date(\r\n        parseInt10(parts[0]),       // Year.\r\n        parseInt10(parts[1]) - 1,   // Month (zero-based for Date.UTC and setFullYear).\r\n        parseInt10(parts[2],\r\n        0,0,0,0)        // Date.\r\n        );\r\n\r\n}\r\n\r\nvar parseTimeOfDayRE = /^(\\d+):(\\d+)(:(\\d+)(.(\\d+))?)?$/;\r\n\r\n/**Parses a time into a Date object.\r\n * @param propertyValue\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {{h: Number, m: Number, s: Number, ms: Number}}\r\n */\r\nfunction parseTimeOfDay(propertyValue, nullOnError) {\r\n    var parts = parseTimeOfDayRE.exec(propertyValue);\r\n\r\n\r\n    return {\r\n        'h' :parseInt10(parts[1]),\r\n        'm' :parseInt10(parts[2]),\r\n        's' :parseInt10(parts[4]),\r\n        'ms' :parseInt10(parts[6])\r\n     };\r\n}\r\n\r\n/** Parses a string into a DateTimeOffset value.\r\n * @param {String} propertyValue - Value to parse.\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {Date} The parsed value.\r\n * The resulting object is annotated with an __edmType property and\r\n * an __offset property reflecting the original intended offset of\r\n * the value. The time is adjusted for UTC time, as the current\r\n * timezone-aware Date APIs will only work with the local timezone.\r\n */\r\nfunction parseDateTimeOffset(propertyValue, nullOnError) {\r\n    \r\n\r\n    return parseDateTimeMaybeOffset(propertyValue, true, nullOnError);\r\n}\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, miliseconds\r\n\r\nvar parseTimeRE = /^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\nfunction isEdmDurationValue(value) {\r\n    parseTimeRE.test(value);\r\n}\r\n\r\n/** Parses a string in xsd:duration format.\r\n * @param {String} duration - Duration value.\r\n\r\n * This method will throw an exception if the input string has a year or a month component.\r\n\r\n * @returns {Object} Object representing the time\r\n */\r\nfunction parseDuration(duration) {\r\n\r\n    var parts = parseTimeRE.exec(duration);\r\n\r\n    if (parts === null) {\r\n        throw { message: \"Invalid duration value.\" };\r\n    }\r\n\r\n    var years = parts[2] || \"0\";\r\n    var months = parts[3] || \"0\";\r\n    var days = parseInt10(parts[4] || 0);\r\n    var hours = parseInt10(parts[5] || 0);\r\n    var minutes = parseInt10(parts[6] || 0);\r\n    var seconds = parseFloat(parts[7] || 0);\r\n\r\n    if (years !== \"0\" || months !== \"0\") {\r\n        throw { message: \"Unsupported duration value.\" };\r\n    }\r\n\r\n    var ms = parts[8];\r\n    var ns = 0;\r\n    if (!ms) {\r\n        ms = 0;\r\n    } else {\r\n        if (ms.length > 7) {\r\n            throw { message: \"Cannot parse duration value to given precision.\" };\r\n        }\r\n\r\n        ns = formatNumberWidth(ms.substring(3), 4, true);\r\n        ms = formatNumberWidth(ms.substring(0, 3), 3, true);\r\n\r\n        ms = parseInt10(ms);\r\n        ns = parseInt10(ns);\r\n    }\r\n\r\n    ms += seconds * 1000 + minutes * 60000 + hours * 3600000 + days * 86400000;\r\n\r\n    if (parts[1] === \"-\") {\r\n        ms = -ms;\r\n    }\r\n\r\n    var result = { ms: ms, __edmType: \"Edm.Time\" };\r\n\r\n    if (ns) {\r\n        result.ns = ns;\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Parses a timezone description in (+|-)nn:nn format.\r\n * @param {String} timezone - Timezone offset.\r\n * @returns {Object} An object with a (d)irection property of 1 for + and -1 for -, offset (h)ours and offset (m)inutes.\r\n */\r\nfunction parseTimezone(timezone) {\r\n\r\n    var direction = timezone.substring(0, 1);\r\n    direction = (direction === \"+\") ? 1 : -1;\r\n\r\n    var offsetHours = parseInt10(timezone.substring(1));\r\n    var offsetMinutes = parseInt10(timezone.substring(timezone.indexOf(\":\") + 1));\r\n    return { d: direction, h: offsetHours, m: offsetMinutes };\r\n}\r\n\r\n/** Prepares a request object so that it can be sent through the network.\r\n* @param request - Object that represents the request to be sent.\r\n* @param handler - Handler for data serialization\r\n* @param context - Context used for preparing the request\r\n*/\r\nfunction prepareRequest(request, handler, context) {\r\n\r\n    // Default to GET if no method has been specified.\r\n    if (!request.method) {\r\n        request.method = \"GET\";\r\n    }\r\n\r\n    if (!request.headers) {\r\n        request.headers = {};\r\n    } else {\r\n        normalizeHeaders(request.headers);\r\n    }\r\n\r\n    if (request.headers.Accept === undefined) {\r\n        request.headers.Accept = handler.accept;\r\n    }\r\n\r\n    if (assigned(request.data) && request.body === undefined) {\r\n        handler.write(request, context);\r\n    }\r\n\r\n    if (!assigned(request.headers[\"OData-MaxVersion\"])) {\r\n        request.headers[\"OData-MaxVersion\"] = handler.maxDataServiceVersion || \"4.0\";\r\n    }\r\n\r\n    if (request.async === undefined) {\r\n        request.async = true;\r\n    }\r\n\r\n}\r\n\r\n/** Traverses a tree of objects invoking callback for every value.\r\n * @param {Object} item - Object or array to traverse.\r\n * @param {Object} owner - Pass through each callback\r\n * @param {Function} callback - Callback function with key and value, similar to JSON.parse reviver.\r\n * @returns {Object} The object with traversed properties.\r\n Unlike the JSON reviver, this won't delete null members.\r\n*/\r\nfunction traverseInternal(item, owner, callback) {\r\n\r\n    if (item && typeof item === \"object\") {\r\n        for (var name in item) {\r\n            var value = item[name];\r\n            var result = traverseInternal(value, name, callback);\r\n            result = callback(name, result, owner);\r\n            if (result !== value) {\r\n                if (value === undefined) {\r\n                    delete item[name];\r\n                } else {\r\n                    item[name] = result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return item;\r\n}\r\n\r\n/** Traverses a tree of objects invoking callback for every value.\r\n * @param {Object} item - Object or array to traverse.\r\n * @param {Function} callback - Callback function with key and value, similar to JSON.parse reviver.\r\n * @returns {Object} The traversed object.\r\n * Unlike the JSON reviver, this won't delete null members.\r\n*/\r\nfunction traverse(item, callback) {\r\n\r\n    return callback(\"\", traverseInternal(item, \"\", callback));\r\n}\r\n\r\nexports.dataItemTypeName = dataItemTypeName;\r\nexports.EDM_BINARY = EDM_BINARY;\r\nexports.EDM_BOOLEAN = EDM_BOOLEAN;\r\nexports.EDM_BYTE = EDM_BYTE;\r\nexports.EDM_DATE = EDM_DATE;\r\nexports.EDM_DATETIMEOFFSET = EDM_DATETIMEOFFSET;\r\nexports.EDM_DURATION = EDM_DURATION;\r\nexports.EDM_DECIMAL = EDM_DECIMAL;\r\nexports.EDM_DOUBLE = EDM_DOUBLE;\r\nexports.EDM_GEOGRAPHY = EDM_GEOGRAPHY;\r\nexports.EDM_GEOGRAPHY_POINT = EDM_GEOGRAPHY_POINT;\r\nexports.EDM_GEOGRAPHY_LINESTRING = EDM_GEOGRAPHY_LINESTRING;\r\nexports.EDM_GEOGRAPHY_POLYGON = EDM_GEOGRAPHY_POLYGON;\r\nexports.EDM_GEOGRAPHY_COLLECTION = EDM_GEOGRAPHY_COLLECTION;\r\nexports.EDM_GEOGRAPHY_MULTIPOLYGON = EDM_GEOGRAPHY_MULTIPOLYGON;\r\nexports.EDM_GEOGRAPHY_MULTILINESTRING = EDM_GEOGRAPHY_MULTILINESTRING;\r\nexports.EDM_GEOGRAPHY_MULTIPOINT = EDM_GEOGRAPHY_MULTIPOINT;\r\nexports.EDM_GEOMETRY = EDM_GEOMETRY;\r\nexports.EDM_GEOMETRY_POINT = EDM_GEOMETRY_POINT;\r\nexports.EDM_GEOMETRY_LINESTRING = EDM_GEOMETRY_LINESTRING;\r\nexports.EDM_GEOMETRY_POLYGON = EDM_GEOMETRY_POLYGON;\r\nexports.EDM_GEOMETRY_COLLECTION = EDM_GEOMETRY_COLLECTION;\r\nexports.EDM_GEOMETRY_MULTIPOLYGON = EDM_GEOMETRY_MULTIPOLYGON;\r\nexports.EDM_GEOMETRY_MULTILINESTRING = EDM_GEOMETRY_MULTILINESTRING;\r\nexports.EDM_GEOMETRY_MULTIPOINT = EDM_GEOMETRY_MULTIPOINT;\r\nexports.EDM_GUID = EDM_GUID;\r\nexports.EDM_INT16 = EDM_INT16;\r\nexports.EDM_INT32 = EDM_INT32;\r\nexports.EDM_INT64 = EDM_INT64;\r\nexports.EDM_SBYTE = EDM_SBYTE;\r\nexports.EDM_SINGLE = EDM_SINGLE;\r\nexports.EDM_STRING = EDM_STRING;\r\nexports.EDM_TIMEOFDAY = EDM_TIMEOFDAY;\r\nexports.GEOJSON_POINT = GEOJSON_POINT;\r\nexports.GEOJSON_LINESTRING = GEOJSON_LINESTRING;\r\nexports.GEOJSON_POLYGON = GEOJSON_POLYGON;\r\nexports.GEOJSON_MULTIPOINT = GEOJSON_MULTIPOINT;\r\nexports.GEOJSON_MULTILINESTRING = GEOJSON_MULTILINESTRING;\r\nexports.GEOJSON_MULTIPOLYGON = GEOJSON_MULTIPOLYGON;\r\nexports.GEOJSON_GEOMETRYCOLLECTION = GEOJSON_GEOMETRYCOLLECTION;\r\nexports.forEachSchema = forEachSchema;\r\nexports.formatDateTimeOffset = formatDateTimeOffset;\r\nexports.formatDateTimeOffsetJSON = formatDateTimeOffsetJSON;\r\nexports.formatDuration = formatDuration;\r\nexports.formatNumberWidth = formatNumberWidth;\r\nexports.getCanonicalTimezone = getCanonicalTimezone;\r\nexports.getCollectionType = getCollectionType;\r\nexports.invokeRequest = invokeRequest;\r\nexports.isBatch = isBatch;\r\nexports.isCollection = isCollection;\r\nexports.isCollectionType = isCollectionType;\r\nexports.isComplex = isComplex;\r\nexports.isDateTimeOffset = isDateTimeOffset;\r\nexports.isDeferred = isDeferred;\r\nexports.isEntry = isEntry;\r\nexports.isFeed = isFeed;\r\nexports.isGeographyEdmType = isGeographyEdmType;\r\nexports.isGeometryEdmType = isGeometryEdmType;\r\nexports.isNamedStream = isNamedStream;\r\nexports.isPrimitive = isPrimitive;\r\nexports.isPrimitiveEdmType = isPrimitiveEdmType;\r\nexports.lookupComplexType = lookupComplexType;\r\nexports.lookupDefaultEntityContainer = lookupDefaultEntityContainer;\r\nexports.lookupEntityContainer = lookupEntityContainer;\r\nexports.lookupEntitySet = lookupEntitySet;\r\nexports.lookupSingleton = lookupSingleton;\r\nexports.lookupEntityType = lookupEntityType;\r\nexports.lookupFunctionImport = lookupFunctionImport;\r\nexports.lookupNavigationPropertyType = lookupNavigationPropertyType;\r\nexports.lookupNavigationPropertyEntitySet = lookupNavigationPropertyEntitySet;\r\nexports.lookupInSchema = lookupInSchema;\r\nexports.lookupProperty = lookupProperty;\r\nexports.lookupInMetadata = lookupInMetadata;\r\nexports.getEntitySetInfo = getEntitySetInfo;\r\nexports.maxVersion = maxVersion;\r\nexports.navigationPropertyKind = navigationPropertyKind;\r\nexports.normalizeHeaders = normalizeHeaders;\r\nexports.parseBool = parseBool;\r\n\r\n\r\nexports.parseDate = parseDate;\r\nexports.parseDateTimeOffset = parseDateTimeOffset;\r\nexports.parseDuration = parseDuration;\r\nexports.parseTimeOfDay = parseTimeOfDay;\r\n\r\nexports.parseInt10 = parseInt10;\r\nexports.prepareRequest = prepareRequest;\r\nexports.removeNamespace = removeNamespace;\r\nexports.traverse = traverse;\r\n\r\n\r\n\n},{\"./../utils.js\":17}],17:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odatajs/utils */\r\n\r\n\r\nfunction inBrowser() {\r\n    return typeof window !== 'undefined';\r\n}\r\n\r\n/** Creates a new ActiveXObject from the given progId.\r\n * @param {String} progId - ProgId string of the desired ActiveXObject.\r\n * @returns {Object} The ActiveXObject instance. Null if ActiveX is not supported by the browser.\r\n * This function throws whatever exception might occur during the creation\r\n * of the ActiveXObject.\r\n*/\r\nvar activeXObject = function (progId) {\r\n    \r\n    if (window.ActiveXObject) {\r\n        return new window.ActiveXObject(progId);\r\n    }\r\n    return null;\r\n};\r\n\r\n/** Checks whether the specified value is different from null and undefined.\r\n * @param [value] Value to check ( may be null)\r\n * @returns {Boolean} true if the value is assigned; false otherwise.\r\n*/     \r\nfunction assigned(value) {\r\n    return value !== null && value !== undefined;\r\n}\r\n\r\n/** Checks whether the specified item is in the array.\r\n * @param {Array} [arr] Array to check in.\r\n * @param item - Item to look for.\r\n * @returns {Boolean} true if the item is contained, false otherwise.\r\n*/\r\nfunction contains(arr, item) {\r\n    var i, len;\r\n    for (i = 0, len = arr.length; i < len; i++) {\r\n        if (arr[i] === item) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/** Given two values, picks the first one that is not undefined.\r\n * @param a - First value.\r\n * @param b - Second value.\r\n * @returns a if it's a defined value; else b.\r\n */\r\nfunction defined(a, b) {\r\n    return (a !== undefined) ? a : b;\r\n}\r\n\r\n/** Delays the invocation of the specified function until execution unwinds.\r\n * @param {Function} callback - Callback function.\r\n */\r\nfunction delay(callback) {\r\n\r\n    if (arguments.length === 1) {\r\n        window.setTimeout(callback, 0);\r\n        return;\r\n    }\r\n\r\n    var args = Array.prototype.slice.call(arguments, 1);\r\n    window.setTimeout(function () {\r\n        callback.apply(this, args);\r\n    }, 0);\r\n}\r\n\r\n/** Throws an exception in case that a condition evaluates to false.\r\n * @param {Boolean} condition - Condition to evaluate.\r\n * @param {String} message - Message explaining the assertion.\r\n * @param {Object} data - Additional data to be included in the exception.\r\n */\r\nfunction djsassert(condition, message, data) {\r\n\r\n\r\n    if (!condition) {\r\n        throw { message: \"Assert fired: \" + message, data: data };\r\n    }\r\n}\r\n\r\n/** Extends the target with the specified values.\r\n * @param {Object} target - Object to add properties to.\r\n * @param {Object} values - Object with properties to add into target.\r\n * @returns {Object} The target object.\r\n*/\r\nfunction extend(target, values) {\r\n    for (var name in values) {\r\n        target[name] = values[name];\r\n    }\r\n\r\n    return target;\r\n}\r\n\r\nfunction find(arr, callback) {\r\n    /** Returns the first item in the array that makes the callback function true.\r\n     * @param {Array} [arr] Array to check in. ( may be null)\r\n     * @param {Function} callback - Callback function to invoke once per item in the array.\r\n     * @returns The first item that makes the callback return true; null otherwise or if the array is null.\r\n    */\r\n\r\n    if (arr) {\r\n        var i, len;\r\n        for (i = 0, len = arr.length; i < len; i++) {\r\n            if (callback(arr[i])) {\r\n                return arr[i];\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isArray(value) {\r\n    /** Checks whether the specified value is an array object.\r\n     * @param value - Value to check.\r\n     * @returns {Boolean} true if the value is an array object; false otherwise.\r\n     */\r\n\r\n    return Object.prototype.toString.call(value) === \"[object Array]\";\r\n}\r\n\r\n/** Checks whether the specified value is a Date object.\r\n * @param value - Value to check.\r\n * @returns {Boolean} true if the value is a Date object; false otherwise.\r\n */\r\nfunction isDate(value) {\r\n    return Object.prototype.toString.call(value) === \"[object Date]\";\r\n}\r\n\r\n/** Tests whether a value is an object.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is an object; false otherwise.\r\n * Per javascript rules, null and array values are objects and will cause this function to return true.\r\n */\r\nfunction isObject(value) {\r\n    return typeof value === \"object\";\r\n}\r\n\r\n/** Parses a value in base 10.\r\n * @param {String} value - String value to parse.\r\n * @returns {Number} The parsed value, NaN if not a valid value.\r\n*/   \r\nfunction parseInt10(value) {\r\n    return parseInt(value, 10);\r\n}\r\n\r\n/** Renames a property in an object.\r\n * @param {Object} obj - Object in which the property will be renamed.\r\n * @param {String} oldName - Name of the property that will be renamed.\r\n * @param {String} newName - New name of the property.\r\n * This function will not do anything if the object doesn't own a property with the specified old name.\r\n */\r\nfunction renameProperty(obj, oldName, newName) {\r\n    if (obj.hasOwnProperty(oldName)) {\r\n        obj[newName] = obj[oldName];\r\n        delete obj[oldName];\r\n    }\r\n}\r\n\r\n/** Default error handler.\r\n * @param {Object} error - Error to handle.\r\n */\r\nfunction throwErrorCallback(error) {\r\n    throw error;\r\n}\r\n\r\n/** Removes leading and trailing whitespaces from a string.\r\n * @param {String} str String to trim\r\n * @returns {String} The string with no leading or trailing whitespace.\r\n */\r\nfunction trimString(str) {\r\n    if (str.trim) {\r\n        return str.trim();\r\n    }\r\n\r\n    return str.replace(/^\\s+|\\s+$/g, '');\r\n}\r\n\r\n/** Returns a default value in place of undefined.\r\n * @param [value] Value to check (may be null)\r\n * @param defaultValue - Value to return if value is undefined.\r\n * @returns value if it's defined; defaultValue otherwise.\r\n * This should only be used for cases where falsy values are valid;\r\n * otherwise the pattern should be 'x = (value) ? value : defaultValue;'.\r\n */\r\nfunction undefinedDefault(value, defaultValue) {\r\n    return (value !== undefined) ? value : defaultValue;\r\n}\r\n\r\n// Regular expression that splits a uri into its components:\r\n// 0 - is the matched string.\r\n// 1 - is the scheme.\r\n// 2 - is the authority.\r\n// 3 - is the path.\r\n// 4 - is the query.\r\n// 5 - is the fragment.\r\nvar uriRegEx = /^([^:\\/?#]+:)?(\\/\\/[^\\/?#]*)?([^?#:]+)?(\\?[^#]*)?(#.*)?/;\r\nvar uriPartNames = [\"scheme\", \"authority\", \"path\", \"query\", \"fragment\"];\r\n\r\n/** Gets information about the components of the specified URI.\r\n * @param {String} uri - URI to get information from.\r\n * @return  {Object} An object with an isAbsolute flag and part names (scheme, authority, etc.) if available.\r\n */\r\nfunction getURIInfo(uri) {\r\n    var result = { isAbsolute: false };\r\n\r\n    if (uri) {\r\n        var matches = uriRegEx.exec(uri);\r\n        if (matches) {\r\n            var i, len;\r\n            for (i = 0, len = uriPartNames.length; i < len; i++) {\r\n                if (matches[i + 1]) {\r\n                    result[uriPartNames[i]] = matches[i + 1];\r\n                }\r\n            }\r\n        }\r\n        if (result.scheme) {\r\n            result.isAbsolute = true;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Builds a URI string from its components.\r\n * @param {Object} uriInfo -  An object with uri parts (scheme, authority, etc.).\r\n * @returns {String} URI string.\r\n */\r\nfunction getURIFromInfo(uriInfo) {\r\n    return \"\".concat(\r\n        uriInfo.scheme || \"\",\r\n        uriInfo.authority || \"\",\r\n        uriInfo.path || \"\",\r\n        uriInfo.query || \"\",\r\n        uriInfo.fragment || \"\");\r\n}\r\n\r\n// Regular expression that splits a uri authority into its subcomponents:\r\n// 0 - is the matched string.\r\n// 1 - is the userinfo subcomponent.\r\n// 2 - is the host subcomponent.\r\n// 3 - is the port component.\r\nvar uriAuthorityRegEx = /^\\/{0,2}(?:([^@]*)@)?([^:]+)(?::{1}(\\d+))?/;\r\n\r\n// Regular expression that matches percentage enconded octects (i.e %20 or %3A);\r\nvar pctEncodingRegEx = /%[0-9A-F]{2}/ig;\r\n\r\n/** Normalizes the casing of a URI.\r\n * @param {String} uri - URI to normalize, absolute or relative.\r\n * @returns {String} The URI normalized to lower case.\r\n*/\r\nfunction normalizeURICase(uri) {\r\n    var uriInfo = getURIInfo(uri);\r\n    var scheme = uriInfo.scheme;\r\n    var authority = uriInfo.authority;\r\n\r\n    if (scheme) {\r\n        uriInfo.scheme = scheme.toLowerCase();\r\n        if (authority) {\r\n            var matches = uriAuthorityRegEx.exec(authority);\r\n            if (matches) {\r\n                uriInfo.authority = \"//\" +\r\n                (matches[1] ? matches[1] + \"@\" : \"\") +\r\n                (matches[2].toLowerCase()) +\r\n                (matches[3] ? \":\" + matches[3] : \"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    uri = getURIFromInfo(uriInfo);\r\n\r\n    return uri.replace(pctEncodingRegEx, function (str) {\r\n        return str.toLowerCase();\r\n    });\r\n}\r\n\r\n/** Normalizes a possibly relative URI with a base URI.\r\n * @param {String} uri - URI to normalize, absolute or relative\r\n * @param {String} base - Base URI to compose with (may be null)\r\n * @returns {String} The composed URI if relative; the original one if absolute.\r\n */\r\nfunction normalizeURI(uri, base) {\r\n    if (!base) {\r\n        return uri;\r\n    }\r\n\r\n    var uriInfo = getURIInfo(uri);\r\n    if (uriInfo.isAbsolute) {\r\n        return uri;\r\n    }\r\n\r\n    var baseInfo = getURIInfo(base);\r\n    var normInfo = {};\r\n    var path;\r\n\r\n    if (uriInfo.authority) {\r\n        normInfo.authority = uriInfo.authority;\r\n        path = uriInfo.path;\r\n        normInfo.query = uriInfo.query;\r\n    } else {\r\n        if (!uriInfo.path) {\r\n            path = baseInfo.path;\r\n            normInfo.query = uriInfo.query || baseInfo.query;\r\n        } else {\r\n            if (uriInfo.path.charAt(0) === '/') {\r\n                path = uriInfo.path;\r\n            } else {\r\n                path = mergeUriPathWithBase(uriInfo.path, baseInfo.path);\r\n            }\r\n            normInfo.query = uriInfo.query;\r\n        }\r\n        normInfo.authority = baseInfo.authority;\r\n    }\r\n\r\n    normInfo.path = removeDotsFromPath(path);\r\n\r\n    normInfo.scheme = baseInfo.scheme;\r\n    normInfo.fragment = uriInfo.fragment;\r\n\r\n    return getURIFromInfo(normInfo);\r\n}\r\n\r\n/** Merges the path of a relative URI and a base URI.\r\n * @param {String} uriPath - Relative URI path.\r\n * @param {String} basePath - Base URI path.\r\n * @returns {String} A string with the merged path.\r\n */\r\nfunction mergeUriPathWithBase(uriPath, basePath) {\r\n    var path = \"/\";\r\n    var end;\r\n\r\n    if (basePath) {\r\n        end = basePath.lastIndexOf(\"/\");\r\n        path = basePath.substring(0, end);\r\n\r\n        if (path.charAt(path.length - 1) !== \"/\") {\r\n            path = path + \"/\";\r\n        }\r\n    }\r\n\r\n    return path + uriPath;\r\n}\r\n\r\n/** Removes the special folders . and .. from a URI's path.\r\n * @param {string} path - URI path component.\r\n * @returns {String} Path without any . and .. folders.\r\n */\r\nfunction removeDotsFromPath(path) {\r\n    var result = \"\";\r\n    var segment = \"\";\r\n    var end;\r\n\r\n    while (path) {\r\n        if (path.indexOf(\"..\") === 0 || path.indexOf(\".\") === 0) {\r\n            path = path.replace(/^\\.\\.?\\/?/g, \"\");\r\n        } else if (path.indexOf(\"/..\") === 0) {\r\n            path = path.replace(/^\\/\\..\\/?/g, \"/\");\r\n            end = result.lastIndexOf(\"/\");\r\n            if (end === -1) {\r\n                result = \"\";\r\n            } else {\r\n                result = result.substring(0, end);\r\n            }\r\n        } else if (path.indexOf(\"/.\") === 0) {\r\n            path = path.replace(/^\\/\\.\\/?/g, \"/\");\r\n        } else {\r\n            segment = path;\r\n            end = path.indexOf(\"/\", 1);\r\n            if (end !== -1) {\r\n                segment = path.substring(0, end);\r\n            }\r\n            result = result + segment;\r\n            path = path.replace(segment, \"\");\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction convertByteArrayToHexString(str) {\r\n    var arr = [];\r\n    if (window.atob === undefined) {\r\n        arr = decodeBase64(str);\r\n    } else {\r\n        var binaryStr = window.atob(str);\r\n        for (var i = 0; i < binaryStr.length; i++) {\r\n            arr.push(binaryStr.charCodeAt(i));\r\n        }\r\n    }\r\n    var hexValue = \"\";\r\n    var hexValues = \"0123456789ABCDEF\";\r\n    for (var j = 0; j < arr.length; j++) {\r\n        var t = arr[j];\r\n        hexValue += hexValues[t >> 4];\r\n        hexValue += hexValues[t & 0x0F];\r\n    }\r\n    return hexValue;\r\n}\r\n\r\nfunction decodeBase64(str) {\r\n    var binaryString = \"\";\r\n    for (var i = 0; i < str.length; i++) {\r\n        var base65IndexValue = getBase64IndexValue(str[i]);\r\n        var binaryValue = \"\";\r\n        if (base65IndexValue !== null) {\r\n            binaryValue = base65IndexValue.toString(2);\r\n            binaryString += addBase64Padding(binaryValue);\r\n        }\r\n    }\r\n    var byteArray = [];\r\n    var numberOfBytes = parseInt(binaryString.length / 8, 10);\r\n    for (i = 0; i < numberOfBytes; i++) {\r\n        var intValue = parseInt(binaryString.substring(i * 8, (i + 1) * 8), 2);\r\n        byteArray.push(intValue);\r\n    }\r\n    return byteArray;\r\n}\r\n\r\nfunction getBase64IndexValue(character) {\r\n    var asciiCode = character.charCodeAt(0);\r\n    var asciiOfA = 65;\r\n    var differenceBetweenZanda = 6;\r\n    if (asciiCode >= 65 && asciiCode <= 90) {           // between \"A\" and \"Z\" inclusive\r\n        return asciiCode - asciiOfA;\r\n    } else if (asciiCode >= 97 && asciiCode <= 122) {   // between 'a' and 'z' inclusive\r\n        return asciiCode - asciiOfA - differenceBetweenZanda;\r\n    } else if (asciiCode >= 48 && asciiCode <= 57) {    // between '0' and '9' inclusive\r\n        return asciiCode + 4;\r\n    } else if (character == \"+\") {\r\n        return 62;\r\n    } else if (character == \"/\") {\r\n        return 63;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction addBase64Padding(binaryString) {\r\n    while (binaryString.length < 6) {\r\n        binaryString = \"0\" + binaryString;\r\n    }\r\n    return binaryString;\r\n\r\n}\r\n\r\nfunction getJsonValueArraryLength(data) {\r\n    if (data && data.value) {\r\n        return data.value.length;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction sliceJsonValueArray(data, start, end) {\r\n    if (data === undefined || data.value === undefined) {\r\n        return data;\r\n    }\r\n\r\n    if (start < 0) {\r\n        start = 0;\r\n    }\r\n\r\n    var length = getJsonValueArraryLength(data);\r\n    if (length < end) {\r\n        end = length;\r\n    }\r\n\r\n    var newdata = {};\r\n    for (var property in data) {\r\n        if (property == \"value\") {\r\n            newdata[property] = data[property].slice(start, end);\r\n        } else {\r\n            newdata[property] = data[property];\r\n        }\r\n    }\r\n\r\n    return newdata;\r\n}\r\n\r\nfunction concatJsonValueArray(data, concatData) {\r\n    if (concatData === undefined || concatData.value === undefined) {\r\n        return data;\r\n    }\r\n\r\n    if (data === undefined || Object.keys(data).length === 0) {\r\n        return concatData;\r\n    }\r\n\r\n    if (data.value === undefined) {\r\n        data.value = concatData.value;\r\n        return data;\r\n    }\r\n\r\n    data.value = data.value.concat(concatData.value);\r\n\r\n    return data;\r\n}\r\n\r\nfunction endsWith(input, search) {\r\n    return input.indexOf(search, input.length - search.length) !== -1;\r\n}\r\n\r\nfunction startsWith (input, search) {\r\n    return input.indexOf(search) === 0;\r\n}\r\n\r\nfunction getFormatKind(format, defaultFormatKind) {\r\n    var formatKind = defaultFormatKind;\r\n    if (!assigned(format)) {\r\n        return formatKind;\r\n    }\r\n\r\n    var normalizedFormat = format.toLowerCase();\r\n    switch (normalizedFormat) {\r\n        case \"none\":\r\n            formatKind = 0;\r\n            break;\r\n        case \"minimal\":\r\n            formatKind = 1;\r\n            break;\r\n        case \"full\":\r\n            formatKind = 2;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return formatKind;\r\n}\r\n\r\n\r\n    \r\n    \r\nexports.inBrowser = inBrowser;\r\nexports.activeXObject = activeXObject;\r\nexports.assigned = assigned;\r\nexports.contains = contains;\r\nexports.defined = defined;\r\nexports.delay = delay;\r\nexports.djsassert = djsassert;\r\nexports.extend = extend;\r\nexports.find = find;\r\nexports.getURIInfo = getURIInfo;\r\nexports.isArray = isArray;\r\nexports.isDate = isDate;\r\nexports.isObject = isObject;\r\nexports.normalizeURI = normalizeURI;\r\nexports.normalizeURICase = normalizeURICase;\r\nexports.parseInt10 = parseInt10;\r\nexports.renameProperty = renameProperty;\r\nexports.throwErrorCallback = throwErrorCallback;\r\nexports.trimString = trimString;\r\nexports.undefinedDefault = undefinedDefault;\r\nexports.decodeBase64 = decodeBase64;\r\nexports.convertByteArrayToHexString = convertByteArrayToHexString;\r\nexports.getJsonValueArraryLength = getJsonValueArraryLength;\r\nexports.sliceJsonValueArray = sliceJsonValueArray;\r\nexports.concatJsonValueArray = concatJsonValueArray;\r\nexports.startsWith = startsWith;\r\nexports.endsWith = endsWith;\r\nexports.getFormatKind = getFormatKind;\n},{}],18:[function(_dereq_,module,exports){\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n \r\n\r\n/** @module odatajs/xml */\r\n\r\nvar utils    = _dereq_('./utils.js');\r\n\r\nvar activeXObject = utils.activeXObject;\r\nvar djsassert = utils.djsassert;\r\nvar extend = utils.extend;\r\nvar isArray = utils.isArray;\r\nvar normalizeURI = utils.normalizeURI;\r\n\r\n// URI prefixes to generate smaller code.\r\nvar http = \"http://\";\r\nvar w3org = http + \"www.w3.org/\";               // http://www.w3.org/\r\n\r\nvar xhtmlNS = w3org + \"1999/xhtml\";             // http://www.w3.org/1999/xhtml\r\nvar xmlnsNS = w3org + \"2000/xmlns/\";            // http://www.w3.org/2000/xmlns/\r\nvar xmlNS = w3org + \"XML/1998/namespace\";       // http://www.w3.org/XML/1998/namespace\r\n\r\nvar mozillaParserErroNS = http + \"www.mozilla.org/newlayout/xml/parsererror.xml\";\r\n\r\n/** Checks whether the specified string has leading or trailing spaces.\r\n * @param {String} text - String to check.\r\n * @returns {Boolean} true if text has any leading or trailing whitespace; false otherwise.\r\n */\r\nfunction hasLeadingOrTrailingWhitespace(text) {\r\n    var re = /(^\\s)|(\\s$)/;\r\n    return re.test(text);\r\n}\r\n\r\n/** Determines whether the specified text is empty or whitespace.\r\n * @param {String} text - Value to inspect.\r\n * @returns {Boolean} true if the text value is empty or all whitespace; false otherwise.\r\n */\r\nfunction isWhitespace(text) {\r\n\r\n\r\n    var ws = /^\\s*$/;\r\n    return text === null || ws.test(text);\r\n}\r\n\r\n/** Determines whether the specified element has xml:space='preserve' applied.\r\n * @param domElement - Element to inspect.\r\n * @returns {Boolean} Whether xml:space='preserve' is in effect.\r\n */\r\nfunction isWhitespacePreserveContext(domElement) {\r\n\r\n\r\n    while (domElement !== null && domElement.nodeType === 1) {\r\n        var val = xmlAttributeValue(domElement, \"space\", xmlNS);\r\n        if (val === \"preserve\") {\r\n            return true;\r\n        } else if (val === \"default\") {\r\n            break;\r\n        } else {\r\n            domElement = domElement.parentNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Determines whether the attribute is a XML namespace declaration.\r\n * @param domAttribute - Element to inspect.\r\n * @return {Boolean} True if the attribute is a namespace declaration (its name is 'xmlns' or starts with 'xmlns:'; false otherwise.\r\n */\r\nfunction isXmlNSDeclaration(domAttribute) {\r\n    var nodeName = domAttribute.nodeName;\r\n    return nodeName == \"xmlns\" || nodeName.indexOf(\"xmlns:\") === 0;\r\n}\r\n\r\n/** Safely set as property in an object by invoking obj.setProperty.\r\n * @param obj - Object that exposes a setProperty method.\r\n * @param {String} name - Property name\r\n * @param value - Property value.\r\n */\r\nfunction safeSetProperty(obj, name, value) {\r\n\r\n\r\n    try {\r\n        obj.setProperty(name, value);\r\n    } catch (_) { }\r\n}\r\n\r\n/** Creates an configures new MSXML 3.0 ActiveX object.\r\n * @returns {Object} New MSXML 3.0 ActiveX object.\r\n * This function throws any exception that occurs during the creation\r\n * of the MSXML 3.0 ActiveX object.\r\n */\r\nfunction msXmlDom3() {\r\n    var msxml3 = activeXObject(\"Msxml2.DOMDocument.3.0\");\r\n    if (msxml3) {\r\n        safeSetProperty(msxml3, \"ProhibitDTD\", true);\r\n        safeSetProperty(msxml3, \"MaxElementDepth\", 256);\r\n        safeSetProperty(msxml3, \"AllowDocumentFunction\", false);\r\n        safeSetProperty(msxml3, \"AllowXsltScript\", false);\r\n    }\r\n    return msxml3;\r\n}\r\n\r\n/** Creates an configures new MSXML 6.0 or MSXML 3.0 ActiveX object.\r\n * @returns {Object} New MSXML 3.0 ActiveX object.\r\n * This function will try to create a new MSXML 6.0 ActiveX object. If it fails then\r\n * it will fallback to create a new MSXML 3.0 ActiveX object. Any exception that\r\n * happens during the creation of the MSXML 6.0 will be handled by the function while\r\n * the ones that happend during the creation of the MSXML 3.0 will be thrown.\r\n */\r\nfunction msXmlDom() {\r\n    try {\r\n        var msxml = activeXObject(\"Msxml2.DOMDocument.6.0\");\r\n        if (msxml) {\r\n            msxml.async = true;\r\n        }\r\n        return msxml;\r\n    } catch (_) {\r\n        return msXmlDom3();\r\n    }\r\n}\r\n\r\n/** Parses an XML string using the MSXML DOM.\r\n * @returns {Object} New MSXML DOMDocument node representing the parsed XML string.\r\n * This function throws any exception that occurs during the creation\r\n * of the MSXML ActiveX object.  It also will throw an exception\r\n * in case of a parsing error.\r\n */\r\nfunction msXmlParse(text) {\r\n    var dom = msXmlDom();\r\n    if (!dom) {\r\n        return null;\r\n    }\r\n\r\n    dom.loadXML(text);\r\n    var parseError = dom.parseError;\r\n    if (parseError.errorCode !== 0) {\r\n        xmlThrowParserError(parseError.reason, parseError.srcText, text);\r\n    }\r\n    return dom;\r\n}\r\n\r\n/** Throws a new exception containing XML parsing error information.\r\n * @param exceptionOrReason - String indicating the reason of the parsing failure or Object detailing the parsing error.\r\n * @param {String} srcText -     String indicating the part of the XML string that caused the parsing error.\r\n * @param {String} errorXmlText - XML string for wich the parsing failed.\r\n */\r\nfunction xmlThrowParserError(exceptionOrReason, srcText, errorXmlText) {\r\n\r\n    if (typeof exceptionOrReason === \"string\") {\r\n        exceptionOrReason = { message: exceptionOrReason };\r\n    }\r\n    throw extend(exceptionOrReason, { srcText: srcText || \"\", errorXmlText: errorXmlText || \"\" });\r\n}\r\n\r\n/** Returns an XML DOM document from the specified text.\r\n * @param {String} text - Document text.\r\n * @returns XML DOM document.\r\n * This function will throw an exception in case of a parse error\r\n */\r\nfunction xmlParse(text) {\r\n    var domParser = undefined;\r\n    if (utils.inBrowser()) {\r\n        domParser = window.DOMParser && new window.DOMParser();\r\n    } else {\r\n        domParser = new (_dereq_('xmldom').DOMParser)();\r\n    }\r\n    var dom;\r\n\r\n    if (!domParser) {\r\n        dom = msXmlParse(text);\r\n        if (!dom) {\r\n            xmlThrowParserError(\"XML DOM parser not supported\");\r\n        }\r\n        return dom;\r\n    }\r\n\r\n    try {\r\n        dom = domParser.parseFromString(text, \"text/xml\");\r\n    } catch (e) {\r\n        xmlThrowParserError(e, \"\", text);\r\n    }\r\n\r\n    var element = dom.documentElement;\r\n    var nsURI = element.namespaceURI;\r\n    var localName = xmlLocalName(element);\r\n\r\n    // Firefox reports errors by returing the DOM for an xml document describing the problem.\r\n    if (localName === \"parsererror\" && nsURI === mozillaParserErroNS) {\r\n        var srcTextElement = xmlFirstChildElement(element, mozillaParserErroNS, \"sourcetext\");\r\n        var srcText = srcTextElement ? xmlNodeValue(srcTextElement) : \"\";\r\n        xmlThrowParserError(xmlInnerText(element) || \"\", srcText, text);\r\n    }\r\n\r\n    // Chrome (and maybe other webkit based browsers) report errors by injecting a header with an error message.\r\n    // The error may be localized, so instead we simply check for a header as the\r\n    // top element or descendant child of the document.\r\n    if (localName === \"h3\" && nsURI === xhtmlNS || xmlFirstDescendantElement(element, xhtmlNS, \"h3\")) {\r\n        var reason = \"\";\r\n        var siblings = [];\r\n        var cursor = element.firstChild;\r\n        while (cursor) {\r\n            if (cursor.nodeType === 1) {\r\n                reason += xmlInnerText(cursor) || \"\";\r\n            }\r\n            siblings.push(cursor.nextSibling);\r\n            cursor = cursor.firstChild || siblings.shift();\r\n        }\r\n        reason += xmlInnerText(element) || \"\";\r\n        xmlThrowParserError(reason, \"\", text);\r\n    }\r\n\r\n    return dom;\r\n}\r\n\r\n/** Builds a XML qualified name string in the form of \"prefix:name\".\r\n * @param {String} prefix - Prefix string (may be null)\r\n * @param {String} name - Name string to qualify with the prefix.\r\n * @returns {String} Qualified name.\r\n */\r\nfunction xmlQualifiedName(prefix, name) {\r\n    return prefix ? prefix + \":\" + name : name;\r\n}\r\n\r\n/** Appends a text node into the specified DOM element node.\r\n * @param domNode - DOM node for the element.\r\n * @param {String} textNode - Text to append as a child of element.\r\n*/\r\nfunction xmlAppendText(domNode, textNode) {\r\n    if (hasLeadingOrTrailingWhitespace(textNode.data)) {\r\n        var attr = xmlAttributeNode(domNode, xmlNS, \"space\");\r\n        if (!attr) {\r\n            attr = xmlNewAttribute(domNode.ownerDocument, xmlNS, xmlQualifiedName(\"xml\", \"space\"));\r\n            xmlAppendChild(domNode, attr);\r\n        }\r\n        attr.value = \"preserve\";\r\n    }\r\n    domNode.appendChild(textNode);\r\n    return domNode;\r\n}\r\n\r\n/** Iterates through the XML element's attributes and invokes the callback function for each one.\r\n * @param element - Wrapped element to iterate over.\r\n * @param {Function} onAttributeCallback - Callback function to invoke with wrapped attribute nodes.\r\n*/\r\nfunction xmlAttributes(element, onAttributeCallback) {\r\n    var attributes = element.attributes;\r\n    var i, len;\r\n    for (i = 0, len = attributes.length; i < len; i++) {\r\n        onAttributeCallback(attributes.item(i));\r\n    }\r\n}\r\n\r\n/** Returns the value of a DOM element's attribute.\r\n * @param domNode - DOM node for the owning element.\r\n * @param {String} localName - Local name of the attribute.\r\n * @param {String} nsURI - Namespace URI of the attribute.\r\n * @returns {String} - The attribute value, null if not found (may be null)\r\n */\r\nfunction xmlAttributeValue(domNode, localName, nsURI) {\r\n\r\n    var attribute = xmlAttributeNode(domNode, localName, nsURI);\r\n    return attribute ? xmlNodeValue(attribute) : null;\r\n}\r\n\r\n/** Gets an attribute node from a DOM element.\r\n * @param domNode - DOM node for the owning element.\r\n * @param {String} localName - Local name of the attribute.\r\n * @param {String} nsURI - Namespace URI of the attribute.\r\n * @returns The attribute node, null if not found.\r\n */\r\nfunction xmlAttributeNode(domNode, localName, nsURI) {\r\n\r\n    var attributes = domNode.attributes;\r\n    if (attributes.getNamedItemNS) {\r\n        return attributes.getNamedItemNS(nsURI || null, localName);\r\n    }\r\n\r\n    return attributes.getQualifiedItem(localName, nsURI) || null;\r\n}\r\n\r\n/** Gets the value of the xml:base attribute on the specified element.\r\n * @param domNode - Element to get xml:base attribute value from.\r\n * @param [baseURI] - Base URI used to normalize the value of the xml:base attribute ( may be null)\r\n * @returns {String} Value of the xml:base attribute if found; the baseURI or null otherwise.\r\n */\r\nfunction xmlBaseURI(domNode, baseURI) {\r\n\r\n    var base = xmlAttributeNode(domNode, \"base\", xmlNS);\r\n    return (base ? normalizeURI(base.value, baseURI) : baseURI) || null;\r\n}\r\n\r\n\r\n/** Iterates through the XML element's child DOM elements and invokes the callback function for each one.\r\n * @param domNode - DOM Node containing the DOM elements to iterate over.\r\n * @param {Function} onElementCallback - Callback function to invoke for each child DOM element.\r\n*/\r\nfunction xmlChildElements(domNode, onElementCallback) {\r\n\r\n    xmlTraverse(domNode, /*recursive*/false, function (child) {\r\n        if (child.nodeType === 1) {\r\n            onElementCallback(child);\r\n        }\r\n        // continue traversing.\r\n        return true;\r\n    });\r\n}\r\n\r\n/** Gets the descendant element under root that corresponds to the specified path and namespace URI.\r\n * @param root - DOM element node from which to get the descendant element.\r\n * @param {String} namespaceURI - The namespace URI of the element to match.\r\n * @param {String} path - Path to the desired descendant element.\r\n * @return The element specified by path and namespace URI.\r\n * All the elements in the path are matched against namespaceURI.\r\n * The function will stop searching on the first element that doesn't match the namespace and the path.\r\n */\r\nfunction xmlFindElementByPath(root, namespaceURI, path) {\r\n    var parts = path.split(\"/\");\r\n    var i, len;\r\n    for (i = 0, len = parts.length; i < len; i++) {\r\n        root = root && xmlFirstChildElement(root, namespaceURI, parts[i]);\r\n    }\r\n    return root || null;\r\n}\r\n\r\n/** Gets the DOM element or DOM attribute node under root that corresponds to the specified path and namespace URI.\r\n * @param root - DOM element node from which to get the descendant node.\r\n * @param {String} namespaceURI - The namespace URI of the node to match.\r\n * @param {String} path - Path to the desired descendant node.\r\n * @return The node specified by path and namespace URI.\r\n\r\n* This function will traverse the path and match each node associated to a path segement against the namespace URI.\r\n* The traversal stops when the whole path has been exahusted or a node that doesn't belogong the specified namespace is encountered.\r\n* The last segment of the path may be decorated with a starting @ character to indicate that the desired node is a DOM attribute.\r\n*/\r\nfunction xmlFindNodeByPath(root, namespaceURI, path) {\r\n    \r\n\r\n    var lastSegmentStart = path.lastIndexOf(\"/\");\r\n    var nodePath = path.substring(lastSegmentStart + 1);\r\n    var parentPath = path.substring(0, lastSegmentStart);\r\n\r\n    var node = parentPath ? xmlFindElementByPath(root, namespaceURI, parentPath) : root;\r\n    if (node) {\r\n        if (nodePath.charAt(0) === \"@\") {\r\n            return xmlAttributeNode(node, nodePath.substring(1), namespaceURI);\r\n        }\r\n        return xmlFirstChildElement(node, namespaceURI, nodePath);\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Returns the first child DOM element under the specified DOM node that matches the specified namespace URI and local name.\r\n * @param domNode - DOM node from which the child DOM element is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @return The node's first child DOM element that matches the specified namespace URI and local name; null otherwise.\r\n */\r\nfunction xmlFirstChildElement(domNode, namespaceURI, localName) {\r\n\r\n    return xmlFirstElementMaybeRecursive(domNode, namespaceURI, localName, /*recursive*/false);\r\n}\r\n\r\n/** Returns the first descendant DOM element under the specified DOM node that matches the specified namespace URI and local name.\r\n * @param domNode - DOM node from which the descendant DOM element is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @return The node's first descendant DOM element that matches the specified namespace URI and local name; null otherwise.\r\n*/\r\nfunction xmlFirstDescendantElement(domNode, namespaceURI, localName) {\r\n    if (domNode.getElementsByTagNameNS) {\r\n        var result = domNode.getElementsByTagNameNS(namespaceURI, localName);\r\n        return result.length > 0 ? result[0] : null;\r\n    }\r\n    return xmlFirstElementMaybeRecursive(domNode, namespaceURI, localName, /*recursive*/true);\r\n}\r\n\r\n/** Returns the first descendant DOM element under the specified DOM node that matches the specified namespace URI and local name.\r\n * @param domNode - DOM node from which the descendant DOM element is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @param {Boolean} recursive \r\n * - True if the search should include all the descendants of the DOM node.  \r\n * - False if the search should be scoped only to the direct children of the DOM node.\r\n * @return The node's first descendant DOM element that matches the specified namespace URI and local name; null otherwise.\r\n */\r\nfunction xmlFirstElementMaybeRecursive(domNode, namespaceURI, localName, recursive) {\r\n\r\n    var firstElement = null;\r\n    xmlTraverse(domNode, recursive, function (child) {\r\n        if (child.nodeType === 1) {\r\n            var isExpectedNamespace = !namespaceURI || xmlNamespaceURI(child) === namespaceURI;\r\n            var isExpectedNodeName = !localName || xmlLocalName(child) === localName;\r\n\r\n            if (isExpectedNamespace && isExpectedNodeName) {\r\n                firstElement = child;\r\n            }\r\n        }\r\n        return firstElement === null;\r\n    });\r\n    return firstElement;\r\n}\r\n\r\n/** Gets the concatenated value of all immediate child text and CDATA nodes for the specified element.\r\n * @param xmlElement - Element to get values for.\r\n * @returns {String} Text for all direct children.\r\n */\r\nfunction xmlInnerText(xmlElement) {\r\n\r\n    var result = null;\r\n    var root = (xmlElement.nodeType === 9 && xmlElement.documentElement) ? xmlElement.documentElement : xmlElement;\r\n    var whitespaceAlreadyRemoved = root.ownerDocument.preserveWhiteSpace === false;\r\n    var whitespacePreserveContext;\r\n\r\n    xmlTraverse(root, false, function (child) {\r\n        if (child.nodeType === 3 || child.nodeType === 4) {\r\n            // isElementContentWhitespace indicates that this is 'ignorable whitespace',\r\n            // but it's not defined by all browsers, and does not honor xml:space='preserve'\r\n            // in some implementations.\r\n            //\r\n            // If we can't tell either way, we walk up the tree to figure out whether\r\n            // xml:space is set to preserve; otherwise we discard pure-whitespace.\r\n            //\r\n            // For example <a>  <b>1</b></a>. The space between <a> and <b> is usually 'ignorable'.\r\n            var text = xmlNodeValue(child);\r\n            var shouldInclude = whitespaceAlreadyRemoved || !isWhitespace(text);\r\n            if (!shouldInclude) {\r\n                // Walk up the tree to figure out whether we are in xml:space='preserve' context\r\n                // for the cursor (needs to happen only once).\r\n                if (whitespacePreserveContext === undefined) {\r\n                    whitespacePreserveContext = isWhitespacePreserveContext(root);\r\n                }\r\n\r\n                shouldInclude = whitespacePreserveContext;\r\n            }\r\n\r\n            if (shouldInclude) {\r\n                if (!result) {\r\n                    result = text;\r\n                } else {\r\n                    result += text;\r\n                }\r\n            }\r\n        }\r\n        // Continue traversing?\r\n        return true;\r\n    });\r\n    return result;\r\n}\r\n\r\n/** Returns the localName of a XML node.\r\n * @param domNode - DOM node to get the value from.\r\n * @returns {String} localName of domNode.\r\n */\r\nfunction xmlLocalName(domNode) {\r\n\r\n    return domNode.localName || domNode.baseName;\r\n}\r\n\r\n/** Returns the namespace URI of a XML node.\r\n * @param domNode - DOM node to get the value from.\r\n * @returns {String} Namespace URI of domNode.\r\n */\r\nfunction xmlNamespaceURI(domNode) {\r\n\r\n    return domNode.namespaceURI || null;\r\n}\r\n\r\n/** Returns the value or the inner text of a XML node.\r\n * @param domNode - DOM node to get the value from.\r\n * @return Value of the domNode or the inner text if domNode represents a DOM element node.\r\n */\r\nfunction xmlNodeValue(domNode) {\r\n    \r\n    if (domNode.nodeType === 1) {\r\n        return xmlInnerText(domNode);\r\n    }\r\n    return domNode.nodeValue;\r\n}\r\n\r\n/** Walks through the descendants of the domNode and invokes a callback for each node.\r\n * @param domNode - DOM node whose descendants are going to be traversed.\r\n * @param {Boolean} recursive\r\n * - True if the traversal should include all the descenants of the DOM node.\r\n * - False if the traversal should be scoped only to the direct children of the DOM node.\r\n * @param {Boolean} onChildCallback - Called for each child\r\n * @returns {String} Namespace URI of node.\r\n */\r\nfunction xmlTraverse(domNode, recursive, onChildCallback) {\r\n\r\n    var subtrees = [];\r\n    var child = domNode.firstChild;\r\n    var proceed = true;\r\n    while (child && proceed) {\r\n        proceed = onChildCallback(child);\r\n        if (proceed) {\r\n            if (recursive && child.firstChild) {\r\n                subtrees.push(child.firstChild);\r\n            }\r\n            child = child.nextSibling || subtrees.shift();\r\n        }\r\n    }\r\n}\r\n\r\n/** Returns the next sibling DOM element of the specified DOM node.\r\n * @param domNode - DOM node from which the next sibling is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @return The node's next sibling DOM element, null if there is none.\r\n */\r\nfunction xmlSiblingElement(domNode, namespaceURI, localName) {\r\n\r\n    var sibling = domNode.nextSibling;\r\n    while (sibling) {\r\n        if (sibling.nodeType === 1) {\r\n            var isExpectedNamespace = !namespaceURI || xmlNamespaceURI(sibling) === namespaceURI;\r\n            var isExpectedNodeName = !localName || xmlLocalName(sibling) === localName;\r\n\r\n            if (isExpectedNamespace && isExpectedNodeName) {\r\n                return sibling;\r\n            }\r\n        }\r\n        sibling = sibling.nextSibling;\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Creates a new empty DOM document node.\r\n * @return New DOM document node.\r\n *\r\n * This function will first try to create a native DOM document using\r\n * the browsers createDocument function.  If the browser doesn't\r\n * support this but supports ActiveXObject, then an attempt to create\r\n * an MSXML 6.0 DOM will be made. If this attempt fails too, then an attempt\r\n * for creating an MXSML 3.0 DOM will be made.  If this last attemp fails or\r\n * the browser doesn't support ActiveXObject then an exception will be thrown.\r\n */\r\nfunction xmlDom() {\r\n    var implementation = window.document.implementation;\r\n    return (implementation && implementation.createDocument) ?\r\n       implementation.createDocument(null, null, null) :\r\n       msXmlDom();\r\n}\r\n\r\n/** Appends a collection of child nodes or string values to a parent DOM node.\r\n * @param parent - DOM node to which the children will be appended.\r\n * @param {Array} children - Array containing DOM nodes or string values that will be appended to the parent.\r\n * @return The parent with the appended children or string values.\r\n *  If a value in the children collection is a string, then a new DOM text node is going to be created\r\n *  for it and then appended to the parent.\r\n */\r\nfunction xmlAppendChildren(parent, children) {\r\n    if (!isArray(children)) {\r\n        return xmlAppendChild(parent, children);\r\n    }\r\n\r\n    var i, len;\r\n    for (i = 0, len = children.length; i < len; i++) {\r\n        children[i] && xmlAppendChild(parent, children[i]);\r\n    }\r\n    return parent;\r\n}\r\n\r\n/** Appends a child node or a string value to a parent DOM node.\r\n * @param parent - DOM node to which the child will be appended.\r\n * @param child - Child DOM node or string value to append to the parent.\r\n * @return The parent with the appended child or string value.\r\n * If child is a string value, then a new DOM text node is going to be created\r\n * for it and then appended to the parent.\r\n */\r\nfunction xmlAppendChild(parent, child) {\r\n\r\n    djsassert(parent !== child, \"xmlAppendChild() - parent and child are one and the same!\");\r\n    if (child) {\r\n        if (typeof child === \"string\") {\r\n            return xmlAppendText(parent, xmlNewText(parent.ownerDocument, child));\r\n        }\r\n        if (child.nodeType === 2) {\r\n            parent.setAttributeNodeNS ? parent.setAttributeNodeNS(child) : parent.setAttributeNode(child);\r\n        } else {\r\n            parent.appendChild(child);\r\n        }\r\n    }\r\n    return parent;\r\n}\r\n\r\n/** Creates a new DOM attribute node.\r\n * @param dom - DOM document used to create the attribute.\r\n * @param {String} namespaceURI - Namespace URI.\r\n * @param {String} qualifiedName - Qualified OData name\r\n * @param {String} value - Value of the new attribute\r\n * @return DOM attribute node for the namespace declaration.\r\n */\r\nfunction xmlNewAttribute(dom, namespaceURI, qualifiedName, value) {\r\n\r\n    var attribute =\r\n        dom.createAttributeNS && dom.createAttributeNS(namespaceURI, qualifiedName) ||\r\n        dom.createNode(2, qualifiedName, namespaceURI || undefined);\r\n\r\n    attribute.value = value || \"\";\r\n    return attribute;\r\n}\r\n\r\n/** Creates a new DOM element node.\r\n * @param dom - DOM document used to create the DOM element.\r\n * @param {String} namespaceURI - Namespace URI of the new DOM element.\r\n * @param {String} qualifiedName - Qualified name in the form of \"prefix:name\" of the new DOM element.\r\n * @param {Array} [children] Collection of child DOM nodes or string values that are going to be appended to the new DOM element.\r\n * @return New DOM element.\r\n * If a value in the children collection is a string, then a new DOM text node is going to be created\r\n * for it and then appended to the new DOM element.\r\n */\r\nfunction xmlNewElement(dom, namespaceURI, qualifiedName, children) {\r\n    var element =\r\n        dom.createElementNS && dom.createElementNS(nampespaceURI, qualifiedName) ||\r\n        dom.createNode(1, qualifiedName, nampespaceURI || undefined);\r\n\r\n    return xmlAppendChildren(element, children || []);\r\n}\r\n\r\n/** Creates a namespace declaration attribute.\r\n * @param dom - DOM document used to create the attribute.\r\n * @param {String} namespaceURI - Namespace URI.\r\n * @param {String} prefix - Namespace prefix.\r\n * @return DOM attribute node for the namespace declaration.\r\n */\r\nfunction xmlNewNSDeclaration(dom, namespaceURI, prefix) {\r\n    return xmlNewAttribute(dom, xmlnsNS, xmlQualifiedName(\"xmlns\", prefix), namespaceURI);\r\n}\r\n\r\n/** Creates a new DOM document fragment node for the specified xml text.\r\n * @param dom - DOM document from which the fragment node is going to be created.\r\n * @param {String} text XML text to be represented by the XmlFragment.\r\n * @return New DOM document fragment object.\r\n */\r\nfunction xmlNewFragment(dom, text) {\r\n\r\n    var value = \"<c>\" + text + \"</c>\";\r\n    var tempDom = xmlParse(value);\r\n    var tempRoot = tempDom.documentElement;\r\n    var imported = (\"importNode\" in dom) ? dom.importNode(tempRoot, true) : tempRoot;\r\n    var fragment = dom.createDocumentFragment();\r\n\r\n    var importedChild = imported.firstChild;\r\n    while (importedChild) {\r\n        fragment.appendChild(importedChild);\r\n        importedChild = importedChild.nextSibling;\r\n    }\r\n    return fragment;\r\n}\r\n\r\n/** Creates new DOM text node.\r\n * @param dom - DOM document used to create the text node.\r\n * @param {String} text - Text value for the DOM text node.\r\n * @return DOM text node.\r\n */ \r\nfunction xmlNewText(dom, text) {\r\n    return dom.createTextNode(text);\r\n}\r\n\r\n/** Creates a new DOM element or DOM attribute node as specified by path and appends it to the DOM tree pointed by root.\r\n * @param dom - DOM document used to create the new node.\r\n * @param root - DOM element node used as root of the subtree on which the new nodes are going to be created.\r\n * @param {String} namespaceURI - Namespace URI of the new DOM element or attribute.\r\n * @param {String} prefix - Prefix used to qualify the name of the new DOM element or attribute.\r\n * @param {String} path - Path string describing the location of the new DOM element or attribute from the root element.\r\n * @return DOM element or attribute node for the last segment of the path.\r\n\r\n * This function will traverse the path and will create a new DOM element with the specified namespace URI and prefix\r\n * for each segment that doesn't have a matching element under root.\r\n * The last segment of the path may be decorated with a starting @ character. In this case a new DOM attribute node\r\n * will be created.\r\n */\r\nfunction xmlNewNodeByPath(dom, root, namespaceURI, prefix, path) {\r\n    var name = \"\";\r\n    var parts = path.split(\"/\");\r\n    var xmlFindNode = xmlFirstChildElement;\r\n    var xmlNewNode = xmlNewElement;\r\n    var xmlNode = root;\r\n\r\n    var i, len;\r\n    for (i = 0, len = parts.length; i < len; i++) {\r\n        name = parts[i];\r\n        if (name.charAt(0) === \"@\") {\r\n            name = name.substring(1);\r\n            xmlFindNode = xmlAttributeNode;\r\n            xmlNewNode = xmlNewAttribute;\r\n        }\r\n\r\n        var childNode = xmlFindNode(xmlNode, namespaceURI, name);\r\n        if (!childNode) {\r\n            childNode = xmlNewNode(dom, namespaceURI, xmlQualifiedName(prefix, name));\r\n            xmlAppendChild(xmlNode, childNode);\r\n        }\r\n        xmlNode = childNode;\r\n    }\r\n    return xmlNode;\r\n}\r\n\r\n/** Returns the text representation of the document to which the specified node belongs.\r\n * @param domNode - Wrapped element in the document to serialize.\r\n * @returns {String} Serialized document.\r\n*/\r\nfunction xmlSerialize(domNode) {\r\n    var xmlSerializer = window.XMLSerializer;\r\n    if (xmlSerializer) {\r\n        var serializer = new xmlSerializer();\r\n        return serializer.serializeToString(domNode);\r\n    }\r\n\r\n    if (domNode.xml) {\r\n        return domNode.xml;\r\n    }\r\n\r\n    throw { message: \"XML serialization unsupported\" };\r\n}\r\n\r\n/** Returns the XML representation of the all the descendants of the node.\r\n * @param domNode - Node to serialize.\r\n * @returns {String} The XML representation of all the descendants of the node.\r\n */\r\nfunction xmlSerializeDescendants(domNode) {\r\n    var children = domNode.childNodes;\r\n    var i, len = children.length;\r\n    if (len === 0) {\r\n        return \"\";\r\n    }\r\n\r\n    // Some implementations of the XMLSerializer don't deal very well with fragments that\r\n    // don't have a DOMElement as their first child. The work around is to wrap all the\r\n    // nodes in a dummy root node named \"c\", serialize it and then just extract the text between\r\n    // the <c> and the </c> substrings.\r\n\r\n    var dom = domNode.ownerDocument;\r\n    var fragment = dom.createDocumentFragment();\r\n    var fragmentRoot = dom.createElement(\"c\");\r\n\r\n    fragment.appendChild(fragmentRoot);\r\n    // Move the children to the fragment tree.\r\n    for (i = 0; i < len; i++) {\r\n        fragmentRoot.appendChild(children[i]);\r\n    }\r\n\r\n    var xml = xmlSerialize(fragment);\r\n    xml = xml.substr(3, xml.length - 7);\r\n\r\n    // Move the children back to the original dom tree.\r\n    for (i = 0; i < len; i++) {\r\n        domNode.appendChild(fragmentRoot.childNodes[i]);\r\n    }\r\n\r\n    return xml;\r\n}\r\n\r\n/** Returns the XML representation of the node and all its descendants.\r\n * @param domNode - Node to serialize\r\n * @returns {String} The XML representation of the node and all its descendants.\r\n */\r\nfunction xmlSerializeNode(domNode) {\r\n\r\n    var xml = domNode.xml;\r\n    if (xml !== undefined) {\r\n        return xml;\r\n    }\r\n\r\n    if (window.XMLSerializer) {\r\n        var serializer = new window.XMLSerializer();\r\n        return serializer.serializeToString(domNode);\r\n    }\r\n\r\n    throw { message: \"XML serialization unsupported\" };\r\n}\r\n\r\nexports.http = http;\r\nexports.w3org = w3org;\r\nexports.xmlNS = xmlNS;\r\nexports.xmlnsNS = xmlnsNS;\r\n\r\nexports.hasLeadingOrTrailingWhitespace = hasLeadingOrTrailingWhitespace;\r\nexports.isXmlNSDeclaration = isXmlNSDeclaration;\r\nexports.xmlAppendChild = xmlAppendChild;\r\nexports.xmlAppendChildren = xmlAppendChildren;\r\nexports.xmlAttributeNode = xmlAttributeNode;\r\nexports.xmlAttributes = xmlAttributes;\r\nexports.xmlAttributeValue = xmlAttributeValue;\r\nexports.xmlBaseURI = xmlBaseURI;\r\nexports.xmlChildElements = xmlChildElements;\r\nexports.xmlFindElementByPath = xmlFindElementByPath;\r\nexports.xmlFindNodeByPath = xmlFindNodeByPath;\r\nexports.xmlFirstChildElement = xmlFirstChildElement;\r\nexports.xmlFirstDescendantElement = xmlFirstDescendantElement;\r\nexports.xmlInnerText = xmlInnerText;\r\nexports.xmlLocalName = xmlLocalName;\r\nexports.xmlNamespaceURI = xmlNamespaceURI;\r\nexports.xmlNodeValue = xmlNodeValue;\r\nexports.xmlDom = xmlDom;\r\nexports.xmlNewAttribute = xmlNewAttribute;\r\nexports.xmlNewElement = xmlNewElement;\r\nexports.xmlNewFragment = xmlNewFragment;\r\nexports.xmlNewNodeByPath = xmlNewNodeByPath;\r\nexports.xmlNewNSDeclaration = xmlNewNSDeclaration;\r\nexports.xmlNewText = xmlNewText;\r\nexports.xmlParse = xmlParse;\r\nexports.xmlQualifiedName = xmlQualifiedName;\r\nexports.xmlSerialize = xmlSerialize;\r\nexports.xmlSerializeDescendants = xmlSerializeDescendants;\r\nexports.xmlSiblingElement = xmlSiblingElement;\r\n\n},{\"./utils.js\":17,\"xmldom\":24}],19:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = _dereq_('extend');\r\nvar promiseHandlerBase_1 = _dereq_('./promiseHandlerBase');\r\nvar PromiseHandler = (function (_super) {\r\n    __extends(PromiseHandler, _super);\r\n    function PromiseHandler() {\r\n        _super.call(this);\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.resolve = resolve;\r\n            self.reject = reject;\r\n        });\r\n        this.deferred = {\r\n            resolve: function () { self.resolve.apply(promise, arguments); },\r\n            reject: function () { self.reject.apply(promise, arguments); },\r\n            promise: promise\r\n        };\r\n    }\r\n    PromiseHandler.prototype.createCallback = function (callback) {\r\n        var settings = promiseHandlerBase_1.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var self = this;\r\n        var result = new promiseHandlerBase_1.CallbackSettings();\r\n        result = extend(result, {\r\n            success: function () {\r\n                settings.success.apply(self.deferred, arguments);\r\n                self.resolve.apply(self.deferred, arguments);\r\n            },\r\n            error: function () {\r\n                Array.prototype.push.call(arguments, self.deferred);\r\n                settings.error.apply(self.deferred, arguments);\r\n            },\r\n            notify: function () {\r\n                settings.notify.apply(self.deferred, arguments);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    PromiseHandler.prototype.getPromise = function () {\r\n        return this.deferred.promise;\r\n    };\r\n    PromiseHandler.compatibilityMode = function () {\r\n        Promise.prototype['fail'] = function (onReject) {\r\n            return this.then(null, function (reason) {\r\n                onReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n        Promise.prototype['always'] = function (onResolveOrReject) {\r\n            return this.then(onResolveOrReject, function (reason) {\r\n                onResolveOrReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n    };\r\n    PromiseHandler.use = function ($data) {\r\n        $data.PromiseHandler = typeof Promise == 'function' ? PromiseHandler : promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.PromiseHandlerBase = promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.Promise = promiseHandlerBase_1.PromiseNotImplemented;\r\n    };\r\n    return PromiseHandler;\r\n}(promiseHandlerBase_1.PromiseHandlerBase));\r\nexports.PromiseHandler = PromiseHandler;\r\n\n},{\"./promiseHandlerBase\":20,\"extend\":2}],20:[function(_dereq_,module,exports){\n\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = _dereq_('extend');\r\nvar jaydata_error_handler_1 = _dereq_('jaydata-error-handler');\r\nvar CallbackSettings = (function () {\r\n    function CallbackSettings() {\r\n    }\r\n    return CallbackSettings;\r\n}());\r\nexports.CallbackSettings = CallbackSettings;\r\nvar PromiseNotImplemented = (function () {\r\n    function PromiseNotImplemented() {\r\n    }\r\n    PromiseNotImplemented.prototype.always = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.always', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.done = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.done', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.fail = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.fail', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isRejected = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isRejected', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isResolved = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isResolved', 'Not implemented!')); };\r\n    //notify() { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); }\r\n    //notifyWith() { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.pipe = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.pipe', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.progress = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.progress', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.promise = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.promise', 'Not implemented!')); };\r\n    //reject() { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); }\r\n    //rejectWith() { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); }\r\n    //resolve() { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); }\r\n    //resolveWith() { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.state = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.state', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.then = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.then', 'Not implemented!')); };\r\n    return PromiseNotImplemented;\r\n}());\r\nexports.PromiseNotImplemented = PromiseNotImplemented;\r\nvar PromiseHandlerBase = (function () {\r\n    function PromiseHandlerBase() {\r\n    }\r\n    PromiseHandlerBase.defaultSuccessCallback = function () { };\r\n    PromiseHandlerBase.defaultNotifyCallback = function () { };\r\n    PromiseHandlerBase.defaultErrorCallback = function () {\r\n        if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n            (console.error || console.log).call(console, arguments[0]);\r\n            arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n        }\r\n        else {\r\n            if (arguments[0] instanceof Error) {\r\n                console.error(arguments[0]);\r\n            }\r\n            else {\r\n                console.error(\"DefaultError:\", \"DEFAULT ERROR CALLBACK!\", arguments);\r\n            }\r\n        }\r\n    };\r\n    PromiseHandlerBase.createCallbackSettings = function (callback, defaultSettings) {\r\n        var settings = defaultSettings || {\r\n            success: PromiseHandlerBase.defaultSuccessCallback,\r\n            error: PromiseHandlerBase.defaultErrorCallback,\r\n            notify: PromiseHandlerBase.defaultNotifyCallback\r\n        };\r\n        var result = new CallbackSettings();\r\n        if (callback == null || callback == undefined) {\r\n            result = settings;\r\n        }\r\n        else if (typeof callback == 'function') {\r\n            result = extend(settings, {\r\n                success: callback\r\n            });\r\n        }\r\n        else {\r\n            result = extend(settings, callback);\r\n        }\r\n        var wrapCode = function (fn) {\r\n            var t = this;\r\n            function r() {\r\n                fn.apply(t, arguments);\r\n                fn = function () { };\r\n            }\r\n            return r;\r\n        };\r\n        if (typeof result.error === 'function')\r\n            result.error = wrapCode(result.error);\r\n        return result;\r\n    };\r\n    PromiseHandlerBase.prototype.createCallback = function (callback) {\r\n        return PromiseHandlerBase.createCallbackSettings(callback);\r\n    };\r\n    PromiseHandlerBase.prototype.getPromise = function () {\r\n        return new PromiseNotImplemented();\r\n    };\r\n    return PromiseHandlerBase;\r\n}());\r\nexports.PromiseHandlerBase = PromiseHandlerBase;\r\n\n},{\"extend\":2,\"jaydata-error-handler\":8}],21:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = _dereq_('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    }());\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var primitiveAnnotationValue = function (sourceField) { return new metacode.AttributeFunctionChain(function (d, i) {\r\n        if (d['collection'] && d['collection'][0] && Array.isArray(d['collection'][0][sourceField]) && !d[sourceField]) {\r\n            return d['collection'][0][sourceField].map(function (x) { return x.text; });\r\n        }\r\n        var props = d[sourceField];\r\n        if (Array.isArray(props)) {\r\n            return props.filter(function (x) { return 'text' in x; }).map(function (x) { return x.text; })[0];\r\n        }\r\n        else {\r\n            return props;\r\n        }\r\n    }); };\r\n    var annotationTypeSelector = function (source) {\r\n        for (var i in Edm.AnnotationTypes) {\r\n            if (i in source || (source['collection'] && source['collection'][0] && i in source['collection'][0])) {\r\n                return Edm.AnnotationTypes[i];\r\n            }\r\n        }\r\n        return Annotation;\r\n    };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                if (parser) {\r\n                    var v = parser.invoke(definition, _this);\r\n                    _this[membername] = v;\r\n                }\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    }());\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Property.prototype, \"annotations\", void 0);\r\n        return Property;\r\n    }(EdmItemBase));\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"annotations\", void 0);\r\n        return NavigationProperty;\r\n    }(EdmItemBase));\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    }(EdmItemBase));\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    }(EdmItemBase));\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    }(EdmItemBase));\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"annotations\", void 0);\r\n        return EntityType;\r\n    }(EdmItemBase));\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"annotations\", void 0);\r\n        return ComplexType;\r\n    }(EdmItemBase));\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Parameter.prototype, \"annotations\", void 0);\r\n        return Parameter;\r\n    }(EdmItemBase));\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ReturnType.prototype, \"annotations\", void 0);\r\n        return ReturnType;\r\n    }(EdmItemBase));\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    }(EdmItemBase));\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"annotations\", void 0);\r\n        return Action;\r\n    }(Invokable));\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"annotations\", void 0);\r\n        return Function;\r\n    }(Invokable));\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Member.prototype, \"annotations\", void 0);\r\n        return Member;\r\n    }(EdmItemBase));\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"annotations\", void 0);\r\n        return EnumType;\r\n    }(EdmItemBase));\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntitySet.prototype, \"annotations\", void 0);\r\n        return EntitySet;\r\n    }(EdmItemBase));\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    }(EdmItemBase));\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    }(EdmItemBase));\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    }(EdmItemBase));\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotations\", function (prop, i) { return new Edm.Annotations(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"annotations\", void 0);\r\n        return Schema;\r\n    }(EdmItemBase));\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    }(EdmItemBase));\r\n    Edm.DataServices = DataServices;\r\n    var Reference = (function (_super) {\r\n        __extends(Reference, _super);\r\n        function Reference() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Reference.prototype, \"uri\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"include\", function (prop, i) { return new ReferenceInclude(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Reference.prototype, \"includes\", void 0);\r\n        return Reference;\r\n    }(EdmItemBase));\r\n    Edm.Reference = Reference;\r\n    var ReferenceInclude = (function (_super) {\r\n        __extends(ReferenceInclude, _super);\r\n        function ReferenceInclude() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReferenceInclude.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReferenceInclude.prototype, \"alias\", void 0);\r\n        return ReferenceInclude;\r\n    }(EdmItemBase));\r\n    Edm.ReferenceInclude = ReferenceInclude;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', DataServices)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"reference\", function (prop, i) { return new Reference(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"references\", void 0);\r\n        return Edmx;\r\n    }(EdmItemBase));\r\n    Edm.Edmx = Edmx;\r\n    var Annotations = (function (_super) {\r\n        __extends(Annotations, _super);\r\n        function Annotations() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Annotations.prototype, \"target\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotations.prototype, \"qualifier\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Annotations.prototype, \"annotations\", void 0);\r\n        return Annotations;\r\n    }(EdmItemBase));\r\n    Edm.Annotations = Annotations;\r\n    var Annotation = (function (_super) {\r\n        __extends(Annotation, _super);\r\n        function Annotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Unknown\";\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotation.prototype, \"term\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotation.prototype, \"qualifier\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotation.prototype, \"path\", void 0);\r\n        return Annotation;\r\n    }(EdmItemBase));\r\n    Edm.Annotation = Annotation;\r\n    var BinaryAnnotation = (function (_super) {\r\n        __extends(BinaryAnnotation, _super);\r\n        function BinaryAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Binary\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"binary\")), \r\n            __metadata('design:type', Object)\r\n        ], BinaryAnnotation.prototype, \"binary\", void 0);\r\n        return BinaryAnnotation;\r\n    }(Annotation));\r\n    Edm.BinaryAnnotation = BinaryAnnotation;\r\n    var BoolAnnotation = (function (_super) {\r\n        __extends(BoolAnnotation, _super);\r\n        function BoolAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Bool\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"bool\")), \r\n            __metadata('design:type', Object)\r\n        ], BoolAnnotation.prototype, \"bool\", void 0);\r\n        return BoolAnnotation;\r\n    }(Annotation));\r\n    Edm.BoolAnnotation = BoolAnnotation;\r\n    var DateAnnotation = (function (_super) {\r\n        __extends(DateAnnotation, _super);\r\n        function DateAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Date\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"date\")), \r\n            __metadata('design:type', Object)\r\n        ], DateAnnotation.prototype, \"date\", void 0);\r\n        return DateAnnotation;\r\n    }(Annotation));\r\n    Edm.DateAnnotation = DateAnnotation;\r\n    var DateTimeOffsetAnnotation = (function (_super) {\r\n        __extends(DateTimeOffsetAnnotation, _super);\r\n        function DateTimeOffsetAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"DateTimeOffset\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"dateTimeOffset\")), \r\n            __metadata('design:type', Object)\r\n        ], DateTimeOffsetAnnotation.prototype, \"dateTimeOffset\", void 0);\r\n        return DateTimeOffsetAnnotation;\r\n    }(Annotation));\r\n    Edm.DateTimeOffsetAnnotation = DateTimeOffsetAnnotation;\r\n    var DecimalAnnotation = (function (_super) {\r\n        __extends(DecimalAnnotation, _super);\r\n        function DecimalAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Decimal\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"decimal\")), \r\n            __metadata('design:type', Object)\r\n        ], DecimalAnnotation.prototype, \"decimal\", void 0);\r\n        return DecimalAnnotation;\r\n    }(Annotation));\r\n    Edm.DecimalAnnotation = DecimalAnnotation;\r\n    var DurationAnnotation = (function (_super) {\r\n        __extends(DurationAnnotation, _super);\r\n        function DurationAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Duration\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"duration\")), \r\n            __metadata('design:type', Object)\r\n        ], DurationAnnotation.prototype, \"duration\", void 0);\r\n        return DurationAnnotation;\r\n    }(Annotation));\r\n    Edm.DurationAnnotation = DurationAnnotation;\r\n    var EnumMemberAnnotation = (function (_super) {\r\n        __extends(EnumMemberAnnotation, _super);\r\n        function EnumMemberAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"EnumMember\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"enumMember\")), \r\n            __metadata('design:type', Object)\r\n        ], EnumMemberAnnotation.prototype, \"enumMember\", void 0);\r\n        return EnumMemberAnnotation;\r\n    }(Annotation));\r\n    Edm.EnumMemberAnnotation = EnumMemberAnnotation;\r\n    var FloatAnnotation = (function (_super) {\r\n        __extends(FloatAnnotation, _super);\r\n        function FloatAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Float\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"float\")), \r\n            __metadata('design:type', Object)\r\n        ], FloatAnnotation.prototype, \"float\", void 0);\r\n        return FloatAnnotation;\r\n    }(Annotation));\r\n    Edm.FloatAnnotation = FloatAnnotation;\r\n    var GuidAnnotation = (function (_super) {\r\n        __extends(GuidAnnotation, _super);\r\n        function GuidAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Guid\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"guid\")), \r\n            __metadata('design:type', Object)\r\n        ], GuidAnnotation.prototype, \"guid\", void 0);\r\n        return GuidAnnotation;\r\n    }(Annotation));\r\n    Edm.GuidAnnotation = GuidAnnotation;\r\n    var IntAnnotation = (function (_super) {\r\n        __extends(IntAnnotation, _super);\r\n        function IntAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Int\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"int\")), \r\n            __metadata('design:type', Object)\r\n        ], IntAnnotation.prototype, \"int\", void 0);\r\n        return IntAnnotation;\r\n    }(Annotation));\r\n    Edm.IntAnnotation = IntAnnotation;\r\n    var StringAnnotation = (function (_super) {\r\n        __extends(StringAnnotation, _super);\r\n        function StringAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"String\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"string\")), \r\n            __metadata('design:type', Object)\r\n        ], StringAnnotation.prototype, \"string\", void 0);\r\n        return StringAnnotation;\r\n    }(Annotation));\r\n    Edm.StringAnnotation = StringAnnotation;\r\n    var TimeOfDayAnnotation = (function (_super) {\r\n        __extends(TimeOfDayAnnotation, _super);\r\n        function TimeOfDayAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"TimeOfDay\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"timeOfDay\")), \r\n            __metadata('design:type', Object)\r\n        ], TimeOfDayAnnotation.prototype, \"timeOfDay\", void 0);\r\n        return TimeOfDayAnnotation;\r\n    }(Annotation));\r\n    Edm.TimeOfDayAnnotation = TimeOfDayAnnotation;\r\n    var PropertyPathAnnotation = (function (_super) {\r\n        __extends(PropertyPathAnnotation, _super);\r\n        function PropertyPathAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"PropertyPath\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"propertyPath\")), \r\n            __metadata('design:type', Object)\r\n        ], PropertyPathAnnotation.prototype, \"propertyPaths\", void 0);\r\n        return PropertyPathAnnotation;\r\n    }(Annotation));\r\n    Edm.PropertyPathAnnotation = PropertyPathAnnotation;\r\n    var NavigationPropertyPathAnnotation = (function (_super) {\r\n        __extends(NavigationPropertyPathAnnotation, _super);\r\n        function NavigationPropertyPathAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"NavigationPropertyPath\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"propertyPath\")), \r\n            __metadata('design:type', Object)\r\n        ], NavigationPropertyPathAnnotation.prototype, \"navigationPropertyPaths\", void 0);\r\n        return NavigationPropertyPathAnnotation;\r\n    }(Annotation));\r\n    Edm.NavigationPropertyPathAnnotation = NavigationPropertyPathAnnotation;\r\n    var AnnotationPathAnnotation = (function (_super) {\r\n        __extends(AnnotationPathAnnotation, _super);\r\n        function AnnotationPathAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"AnnotationPath\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"annotationPath\")), \r\n            __metadata('design:type', Object)\r\n        ], AnnotationPathAnnotation.prototype, \"annotationPaths\", void 0);\r\n        return AnnotationPathAnnotation;\r\n    }(Annotation));\r\n    Edm.AnnotationPathAnnotation = AnnotationPathAnnotation;\r\n    var NullAnnotation = (function (_super) {\r\n        __extends(NullAnnotation, _super);\r\n        function NullAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Null\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"null\")), \r\n            __metadata('design:type', Array)\r\n        ], NullAnnotation.prototype, \"null\", void 0);\r\n        return NullAnnotation;\r\n    }(Annotation));\r\n    Edm.NullAnnotation = NullAnnotation;\r\n    Edm.AnnotationTypes = {\r\n        binary: BinaryAnnotation,\r\n        bool: BoolAnnotation,\r\n        date: DateAnnotation,\r\n        dateTimeOffset: DateTimeOffsetAnnotation,\r\n        decimal: DecimalAnnotation,\r\n        duration: DurationAnnotation,\r\n        enumMember: EnumMemberAnnotation,\r\n        float: FloatAnnotation,\r\n        guid: GuidAnnotation,\r\n        int: IntAnnotation,\r\n        string: StringAnnotation,\r\n        timeOfDay: TimeOfDayAnnotation,\r\n        propertyPath: PropertyPathAnnotation,\r\n        navigationPropertyPath: NavigationPropertyPathAnnotation,\r\n        annotationPath: AnnotationPathAnnotation,\r\n        null: NullAnnotation\r\n    };\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n\n},{\"./metacode\":22}],22:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar definitionPropName = 'definition';\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var def = target[definitionPropName] = target[definitionPropName] || {};\r\n        var md = (def.members || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        def.members = md;\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            target[definitionPropName][_this.attributeName] = target[definitionPropName][_this.attributeName] || {};\r\n            target[definitionPropName][_this.attributeName][key] = decoratorValue;\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.getMembers = function (target) {\r\n        return target[definitionPropName].members;\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return ((target[definitionPropName] || {})[attributeName] || {})[memberName];\r\n    };\r\n    return MemberAttribute;\r\n}());\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n}());\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n}(MemberAttribute));\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n\n},{}],23:[function(_dereq_,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],24:[function(_dereq_,module,exports){\nfunction DOMParser(options){\r\n\tthis.options = options ||{locator:{}};\r\n\t\r\n}\r\nDOMParser.prototype.parseFromString = function(source,mimeType){\t\r\n\tvar options = this.options;\r\n\tvar sax =  new XMLReader();\r\n\tvar domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler\r\n\tvar errorHandler = options.errorHandler;\r\n\tvar locator = options.locator;\r\n\tvar defaultNSMap = options.xmlns||{};\r\n\tvar entityMap = {'lt':'<','gt':'>','amp':'&','quot':'\"','apos':\"'\"}\r\n\tif(locator){\r\n\t\tdomBuilder.setDocumentLocator(locator)\r\n\t}\r\n\t\r\n\tsax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);\r\n\tsax.domBuilder = options.domBuilder || domBuilder;\r\n\tif(/\\/x?html?$/.test(mimeType)){\r\n\t\tentityMap.nbsp = '\\xa0';\r\n\t\tentityMap.copy = '\\xa9';\r\n\t\tdefaultNSMap['']= 'http://www.w3.org/1999/xhtml';\r\n\t}\r\n\tdefaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';\r\n\tif(source){\r\n\t\tsax.parse(source,defaultNSMap,entityMap);\r\n\t}else{\r\n\t\tsax.errorHandler.error(\"invalid document source\");\r\n\t}\r\n\treturn domBuilder.document;\r\n}\r\nfunction buildErrorHandler(errorImpl,domBuilder,locator){\r\n\tif(!errorImpl){\r\n\t\tif(domBuilder instanceof DOMHandler){\r\n\t\t\treturn domBuilder;\r\n\t\t}\r\n\t\terrorImpl = domBuilder ;\r\n\t}\r\n\tvar errorHandler = {}\r\n\tvar isCallback = errorImpl instanceof Function;\r\n\tlocator = locator||{}\r\n\tfunction build(key){\r\n\t\tvar fn = errorImpl[key];\r\n\t\tif(!fn && isCallback){\r\n\t\t\tfn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;\r\n\t\t}\r\n\t\terrorHandler[key] = fn && function(msg){\r\n\t\t\tfn('[xmldom '+key+']\\t'+msg+_locator(locator));\r\n\t\t}||function(){};\r\n\t}\r\n\tbuild('warning');\r\n\tbuild('error');\r\n\tbuild('fatalError');\r\n\treturn errorHandler;\r\n}\r\n\r\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\r\n/**\r\n * +ContentHandler+ErrorHandler\r\n * +LexicalHandler+EntityResolver2\r\n * -DeclHandler-DTDHandler \r\n * \r\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n */\r\nfunction DOMHandler() {\r\n    this.cdata = false;\r\n}\r\nfunction position(locator,node){\r\n\tnode.lineNumber = locator.lineNumber;\r\n\tnode.columnNumber = locator.columnNumber;\r\n}\r\n/**\r\n * @see org.xml.sax.ContentHandler#startDocument\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n */ \r\nDOMHandler.prototype = {\r\n\tstartDocument : function() {\r\n    \tthis.document = new DOMImplementation().createDocument(null, null, null);\r\n    \tif (this.locator) {\r\n        \tthis.document.documentURI = this.locator.systemId;\r\n    \t}\r\n\t},\r\n\tstartElement:function(namespaceURI, localName, qName, attrs) {\r\n\t\tvar doc = this.document;\r\n\t    var el = doc.createElementNS(namespaceURI, qName||localName);\r\n\t    var len = attrs.length;\r\n\t    appendElement(this, el);\r\n\t    this.currentElement = el;\r\n\t    \r\n\t\tthis.locator && position(this.locator,el)\r\n\t    for (var i = 0 ; i < len; i++) {\r\n\t        var namespaceURI = attrs.getURI(i);\r\n\t        var value = attrs.getValue(i);\r\n\t        var qName = attrs.getQName(i);\r\n\t\t\tvar attr = doc.createAttributeNS(namespaceURI, qName);\r\n\t\t\tif( attr.getOffset){\r\n\t\t\t\tposition(attr.getOffset(1),attr)\r\n\t\t\t}\r\n\t\t\tattr.value = attr.nodeValue = value;\r\n\t\t\tel.setAttributeNode(attr)\r\n\t    }\r\n\t},\r\n\tendElement:function(namespaceURI, localName, qName) {\r\n\t\tvar current = this.currentElement\r\n\t    var tagName = current.tagName;\r\n\t    this.currentElement = current.parentNode;\r\n\t},\r\n\tstartPrefixMapping:function(prefix, uri) {\r\n\t},\r\n\tendPrefixMapping:function(prefix) {\r\n\t},\r\n\tprocessingInstruction:function(target, data) {\r\n\t    var ins = this.document.createProcessingInstruction(target, data);\r\n\t    this.locator && position(this.locator,ins)\r\n\t    appendElement(this, ins);\r\n\t},\r\n\tignorableWhitespace:function(ch, start, length) {\r\n\t},\r\n\tcharacters:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t\t//console.log(chars)\r\n\t\tif(this.currentElement && chars){\r\n\t\t\tif (this.cdata) {\r\n\t\t\t\tvar charNode = this.document.createCDATASection(chars);\r\n\t\t\t\tthis.currentElement.appendChild(charNode);\r\n\t\t\t} else {\r\n\t\t\t\tvar charNode = this.document.createTextNode(chars);\r\n\t\t\t\tthis.currentElement.appendChild(charNode);\r\n\t\t\t}\r\n\t\t\tthis.locator && position(this.locator,charNode)\r\n\t\t}\r\n\t},\r\n\tskippedEntity:function(name) {\r\n\t},\r\n\tendDocument:function() {\r\n\t\tthis.document.normalize();\r\n\t},\r\n\tsetDocumentLocator:function (locator) {\r\n\t    if(this.locator = locator){// && !('lineNumber' in locator)){\r\n\t    \tlocator.lineNumber = 0;\r\n\t    }\r\n\t},\r\n\t//LexicalHandler\r\n\tcomment:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t    var comm = this.document.createComment(chars);\r\n\t    this.locator && position(this.locator,comm)\r\n\t    appendElement(this, comm);\r\n\t},\r\n\t\r\n\tstartCDATA:function() {\r\n\t    //used in characters() methods\r\n\t    this.cdata = true;\r\n\t},\r\n\tendCDATA:function() {\r\n\t    this.cdata = false;\r\n\t},\r\n\t\r\n\tstartDTD:function(name, publicId, systemId) {\r\n\t\tvar impl = this.document.implementation;\r\n\t    if (impl && impl.createDocumentType) {\r\n\t        var dt = impl.createDocumentType(name, publicId, systemId);\r\n\t        this.locator && position(this.locator,dt)\r\n\t        appendElement(this, dt);\r\n\t    }\r\n\t},\r\n\t/**\r\n\t * @see org.xml.sax.ErrorHandler\r\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n\t */\r\n\twarning:function(error) {\r\n\t\tconsole.warn('[xmldom warning]\\t'+error,_locator(this.locator));\r\n\t},\r\n\terror:function(error) {\r\n\t\tconsole.error('[xmldom error]\\t'+error,_locator(this.locator));\r\n\t},\r\n\tfatalError:function(error) {\r\n\t\tconsole.error('[xmldom fatalError]\\t'+error,_locator(this.locator));\r\n\t    throw error;\r\n\t}\r\n}\r\nfunction _locator(l){\r\n\tif(l){\r\n\t\treturn '\\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'\r\n\t}\r\n}\r\nfunction _toString(chars,start,length){\r\n\tif(typeof chars == 'string'){\r\n\t\treturn chars.substr(start,length)\r\n\t}else{//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\r\n\t\tif(chars.length >= start+length || start){\r\n\t\t\treturn new java.lang.String(chars,start,length)+'';\r\n\t\t}\r\n\t\treturn chars;\r\n\t}\r\n}\r\n\r\n/*\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n * used method of org.xml.sax.ext.LexicalHandler:\r\n *  #comment(chars, start, length)\r\n *  #startCDATA()\r\n *  #endCDATA()\r\n *  #startDTD(name, publicId, systemId)\r\n *\r\n *\r\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n *  #endDTD()\r\n *  #startEntity(name)\r\n *  #endEntity(name)\r\n *\r\n *\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n * IGNORED method of org.xml.sax.ext.DeclHandler\r\n * \t#attributeDecl(eName, aName, type, mode, value)\r\n *  #elementDecl(name, model)\r\n *  #externalEntityDecl(name, publicId, systemId)\r\n *  #internalEntityDecl(name, value)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n * IGNORED method of org.xml.sax.EntityResolver2\r\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n *  #resolveEntity(publicId, systemId)\r\n *  #getExternalSubset(name, baseURI)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n * IGNORED method of org.xml.sax.DTDHandler\r\n *  #notationDecl(name, publicId, systemId) {};\r\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n */\r\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){\r\n\tDOMHandler.prototype[key] = function(){return null}\r\n})\r\n\r\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\r\nfunction appendElement (hander,node) {\r\n    if (!hander.currentElement) {\r\n        hander.document.appendChild(node);\r\n    } else {\r\n        hander.currentElement.appendChild(node);\r\n    }\r\n}//appendChild and setAttributeNS are preformance key\r\n\r\nif(typeof _dereq_ == 'function'){\r\n\tvar XMLReader = _dereq_('./sax').XMLReader;\r\n\tvar DOMImplementation = exports.DOMImplementation = _dereq_('./dom').DOMImplementation;\r\n\texports.XMLSerializer = _dereq_('./dom').XMLSerializer ;\r\n\texports.DOMParser = DOMParser;\r\n}\r\n\n},{\"./dom\":25,\"./sax\":26}],25:[function(_dereq_,module,exports){\n/*\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n */\n\nfunction copy(src,dest){\n\tfor(var p in src){\n\t\tdest[p] = src[p];\n\t}\n}\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */\nfunction _extends(Class,Super){\n\tvar pt = Class.prototype;\n\tif(Object.create){\n\t\tvar ppt = Object.create(Super.prototype)\n\t\tpt.__proto__ = ppt;\n\t}\n\tif(!(pt instanceof Super)){\n\t\tfunction t(){};\n\t\tt.prototype = Super.prototype;\n\t\tt = new t();\n\t\tcopy(pt,t);\n\t\tClass.prototype = pt = t;\n\t}\n\tif(pt.constructor != Class){\n\t\tif(typeof Class != 'function'){\n\t\t\tconsole.error(\"unknow Class:\"+Class)\n\t\t}\n\t\tpt.constructor = Class\n\t}\n}\nvar htmlns = 'http://www.w3.org/1999/xhtml' ;\n// Node Types\nvar NodeType = {}\nvar ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;\nvar ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;\nvar TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;\nvar CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;\nvar ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;\nvar ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;\nvar DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;\nvar DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;\nvar DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;\nvar NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;\n\n// ExceptionCode\nvar ExceptionCode = {}\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]=\"Index size error\"),1);\nvar DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]=\"DOMString size error\"),2);\nvar HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]=\"Hierarchy request error\"),3);\nvar WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]=\"Wrong document\"),4);\nvar INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]=\"Invalid character\"),5);\nvar NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]=\"No data allowed\"),6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]=\"No modification allowed\"),7);\nvar NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]=\"Not found\"),8);\nvar NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]=\"Not supported\"),9);\nvar INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]=\"Attribute in use\"),10);\n//level2\nvar INVALID_STATE_ERR        \t= ExceptionCode.INVALID_STATE_ERR        \t= ((ExceptionMessage[11]=\"Invalid state\"),11);\nvar SYNTAX_ERR               \t= ExceptionCode.SYNTAX_ERR               \t= ((ExceptionMessage[12]=\"Syntax error\"),12);\nvar INVALID_MODIFICATION_ERR \t= ExceptionCode.INVALID_MODIFICATION_ERR \t= ((ExceptionMessage[13]=\"Invalid modification\"),13);\nvar NAMESPACE_ERR            \t= ExceptionCode.NAMESPACE_ERR           \t= ((ExceptionMessage[14]=\"Invalid namespace\"),14);\nvar INVALID_ACCESS_ERR       \t= ExceptionCode.INVALID_ACCESS_ERR      \t= ((ExceptionMessage[15]=\"Invalid access\"),15);\n\n\nfunction DOMException(code, message) {\n\tif(message instanceof Error){\n\t\tvar error = message;\n\t}else{\n\t\terror = this;\n\t\tError.call(this, ExceptionMessage[code]);\n\t\tthis.message = ExceptionMessage[code];\n\t\tif(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n\t}\n\terror.code = code;\n\tif(message) this.message = this.message + \": \" + message;\n\treturn error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode,DOMException)\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */\nfunction NodeList() {\n};\nNodeList.prototype = {\n\t/**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */\n\tlength:0, \n\t/**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long \n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index. \n\t */\n\titem: function(index) {\n\t\treturn this[index] || null;\n\t},\n\ttoString:function(){\n\t\tfor(var buf = [], i = 0;i<this.length;i++){\n\t\t\tserializeToString(this[i],buf);\n\t\t}\n\t\treturn buf.join('');\n\t}\n};\nfunction LiveNodeList(node,refresh){\n\tthis._node = node;\n\tthis._refresh = refresh\n\t_updateLiveList(this);\n}\nfunction _updateLiveList(list){\n\tvar inc = list._node._inc || list._node.ownerDocument._inc;\n\tif(list._inc != inc){\n\t\tvar ls = list._refresh(list._node);\n\t\t//console.log(ls.length)\n\t\t__set__(list,'length',ls.length);\n\t\tcopy(ls,list);\n\t\tlist._inc = inc;\n\t}\n}\nLiveNodeList.prototype.item = function(i){\n\t_updateLiveList(this);\n\treturn this[i];\n}\n\n_extends(LiveNodeList,NodeList);\n/**\n * \n * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities \n */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list,node){\n\tvar i = list.length;\n\twhile(i--){\n\t\tif(list[i] === node){return i}\n\t}\n}\n\nfunction _addNamedNode(el,list,newAttr,oldAttr){\n\tif(oldAttr){\n\t\tlist[_findNodeIndex(list,oldAttr)] = newAttr;\n\t}else{\n\t\tlist[list.length++] = newAttr;\n\t}\n\tif(el){\n\t\tnewAttr.ownerElement = el;\n\t\tvar doc = el.ownerDocument;\n\t\tif(doc){\n\t\t\toldAttr && _onRemoveAttribute(doc,el,oldAttr);\n\t\t\t_onAddAttribute(doc,el,newAttr);\n\t\t}\n\t}\n}\nfunction _removeNamedNode(el,list,attr){\n\tvar i = _findNodeIndex(list,attr);\n\tif(i>=0){\n\t\tvar lastIndex = list.length-1\n\t\twhile(i<lastIndex){\n\t\t\tlist[i] = list[++i]\n\t\t}\n\t\tlist.length = lastIndex;\n\t\tif(el){\n\t\t\tvar doc = el.ownerDocument;\n\t\t\tif(doc){\n\t\t\t\t_onRemoveAttribute(doc,el,attr);\n\t\t\t\tattr.ownerElement = null;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tthrow DOMException(NOT_FOUND_ERR,new Error())\n\t}\n}\nNamedNodeMap.prototype = {\n\tlength:0,\n\titem:NodeList.prototype.item,\n\tgetNamedItem: function(key) {\n//\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n//\t\t\treturn null;\n//\t\t}\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar attr = this[i];\n\t\t\tif(attr.nodeName == key){\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t},\n\tsetNamedItem: function(attr) {\n\t\tvar el = attr.ownerElement;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\tvar oldAttr = this.getNamedItem(attr.nodeName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\t/* returns Node */\n\tsetNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n\t\tvar el = attr.ownerElement, oldAttr;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\toldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\n\t/* returns Node */\n\tremoveNamedItem: function(key) {\n\t\tvar attr = this.getNamedItem(key);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t\t\n\t\t\n\t},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\t\n\t//for level2\n\tremoveNamedItemNS:function(namespaceURI,localName){\n\t\tvar attr = this.getNamedItemNS(namespaceURI,localName);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t},\n\tgetNamedItemNS: function(namespaceURI, localName) {\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar node = this[i];\n\t\t\tif(node.localName == localName && node.namespaceURI == namespaceURI){\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n};\n/**\n * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490\n */\nfunction DOMImplementation(/* Object */ features) {\n\tthis._features = {};\n\tif (features) {\n\t\tfor (var feature in features) {\n\t\t\t this._features = features[feature];\n\t\t}\n\t}\n};\n\nDOMImplementation.prototype = {\n\thasFeature: function(/* string */ feature, /* string */ version) {\n\t\tvar versions = this._features[feature.toLowerCase()];\n\t\tif (versions && (!version || version in versions)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR\n\t\tvar doc = new Document();\n\t\tdoc.implementation = this;\n\t\tdoc.childNodes = new NodeList();\n\t\tdoc.doctype = doctype;\n\t\tif(doctype){\n\t\t\tdoc.appendChild(doctype);\n\t\t}\n\t\tif(qualifiedName){\n\t\t\tvar root = doc.createElementNS(namespaceURI,qualifiedName);\n\t\t\tdoc.appendChild(root);\n\t\t}\n\t\treturn doc;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR\n\t\tvar node = new DocumentType();\n\t\tnode.name = qualifiedName;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.publicId = publicId;\n\t\tnode.systemId = systemId;\n\t\t// Introduced in DOM Level 2:\n\t\t//readonly attribute DOMString        internalSubset;\n\t\t\n\t\t//TODO:..\n\t\t//  readonly attribute NamedNodeMap     entities;\n\t\t//  readonly attribute NamedNodeMap     notations;\n\t\treturn node;\n\t}\n};\n\n\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */\n\nfunction Node() {\n};\n\nNode.prototype = {\n\tfirstChild : null,\n\tlastChild : null,\n\tpreviousSibling : null,\n\tnextSibling : null,\n\tattributes : null,\n\tparentNode : null,\n\tchildNodes : null,\n\townerDocument : null,\n\tnodeValue : null,\n\tnamespaceURI : null,\n\tprefix : null,\n\tlocalName : null,\n\t// Modified in DOM Level 2:\n\tinsertBefore:function(newChild, refChild){//raises \n\t\treturn _insertBefore(this,newChild,refChild);\n\t},\n\treplaceChild:function(newChild, oldChild){//raises \n\t\tthis.insertBefore(newChild,oldChild);\n\t\tif(oldChild){\n\t\t\tthis.removeChild(oldChild);\n\t\t}\n\t},\n\tremoveChild:function(oldChild){\n\t\treturn _removeChild(this,oldChild);\n\t},\n\tappendChild:function(newChild){\n\t\treturn this.insertBefore(newChild,null);\n\t},\n\thasChildNodes:function(){\n\t\treturn this.firstChild != null;\n\t},\n\tcloneNode:function(deep){\n\t\treturn cloneNode(this.ownerDocument||this,this,deep);\n\t},\n\t// Modified in DOM Level 2:\n\tnormalize:function(){\n\t\tvar child = this.firstChild;\n\t\twhile(child){\n\t\t\tvar next = child.nextSibling;\n\t\t\tif(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){\n\t\t\t\tthis.removeChild(next);\n\t\t\t\tchild.appendData(next.data);\n\t\t\t}else{\n\t\t\t\tchild.normalize();\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t}\n\t},\n  \t// Introduced in DOM Level 2:\n\tisSupported:function(feature, version){\n\t\treturn this.ownerDocument.implementation.hasFeature(feature,version);\n\t},\n    // Introduced in DOM Level 2:\n    hasAttributes:function(){\n    \treturn this.attributes.length>0;\n    },\n    lookupPrefix:function(namespaceURI){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tfor(var n in map){\n    \t\t\t\tif(map[n] == namespaceURI){\n    \t\t\t\t\treturn n;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == 2?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI:function(prefix){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tif(prefix in map){\n    \t\t\t\treturn map[prefix] ;\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == 2?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace:function(namespaceURI){\n    \tvar prefix = this.lookupPrefix(namespaceURI);\n    \treturn prefix == null;\n    }\n};\n\n\nfunction _xmlEncoder(c){\n\treturn c == '<' && '&lt;' ||\n         c == '>' && '&gt;' ||\n         c == '&' && '&amp;' ||\n         c == '\"' && '&quot;' ||\n         '&#'+c.charCodeAt()+';'\n}\n\n\ncopy(NodeType,Node);\ncopy(NodeType,Node.prototype);\n\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */\nfunction _visitNode(node,callback){\n\tif(callback(node)){\n\t\treturn true;\n\t}\n\tif(node = node.firstChild){\n\t\tdo{\n\t\t\tif(_visitNode(node,callback)){return true}\n        }while(node=node.nextSibling)\n    }\n}\n\n\n\nfunction Document(){\n}\nfunction _onAddAttribute(doc,el,newAttr){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tel._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value\n\t}\n}\nfunction _onRemoveAttribute(doc,el,newAttr,remove){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tdelete el._nsMap[newAttr.prefix?newAttr.localName:'']\n\t}\n}\nfunction _onUpdateChild(doc,el,newChild){\n\tif(doc && doc._inc){\n\t\tdoc._inc++;\n\t\t//update childNodes\n\t\tvar cs = el.childNodes;\n\t\tif(newChild){\n\t\t\tcs[cs.length++] = newChild;\n\t\t}else{\n\t\t\t//console.log(1)\n\t\t\tvar child = el.firstChild;\n\t\t\tvar i = 0;\n\t\t\twhile(child){\n\t\t\t\tcs[i++] = child;\n\t\t\t\tchild =child.nextSibling;\n\t\t\t}\n\t\t\tcs.length = i;\n\t\t}\n\t}\n}\n\n/**\n * attributes;\n * children;\n * \n * writeable properties:\n * nodeValue,Attr:value,CharacterData:data\n * prefix\n */\nfunction _removeChild(parentNode,child){\n\tvar previous = child.previousSibling;\n\tvar next = child.nextSibling;\n\tif(previous){\n\t\tprevious.nextSibling = next;\n\t}else{\n\t\tparentNode.firstChild = next\n\t}\n\tif(next){\n\t\tnext.previousSibling = previous;\n\t}else{\n\t\tparentNode.lastChild = previous;\n\t}\n\t_onUpdateChild(parentNode.ownerDocument,parentNode);\n\treturn child;\n}\n/**\n * preformance key(refChild == null)\n */\nfunction _insertBefore(parentNode,newChild,nextChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tcp.removeChild(newChild);//remove and update\n\t}\n\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\tvar newFirst = newChild.firstChild;\n\t\tif (newFirst == null) {\n\t\t\treturn newChild;\n\t\t}\n\t\tvar newLast = newChild.lastChild;\n\t}else{\n\t\tnewFirst = newLast = newChild;\n\t}\n\tvar pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;\n\n\tnewFirst.previousSibling = pre;\n\tnewLast.nextSibling = nextChild;\n\t\n\t\n\tif(pre){\n\t\tpre.nextSibling = newFirst;\n\t}else{\n\t\tparentNode.firstChild = newFirst;\n\t}\n\tif(nextChild == null){\n\t\tparentNode.lastChild = newLast;\n\t}else{\n\t\tnextChild.previousSibling = newLast;\n\t}\n\tdo{\n\t\tnewFirst.parentNode = parentNode;\n\t}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))\n\t_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);\n\t//console.log(parentNode.lastChild.nextSibling == null)\n\tif (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n\t\tnewChild.firstChild = newChild.lastChild = null;\n\t}\n\treturn newChild;\n}\nfunction _appendSingleChild(parentNode,newChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tvar pre = parentNode.lastChild;\n\t\tcp.removeChild(newChild);//remove and update\n\t\tvar pre = parentNode.lastChild;\n\t}\n\tvar pre = parentNode.lastChild;\n\tnewChild.parentNode = parentNode;\n\tnewChild.previousSibling = pre;\n\tnewChild.nextSibling = null;\n\tif(pre){\n\t\tpre.nextSibling = newChild;\n\t}else{\n\t\tparentNode.firstChild = newChild;\n\t}\n\tparentNode.lastChild = newChild;\n\t_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);\n\treturn newChild;\n\t//console.log(\"__aa\",parentNode.lastChild.nextSibling == null)\n}\nDocument.prototype = {\n\t//implementation : null,\n\tnodeName :  '#document',\n\tnodeType :  DOCUMENT_NODE,\n\tdoctype :  null,\n\tdocumentElement :  null,\n\t_inc : 1,\n\t\n\tinsertBefore :  function(newChild, refChild){//raises \n\t\tif(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){\n\t\t\tvar child = newChild.firstChild;\n\t\t\twhile(child){\n\t\t\t\tvar next = child.nextSibling;\n\t\t\t\tthis.insertBefore(child,refChild);\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t\treturn newChild;\n\t\t}\n\t\tif(this.documentElement == null && newChild.nodeType == 1){\n\t\t\tthis.documentElement = newChild;\n\t\t}\n\t\t\n\t\treturn _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;\n\t},\n\tremoveChild :  function(oldChild){\n\t\tif(this.documentElement == oldChild){\n\t\t\tthis.documentElement = null;\n\t\t}\n\t\treturn _removeChild(this,oldChild);\n\t},\n\t// Introduced in DOM Level 2:\n\timportNode : function(importedNode,deep){\n\t\treturn importNode(this,importedNode,deep);\n\t},\n\t// Introduced in DOM Level 2:\n\tgetElementById :\tfunction(id){\n\t\tvar rtv = null;\n\t\t_visitNode(this.documentElement,function(node){\n\t\t\tif(node.nodeType == 1){\n\t\t\t\tif(node.getAttribute('id') == id){\n\t\t\t\t\trtv = node;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn rtv;\n\t},\n\t\n\t//document factory method:\n\tcreateElement :\tfunction(tagName){\n\t\tvar node = new Element();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = tagName;\n\t\tnode.tagName = tagName;\n\t\tnode.childNodes = new NodeList();\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\tcreateDocumentFragment :\tfunction(){\n\t\tvar node = new DocumentFragment();\n\t\tnode.ownerDocument = this;\n\t\tnode.childNodes = new NodeList();\n\t\treturn node;\n\t},\n\tcreateTextNode :\tfunction(data){\n\t\tvar node = new Text();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateComment :\tfunction(data){\n\t\tvar node = new Comment();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateCDATASection :\tfunction(data){\n\t\tvar node = new CDATASection();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateProcessingInstruction :\tfunction(target,data){\n\t\tvar node = new ProcessingInstruction();\n\t\tnode.ownerDocument = this;\n\t\tnode.tagName = node.target = target;\n\t\tnode.nodeValue= node.data = data;\n\t\treturn node;\n\t},\n\tcreateAttribute :\tfunction(name){\n\t\tvar node = new Attr();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.name = name;\n\t\tnode.nodeName\t= name;\n\t\tnode.localName = name;\n\t\tnode.specified = true;\n\t\treturn node;\n\t},\n\tcreateEntityReference :\tfunction(name){\n\t\tvar node = new EntityReference();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.nodeName\t= name;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateElementNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Element();\n\t\tvar pl = qualifiedName.split(':');\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tnode.childNodes = new NodeList();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.tagName = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateAttributeNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Attr();\n\t\tvar pl = qualifiedName.split(':');\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.name = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tnode.specified = true;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\treturn node;\n\t}\n};\n_extends(Document,Node);\n\n\nfunction Element() {\n\tthis._nsMap = {};\n};\nElement.prototype = {\n\tnodeType : ELEMENT_NODE,\n\thasAttribute : function(name){\n\t\treturn this.getAttributeNode(name)!=null;\n\t},\n\tgetAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name);\n\t\treturn attr && attr.value || '';\n\t},\n\tgetAttributeNode : function(name){\n\t\treturn this.attributes.getNamedItem(name);\n\t},\n\tsetAttribute : function(name, value){\n\t\tvar attr = this.ownerDocument.createAttribute(name);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tremoveAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name)\n\t\tattr && this.removeAttributeNode(attr);\n\t},\n\t\n\t//four real opeartion method\n\tappendChild:function(newChild){\n\t\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\t\treturn this.insertBefore(newChild,null);\n\t\t}else{\n\t\t\treturn _appendSingleChild(this,newChild);\n\t\t}\n\t},\n\tsetAttributeNode : function(newAttr){\n\t\treturn this.attributes.setNamedItem(newAttr);\n\t},\n\tsetAttributeNodeNS : function(newAttr){\n\t\treturn this.attributes.setNamedItemNS(newAttr);\n\t},\n\tremoveAttributeNode : function(oldAttr){\n\t\treturn this.attributes.removeNamedItem(oldAttr.nodeName);\n\t},\n\t//get real attribute name,and remove it by removeAttributeNode\n\tremoveAttributeNS : function(namespaceURI, localName){\n\t\tvar old = this.getAttributeNodeNS(namespaceURI, localName);\n\t\told && this.removeAttributeNode(old);\n\t},\n\t\n\thasAttributeNS : function(namespaceURI, localName){\n\t\treturn this.getAttributeNodeNS(namespaceURI, localName)!=null;\n\t},\n\tgetAttributeNS : function(namespaceURI, localName){\n\t\tvar attr = this.getAttributeNodeNS(namespaceURI, localName);\n\t\treturn attr && attr.value || '';\n\t},\n\tsetAttributeNS : function(namespaceURI, qualifiedName, value){\n\t\tvar attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tgetAttributeNodeNS : function(namespaceURI, localName){\n\t\treturn this.attributes.getNamedItemNS(namespaceURI, localName);\n\t},\n\t\n\tgetElementsByTagName : function(tagName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t});\n\t},\n\tgetElementsByTagNameNS : function(namespaceURI, localName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t});\n\t}\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element,Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr,Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n\tdata : '',\n\tsubstringData : function(offset, count) {\n\t\treturn this.data.substring(offset, offset+count);\n\t},\n\tappendData: function(text) {\n\t\ttext = this.data+text;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t},\n\tinsertData: function(offset,text) {\n\t\tthis.replaceData(offset,0,text);\n\t\n\t},\n\tappendChild:function(newChild){\n\t\t//if(!(newChild instanceof CharacterData)){\n\t\t\tthrow new Error(ExceptionMessage[3])\n\t\t//}\n\t\treturn Node.prototype.appendChild.apply(this,arguments)\n\t},\n\tdeleteData: function(offset, count) {\n\t\tthis.replaceData(offset,count,\"\");\n\t},\n\treplaceData: function(offset, count, text) {\n\t\tvar start = this.data.substring(0,offset);\n\t\tvar end = this.data.substring(offset+count);\n\t\ttext = start + text + end;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t}\n}\n_extends(CharacterData,Node);\nfunction Text() {\n};\nText.prototype = {\n\tnodeName : \"#text\",\n\tnodeType : TEXT_NODE,\n\tsplitText : function(offset) {\n\t\tvar text = this.data;\n\t\tvar newText = text.substring(offset);\n\t\ttext = text.substring(0, offset);\n\t\tthis.data = this.nodeValue = text;\n\t\tthis.length = text.length;\n\t\tvar newNode = this.ownerDocument.createTextNode(newText);\n\t\tif(this.parentNode){\n\t\t\tthis.parentNode.insertBefore(newNode, this.nextSibling);\n\t\t}\n\t\treturn newNode;\n\t}\n}\n_extends(Text,CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n\tnodeName : \"#comment\",\n\tnodeType : COMMENT_NODE\n}\n_extends(Comment,CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n\tnodeName : \"#cdata-section\",\n\tnodeType : CDATA_SECTION_NODE\n}\n_extends(CDATASection,CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType,Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation,Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity,Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference,Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName =\t\"#document-fragment\";\nDocumentFragment.prototype.nodeType =\tDOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment,Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction,Node);\nfunction XMLSerializer(){}\nXMLSerializer.prototype.serializeToString = function(node,attributeSorter){\n\treturn node.toString(attributeSorter);\n}\nNode.prototype.toString =function(attributeSorter){\n\tvar buf = [];\n\tserializeToString(this,buf,attributeSorter);\n\treturn buf.join('');\n}\nfunction serializeToString(node,buf,attributeSorter,isHTML){\n\tswitch(node.nodeType){\n\tcase ELEMENT_NODE:\n\t\tvar attrs = node.attributes;\n\t\tvar len = attrs.length;\n\t\tvar child = node.firstChild;\n\t\tvar nodeName = node.tagName;\n\t\tisHTML =  (htmlns === node.namespaceURI) ||isHTML \n\t\tbuf.push('<',nodeName);\n\t\tif(attributeSorter){\n\t\t\tbuf.sort.apply(attrs, attributeSorter);\n\t\t}\n\t\tfor(var i=0;i<len;i++){\n\t\t\tserializeToString(attrs.item(i),buf,attributeSorter,isHTML);\n\t\t}\n\t\tif(child || isHTML && !/^(?:meta|link|img|br|hr|input|button)$/i.test(nodeName)){\n\t\t\tbuf.push('>');\n\t\t\t//if is cdata child node\n\t\t\tif(isHTML && /^script$/i.test(nodeName)){\n\t\t\t\tif(child){\n\t\t\t\t\tbuf.push(child.data);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\twhile(child){\n\t\t\t\t\tserializeToString(child,buf,attributeSorter,isHTML);\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf.push('</',nodeName,'>');\n\t\t}else{\n\t\t\tbuf.push('/>');\n\t\t}\n\t\treturn;\n\tcase DOCUMENT_NODE:\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tserializeToString(child,buf,attributeSorter,isHTML);\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t\treturn;\n\tcase ATTRIBUTE_NODE:\n\t\treturn buf.push(' ',node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');\n\tcase TEXT_NODE:\n\t\treturn buf.push(node.data.replace(/[<&]/g,_xmlEncoder));\n\tcase CDATA_SECTION_NODE:\n\t\treturn buf.push( '<![CDATA[',node.data,']]>');\n\tcase COMMENT_NODE:\n\t\treturn buf.push( \"<!--\",node.data,\"-->\");\n\tcase DOCUMENT_TYPE_NODE:\n\t\tvar pubid = node.publicId;\n\t\tvar sysid = node.systemId;\n\t\tbuf.push('<!DOCTYPE ',node.name);\n\t\tif(pubid){\n\t\t\tbuf.push(' PUBLIC \"',pubid);\n\t\t\tif (sysid && sysid!='.') {\n\t\t\t\tbuf.push( '\" \"',sysid);\n\t\t\t}\n\t\t\tbuf.push('\">');\n\t\t}else if(sysid && sysid!='.'){\n\t\t\tbuf.push(' SYSTEM \"',sysid,'\">');\n\t\t}else{\n\t\t\tvar sub = node.internalSubset;\n\t\t\tif(sub){\n\t\t\t\tbuf.push(\" [\",sub,\"]\");\n\t\t\t}\n\t\t\tbuf.push(\">\");\n\t\t}\n\t\treturn;\n\tcase PROCESSING_INSTRUCTION_NODE:\n\t\treturn buf.push( \"<?\",node.target,\" \",node.data,\"?>\");\n\tcase ENTITY_REFERENCE_NODE:\n\t\treturn buf.push( '&',node.nodeName,';');\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE:\n\tdefault:\n\t\tbuf.push('??',node.nodeName);\n\t}\n}\nfunction importNode(doc,node,deep){\n\tvar node2;\n\tswitch (node.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tnode2 = node.cloneNode(false);\n\t\tnode2.ownerDocument = doc;\n\t\t//var attrs = node2.attributes;\n\t\t//var len = attrs.length;\n\t\t//for(var i=0;i<len;i++){\n\t\t\t//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n\t\t//}\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tbreak;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t\tbreak;\n\t//case ENTITY_REFERENCE_NODE:\n\t//case PROCESSING_INSTRUCTION_NODE:\n\t////case TEXT_NODE:\n\t//case CDATA_SECTION_NODE:\n\t//case COMMENT_NODE:\n\t//\tdeep = false;\n\t//\tbreak;\n\t//case DOCUMENT_NODE:\n\t//case DOCUMENT_TYPE_NODE:\n\t//cannot be imported.\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE：\n\t//can not hit in level3\n\t//default:throw e;\n\t}\n\tif(!node2){\n\t\tnode2 = node.cloneNode(false);//false\n\t}\n\tnode2.ownerDocument = doc;\n\tnode2.parentNode = null;\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(importNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc,node,deep){\n\tvar node2 = new node.constructor();\n\tfor(var n in node){\n\t\tvar v = node[n];\n\t\tif(typeof v != 'object' ){\n\t\t\tif(v != node2[n]){\n\t\t\t\tnode2[n] = v;\n\t\t\t}\n\t\t}\n\t}\n\tif(node.childNodes){\n\t\tnode2.childNodes = new NodeList();\n\t}\n\tnode2.ownerDocument = doc;\n\tswitch (node2.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tvar attrs\t= node.attributes;\n\t\tvar attrs2\t= node2.attributes = new NamedNodeMap();\n\t\tvar len = attrs.length\n\t\tattrs2._ownerElement = node2;\n\t\tfor(var i=0;i<len;i++){\n\t\t\tnode2.setAttributeNode(cloneNode(doc,attrs.item(i),true));\n\t\t}\n\t\tbreak;;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t}\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(cloneNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n\nfunction __set__(object,key,value){\n\tobject[key] = value\n}\n//do dynamic\ntry{\n\tif(Object.defineProperty){\n\t\tObject.defineProperty(LiveNodeList.prototype,'length',{\n\t\t\tget:function(){\n\t\t\t\t_updateLiveList(this);\n\t\t\t\treturn this.$$length;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(Node.prototype,'textContent',{\n\t\t\tget:function(){\n\t\t\t\treturn getTextContent(this);\n\t\t\t},\n\t\t\tset:function(data){\n\t\t\t\tswitch(this.nodeType){\n\t\t\t\tcase 1:\n\t\t\t\tcase 11:\n\t\t\t\t\twhile(this.firstChild){\n\t\t\t\t\t\tthis.removeChild(this.firstChild);\n\t\t\t\t\t}\n\t\t\t\t\tif(data || String(data)){\n\t\t\t\t\t\tthis.appendChild(this.ownerDocument.createTextNode(data));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//TODO:\n\t\t\t\t\tthis.data = data;\n\t\t\t\t\tthis.value = value;\n\t\t\t\t\tthis.nodeValue = data;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\n\t\tfunction getTextContent(node){\n\t\t\tswitch(node.nodeType){\n\t\t\tcase 1:\n\t\t\tcase 11:\n\t\t\t\tvar buf = [];\n\t\t\t\tnode = node.firstChild;\n\t\t\t\twhile(node){\n\t\t\t\t\tif(node.nodeType!==7 && node.nodeType !==8){\n\t\t\t\t\t\tbuf.push(getTextContent(node));\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t}\n\t\t\t\treturn buf.join('');\n\t\t\tdefault:\n\t\t\t\treturn node.nodeValue;\n\t\t\t}\n\t\t}\n\t\t__set__ = function(object,key,value){\n\t\t\t//console.log(value)\n\t\t\tobject['$$'+key] = value\n\t\t}\n\t}\n}catch(e){//ie8\n}\n\nif(typeof _dereq_ == 'function'){\n\texports.DOMImplementation = DOMImplementation;\n\texports.XMLSerializer = XMLSerializer;\n}\n\n},{}],26:[function(_dereq_,module,exports){\n//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\r\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\r\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\r\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]///\\u10000-\\uEFFFF\r\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\u00B7\\u0300-\\u036F\\\\u203F-\\u2040]\");\r\nvar tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\\:'+nameStartChar.source+nameChar.source+'*)?$');\r\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\r\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\r\n\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_V\r\n//S_ATTR_S,\tS_E,\tS_S,\tS_C\r\nvar S_TAG = 0;//tag name offerring\r\nvar S_ATTR = 1;//attr name offerring \r\nvar S_ATTR_S=2;//attr name end and space offer\r\nvar S_EQ = 3;//=space?\r\nvar S_V = 4;//attr value(no quot value only)\r\nvar S_E = 5;//attr value end and no space(quot end)\r\nvar S_S = 6;//(attr value end || tag end ) && (space offer)\r\nvar S_C = 7;//closed el<el />\r\n\r\nfunction XMLReader(){\r\n\t\r\n}\r\n\r\nXMLReader.prototype = {\r\n\tparse:function(source,defaultNSMap,entityMap){\r\n\t\tvar domBuilder = this.domBuilder;\r\n\t\tdomBuilder.startDocument();\r\n\t\t_copy(defaultNSMap ,defaultNSMap = {})\r\n\t\tparse(source,defaultNSMap,entityMap,\r\n\t\t\t\tdomBuilder,this.errorHandler);\r\n\t\tdomBuilder.endDocument();\r\n\t}\r\n}\r\nfunction parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){\r\n  function fixedFromCharCode(code) {\r\n\t\t// String.prototype.fromCharCode does not supports\r\n\t\t// > 2 bytes unicode chars directly\r\n\t\tif (code > 0xffff) {\r\n\t\t\tcode -= 0x10000;\r\n\t\t\tvar surrogate1 = 0xd800 + (code >> 10)\r\n\t\t\t\t, surrogate2 = 0xdc00 + (code & 0x3ff);\r\n\r\n\t\t\treturn String.fromCharCode(surrogate1, surrogate2);\r\n\t\t} else {\r\n\t\t\treturn String.fromCharCode(code);\r\n\t\t}\r\n\t}\r\n\tfunction entityReplacer(a){\r\n\t\tvar k = a.slice(1,-1);\r\n\t\tif(k in entityMap){\r\n\t\t\treturn entityMap[k]; \r\n\t\t}else if(k.charAt(0) === '#'){\r\n\t\t\treturn fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))\r\n\t\t}else{\r\n\t\t\terrorHandler.error('entity not found:'+a);\r\n\t\t\treturn a;\r\n\t\t}\r\n\t}\r\n\tfunction appendText(end){//has some bugs\r\n\t\tif(end>start){\r\n\t\t\tvar xt = source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\tlocator&&position(start);\r\n\t\t\tdomBuilder.characters(xt,0,end-start);\r\n\t\t\tstart = end\r\n\t\t}\r\n\t}\r\n\tfunction position(p,m){\r\n\t\twhile(p>=lineEnd && (m = linePattern.exec(source))){\r\n\t\t\tlineStart = m.index;\r\n\t\t\tlineEnd = lineStart + m[0].length;\r\n\t\t\tlocator.lineNumber++;\r\n\t\t\t//console.log('line++:',locator,startPos,endPos)\r\n\t\t}\r\n\t\tlocator.columnNumber = p-lineStart+1;\r\n\t}\r\n\tvar lineStart = 0;\r\n\tvar lineEnd = 0;\r\n\tvar linePattern = /.+(?:\\r\\n?|\\n)|.*$/g\r\n\tvar locator = domBuilder.locator;\r\n\t\r\n\tvar parseStack = [{currentNSMap:defaultNSMapCopy}]\r\n\tvar closeMap = {};\r\n\tvar start = 0;\r\n\twhile(true){\r\n\t\ttry{\r\n\t\t\tvar tagStart = source.indexOf('<',start);\r\n\t\t\tif(tagStart<0){\r\n\t\t\t\tif(!source.substr(start).match(/^\\s*$/)){\r\n\t\t\t\t\tvar doc = domBuilder.document;\r\n\t    \t\t\tvar text = doc.createTextNode(source.substr(start));\r\n\t    \t\t\tdoc.appendChild(text);\r\n\t    \t\t\tdomBuilder.currentElement = text;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(tagStart>start){\r\n\t\t\t\tappendText(tagStart);\r\n\t\t\t}\r\n\t\t\tswitch(source.charAt(tagStart+1)){\r\n\t\t\tcase '/':\r\n\t\t\t\tvar end = source.indexOf('>',tagStart+3);\r\n\t\t\t\tvar tagName = source.substring(tagStart+2,end);\r\n\t\t\t\tvar config = parseStack.pop();\r\n\t\t\t\tvar localNSMap = config.localNSMap;\r\n\t\t        if(config.tagName != tagName){\r\n\t\t            errorHandler.fatalError(\"end tag name: \"+tagName+' is not match the current start tagName:'+config.tagName );\r\n\t\t        }\r\n\t\t\t\tdomBuilder.endElement(config.uri,config.localName,tagName);\r\n\t\t\t\tif(localNSMap){\r\n\t\t\t\t\tfor(var prefix in localNSMap){\r\n\t\t\t\t\t\tdomBuilder.endPrefixMapping(prefix) ;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tend++;\r\n\t\t\t\tbreak;\r\n\t\t\t\t// end elment\r\n\t\t\tcase '?':// <?...?>\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseInstruction(source,tagStart,domBuilder);\r\n\t\t\t\tbreak;\r\n\t\t\tcase '!':// <!doctype,<![CDATA,<!--\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseDCC(source,tagStart,domBuilder,errorHandler);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\t\r\n\t\t\t\tvar el = new ElementAttributes();\r\n\t\t\t\t\r\n\t\t\t\t//elStartEnd\r\n\t\t\t\tvar end = parseElementStartPart(source,tagStart,el,entityReplacer,errorHandler);\r\n\t\t\t\tvar len = el.length;\r\n\t\t\t\t\r\n\t\t\t\tif(locator){\r\n\t\t\t\t\tif(len){\r\n\t\t\t\t\t\t//attribute position fixed\r\n\t\t\t\t\t\tfor(var i = 0;i<len;i++){\r\n\t\t\t\t\t\t\tvar a = el[i];\r\n\t\t\t\t\t\t\tposition(a.offset);\r\n\t\t\t\t\t\t\ta.offset = copyLocator(locator,{});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tposition(end);\r\n\t\t\t\t}\r\n\t\t\t\tif(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){\r\n\t\t\t\t\tel.closed = true;\r\n\t\t\t\t\tif(!entityMap.nbsp){\r\n\t\t\t\t\t\terrorHandler.warning('unclosed xml attribute');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tappendElement(el,domBuilder,parseStack);\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){\r\n\t\t\t\t\tend = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tend++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}catch(e){\r\n\t\t\terrorHandler.error('element parse error: '+e);\r\n\t\t\tend = -1;\r\n\t\t}\r\n\t\tif(end>start){\r\n\t\t\tstart = end;\r\n\t\t}else{\r\n\t\t\t//TODO: 这里有可能sax回退，有位置错误风险\r\n\t\t\tappendText(Math.max(tagStart,start)+1);\r\n\t\t}\r\n\t}\r\n}\r\nfunction copyLocator(f,t){\r\n\tt.lineNumber = f.lineNumber;\r\n\tt.columnNumber = f.columnNumber;\r\n\treturn t;\r\n}\r\n\r\n/**\r\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n */\r\nfunction parseElementStartPart(source,start,el,entityReplacer,errorHandler){\r\n\tvar attrName;\r\n\tvar value;\r\n\tvar p = ++start;\r\n\tvar s = S_TAG;//status\r\n\twhile(true){\r\n\t\tvar c = source.charAt(p);\r\n\t\tswitch(c){\r\n\t\tcase '=':\r\n\t\t\tif(s === S_ATTR){//attrName\r\n\t\t\t\tattrName = source.slice(start,p);\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else if(s === S_ATTR_S){\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: equal must after attrName or space after attrName\r\n\t\t\t\tthrow new Error('attribute equal must after attrName');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '\\'':\r\n\t\tcase '\"':\r\n\t\t\tif(s === S_EQ){//equal\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\tp = source.indexOf(c,start)\r\n\t\t\t\tif(p>0){\r\n\t\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\tel.add(attrName,value,start-1);\r\n\t\t\t\t\ts = S_E;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//fatalError: no end quot match\r\n\t\t\t\t\tthrow new Error('attribute value no end \\''+c+'\\' match');\r\n\t\t\t\t}\r\n\t\t\t}else if(s == S_V){\r\n\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t//console.log(attrName,value,start,p)\r\n\t\t\t\tel.add(attrName,value,start);\r\n\t\t\t\t//console.dir(el)\r\n\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+')!!');\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\ts = S_E\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: no equal before\r\n\t\t\t\tthrow new Error('attribute value must after \"=\"');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '/':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_E:\r\n\t\t\tcase S_S:\r\n\t\t\tcase S_C:\r\n\t\t\t\ts = S_C;\r\n\t\t\t\tel.closed = true;\r\n\t\t\tcase S_V:\r\n\t\t\tcase S_ATTR:\r\n\t\t\tcase S_ATTR_S:\r\n\t\t\t\tbreak;\r\n\t\t\t//case S_EQ:\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"attribute invalid close char('/')\")\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase ''://end document\r\n\t\t\t//throw new Error('unexpected end of input')\r\n\t\t\terrorHandler.error('unexpected end of input');\r\n\t\tcase '>':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_E:\r\n\t\t\tcase S_S:\r\n\t\t\tcase S_C:\r\n\t\t\t\tbreak;//normal\r\n\t\t\tcase S_V://Compatible state\r\n\t\t\tcase S_ATTR:\r\n\t\t\t\tvalue = source.slice(start,p);\r\n\t\t\t\tif(value.slice(-1) === '/'){\r\n\t\t\t\t\tel.closed  = true;\r\n\t\t\t\t\tvalue = value.slice(0,-1)\r\n\t\t\t\t}\r\n\t\t\tcase S_ATTR_S:\r\n\t\t\t\tif(s === S_ATTR_S){\r\n\t\t\t\t\tvalue = attrName;\r\n\t\t\t\t}\r\n\t\t\t\tif(s == S_V){\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)\r\n\t\t\t\t}else{\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')\r\n\t\t\t\t\tel.add(value,value,start)\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase S_EQ:\r\n\t\t\t\tthrow new Error('attribute value missed!!');\r\n\t\t\t}\r\n//\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\r\n\t\t\treturn p;\r\n\t\t/*xml space '\\x20' | #x9 | #xD | #xA; */\r\n\t\tcase '\\u0080':\r\n\t\t\tc = ' ';\r\n\t\tdefault:\r\n\t\t\tif(c<= ' '){//space\r\n\t\t\t\tswitch(s){\r\n\t\t\t\tcase S_TAG:\r\n\t\t\t\t\tel.setTagName(source.slice(start,p));//tagName\r\n\t\t\t\t\ts = S_S;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR:\r\n\t\t\t\t\tattrName = source.slice(start,p)\r\n\t\t\t\t\ts = S_ATTR_S;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_V:\r\n\t\t\t\t\tvar value = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value,start)\r\n\t\t\t\tcase S_E:\r\n\t\t\t\t\ts = S_S;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case S_S:\r\n\t\t\t\t//case S_EQ:\r\n\t\t\t\t//case S_ATTR_S:\r\n\t\t\t\t//\tvoid();break;\r\n\t\t\t\t//case S_C:\r\n\t\t\t\t\t//ignore warning\r\n\t\t\t\t}\r\n\t\t\t}else{//not space\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_V\r\n//S_ATTR_S,\tS_E,\tS_S,\tS_C\r\n\t\t\t\tswitch(s){\r\n\t\t\t\t//case S_TAG:void();break;\r\n\t\t\t\t//case S_ATTR:void();break;\r\n\t\t\t\t//case S_V:void();break;\r\n\t\t\t\tcase S_ATTR_S:\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead!!')\r\n\t\t\t\t\tel.add(attrName,attrName,start);\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_E:\r\n\t\t\t\t\terrorHandler.warning('attribute space is required\"'+attrName+'\"!!')\r\n\t\t\t\tcase S_S:\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_EQ:\r\n\t\t\t\t\ts = S_V;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_C:\r\n\t\t\t\t\tthrow new Error(\"elements closed character '/' and '>' must be connected to\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tp++;\r\n\t}\r\n}\r\n/**\r\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n */\r\nfunction appendElement(el,domBuilder,parseStack){\r\n\tvar tagName = el.tagName;\r\n\tvar localNSMap = null;\r\n\tvar currentNSMap = parseStack[parseStack.length-1].currentNSMap;\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\tvar a = el[i];\r\n\t\tvar qName = a.qName;\r\n\t\tvar value = a.value;\r\n\t\tvar nsp = qName.indexOf(':');\r\n\t\tif(nsp>0){\r\n\t\t\tvar prefix = a.prefix = qName.slice(0,nsp);\r\n\t\t\tvar localName = qName.slice(nsp+1);\r\n\t\t\tvar nsPrefix = prefix === 'xmlns' && localName\r\n\t\t}else{\r\n\t\t\tlocalName = qName;\r\n\t\t\tprefix = null\r\n\t\t\tnsPrefix = qName === 'xmlns' && ''\r\n\t\t}\r\n\t\t//can not set prefix,because prefix !== ''\r\n\t\ta.localName = localName ;\r\n\t\t//prefix == null for no ns prefix attribute \r\n\t\tif(nsPrefix !== false){//hack!!\r\n\t\t\tif(localNSMap == null){\r\n\t\t\t\tlocalNSMap = {}\r\n\t\t\t\t//console.log(currentNSMap,0)\r\n\t\t\t\t_copy(currentNSMap,currentNSMap={})\r\n\t\t\t\t//console.log(currentNSMap,1)\r\n\t\t\t}\r\n\t\t\tcurrentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\r\n\t\t\ta.uri = 'http://www.w3.org/2000/xmlns/'\r\n\t\t\tdomBuilder.startPrefixMapping(nsPrefix, value) \r\n\t\t}\r\n\t}\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\ta = el[i];\r\n\t\tvar prefix = a.prefix;\r\n\t\tif(prefix){//no prefix attribute has no namespace\r\n\t\t\tif(prefix === 'xml'){\r\n\t\t\t\ta.uri = 'http://www.w3.org/XML/1998/namespace';\r\n\t\t\t}if(prefix !== 'xmlns'){\r\n\t\t\t\ta.uri = currentNSMap[prefix]\r\n\t\t\t\t\r\n\t\t\t\t//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar nsp = tagName.indexOf(':');\r\n\tif(nsp>0){\r\n\t\tprefix = el.prefix = tagName.slice(0,nsp);\r\n\t\tlocalName = el.localName = tagName.slice(nsp+1);\r\n\t}else{\r\n\t\tprefix = null;//important!!\r\n\t\tlocalName = el.localName = tagName;\r\n\t}\r\n\t//no prefix element has default namespace\r\n\tvar ns = el.uri = currentNSMap[prefix || ''];\r\n\tdomBuilder.startElement(ns,localName,tagName,el);\r\n\t//endPrefixMapping and startPrefixMapping have not any help for dom builder\r\n\t//localNSMap = null\r\n\tif(el.closed){\r\n\t\tdomBuilder.endElement(ns,localName,tagName);\r\n\t\tif(localNSMap){\r\n\t\t\tfor(prefix in localNSMap){\r\n\t\t\t\tdomBuilder.endPrefixMapping(prefix) \r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tel.currentNSMap = currentNSMap;\r\n\t\tel.localNSMap = localNSMap;\r\n\t\tparseStack.push(el);\r\n\t}\r\n}\r\nfunction parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){\r\n\tif(/^(?:script|textarea)$/i.test(tagName)){\r\n\t\tvar elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);\r\n\t\tvar text = source.substring(elStartEnd+1,elEndStart);\r\n\t\tif(/[&<]/.test(text)){\r\n\t\t\tif(/^script$/i.test(tagName)){\r\n\t\t\t\t//if(!/\\]\\]>/.test(text)){\r\n\t\t\t\t\t//lexHandler.startCDATA();\r\n\t\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\t\t//lexHandler.endCDATA();\r\n\t\t\t\t\treturn elEndStart;\r\n\t\t\t\t//}\r\n\t\t\t}//}else{//text area\r\n\t\t\t\ttext = text.replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\treturn elEndStart;\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\treturn elStartEnd+1;\r\n}\r\nfunction fixSelfClosed(source,elStartEnd,tagName,closeMap){\r\n\t//if(tagName in closeMap){\r\n\tvar pos = closeMap[tagName];\r\n\tif(pos == null){\r\n\t\t//console.log(tagName)\r\n\t\tpos = closeMap[tagName] = source.lastIndexOf('</'+tagName+'>')\r\n\t}\r\n\treturn pos<elStartEnd;\r\n\t//} \r\n}\r\nfunction _copy(source,target){\r\n\tfor(var n in source){target[n] = source[n]}\r\n}\r\nfunction parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'\r\n\tvar next= source.charAt(start+2)\r\n\tswitch(next){\r\n\tcase '-':\r\n\t\tif(source.charAt(start + 3) === '-'){\r\n\t\t\tvar end = source.indexOf('-->',start+4);\r\n\t\t\t//append comment source.substring(4,end)//<!--\r\n\t\t\tif(end>start){\r\n\t\t\t\tdomBuilder.comment(source,start+4,end-start-4);\r\n\t\t\t\treturn end+3;\r\n\t\t\t}else{\r\n\t\t\t\terrorHandler.error(\"Unclosed comment\");\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\tdefault:\r\n\t\tif(source.substr(start+3,6) == 'CDATA['){\r\n\t\t\tvar end = source.indexOf(']]>',start+9);\r\n\t\t\tdomBuilder.startCDATA();\r\n\t\t\tdomBuilder.characters(source,start+9,end-start-9);\r\n\t\t\tdomBuilder.endCDATA() \r\n\t\t\treturn end+3;\r\n\t\t}\r\n\t\t//<!DOCTYPE\r\n\t\t//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) \r\n\t\tvar matchs = split(source,start);\r\n\t\tvar len = matchs.length;\r\n\t\tif(len>1 && /!doctype/i.test(matchs[0][0])){\r\n\t\t\tvar name = matchs[1][0];\r\n\t\t\tvar pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]\r\n\t\t\tvar sysid = len>4 && matchs[4][0];\r\n\t\t\tvar lastMatch = matchs[len-1]\r\n\t\t\tdomBuilder.startDTD(name,pubid && pubid.replace(/^(['\"])(.*?)\\1$/,'$2'),\r\n\t\t\t\t\tsysid && sysid.replace(/^(['\"])(.*?)\\1$/,'$2'));\r\n\t\t\tdomBuilder.endDTD();\r\n\t\t\t\r\n\t\t\treturn lastMatch.index+lastMatch[0].length\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n\r\n\r\nfunction parseInstruction(source,start,domBuilder){\r\n\tvar end = source.indexOf('?>',start);\r\n\tif(end){\r\n\t\tvar match = source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\r\n\t\tif(match){\r\n\t\t\tvar len = match[0].length;\r\n\t\t\tdomBuilder.processingInstruction(match[1], match[2]) ;\r\n\t\t\treturn end+2;\r\n\t\t}else{//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * @param source\r\n */\r\nfunction ElementAttributes(source){\r\n\t\r\n}\r\nElementAttributes.prototype = {\r\n\tsetTagName:function(tagName){\r\n\t\tif(!tagNamePattern.test(tagName)){\r\n\t\t\tthrow new Error('invalid tagName:'+tagName)\r\n\t\t}\r\n\t\tthis.tagName = tagName\r\n\t},\r\n\tadd:function(qName,value,offset){\r\n\t\tif(!tagNamePattern.test(qName)){\r\n\t\t\tthrow new Error('invalid attribute:'+qName)\r\n\t\t}\r\n\t\tthis[this.length++] = {qName:qName,value:value,offset:offset}\r\n\t},\r\n\tlength:0,\r\n\tgetLocalName:function(i){return this[i].localName},\r\n\tgetOffset:function(i){return this[i].offset},\r\n\tgetQName:function(i){return this[i].qName},\r\n\tgetURI:function(i){return this[i].uri},\r\n\tgetValue:function(i){return this[i].value}\r\n//\t,getIndex:function(uri, localName)){\r\n//\t\tif(localName){\r\n//\t\t\t\r\n//\t\t}else{\r\n//\t\t\tvar qName = uri\r\n//\t\t}\r\n//\t},\r\n//\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\r\n//\tgetType:function(uri,localName){}\r\n//\tgetType:function(i){},\r\n}\r\n\r\n\r\n\r\n\r\nfunction _set_proto_(thiz,parent){\r\n\tthiz.__proto__ = parent;\r\n\treturn thiz;\r\n}\r\nif(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){\r\n\t_set_proto_ = function(thiz,parent){\r\n\t\tfunction p(){};\r\n\t\tp.prototype = parent;\r\n\t\tp = new p();\r\n\t\tfor(parent in thiz){\r\n\t\t\tp[parent] = thiz[parent];\r\n\t\t}\r\n\t\treturn p;\r\n\t}\r\n}\r\n\r\nfunction split(source,start){\r\n\tvar match;\r\n\tvar buf = [];\r\n\tvar reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\r\n\treg.lastIndex = start;\r\n\treg.exec(source);//skip <\r\n\twhile(match = reg.exec(source)){\r\n\t\tbuf.push(match);\r\n\t\tif(match[1])return buf;\r\n\t}\r\n}\r\n\r\nif(typeof _dereq_ == 'function'){\r\n\texports.XMLReader = XMLReader;\r\n}\r\n\r\n\n},{}],27:[function(_dereq_,module,exports){\nmodule.exports={\n  \"name\": \"jaydata\",\n  \"version\": \"1.5.10\",\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\n  \"keywords\": [\n    \"HTML5 data management\",\n    \"JavaScript\",\n    \"JavaScript Language Query\",\n    \"JSLQ\",\n    \"OData\",\n    \"SQLite\",\n    \"WebSQL\",\n    \"IndexedDB\",\n    \"YQL\",\n    \"Facebook\",\n    \"cross-platform\",\n    \"iPhone\",\n    \"Android\"\n  ],\n  \"homepage\": \"http://jaydata.org\",\n  \"author\": {\n    \"name\": \"JayData\",\n    \"url\": \"http://jaydata.org\"\n  },\n  \"dependencies\": {\n    \"acorn\": \"^3.3.0\",\n    \"atob\": \"^2.0.0\",\n    \"btoa\": \"^1.1.2\",\n    \"dot\": \"^1.0.3\",\n    \"jaydata-dynamic-metadata\": \"^0.1.16\",\n    \"jaydata-error-handler\": \"^0.0.1\",\n    \"jaydata-odatajs\": \"^4.0.1\",\n    \"jaydata-promise-handler\": \"^0.0.1\",\n    \"odata-v4-metadata\": \"^0.1.3\",\n    \"xmldom\": \"^0.1.19\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Dániel József\"\n    },\n    {\n      \"name\": \"Hajnalka Battancs\"\n    },\n    {\n      \"name\": \"János Roden\"\n    },\n    {\n      \"name\": \"László Horváth\"\n    },\n    {\n      \"name\": \"Péter Zentai\"\n    },\n    {\n      \"name\": \"Péter Nochta\"\n    },\n    {\n      \"name\": \"Róbert Bónay\"\n    },\n    {\n      \"name\": \"Szabolcs Czinege\"\n    },\n    {\n      \"name\": \"Viktor Borza\"\n    },\n    {\n      \"name\": \"Viktor Lázár\"\n    },\n    {\n      \"name\": \"Zoltán Gyebrovszki\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\n  },\n  \"engines\": {\n    \"node\": \">=0.6.0\"\n  },\n  \"license\": \"(MIT OR GPL-2.0)\",\n  \"devDependencies\": {\n    \"babel\": \"^6.1.18\",\n    \"babel-eslint\": \"^5.0.0-beta4\",\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\n    \"babel-preset-es2015\": \"^6.1.18\",\n    \"babel-register\": \"^6.2.0\",\n    \"babelify\": \"^7.2.0\",\n    \"browserify\": \"^12.0.1\",\n    \"browserify-derequire\": \"^0.9.4\",\n    \"browserify-shim\": \"^3.8.11\",\n    \"chai\": \"^3.4.1\",\n    \"del\": \"^2.2.0\",\n    \"google-closure-compiler\": \"^20151015.0.0\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-babel\": \"^6.1.1\",\n    \"gulp-browserify\": \"^0.5.1\",\n    \"gulp-change\": \"^1.0.0\",\n    \"gulp-closure-compiler\": \"^0.3.1\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-derequire\": \"^2.1.0\",\n    \"gulp-eslint\": \"^1.1.1\",\n    \"gulp-footer\": \"^1.0.5\",\n    \"gulp-header\": \"^1.7.1\",\n    \"gulp-nightwatch\": \"^0.2.6\",\n    \"gulp-nuget-pack\": \"0.0.6\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-replace\": \"^0.5.4\",\n    \"gulp-sourcemaps\": \"^1.6.0\",\n    \"gulp-uglify\": \"^1.5.1\",\n    \"gulp-vinyl-zip\": \"^1.1.2\",\n    \"gulp-webserver\": \"^0.9.1\",\n    \"istanbul\": \"^0.4.1\",\n    \"jaguarjs-jsdoc\": \"0.0.1\",\n    \"jsdoc\": \"^3.4.0\",\n    \"minimist\": \"^1.2.0\",\n    \"nightwatch\": \"^0.8.8\",\n    \"npm\": \"^3.5.2\",\n    \"selenium-standalone\": \"^4.7.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"^1.1.0\",\n    \"yargs\": \"^3.31.0\"\n  },\n  \"browserify-shim\": {\n    \"atob\": \"global:atob\",\n    \"btoa\": \"global:btoa\",\n    \"jquery\": \"global:jQuery\",\n    \"angular\": \"global:angular\",\n    \"Handlebars\": \"global:Handlebars\",\n    \"kendo\": \"global:kendo\",\n    \"ko\": \"global:ko\",\n    \"q\": \"global:Q\",\n    \"Ext\": \"global:Ext\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha --compilers js:babel-register test/unit-tests/\",\n    \"stest\": \"mocha --compilers js:babel-register\"\n  }\n}\n\n},{}],28:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _jaydataDynamicMetadata = _dereq_('jaydata-dynamic-metadata');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.DynamicMetadata = _jaydataDynamicMetadata.DynamicMetadata;\nvar dynamicMetadata = new _jaydataDynamicMetadata.DynamicMetadata(_index2.default);\n_index2.default.service = dynamicMetadata.service.bind(dynamicMetadata);\n_index2.default.initService = dynamicMetadata.initService.bind(dynamicMetadata);\n_index2.default.odatajs = _jaydataDynamicMetadata.odatajs;\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44,\"jaydata-dynamic-metadata\":7}],29:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContainerInstance = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nexports.ContainerCtor = ContainerCtor;\n\nvar _initializeJayData = _dereq_('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nvar _Extensions = _dereq_('./Extensions.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Container = new ContainerCtor();\n\nvar ContainerInstance = exports.ContainerInstance = Container;\n\nfunction ContainerCtor(parentContainer) {\n  var parent = parentContainer;\n  if (parent) {\n    parent.addChildContainer(this);\n  }\n\n  var classNames = {};\n  var consolidatedClassNames = [];\n  var classTypes = [];\n\n  this.classNames = classNames;\n  this.consolidatedClassNames = consolidatedClassNames;\n  this.classTypes = classTypes;\n\n  var mappedTo = [];\n  this.mappedTo = mappedTo;\n\n  var self = this;\n\n  this[\"holder\"] = null;\n\n  var IoC = function IoC(type, parameters) {\n    var t = self.resolveType(type);\n    var inst = Object.create(t.prototype);\n    t.apply(inst, parameters);\n    return inst;\n  };\n\n  var pendingResolutions = {};\n  this.pendingResolutions = pendingResolutions;\n\n  function addPendingResolution(name, onResolved) {\n    pendingResolutions[name] = pendingResolutions[name] || [];\n    pendingResolutions[name].push(onResolved);\n  }\n\n  this.addChildContainer = function (container) {\n    //children.push(container);\n  };\n\n  this.createInstance = function (type, parameters) {\n    return IoC(type, parameters);\n  };\n\n  this.mapType = function (aliasTypeOrName, realTypeOrName) {\n    _jaydataErrorHandler.Guard.requireValue(\"aliasType\", aliasTypeOrName);\n    _jaydataErrorHandler.Guard.requireValue(\"realType\", realTypeOrName);\n    var aliasT = this.getType(aliasTypeOrName);\n    var realT = this.getType(realTypeOrName);\n    var aliasPos = classTypes.indexOf(aliasT);\n    var realPos = classTypes.indexOf(realT);\n    mappedTo[aliasPos] = realPos;\n  },\n\n  //this.resolve = function (type, parameters) {\n  //    var classFunction = this.resolveType(type, parameters);\n  //    return new classFunction(parameters);\n  //};\n\n  this.isPrimitiveType = function (type) {\n    var t = this.resolveType(type);\n\n    switch (true) {\n      case t === Number:\n      case t === String:\n      case t === Date:\n      case t === Boolean:\n      case t === Array:\n      case t === Object:\n\n      case t === _initializeJayData2.default.Number:\n      case t === _initializeJayData2.default.Integer:\n      case t === _initializeJayData2.default.Date:\n      case t === _initializeJayData2.default.String:\n      case t === _initializeJayData2.default.Boolean:\n      case t === _initializeJayData2.default.Array:\n      case t === _initializeJayData2.default.Object:\n      case t === _initializeJayData2.default.Guid:\n\n      case t === _initializeJayData2.default.Byte:\n      case t === _initializeJayData2.default.SByte:\n      case t === _initializeJayData2.default.Decimal:\n      case t === _initializeJayData2.default.Float:\n      case t === _initializeJayData2.default.Int16:\n      case t === _initializeJayData2.default.Int32:\n      case t === _initializeJayData2.default.Int64:\n      case t === _initializeJayData2.default.DateTimeOffset:\n      case t === _initializeJayData2.default.Time:\n      case t === _initializeJayData2.default.Day:\n      case t === _initializeJayData2.default.Duration:\n\n      case t === _initializeJayData2.default.SimpleBase:\n      case t === _initializeJayData2.default.Geospatial:\n      case t === _initializeJayData2.default.GeographyBase:\n      case t === _initializeJayData2.default.GeographyPoint:\n      case t === _initializeJayData2.default.GeographyLineString:\n      case t === _initializeJayData2.default.GeographyPolygon:\n      case t === _initializeJayData2.default.GeographyMultiPoint:\n      case t === _initializeJayData2.default.GeographyMultiLineString:\n      case t === _initializeJayData2.default.GeographyMultiPolygon:\n      case t === _initializeJayData2.default.GeographyCollection:\n      case t === _initializeJayData2.default.GeometryBase:\n      case t === _initializeJayData2.default.GeometryPoint:\n      case t === _initializeJayData2.default.GeometryLineString:\n      case t === _initializeJayData2.default.GeometryPolygon:\n      case t === _initializeJayData2.default.GeometryMultiPoint:\n      case t === _initializeJayData2.default.GeometryMultiLineString:\n      case t === _initializeJayData2.default.GeometryMultiPolygon:\n      case t === _initializeJayData2.default.GeometryCollection:\n\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  this.resolveName = function (type) {\n    var t = this.resolveType(type);\n    var tPos = classTypes.indexOf(t);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.resolveType = function (typeOrName, onResolved) {\n    var t = typeOrName;\n    t = this.getType(t, onResolved ? true : false, onResolved);\n    var posT = classTypes.indexOf(t);\n    return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\n  };\n\n  this.getType = function (typeOrName, doNotThrow, onResolved) {\n    _jaydataErrorHandler.Guard.requireValue(\"typeOrName\", typeOrName);\n    if (typeof typeOrName === 'function') {\n      return typeOrName;\n    };\n\n    if (!(typeOrName in classNames)) {\n      if (parent) {\n        var tp = parent.getType(typeOrName, true);\n        if (tp) return tp;\n      }\n      if (onResolved) {\n        addPendingResolution(typeOrName, onResolved);\n        return;\n      } else if (doNotThrow) {\n        return undefined;\n      } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Unable to resolve type:\" + typeOrName));\n      }\n    };\n    var result = classTypes[classNames[typeOrName]];\n    if (onResolved) {\n      onResolved(result);\n    }\n    return result;\n  };\n\n  this.getName = function (typeOrName) {\n    var t = this.getType(typeOrName);\n    var tPos = classTypes.indexOf(t);\n    if (tPos == -1) _jaydataErrorHandler.Guard.raise(\"unknown type to request name for: \" + typeOrName);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.getTypes = function () {\n    var keys = Object.keys(classNames);\n    var ret = [];\n    for (var i = 0; i < keys.length; i++) {\n      var className = keys[i];\n      ret.push({\n        name: className,\n        type: classTypes[classNames[className]],\n        toString: function toString() {\n          return this.name;\n        }\n      });\n    }\n    return ret;\n  };\n\n  //this.getTypeName( in type);\n  //this.resolveType()\n  //this.inferTypeFromValue = function (value) {\n\n  this.getTypeName = function (value) {\n    //TODO refactor\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case 'object':\n        if (value == null) return '$data.Object';\n        if (value instanceof Array) return '$data.Array';\n        if (value.getType) return value.getType().fullName;\n        if (value instanceof Date) return '$data.Date';\n        if (value instanceof _initializeJayData2.default.Guid) return '$data.Guid';\n        if (value instanceof _initializeJayData2.default.DateTimeOffset) return '$data.DateTimeOffset';\n        if (value instanceof _initializeJayData2.default.GeographyPoint) return '$data.GeographyPoint';\n        if (value instanceof _initializeJayData2.default.GeographyLineString) return '$data.GeographyLineString';\n        if (value instanceof _initializeJayData2.default.GeographyPolygon) return '$data.GeographyPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPoint) return '$data.GeographyMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeographyMultiLineString) return '$data.GeographyMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyCollection) return '$data.GeographyCollection';\n        if (value instanceof _initializeJayData2.default.GeographyBase) return '$data.GeographyBase';\n        if (value instanceof _initializeJayData2.default.GeometryPoint) return '$data.GeometryPoint';\n        if (value instanceof _initializeJayData2.default.GeometryLineString) return '$data.GeometryLineString';\n        if (value instanceof _initializeJayData2.default.GeometryPolygon) return '$data.GeometryPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPoint) return '$data.GeometryMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeometryMultiLineString) return '$data.GeometryMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryCollection) return '$data.GeometryCollection';\n        if (value instanceof _initializeJayData2.default.GeometryBase) return '$data.GeometryBase';\n        if (value instanceof _initializeJayData2.default.Geospatial) return '$data.Geospatial';\n        if (value instanceof _initializeJayData2.default.SimpleBase) return '$data.SimpleBase';\n        if (typeof value.toHexString === 'function') return '$data.ObjectID';\n      //if(value instanceof \"number\") return\n      default:\n        return typeof value === 'undefined' ? 'undefined' : _typeof(value);\n    }\n  };\n\n  this.isTypeRegistered = function (typeOrName) {\n    if (typeof typeOrName === 'function') {\n      return classTypes.indexOf(typeOrName) > -1;\n    } else {\n      return typeOrName in classNames;\n    }\n  };\n\n  this.unregisterType = function (type) {\n    _jaydataErrorHandler.Guard.raise(\"Unimplemented\");\n  };\n\n  this.getDefault = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    switch (t) {\n      case _initializeJayData2.default.Number:\n        return 0.0;\n      case _initializeJayData2.default.Float:\n        return 0.0;\n      case _initializeJayData2.default.Decimal:\n        return '0.0';\n      case _initializeJayData2.default.Integer:\n        return 0;\n      case _initializeJayData2.default.Int16:\n        return 0;\n      case _initializeJayData2.default.Int32:\n        return 0;\n      case _initializeJayData2.default.Int64:\n        return '0';\n      case _initializeJayData2.default.Byte:\n        return 0;\n      case _initializeJayData2.default.SByte:\n        return 0;\n      case _initializeJayData2.default.String:\n        return null;\n      case _initializeJayData2.default.Boolean:\n        return false;\n      default:\n        return null;\n    }\n  };\n\n  //name array ['', '', '']\n  this.getIndex = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    return classTypes.indexOf(t);\n  };\n\n  this.resolveByIndex = function (index) {\n    return classTypes[index];\n  };\n\n  this.registerType = function (nameOrNamesArray, type, factoryFunc) {\n    ///<signature>\n    ///<summary>Registers a type and optionally a lifetimeManager with a name\n    ///that can be used to later resolve the type or create new instances</summary>\n    ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\n    ///<param name=\"type\" type=\"Function\">The type to register</param>\n    ///<param name=\"instanceManager\" type=\"Function\"></param>\n    ///</signature>\n    ///<signature>\n    ///<summary>Registers a new type that </summary>\n    ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\n    ///<param name=\"actualType\" type=\"Function\">The type to register</param>\n    ///</signature>\n\n    ///TODO remove\n    /*if (typeof typeNameOrAlias === 'string') {\r\n        if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n            Guard.raise(\"Type already registered. Remove first\");\r\n        }\r\n    }*/\n\n    if (!nameOrNamesArray) {\n      return;\n    }\n\n    //todo add ('number', 'number')\n    if (typeof type === \"string\") {\n      type = self.resolveType(type);\n    }\n\n    var namesArray = [];\n    if (typeof nameOrNamesArray === 'string') {\n      var tmp = [];\n      tmp.push(nameOrNamesArray);\n      namesArray = tmp;\n    } else {\n      namesArray = nameOrNamesArray;\n    }\n\n    for (var i = 0; i < namesArray.length; i++) {\n      var parts = namesArray[i].split('.');\n      var item = {};\n      item.shortName = parts[parts.length - 1];\n      item.fullName = namesArray[i];\n      namesArray[i] = item;\n    }\n\n    //if (type.\n\n    var creatorFnc = function creatorFnc() {\n      return IoC(type, arguments);\n    };\n\n    if (typeof intellisense !== 'undefined') {\n      intellisense.annotate(creatorFnc, type);\n    }\n\n    for (var i = 0, l = namesArray.length; i < l; i++) {\n      var item = namesArray[i];\n      if (!(\"create\" + item.shortName in self)) {\n        if (typeof factoryFunc === 'function') {\n          self[\"create\" + item.shortName] = factoryFunc;\n        } else {\n          self[\"create\" + item.shortName] = creatorFnc;\n        }\n      }\n\n      var typePos = classTypes.indexOf(type);\n      if (typePos == -1) {\n        //new type\n        typePos = classTypes.push(type) - 1;\n        var fn = item.fullName;\n        consolidatedClassNames[typePos] = item.fullName;\n      };\n\n      classNames[item.fullName] = typePos;\n\n      var pending = pendingResolutions[item.fullName] || [];\n      if (pending.length > 0) {\n        pending.forEach(function (t) {\n          t(type);\n        });\n        pendingResolutions[item.fullName] = [];\n      }\n    }\n    if (parent) {\n      parent.registerType.apply(parent, arguments);\n    }\n    if (!type.name) {\n      try {\n        type.name = namesArray[0].shortName;\n      } catch (err) {}\n    }\n  };\n\n  var _converters = {\n    from: {},\n    to: {}\n  };\n  this.converters = _converters;\n\n  this.convertTo = function (value, tType, eType /*if Array*/, options) {\n    _jaydataErrorHandler.Guard.requireValue(\"typeOrName\", tType);\n\n    if (_jaydataErrorHandler.Guard.isNullOrUndefined(value)) return value;\n\n    var sourceTypeName = Container.getTypeName(value);\n    var sourceType = Container.resolveType(sourceTypeName);\n    var sourceTypeName = Container.resolveName(sourceType);\n    var targetType = Container.resolveType(tType);\n    var targetTypeName = Container.resolveName(targetType);\n\n    var result;\n    try {\n      if (typeof targetType['from' + sourceTypeName] === 'function') {\n        // target from\n        result = targetType['from' + sourceTypeName].apply(targetType, arguments);\n      } else if (typeof sourceType['to' + targetTypeName] === 'function') {\n        // source to\n        result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\n        // target from source\n        result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\n      } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\n        // source to target\n        result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\n      } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\n        result = value;\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\n        // target from anything\n        result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\n      } else {\n        throw \"converter not found\";\n      }\n    } catch (e) {\n      _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\n    }\n\n    if (targetType === _initializeJayData2.default.Array && eType && Array.isArray(result)) {\n      for (var i = 0; i < result.length; i++) {\n        result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\n      }\n    }\n\n    return result;\n  };\n  this.registerConverter = function (target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\n    //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\n    //registerConverter($data.Guid, $data.String, fn, fn);\n\n    var targetName = Container.resolveName(target);\n    if (Container.isTypeRegistered(sourceOrToConverters)) {\n      //isSource\n      _converters.to[targetName] = _converters.to[targetName] || {};\n      _converters.from[targetName] = _converters.from[targetName] || {};\n\n      var sourceName = Container.resolveName(sourceOrToConverters);\n\n      if (toConverterOrFromConverters) _converters.to[targetName][sourceName] = toConverterOrFromConverters;\n      if (fromConverter) _converters.from[targetName][sourceName] = fromConverter;\n    } else {\n      // converterGroup\n\n      //fromConverters\n      if (_converters.to[targetName]) {\n        _converters.to[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\n      } else {\n        _converters.to[targetName] = sourceOrToConverters;\n      }\n\n      //toConverters\n      if (_converters.from[targetName]) {\n        _converters.from[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\n      } else {\n        _converters.from[targetName] = toConverterOrFromConverters;\n      }\n    }\n  };\n\n  this.createOrGetNamespace = function (parts, root) {\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      if (!root[part]) {\n        var ns = {};\n        ns.__namespace = true;\n        root[part] = ns;\n      }\n      root = root[part];\n    }\n    return root;\n  };\n}\n\n},{\"./Extensions.js\":30,\"./initializeJayData.js\":45,\"jaydata-error-handler\":8}],30:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar StringFunctions = exports.StringFunctions = {\n    startsWith: function startsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) === 0;\n    },\n    endsWith: function endsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.slice(-str.length) === str;\n    },\n    contains: function contains() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) >= 0;\n    }\n};\n\n},{}],31:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function ObjectMethodsForPreHTML5Browsers() {\n\n    if (!Object.getOwnPropertyNames) {\n        Object.getOwnPropertyNames = function (o) {\n            var names = [];\n\n            for (var i in o) {\n                if (o.hasOwnProperty(i)) names.push(i);\n            }\n\n            return names;\n        };\n    }\n\n    if (!Object.create) {\n        Object.create = function (o) {\n            if (arguments.length > 1) {\n                Guard.raise(new Error('Object.create implementation only accepts the first parameter.'));\n            }\n            function F() {}\n            F.prototype = o;\n            return new F();\n        };\n    }\n\n    if (!Object.keys) {\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),\n            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n            dontEnumsLength = dontEnums.length;\n\n        Object.keys = function (obj) {\n\n            ///Refactor to Assert.IsObjectOrFunction\n            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' && typeof obj !== 'function' || obj === null) Guard.raise(new TypeError('Object.keys called on non-object'));\n\n            var result = [];\n\n            for (var prop in obj) {\n                if (hasOwnProperty.call(obj, prop)) {\n                    result.push(prop);\n                }\n            }\n\n            if (hasDontEnumBug) {\n                for (var i = 0; i < dontEnumsLength; i++) {\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\n                        result.push(dontEnums[i]);\n                    }\n                }\n            }\n\n            return result;\n        };\n    }\n\n    if (!Object.defineProperty) {\n        Object.defineProperty = function (obj, propName, propDef) {\n            obj[propName] = propDef.value || {};\n        };\n    }\n\n    if (!Object.defineProperties) {\n        Object.defineProperties = function (obj, defines) {\n            for (var i in defines) {\n                if (defines.hasOwnProperty(i)) obj[i] = defines[i].value || {};\n            }\n        };\n    }\n\n    if (!Array.prototype.forEach) {\n        Array.prototype.forEach = function (handler, thisArg) {\n            for (var i = 0, l = this.length; i < l; i++) {\n                if (thisArg) {\n                    handler.call(thisArg, this[i], i, this);\n                } else {\n                    handler(this[i], i, this);\n                };\n            };\n        };\n    };\n\n    if (!Array.prototype.filter) {\n        Array.prototype.filter = function (handler, thisArg) {\n            var result = [];\n            for (var i = 0, l = this.length; i < l; i++) {\n                var r = thisArg ? handler.call(thisArg, this[i], i, this) : handler(this[i], i, this);\n                if (r === true) {\n                    result.push(this[i]);\n                }\n            }\n            return result;\n        };\n    }\n\n    if (!Array.prototype.map) {\n        Array.prototype.map = function (handler, thisArg) {\n            var result = [];\n            for (var i = 0, l = this.length; i < l; i++) {\n                var r = thisArg ? handler.call(thisArg, this[i], i, this) : handler(this[i], i, this);\n                result.push(r);\n            }\n            return result;\n        };\n    }\n\n    if (!Array.prototype.some) {\n        Array.prototype.some = function (handler, thisArg) {\n            for (var i = 0, l = this.length; i < l; i++) {\n                var r = thisArg ? handler.call(thisArg, this[i], i, this) : handler(this[i], i, this);\n                if (r) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (item, from) {\n            for (var i = 0, l = this.length; i < l; i++) {\n                if (this[i] === item) {\n                    return i;\n                };\n            };\n            return -1;\n        };\n    }\n\n    if (!String.prototype.trimLeft) {\n        String.prototype.trimLeft = function () {\n            return this.replace(/^\\s+/, \"\");\n        };\n    }\n\n    if (!String.prototype.trimRight) {\n        String.prototype.trimRight = function () {\n            return this.replace(/\\s+$/, \"\");\n        };\n    }\n\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function (oThis) {\n            if (typeof this !== \"function\") {\n                // closest thing possible to the ECMAScript 5 internal IsCallable function\n                throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n            }\n\n            var aArgs = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP = function fNOP() {},\n                fBound = function fBound() {\n                return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP();\n\n            return fBound;\n        };\n    }\n\n    if (typeof Uint8Array == 'undefined') {\n        Uint8Array = function (_Uint8Array) {\n            function Uint8Array(_x) {\n                return _Uint8Array.apply(this, arguments);\n            }\n\n            Uint8Array.toString = function () {\n                return _Uint8Array.toString();\n            };\n\n            return Uint8Array;\n        }(function (v) {\n            if (v instanceof Uint8Array) return v;\n            var self = this;\n            var buffer = Array.isArray(v) ? v : new Array(v);\n            this.length = buffer.length;\n            this.byteLength = this.length;\n            this.byteOffset = 0;\n            this.buffer = { byteLength: self.length };\n            var getter = function getter(index) {\n                return buffer[index];\n            };\n            var setter = function setter(index, value) {\n                buffer[index] = (value | 0) & 0xff;\n            };\n            var makeAccessor = function makeAccessor(i) {\n                buffer[i] = buffer[i] || 0;\n                Object.defineProperty(self, i, {\n                    enumerable: true,\n                    configurable: false,\n                    get: function get() {\n                        if (isNaN(+i) || (i | 0) < 0 || (i | 0) >= self.length) {\n                            try {\n                                if (typeof document != 'undefined') document.createTextNode(\"\").splitText(1);\n                                return new RangeError(\"INDEX_SIZE_ERR\");\n                            } catch (e) {\n                                return e;\n                            }\n                        }\n                        return getter(i);\n                    },\n                    set: function set(v) {\n                        if (isNaN(+i) || (i | 0) < 0 || (i | 0) >= self.length) {\n                            try {\n                                if (typeof document != 'undefined') document.createTextNode(\"\").splitText(1);\n                                return new RangeError(\"INDEX_SIZE_ERR\");\n                            } catch (e) {\n                                return e;\n                            }\n                        }\n                        setter(i | 0, v);\n                    }\n                });\n            };\n            for (var i = 0; i < self.length; i++) {\n                makeAccessor(i);\n            }\n        });\n    }\n})();\n\n},{}],32:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.Logger', _TypeSystem2.default.TraceBase, null, {\n    log: function log() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.log.apply(console, arguments);\n    },\n    warn: function warn() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.warn.apply(console, arguments);\n    },\n    error: function error() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.error.apply(console, arguments);\n    },\n\n    getDateFormat: function getDateFormat() {\n        var date = new Date();\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\n    }\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],33:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.TraceBase', null, null, {\n    log: function log() {},\n    warn: function warn() {},\n    error: function error() {}\n});\n\n_TypeSystem2.default.Trace = new _TypeSystem2.default.TraceBase();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],34:[function(_dereq_,module,exports){\n(function (process,global){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemberDefinition = exports.Container = exports.$C = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _initializeJayData = _dereq_('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nvar _Extensions = _dereq_('./Extensions.js');\n\nvar _Container = _dereq_('./Container.js');\n\n_dereq_('./PreHtml5Compatible.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n    constructor: function (typeName) {\r\n        ///<param name=\"paramIndex\" type=\"integer\">\r\n        this.typeName = typeName;\r\n    },\r\n    typeName: {}\r\n});*/\n\n//var e = new Entity();\n\n/*$data.Interface = Class.define(\"Interface\", null, null, {\r\n    constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n},\r\n{\r\n    define: function (name, definition) {\r\n        var result = Class.define(name, $data.Interface, null, null, definition);\r\n        delete result.__class;\r\n        result.__interface = true;\r\n        return result;\r\n    }\r\n});\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n    propertyChanged: { dataType: $data.Event }\r\n}, {\r\n    createFromInstance: function(instance) {\r\n        var propNames = instance.getClass().memberDefinitions.f\r\n    }\r\n});*/\n\n_initializeJayData2.default.StringFunctions = _Extensions.StringFunctions;\n\nvar _modelHolder = null;\n_initializeJayData2.default.setModelContainer = function (modelHolder) {\n  _modelHolder = modelHolder;\n};\n_initializeJayData2.default.getModelContainer = function () {\n  return _modelHolder;\n};\n\n_initializeJayData2.default.defaults = _initializeJayData2.default.defaults || {};\n_initializeJayData2.default.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\n_initializeJayData2.default.defaults.openTypeDefaultType = '$data.Object';\n_initializeJayData2.default.defaults.openTypeDefaultValue = function () {\n  return {};\n};\n\n_initializeJayData2.default.__global = process.browser ? window : global;\n_initializeJayData2.default.setGlobal = function (obj) {\n  _initializeJayData2.default.__global = obj;\n};\n\n(function init($data) {\n\n  function il(msg) {\n    if (typeof intellisense !== 'undefined') {\n      if (!intellisense.i) {\n        intellisense.i = 0;\n      }\n      intellisense.i = intellisense.i + 1;\n      intellisense.logMessage(msg + \":\" + intellisense.i);\n    }\n  }\n\n  function MemberDefinition(memberDefinitionData, definedClass) {\n\n    ///<field name=\"name\" type=\"String\">*</field>\n    ///<field name=\"dataType\" type=\"Object\">*</field>\n    ///<field name=\"elementType\" type=\"Object\"></field>\n    ///<field name=\"kind\" type=\"String\" />\n    ///<field name=\"classMember\" type=\"Boolean\" />\n    ///<field name=\"set\" type=\"Function\" />\n    ///<field name=\"get\" type=\"Function\" />\n    ///<field name=\"value\" type=\"Object\" />\n    ///<field name=\"initialValue\" type=\"Object\" />\n    ///<field name=\"method\" type=\"Function\" />\n    ///<field name=\"enumerable\" type=\"Boolean\" />\n    ///<field name=\"configurable\" type=\"Boolean\" />\n    ///<field name=\"key\" type=\"Boolean\" />\n    ///<field name=\"computed\" type=\"Boolean\" />\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\n\n    this.kind = MemberTypes.property;\n    //this.definedBy = definedClass;\n    Object.defineProperty(this, 'definedBy', {\n      value: definedClass,\n      enumerable: false,\n      configurable: false,\n      writable: false\n    });\n    if (memberDefinitionData) {\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\n        this.method = memberDefinitionData;\n        this.kind = MemberTypes.method;\n      } else {\n        this.enumerable = true;\n        this.configurable = true;\n        if (typeof memberDefinitionData === \"number\") {\n          this.value = memberDefinitionData;\n          this.type = $data.Number;\n          this.dataType = $data.Number;\n        } else if (typeof memberDefinitionData === \"string\") {\n          this.value = memberDefinitionData;\n          this.dataType = $data.String;\n          this.type = $data.String;\n        } else {\n          for (var item in memberDefinitionData) {\n            if (memberDefinitionData.hasOwnProperty(item)) {\n              this[item] = memberDefinitionData[item];\n            }\n          }\n        }\n      }\n      if (this.type !== undefined) {\n        this.dataType = this.dataType || this.type;\n      } else {\n        this.type = this.dataType;\n      }\n\n      this.originalType = this.type;\n      if (this.elementType !== undefined) {\n        this.originalElementType = this.elementType;\n      }\n    }\n  }\n  MemberDefinition.prototype.createPropertyDescriptor = function (classFunction, value) {\n    ///<returns type=\"Object\" />\n    var pd = this;\n    var result = {\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\n      configurable: this.configurable == undefined ? true : this.configurable\n    };\n    if (this.set && this.get) {\n      result.set = this.set;\n      result.get = this.get;\n    } else if (\"value\" in this || value) {\n      result.value = value || this.value;\n      //TODO\n      //result.writable = this.writable;\n      result.writable = true;\n    } else {\n      result.set = function (value) {\n        this.storeProperty(pd, value);\n      };\n      result.get = function () {\n        return this.retrieveProperty(pd);\n      };\n    }\n    return result;\n  };\n  MemberDefinition.prototype.createStorePropertyDescriptor = function (value) {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: true,\n      configurable: pd.configurable,\n      value: value\n    };\n  };\n  MemberDefinition.prototype.createGetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(callback, tran) {\n        return this.getProperty(pd, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.prototype.createSetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(_value, callback, tran) {\n        return this.setProperty(pd, _value, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.translateDefinition = function (memDef, name, classFunction) {\n    var holder = classFunction;\n    var memberDefinition;\n\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\n      holder = Container.resolveType(memDef.type);\n      if (typeof holder.translateDefinition === 'function') {\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\n        memberDefinition.name = memberDefinition.name || name;\n      } else {\n        holder = classFunction;\n      }\n    }\n\n    if (!(memberDefinition instanceof MemberDefinition)) {\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\n      memberDefinition.name = name;\n    }\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\n\n    var t = memberDefinition.type;\n    var et = memberDefinition.elementType;\n\n    function addChildThunk(referencedType) {\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\n        classFunction.childResolverThunks.push(function () {\n          if (referencedType.resolveForwardDeclarations) {\n            referencedType.resolveForwardDeclarations();\n          }\n        });\n      }\n    }\n\n    addChildThunk(t);\n    addChildThunk(et);\n\n    if (\"string\" === typeof t) {\n      if (\"@\" === t[0]) {\n        memberDefinition.type = t.substr(1);\n        memberDefinition.dataType = t.substr(1);\n      } else {\n        //forward declared types get this callback when type is registered\n        classFunction.resolverThunks.push(function () {\n          var rt = classFunction.container.resolveType(t);\n          addChildThunk(rt);\n          memberDefinition.type = rt;\n          memberDefinition.dataType = rt;\n        });\n      }\n    }\n\n    if (et) {\n      if (\"string\" === typeof et) {\n        if (\"@\" === et[0]) {\n          memberDefinition.elementType = et.substr(1);\n        } else {\n          //forward declared types get this callback when type is registered\n          classFunction.resolverThunks.push(function () {\n            var rt = classFunction.container.resolveType(et);\n            addChildThunk(rt);\n            memberDefinition.elementType = rt;\n          });\n        }\n      }\n    }\n\n    //if (!classFunction)\n\n    classFunction.resolveForwardDeclarations = function () {\n      classFunction.resolveForwardDeclarations = function () {};\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\n      this.resolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.resolverThunks = [];\n      this.childResolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.childResolverThunks = [];\n    };\n\n    return memberDefinition;\n  };\n\n  MemberDefinition.prototype.toJSON = function () {\n    var property = {};\n    for (var name in this) {\n      if (name !== 'defineBy' && name !== 'storageModel') {\n        if ((name === 'type' || name === 'dataType') && this[name] && typeof this[name] === 'function') {\n          try {\n            property[name] = Container.resolveName(this[name]);\n          } catch (e) {\n            property[name] = this[name];\n          }\n        } else {\n          property[name] = this[name];\n        }\n      }\n    }\n    return property;\n  };\n\n  $data.MemberDefinition = MemberDefinition;\n\n  var memberDefinitionPrefix = '$';\n\n  function MemberDefinitionCollection() {};\n  MemberDefinitionCollection.prototype = {\n    clearCache: function clearCache() {\n      this.arrayCache = undefined;\n      this.pubMapPropsCache = undefined;\n      this.keyPropsCache = undefined;\n      this.propByTypeCache = undefined;\n      this.pubMapMethodsCache = undefined;\n      this.pubMapPropNamesCache = undefined;\n    },\n    asArray: function asArray() {\n      if (!this.arrayCache) {\n        this.arrayCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0) this.arrayCache.push(this[i]);\n        }\n      }\n      return this.arrayCache;\n    },\n    getPublicMappedProperties: function getPublicMappedProperties() {\n      if (!this.pubMapPropsCache) {\n        this.pubMapPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropsCache.push(this[i]);\n        }\n      }\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\n    },\n    getPublicMappedPropertyNames: function getPublicMappedPropertyNames() {\n      if (!this.pubMapPropNamesCache) {\n        this.pubMapPropNamesCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropNamesCache.push(this[i].name);\n        }\n      }\n      return this.pubMapPropNamesCache;\n    },\n    getKeyProperties: function getKeyProperties() {\n      if (!this.keyPropsCache) {\n        this.keyPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key) this.keyPropsCache.push(this[i]);\n        }\n      }\n      return this.keyPropsCache;\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\n    },\n    getPublicMappedMethods: function getPublicMappedMethods() {\n      if (!this.pubMapMethodsCache) {\n        this.pubMapMethodsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/) this.pubMapMethodsCache.push(this[i]);\n        }\n      }\n      return this.pubMapMethodsCache;\n    },\n    getPropertyByType: function getPropertyByType(type) {\n      if (!this.propByTypeCache) {\n        this.propByTypeCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type) this.propByTypeCache.push(this[i]);\n        }\n      }\n      return this.propByTypeCache;\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\n    },\n    getMember: function getMember(name) {\n      return this[memberDefinitionPrefix + name];\n    },\n    setMember: function setMember(value) {\n      this[memberDefinitionPrefix + value.name] = value;\n    }\n  };\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\n\n  function ClassEngineBase() {\n    this.classNames = {};\n  }\n\n  function MemberTypes() {\n    ///<field name=\"method\" type=\"string\" />\n    ///<field name=\"property\" type=\"string\" />\n    ///<field name=\"field\" type=\"string\" />\n    ///<field name=\"complexProperty\" type=\"string\" />\n  }\n  MemberTypes.__enum = true;\n\n  MemberTypes.method = \"method\";\n  MemberTypes.property = \"property\";\n  MemberTypes.navProperty = \"navProperty\";\n  MemberTypes.complexProperty = \"complexProperty\";\n  MemberTypes.field = \"field\";\n\n  $data.MemberTypes = MemberTypes;\n\n  //function classToJSON() {\n  //    var ret = {};\n  //    for (var i in this) {\n  //        if (this.hasOwnProperty(i)) {\n  //            ret[i] = this[i];\n  //        }\n  //    }\n  //    return ret;\n  //}\n  //$data.Base.toJSON = classToJSON;\n\n  ClassEngineBase.prototype = {\n\n    //getClass: function (classReference) {\n    //},\n\n    //getProperties: function (classFunction) {\n    //    return classFunction.propertyDefinitions;\n    //},\n\n    define: function define(className, baseClass, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      return this.defineEx(className, [{\n        type: baseClass\n      }], container, instanceDefinition, classDefinition);\n    },\n    defineEx: function defineEx(className, baseClasses, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\n      ///                         { type: $data.Mixin1, },\n      ///                         { type: $data.Mixin2, },\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\n      ///                     ], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      container = container || $data.Container;\n\n      if (baseClasses.length == 0) {\n        baseClasses.push({\n          type: $data.Base\n        });\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\n        baseClasses[0].type = $data.Base;\n      }\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\n        if (typeof baseClasses[i] === 'function') baseClasses[i] = {\n          type: baseClasses[i]\n        };\n      }\n\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\n\n      var classNameParts = className.split('.');\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\n\n      $data.models = $data.models || {};\n      var root = container === $data.Container ? $data.models : container;\n      root = $data.Container.createOrGetNamespace(classNameParts, root);\n\n      var classFunction = null;\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\n      classFunction.fullName = className;\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\n      //classFunction.name = shortClassName;\n      classFunction.container = container;\n      classFunction.container.registerType(className, classFunction);\n\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\n\n      if (typeof intellisense !== 'undefined') {\n        if (instanceDefinition && instanceDefinition.constructor) {\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\n        }\n      }\n\n      root[shortClassName] = this.classNames[className] = classFunction;\n\n      if (classNameParts[0] == '$data') {\n        var _classNameParts = [].concat(classNameParts);\n        _classNameParts.shift();\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data);\n        _root[shortClassName] = classFunction;\n      }\n      if (_modelHolder && container == $data.Container) {\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder);\n        innerNS[shortClassName] = classFunction;\n      }\n\n      //classFunction.toJSON = classToJSON;\n      var baseCount = classFunction.baseTypes.length;\n      for (var i = 0; i < baseCount; i++) {\n        var b = classFunction.baseTypes[i];\n        if (\"inheritedTypeProcessor\" in b) {\n          b.inheritedTypeProcessor(classFunction);\n        }\n      }\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\n      //classFunction.constructor = instanceDefinition.constructor;\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\n      return classFunction;\n    },\n    classFunctionBuilder: function classFunctionBuilder(name, base, classDefinition, instanceDefinition) {\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' + body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\n    },\n    bodyBuilder: function bodyBuilder(bases, classDefinition, instanceDefinition) {\n      var mixin = '';\n      var body = '';\n      var propagation = '';\n\n      for (var i = 0, l = bases.length; i < l; i++) {\n        var base = bases[i];\n        var index = i;\n        if (index == 0) {\n          //ctor func\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\n          }\n        } else {\n          if (base && base.type && base.propagateTo) {\n            //propagation\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' + '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\n            //mixin\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\n          }\n        }\n      }\n      if (instanceDefinition && instanceDefinition.constructor != Object) body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\n\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\n    },\n\n    buildType: function buildType(classFunction, baseClasses, instanceDefinition, classDefinition) {\n      var baseClass = baseClasses[0].type;\n      classFunction.inheritsFrom = baseClass;\n      baseClass.inheritedTo = baseClass.inheritedTo || [];\n      baseClass.inheritedTo.push(classFunction);\n\n      if (baseClass) {\n        classFunction.prototype = Object.create(baseClass.prototype);\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\n        classFunction.memberDefinitions.clearCache();\n\n        var staticDefs = baseClass.staticDefinitions;\n        if (staticDefs) {\n          staticDefs = staticDefs.asArray();\n          if (staticDefs) {\n            for (var i = 0; i < staticDefs.length; i++) {\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n            }\n          }\n        }\n        classFunction.baseTypes = (baseClass.baseTypes || []).slice();\n        for (var i = 0; i < baseClasses.length; i++) {\n          classFunction.baseTypes.push(baseClasses[i].type);\n        }\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\n        if (!classFunction.isAssignableTo) {\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\n            value: function value(type) {\n              return this === type || this.baseTypes.indexOf(type) >= 0;\n            },\n            writable: false,\n            enumerable: false,\n            configurable: false\n          });\n        }\n      }\n\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\n      if (classDefinition) {\n        if (openTypeDefinition) delete classDefinition.openType;\n        this.buildStaticMembers(classFunction, classDefinition);\n\n        if (classDefinition.constructor) classFunction.classConstructor = classDefinition.constructor;\n      }\n\n      if (instanceDefinition) {\n\n        //build open type member\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\n          if (typeof classFunction.openType == \"string\") {\n            openTypePropertyName = classFunction.openType;\n          }\n\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\n          if (definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Type Error\", \"OpenType default type missmatch\"));\n          }\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\n            if (memberType !== openTypeDefaultType) {\n              _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Type Error\", \"OpenType default type missmatch\"));\n            }\n          }\n          if (!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]) {\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : function () {\n              return {};\n            };\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue: defaultValue };\n          }\n        }\n\n        this.buildInstanceMembers(classFunction, instanceDefinition);\n      }\n\n      var mixins = [].concat(baseClasses);\n      mixins.shift();\n      if (Object.keys(mixins).length > 0) this.buildInstanceMixins(classFunction, mixins);\n\n      classFunction.__class = true;\n\n      classFunction.prototype.constructor = classFunction;\n\n      Object.defineProperty(classFunction.prototype, \"getType\", {\n        value: function value() {\n          return classFunction;\n        },\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n    },\n\n    addMethod: function addMethod(holder, name, method, propagation) {\n      if (!propagation || typeof intellisense !== 'undefined') {\n        holder[name] = method;\n      } else {\n        holder[name] = function () {\n          return method.apply(this[propagation], arguments);\n        };\n      }\n    },\n\n    addProperty: function addProperty(holder, name, propertyDescriptor, propagation) {\n\n      //holder[name] = {};\n\n      if (propagation) {\n        propertyDescriptor.configurable = true;\n        if (propertyDescriptor.get) {\n          var origGet = propertyDescriptor.get;\n          propertyDescriptor.get = function () {\n            if (!this[propagation]) _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"not inicialized\"));\n            return origGet.apply(this[propagation], arguments);\n          };\n        }\n        if (propertyDescriptor.set) {\n          var origSet = propertyDescriptor.set;\n          propertyDescriptor.set = function () {\n            if (!this[propagation]) _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"not inicialized\"));\n            origSet.apply(this[propagation], arguments);\n          };\n        }\n      }\n\n      Object.defineProperty(holder, name, propertyDescriptor);\n    },\n\n    addField: function addField(holder, name, field) {\n      _jaydataErrorHandler.Guard.raise(\"not implemented\");\n    },\n\n    buildMethod: function buildMethod(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\n\n      for (var meta in memberDefinition) {\n        if (typeof Reflect !== 'undefined' && Reflect.defineMetadata && typeof memberDefinition[meta] !== 'undefined' && memberDefinition.hasOwnProperty(meta)) {\n          Reflect.defineMetadata('definition:' + meta, memberDefinition[meta], holder, memberDefinition.name);\n        }\n      }\n    },\n\n    buildProperty: function buildProperty(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\n\n      for (var meta in memberDefinition) {\n        if (typeof Reflect !== 'undefined' && Reflect.defineMetadata && typeof memberDefinition[meta] !== 'undefined' && memberDefinition.hasOwnProperty(meta)) {\n          Reflect.defineMetadata('definition:' + meta, memberDefinition[meta], holder, memberDefinition.name);\n        }\n      }\n\n      //if lazyload TODO\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true && !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\n        var pdGetMethod = memberDefinition.createGetMethod();\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\n\n        var pdSetMethod = memberDefinition.createSetMethod();\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\n      }\n    },\n\n    buildMember: function buildMember(classFunction, memberDefinition, propagation, memberCollectionName) {\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\n      classFunction[memberCollectionName].setMember(memberDefinition);\n\n      switch (memberDefinition.kind) {\n        case MemberTypes.method:\n          this.buildMethod(classFunction, memberDefinition, propagation);\n          break;\n        case MemberTypes.navProperty:\n        case MemberTypes.complexProperty:\n        case MemberTypes.property:\n          this.buildProperty(classFunction, memberDefinition, propagation);\n          break;\n        default:\n          _jaydataErrorHandler.Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\n      }\n    },\n\n    buildStaticMembers: function buildStaticMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          memberDefinition.classMember = true;\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\n        }\n      }\n    },\n\n    buildInstanceMembers: function buildInstanceMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\n        }\n      }\n    },\n\n    copyMembers: function copyMembers(sourceType, targetType) {\n      ///<param name=\"sourceType\" type=\"Function\" />\n      ///<param name=\"targetType\" type=\"Function\" />\n      function il(msg) {\n        if (typeof intellisense === 'undefined') {\n          return;\n        }\n        intellisense.logMessage(msg);\n      }\n\n      Object.keys(sourceType.prototype).forEach(function (item, i, src) {\n        if (item !== 'constructor' && item !== 'toString') {\n          il(\"copying item:\" + item);\n          targetType.prototype[item] = sourceType[item];\n        }\n      });\n    },\n\n    buildInstanceMixins: function buildInstanceMixins(classFunction, mixinList) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"mixinList\" type=\"Array\"></param>\n\n      classFunction.mixins = classFunction.mixins || [];\n      classFunction.propagations = classFunction.propagations || [];\n\n      for (var i = 0; i < mixinList.length; i++) {\n        var item = mixinList[i];\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\n        if (item.propagateTo) {\n          this.buildInstancePropagation(classFunction, item);\n          classFunction.propagations.push(item);\n          classFunction.propagations[item.type.name] = true;\n        } else {\n          this.buildInstanceMixin(classFunction, item);\n          classFunction.mixins.push(item);\n          classFunction.mixins[item.type.name] = true;\n        }\n      };\n    },\n    buildInstanceMixin: function buildInstanceMixin(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i]);\n        }\n      }\n\n      if (typeObj.type.staticDefinitions) {\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\n          var itemName = staticDefs[i].name;\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n          }\n        }\n      }\n    },\n    buildInstancePropagation: function buildInstancePropagation(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\n        }\n      }\n    }\n\n  };\n  var Class;\n  $data.Class = Class = new ClassEngineBase();\n\n  $data.ContainerClass = _Container.ContainerCtor;\n\n  var c;\n  $data.Container = c = _Container.ContainerInstance;\n\n  $data.createContainer = function () {\n    return new _Container.ContainerCtor($data.Container);\n  };\n\n  var storeProperty = function storeProperty(memberDefinition, value) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    if (!this[backingFieldName]) {\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\n    } else {\n      this[backingFieldName] = value;\n    }\n  };\n  var retrieveProperty = function retrieveProperty(memberDefinition) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    return this[backingFieldName];\n  };\n\n  $data.Class.define('$data.Base', function Base() {}, null, {\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    setProperty: function setProperty(memberDefinition, value, callback) {\n      this[memberDefinition.name] = value;\n      callback();\n    },\n    getProperty: function getProperty(memberDefinition, callback) {\n      callback.apply(this, [this[memberDefinition.name]]);\n    }\n  }, {\n    create: function create() {\n      return Container.createInstance(this, arguments);\n    },\n    extend: function extend(name, container, instanceDefinition, classDefinition) {\n      if (container && !(container instanceof _Container.ContainerCtor)) {\n        classDefinition = instanceDefinition;\n        instanceDefinition = container;\n        container = undefined;\n      }\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\n    },\n    getMemberDefinition: function getMemberDefinition(name) {\n      return this.memberDefinitions.getMember(name);\n    },\n    addProperty: function addProperty(name, getterOrType, setterOrGetter, setter) {\n      var _getter = getterOrType;\n      var _setter = setterOrGetter;\n      var _type;\n      if (typeof _getter === 'string') {\n        _type = getterOrType;\n        _getter = setterOrGetter;\n        _setter = setter;\n      }\n\n      var propDef = {\n        notMapped: true,\n        storeOnObject: true,\n        get: typeof _getter === 'function' ? _getter : function () {},\n        set: typeof _setter === 'function' ? _setter : function () {},\n        type: _type\n      };\n\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\n      $data.Class.buildMember(this, memberDefinition);\n\n      this.memberDefinitions.clearCache();\n\n      return this;\n    },\n    addMember: function addMember(name, definition, isClassMember) {\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\n\n      if (isClassMember) {\n        memberDefinition.classMember = true;\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\n        this.staticDefinitions.clearCache();\n      } else {\n        $data.Class.buildMember(this, memberDefinition);\n        this.memberDefinitions.clearCache();\n      }\n      return this;\n    },\n    describeField: function describeField(name, definition) {\n      var memDef = this.memberDefinitions.getMember(name);\n      if (!memDef) {\n        this.addMember(name, definition);\n      } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\n      }\n      return this;\n    },\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    'from$data.Object': function from$dataObject(value) {\n      return value;\n    },\n\n    hasMetadata: function hasMetadata(key, property) {\n      return typeof Reflect !== 'undefined' && Reflect.hasMetadata && Reflect.hasMetadata(key, this.prototype, property);\n    },\n    getAllMetadata: function getAllMetadata(property) {\n      var _this = this;\n\n      var result = {};\n      if (typeof Reflect !== 'undefined' && Reflect.getMetadataKeys && Reflect.getMetadata) {\n        var keys = Reflect.getMetadataKeys(this.prototype, property);\n        keys.forEach(function (key) {\n          result[key] = Reflect.getMetadata(key, _this.prototype, property);\n        });\n      }\n\n      return result;\n    },\n    getMetadata: function getMetadata(key, property) {\n      return typeof Reflect !== 'undefined' && Reflect.getMetadata ? Reflect.getMetadata(key, this.prototype, property) : undefined;\n    },\n    setMetadata: function setMetadata(key, value, property) {\n      return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.defineMetadata(key, value, this.prototype, property);\n    }\n  });\n\n  //override after typeSystem initialized\n\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\n    constructor: function constructor(paramIndex) {\n      ///<param name=\"paramIndex\" type=\"integer\" />\n      this.paramIndex = paramIndex;\n    },\n    paramIndex: {}\n  });\n})(_initializeJayData2.default);\n\n_initializeJayData2.default.defaultErrorCallback = function () {\n  //console.log('DEFAULT ERROR CALLBACK:');\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\n    (console.error || console.log).call(console, arguments[0]);\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\n  } else {\n    if (arguments[0] instanceof Error) {\n      _jaydataErrorHandler.Guard.raise(arguments[0]);\n    } else {\n      _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\n    }\n  }\n};\n_initializeJayData2.default.defaultSuccessCallback = function () {/*console.log('DEFAULT SUCCES CALLBACK');*/};\n_initializeJayData2.default.defaultNotifyCallback = function () {/*console.log('DEFAULT NOTIFY CALLBACK');*/};\n\n_initializeJayData2.default.typeSystem = {\n  __namespace: true,\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\n  //mix: function (type, mixin) {\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\n  //    type.mixins = type.mixins || [];\n  //    type.mixins.push(mixin);\n  //    return type;\n  //},\n  extend: function extend(target) {\n    /// <summary>\n    /// Extends an object with properties of additional parameters.\n    /// </summary>\n    /// <signature>\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\n    /// </signature>\n    /// <returns></returns>\n    if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object' && typeof target !== 'function') _jaydataErrorHandler.Guard.raise('Target must be object or function');\n\n    for (var i = 1; i < arguments.length; i++) {\n      var obj = arguments[i];\n      if (obj === null || typeof obj === 'undefined') continue;\n      for (var key in obj) {\n        target[key] = obj[key];\n      }\n    }\n    return target;\n  },\n  createCallbackSetting: function createCallbackSetting(callBack, defaultSetting) {\n    var setting = {\n      success: _initializeJayData2.default.defaultSuccessCallback,\n      error: _initializeJayData2.default.defaultErrorCallback,\n      notify: _initializeJayData2.default.defaultNotifyCallback\n    };\n\n    if (defaultSetting != undefined && defaultSetting != null) {\n      setting = defaultSetting;\n    }\n\n    var result;\n    if (callBack == null || callBack == undefined) {\n      result = setting;\n    } else if (typeof callBack == 'function') {\n      result = this.extend(setting, {\n        success: callBack\n      });\n    } else {\n      result = this.extend(setting, callBack);\n    }\n\n    function wrapCode(fn) {\n      var t = this;\n\n      function r() {\n        fn.apply(t, arguments);\n        fn = function fn() {};\n      }\n      return r;\n    }\n\n    if (typeof result.error === 'function') result.error = wrapCode(result.error);\n\n    return result;\n  },\n  createCtorParams: function createCtorParams(source, indexes, thisObj) {\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\n    ///<param name=\"indexes\" type=\"Array\" />\n    ///<param name=\"thisObj\" type=\"Object\" />\n    if (indexes) {\n      var paramArray = [];\n      for (var i = 0, l = indexes.length; i < l; i++) {\n        var item = i;\n        if (indexes[item] instanceof _initializeJayData2.default.Class.ConstructorParameter) paramArray.push(source[indexes[item].paramIndex]);else if (typeof indexes[item] === \"function\") paramArray.push(indexes[item].apply(thisObj));else paramArray.push(indexes[item]);\n      }\n      return paramArray;\n    }\n    return source;\n  },\n  writePropertyValues: function writePropertyValues(obj) {\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(function (md) {\n        return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\n      }));\n    }\n  },\n  writeProperties: function writeProperties(obj, members) {\n    var defines = {};\n    for (var i = 0, l = members.length; i < l; i++) {\n      var memDef = members[i];\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\n    }\n\n    Object.defineProperties(obj, defines);\n  },\n  writeProperty: function writeProperty(obj, member, value) {\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\n    if (memDef) {\n      var propDef = memDef.createPropertyDescriptor(null, value);\n      //////OPTIMIZATION\n      Object.defineProperty(obj, memDef.name, propDef);\n    }\n  }\n};\n\n_initializeJayData2.default.debug = function () {\n  (console.debug || console.log).apply(console, arguments);\n};\n\n_initializeJayData2.default.debugWith = function () {\n  var cArgs = arguments;\n  return function (r) {\n    (console.debug || console.log).apply(console, cArgs);\n    if (typeof Error !== 'undefined' && r instanceof Error || typeof _jaydataErrorHandler.Exception !== 'undefined' && r instanceof _jaydataErrorHandler.Exception) {\n      (console.error || console.log).apply(console, arguments);\n    } else {\n      (console.debug || console.log).apply(console, arguments);\n    }\n  };\n};\n\n_initializeJayData2.default.fdebug = {\n  success: _initializeJayData2.default.debugWith('success'),\n  error: _initializeJayData2.default.debugWith('error')\n};\n\nvar $C = exports.$C = function $C() {\n  _initializeJayData2.default.Class.define.apply(_initializeJayData2.default.Class, arguments);\n};\nvar Container = exports.Container = _initializeJayData2.default.Container;\nvar MemberDefinition = exports.MemberDefinition = _initializeJayData2.default.MemberDefinition;\nexports.default = _initializeJayData2.default;\n\n}).call(this,_dereq_('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./Container.js\":29,\"./Extensions.js\":30,\"./PreHtml5Compatible.js\":31,\"./initializeJayData.js\":45,\"_process\":23,\"jaydata-error-handler\":8}],35:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nvar _btoa = (typeof window !== \"undefined\" ? window['btoa'] : typeof global !== \"undefined\" ? global['btoa'] : null);\n\nvar _btoa2 = _interopRequireDefault(_btoa);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\n_TypeSystem2.default.Blob = function Blob() {};\n\n_TypeSystem2.default.Blob.createFromHexString = function (value) {\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]) {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('TypeError: ', 'value not convertable to $data.Blob', value));\n    } else {\n        //if (value.length & 1) value = '0' + value;\n        var arr = new bufferOrArray(value.length >> 1);\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\n        }\n\n        return arr;\n    }\n};\n\n_TypeSystem2.default.Blob.toString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += String.fromCharCode(value[i]);\n    }\n\n    return s;\n};\n\n_TypeSystem2.default.Blob.toBase64 = function (value) {\n    if (!value || !value.length) return null;\n    return (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Blob.toArray = function (src) {\n    if (!src || !src.length) return null;\n    var arr = new Array(src.length);\n    for (var i = 0; i < src.length; i++) {\n        arr[i] = src[i];\n    }\n\n    return arr;\n};\n\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\n\n_TypeSystem2.default.Blob.toHexString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += ('00' + value[i].toString(16)).slice(-2);\n    }\n\n    return s.toUpperCase();\n};\n\n_TypeSystem2.default.Blob.toDataURL = function (value) {\n    if (!value || !value.length) return null;\n    return 'data:application/octet-stream;base64,' + (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], _TypeSystem2.default.Blob);\n_TypeSystem2.default.Container.registerConverter('$data.Blob', {\n    '$data.String': function $dataString(value) {\n        if (value && value.length) {\n            var blob = new bufferOrArray(value.length);\n            for (var i = 0; i < value.length; i++) {\n                blob[i] = value.charCodeAt(i);\n            }\n\n            return blob;\n        } else return null;\n    },\n    '$data.Array': function $dataArray(value) {\n        return new bufferOrArray(value);\n    },\n    '$data.Number': function $dataNumber(value) {\n        return new bufferOrArray(_TypeSystem2.default.packIEEE754(value, 11, 52).reverse());\n    },\n    '$data.Boolean': function $dataBoolean(value) {\n        return new bufferOrArray([value | 0]);\n    },\n    'default': function _default(value) {\n        if (typeof Blob !== 'undefined' && value instanceof Blob) {\n            var req = new XMLHttpRequest();\n            req.open('GET', URL.createObjectURL(value), false);\n            req.send(null);\n            return _TypeSystem2.default.Container.convertTo(req.response, _TypeSystem2.default.Blob);\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n            return new bufferOrArray(new Uint8Array(value));\n        } else if (value instanceof Uint8Array) {\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\n            //else\n            return value;\n        } else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n               return value;\r\n               }else*/if (value.buffer) {\n                return new bufferOrArray(value);\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value instanceof Object) {\n                var arr = [];\n                for (var i in value) {\n                    arr[i] = value[i];\n                }\n                if (!arr.length) throw 0;\n                return new bufferOrArray(arr);\n            }\n        throw 0;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return _TypeSystem2.default.Blob.toString(value);\n    },\n    '$data.Array': function $dataArray(value) {\n        return _TypeSystem2.default.Blob.toArray(value);\n    }\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../TypeSystem.js\":34,\"jaydata-error-handler\":8}],36:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Container.registerConverter('$data.Boolean', {\n    '$data.String': function $dataString(value) {\n        if (value.toLowerCase() == 'true') return true;\n        if (value.toLowerCase() == 'false') return false;\n\n        return !!value;\n    },\n    'default': function _default(value) {\n        return !!value;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Integer', {\n    'default': function _default(value) {\n        if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY || value === Number.MAX_VALUE || value === Number.MIN_VALUE) {\n            return value;\n        }\n\n        var r = parseInt(+value, 10);\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int32', {\n    'default': function _default(value) {\n        return value | 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Number', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Byte', {\n    'default': function _default(value) {\n        return (value | 0) & 0xff;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Date', {\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.DateTimeOffset', {\n    '$data.Date': function $dataDate(value) {\n        return value;\n    },\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n(function () {\n    function parseFromString(value) {\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var time = '';\n        time += ('00' + matches[1]).slice(-2);\n        time += ':' + ('00' + matches[2]).slice(-2);\n        if (matches[4]) {\n            time += ':' + ('00' + matches[4]).slice(-2);\n        } else {\n            time += ':00';\n        }\n        if (matches[6]) time += '.' + (matches[6] + '000').slice(0, 3);\n\n        return time;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Time', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var metrics = [1000, 60, 60];\n            var result = [0, 0, 0, value | 0];\n\n            for (var i = 0; i < metrics.length; i++) {\n                result[metrics.length - (i + 1)] = result[metrics.length - i] / metrics[i] | 0;\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\n            }\n\n            var time = '';\n            for (var i = 0; i < result.length; i++) {\n                if (i < result.length - 1) {\n                    time += ('00' + result[i]).slice(-2);\n                    if (i < result.length - 2) time += ':';\n                } else {\n                    time += '.' + ('000' + result[i]).slice(-3);\n                }\n            }\n\n            return parseFromString(time);\n        },\n        '$data.Date': function $dataDate(value) {\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\n            var ms = value.getMilliseconds();\n            if (ms) {\n                val += '.' + ms;\n            }\n\n            return parseFromString(val);\n        }\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var date = matches[1];\n        date += ('0000' + matches[2]).slice(-4);\n        date += '-' + ('00' + matches[3]).slice(-2);\n        date += '-' + ('00' + matches[4]).slice(-2);\n        return date;\n    }\n    function parseFromDate(value) {\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\n        return parseFromString(val);\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Day', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var t = 1000 * 60 * 60 * 24;\n            var day = value * t;\n            if (isNaN(day)) throw 0;\n\n            return parseFromDate(new Date(day));\n        },\n        '$data.Date': parseFromDate\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        return value;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Duration', {\n        '$data.String': parseFromString\n    });\n})();\n_TypeSystem2.default.Container.registerConverter('$data.Decimal', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        return value.toString();\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.packIEEE754 = function (v, ebits, fbits) {\n    var bias = (1 << ebits - 1) - 1,\n        s,\n        e,\n        f,\n        ln,\n        i,\n        bits,\n        str,\n        bytes;\n\n    // Compute sign, exponent, fraction\n    if (v !== v) {\n        // NaN\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\n        e = (1 << bias) - 1;f = Math.pow(2, fbits - 1);s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n        e = (1 << bias) - 1;f = 0;s = v < 0 ? 1 : 0;\n    } else if (v === 0) {\n        e = 0;f = 0;s = 1 / v === -Infinity ? 1 : 0;\n    } else {\n        s = v < 0;\n        v = Math.abs(v);\n\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        } else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n\n    // Pack sign, exponent, fraction\n    bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    str = bits.join('');\n\n    // Bits to bytes\n    bytes = [];\n    while (str.length) {\n        bytes.push(parseInt(str.substring(0, 8), 2));\n        str = str.substring(8);\n    }\n\n    return bytes;\n};\n\n_TypeSystem2.default.unpackIEEE754 = function (bytes, ebits, fbits) {\n    // Bytes to bits\n    var bits = [],\n        i,\n        j,\n        b,\n        str,\n        bias,\n        s,\n        e,\n        f;\n\n    for (i = bytes.length; i; i -= 1) {\n        b = bytes[i - 1];\n        for (j = 8; j; j -= 1) {\n            bits.push(b % 2 ? 1 : 0);b = b >> 1;\n        }\n    }\n    bits.reverse();\n    str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    bias = (1 << ebits - 1) - 1;\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    e = parseInt(str.substring(1, 1 + ebits), 2);\n    f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n        return f !== 0 ? NaN : s * Infinity;\n    } else if (e > 0) {\n        // Normalized\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    } else if (f !== 0) {\n        // Denormalized\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    } else {\n        return s < 0 ? -0 : 0;\n    }\n};\n\n_TypeSystem2.default.IEEE754 = function (v, e, f) {\n    return _TypeSystem2.default.unpackIEEE754(_TypeSystem2.default.packIEEE754(v, e, f), e, f);\n};\n\n_TypeSystem2.default.Container.registerConverter('$data.Float', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return _TypeSystem2.default.IEEE754(r, 8, 23);\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int16', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xffff;\n        if (r >= 0x8000) return r - 0x10000;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int64', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        var r = value.toString();\n        if (r.indexOf('.') > 0) return r.split('.')[0];\n        if (r.indexOf('.') == 0) throw 0;\n        return r;\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        if (value.indexOf('.') > 0) return value.split('.')[0];\n        if (value.indexOf('.') == 0) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.SByte', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xff;\n        if (r >= 0x80) return r - 0x100;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.String', {\n    '$data.Date': function $dataDate(value) {\n        return value.toISOString();\n    },\n    '$data.ObjectID': function $dataObjectID(value) {\n        return btoa(value.toString());\n    },\n    'default': function _default(value) {\n        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') return JSON.stringify(value);\n        return value.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Object', {\n    '$data.String': function $dataString(value) {\n        return JSON.parse(value);\n    },\n    '$data.Function': function $dataFunction() {\n        throw 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Array', {\n    '$data.String': function $dataString(value) {\n        var r = JSON.parse(value);\n        if (!Array.isArray(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.ObjectID', {\n    '$data.ObjectID': function $dataObjectID(value) {\n        try {\n            return btoa(value.toString());\n        } catch (e) {\n            return value;\n        }\n    },\n    '$data.String': function $dataString(id) {\n        return id;\n    }\n});\n\n_TypeSystem2.default.Container.proxyConverter = function (v) {\n    return v;\n};\n_TypeSystem2.default.Container.defaultConverter = function (type) {\n    return function (v) {\n        return _TypeSystem2.default.Container.convertTo(v, type);\n    };\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],37:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($data) {\n\n    function Edm_Boolean() {};\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\n\n    function Edm_Binary() {};\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\n    $data.Container.mapType(Edm_Binary, $data.Blob);\n\n    function Edm_DateTime() {};\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\n    $data.Container.mapType(Edm_DateTime, $data.Date);\n\n    function Edm_DateTimeOffset() {};\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\n\n    function Edm_Time() {};\n    $data.Container.registerType('Edm.Time', Edm_Time);\n    $data.Container.mapType(Edm_Time, $data.Time);\n\n    function Edm_TimeOfDay() {};\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\n\n    function Edm_Date() {};\n    $data.Container.registerType('Edm.Date', Edm_Date);\n    $data.Container.mapType(Edm_Date, $data.Day);\n\n    function Edm_Duration() {};\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\n    $data.Container.mapType(Edm_Duration, $data.Duration);\n\n    function Edm_Decimal() {};\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\n\n    function Edm_Float() {};\n    $data.Container.registerType('Edm.Float', Edm_Float);\n    $data.Container.mapType(Edm_Float, $data.Float);\n\n    function Edm_Single() {};\n    $data.Container.registerType('Edm.Single', Edm_Single);\n    $data.Container.mapType(Edm_Single, $data.Float);\n\n    function Edm_Double() {};\n    $data.Container.registerType('Edm.Double', Edm_Double);\n    $data.Container.mapType(Edm_Double, $data.Number);\n\n    function Edm_Guid() {};\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\n    $data.Container.mapType(Edm_Guid, $data.Guid);\n\n    function Edm_Int16() {};\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\n    $data.Container.mapType(Edm_Int16, $data.Int16);\n\n    function Edm_Int32() {};\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\n    $data.Container.mapType(Edm_Int32, $data.Integer);\n\n    function Edm_Int64() {};\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\n    $data.Container.mapType(Edm_Int64, $data.Int64);\n\n    function Edm_Byte() {};\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\n    $data.Container.mapType(Edm_Byte, $data.Byte);\n\n    function Edm_SByte() {};\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\n    $data.Container.mapType(Edm_SByte, $data.SByte);\n\n    function Edm_String() {};\n    $data.Container.registerType('Edm.String', Edm_String);\n    $data.Container.mapType(Edm_String, $data.String);\n\n    function Edm_GeographyPoint() {};\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\n\n    function Edm_GeographyLineString() {};\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\n\n    function Edm_GeographyPolygon() {};\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\n\n    function Edm_GeographyMultiPoint() {};\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\n\n    function Edm_GeographyMultiLineString() {};\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\n\n    function Edm_GeographyMultiPolygon() {};\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\n\n    function Edm_GeographyCollection() {};\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\n\n    function Edm_GeometryPoint() {};\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\n\n    function Edm_GeometryLineString() {};\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\n\n    function Edm_GeometryPolygon() {};\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\n\n    function Edm_GeometryMultiPoint() {};\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\n\n    function Edm_GeometryMultiLineString() {};\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\n\n    function Edm_GeometryMultiPolygon() {};\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\n\n    function Edm_GeometryCollection() {};\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\n\n    $data.oDataEdmMapping = {\n        '$data.Byte': 'Edm.Byte',\n        '$data.SByte': 'Edm.SByte',\n        '$data.Decimal': 'Edm.Decimal',\n        '$data.Float': 'Edm.Float',\n        '$data.Int16': 'Edm.Int16',\n        '$data.Int64': 'Edm.Int64',\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\n        '$data.Time': 'Edm.TimeOfDay',\n        '$data.Day': 'Edm.Date',\n        '$data.Duration': 'Edm.Duration',\n        '$data.Boolean': 'Edm.Boolean',\n        '$data.Blob': 'Edm.Binary',\n        '$data.Date': 'Edm.DateTime',\n        '$data.Number': 'Edm.Double',\n        '$data.Integer': 'Edm.Int32',\n        '$data.Int32': 'Edm.Int32',\n        '$data.String': 'Edm.String',\n        '$data.ObjectID': 'Edm.String',\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\n        '$data.Guid': 'Edm.Guid'\n    };\n})(_TypeSystem2.default);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],38:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.GeographyBase */\n_TypeSystem2.default.GeographyBase = function GeographyBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeographyBase.defaultCrs;\n    _TypeSystem2.default.GeographyBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeographyBase.disableSRID = false;\n_TypeSystem2.default.GeographyBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:4326'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeographyBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeographyBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeographyBase) {\n            return type.parseFromString(strData);\n        } else {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeographyBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geography'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeographyBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeographyBase);\n\n    _TypeSystem2.default.GeographyBase.registered = _TypeSystem2.default.GeographyBase.registered || {};\n    _TypeSystem2.default.GeographyBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeographyBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeographyBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeographyBase', _TypeSystem2.default.GeographyBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeographyBase'], _TypeSystem2.default.GeographyBase);\n\n/* $data.GeographyPoint */\n_TypeSystem2.default.GeographyPoint = function GeographyPoint(lon, lat) {\n    if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && Array.isArray(lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: lon });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('longitude' in lon || 'latitude' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('lng' in lon || 'lat' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object') {\n        _TypeSystem2.default.GeographyBase.call(this, lon);\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\n    }\n};\n_TypeSystem2.default.GeographyPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeographyPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeographyPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Point', _TypeSystem2.default.GeographyPoint);\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'longitude', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'latitude', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], _TypeSystem2.default.GeographyPoint);\n_TypeSystem2.default.Geography = _TypeSystem2.default.GeographyPoint;\n\n/* $data.GeographyLineString */\n_TypeSystem2.default.GeographyLineString = function GeographyLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('LineString', _TypeSystem2.default.GeographyLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], _TypeSystem2.default.GeographyLineString);\n\n/* $data.GeographyPolygon */\n_TypeSystem2.default.GeographyPolygon = function GeographyPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeographyPoint ? data.topLeft : new _TypeSystem2.default.GeographyPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeographyPoint ? data.bottomRight : new _TypeSystem2.default.GeographyPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeographyPoint ? data.topRight : new _TypeSystem2.default.GeographyPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeographyPoint ? data.bottomLeft : new _TypeSystem2.default.GeographyPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeographyPolygon(data);\n};\n_TypeSystem2.default.GeographyPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Polygon', _TypeSystem2.default.GeographyPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], _TypeSystem2.default.GeographyPolygon);\n\n/* $data.GeographyMultiPoint */\n_TypeSystem2.default.GeographyMultiPoint = function GeographyMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPoint', _TypeSystem2.default.GeographyMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], _TypeSystem2.default.GeographyMultiPoint);\n\n/* $data.GeographyMultiLineString */\n_TypeSystem2.default.GeographyMultiLineString = function GeographyMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiLineString', _TypeSystem2.default.GeographyMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], _TypeSystem2.default.GeographyMultiLineString);\n\n/* $data.GeographyMultiPolygon */\n_TypeSystem2.default.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPolygon', _TypeSystem2.default.GeographyMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], _TypeSystem2.default.GeographyMultiPolygon);\n\n/* $data.GeographyCollection */\n_TypeSystem2.default.GeographyCollection = function GeographyCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeographyBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeographyBase.registerType('GeometryCollection', _TypeSystem2.default.GeographyCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], _TypeSystem2.default.GeographyCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34,\"jaydata-error-handler\":8}],39:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.Geometry */\n_TypeSystem2.default.GeometryBase = function GeometryBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeometryBase.defaultCrs;\n    _TypeSystem2.default.GeometryBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeometryBase.disableSRID = false;\n_TypeSystem2.default.GeometryBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:0'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeometryBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeometryBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeometryBase) {\n            return type.parseFromString(strData);\n        } else {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeometryBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geometry'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeometryBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeometryBase);\n\n    _TypeSystem2.default.GeometryBase.registered = _TypeSystem2.default.GeometryBase.registered || {};\n    _TypeSystem2.default.GeometryBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeometryBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeometryBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeometryBase', _TypeSystem2.default.GeometryBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeometryBase'], _TypeSystem2.default.GeometryBase);\n\n/* $data.GeometryPoint */\n_TypeSystem2.default.GeometryPoint = function GeometryPoint(x, y) {\n    var param = x;\n    if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && Array.isArray(param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: param });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && ('x' in param || 'y' in param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [param.x, param.y] });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object') {\n        _TypeSystem2.default.GeometryBase.call(this, param);\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\n    }\n};\n_TypeSystem2.default.GeometryPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeometryPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeometryPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Point', _TypeSystem2.default.GeometryPoint);\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'x', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'y', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], _TypeSystem2.default.GeometryPoint);\n\n/* $data.GeometryLineString */\n_TypeSystem2.default.GeometryLineString = function GeometryLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('LineString', _TypeSystem2.default.GeometryLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], _TypeSystem2.default.GeometryLineString);\n\n/* $data.GeometryPolygon */\n_TypeSystem2.default.GeometryPolygon = function GeometryPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeometryPoint ? data.topLeft : new _TypeSystem2.default.GeometryPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeometryPoint ? data.bottomRight : new _TypeSystem2.default.GeometryPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeometryPoint ? data.topRight : new _TypeSystem2.default.GeometryPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeometryPoint ? data.bottomLeft : new _TypeSystem2.default.GeometryPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeometryPolygon(data);\n};\n_TypeSystem2.default.GeometryPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Polygon', _TypeSystem2.default.GeometryPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], _TypeSystem2.default.GeometryPolygon);\n\n/* $data.GeometryMultiPoint */\n_TypeSystem2.default.GeometryMultiPoint = function GeometryMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPoint', _TypeSystem2.default.GeometryMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], _TypeSystem2.default.GeometryMultiPoint);\n\n/* $data.GeometryMultiLineString */\n_TypeSystem2.default.GeometryMultiLineString = function GeometryMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiLineString', _TypeSystem2.default.GeometryMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], _TypeSystem2.default.GeometryMultiLineString);\n\n/* $data.GeometryMultiPolygon */\n_TypeSystem2.default.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPolygon', _TypeSystem2.default.GeometryMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], _TypeSystem2.default.GeometryMultiPolygon);\n\n/* $data.GeometryCollection */\n_TypeSystem2.default.GeometryCollection = function GeometryCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeometryBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeometryBase.registerType('GeometryCollection', _TypeSystem2.default.GeometryCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], _TypeSystem2.default.GeometryCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34,\"jaydata-error-handler\":8}],40:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Geospatial = function Geospatial() {\n    this.type = this.constructor.type;\n    if (Array.isArray(this.constructor.validMembers)) {\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\n            var name = this.constructor.validMembers[i];\n            this[name] = undefined;\n        }\n    }\n\n    _TypeSystem2.default.SimpleBase.apply(this, arguments);\n    this.type = this.constructor.type || 'Unknown';\n};\n_TypeSystem2.default.SimpleBase.registerType('Geospatial', _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.Geospatial', 'Geospatial'], _TypeSystem2.default.Geospatial);\n\n_TypeSystem2.default.point = function (arg) {\n    if (arg && arg.crs) {\n        if (arg.crs.properties && arg.crs.properties.name === _TypeSystem2.default.GeometryBase.defaultCrs.properties.name) {\n            return new _TypeSystem2.default.GeometryPoint(arg);\n        } else {\n            return new _TypeSystem2.default.GeographyPoint(arg);\n        }\n    } else if (arg) {\n        if ('x' in arg && 'y' in arg) {\n            return new _TypeSystem2.default.GeometryPoint(arg.x, arg.y);\n        } else if ('longitude' in arg && 'latitude' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.longitude, arg.latitude);\n        } else if ('lng' in arg && 'lat' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.lng, arg.lat);\n        }\n    }\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],41:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value)) {\n        this.value = value || '00000000-0000-0000-0000-000000000000';\n    } else {\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\n    }\n};\n_TypeSystem2.default.Container.registerType(['$data.Guid', 'Guid', 'guid'], _TypeSystem2.default.Guid);\n_TypeSystem2.default.Container.registerConverter('$data.Guid', {\n    '$data.String': function $dataString(value) {\n        return value ? _TypeSystem2.default.parseGuid(value).toString() : value;\n    },\n    '$data.Guid': function $dataGuid(value) {\n        return value ? value.toString() : value;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return value ? value.toString() : value;\n    }\n});\n\n_TypeSystem2.default.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.NewGuid = function () {\n    return _TypeSystem2.default.createGuid();\n};\n\n_TypeSystem2.default.parseGuid = function (guid) {\n    return new _TypeSystem2.default.Guid(guid);\n};\n\n(function () {\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n      Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\n\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n    _TypeSystem2.default.createGuid = function (guidString) {\n        if (guidString) {\n            return new _TypeSystem2.default.Guid(guidString);\n        };\n\n        var len;\n        var chars = CHARS,\n            uuid = [],\n            i;\n        var radix = chars.length;\n\n        if (len) {\n            // Compact form\n            for (i = 0; i < len; i++) {\n                uuid[i] = chars[0 | Math.random() * radix];\n            }\n        } else {\n            // rfc4122, version 4 form\n            var r;\n\n            // rfc4122 requires these characters\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\n            // per rfc4122, sec. 4.1.5\n            for (i = 0; i < 36; i++) {\n                if (!uuid[i]) {\n                    r = 0 | Math.random() * 16;\n                    uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n                }\n            }\n        }\n\n        return _TypeSystem2.default.parseGuid(uuid.join(''));\n    };\n})();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],42:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.SimpleBase */\n_TypeSystem2.default.SimpleBase = function SimpleBase(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data) {\n        if (Array.isArray(this.constructor.validMembers)) {\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\n                var name = this.constructor.validMembers[i];\n\n                if (data[name] !== undefined) {\n                    this[name] = data[name];\n                }\n            }\n        } else {\n            delete data.type;\n            _TypeSystem2.default.typeSystem.extend(this, data);\n        }\n    }\n};\n_TypeSystem2.default.SimpleBase.registerType = function (name, type, base) {\n    base = base || _TypeSystem2.default.SimpleBase;\n\n    type.type = name;\n    type.prototype = Object.create(base.prototype);\n    type.prototype.constructor = type;\n};\n_TypeSystem2.default.Container.registerType(['$data.SimpleBase', 'SimpleBase'], _TypeSystem2.default.SimpleBase);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],43:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Number = typeof Number !== 'undefined' ? Number : function JayNumber() {};\n_TypeSystem2.default.Date = typeof Date !== 'undefined' ? Date : function JayDate() {};\n_TypeSystem2.default.String = typeof String !== 'undefined' ? String : function JayString() {};\n_TypeSystem2.default.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() {};\n_TypeSystem2.default.Array = typeof Array !== 'undefined' ? Array : function JayArray() {};\n_TypeSystem2.default.Object = typeof Object !== 'undefined' ? Object : function JayObject() {};\n_TypeSystem2.default.Function = Function;\n\n_TypeSystem2.default.Byte = function JayByte() {};\n_TypeSystem2.default.SByte = function JaySByte() {};\n_TypeSystem2.default.Decimal = function JayDecimal() {};\n_TypeSystem2.default.Float = _TypeSystem2.default.Single = function JayFloat() {};\n_TypeSystem2.default.Integer = function JayInteger() {};\n_TypeSystem2.default.Int16 = function JayInt16(v) {};\n_TypeSystem2.default.Int32 = function JayInt32() {};\n_TypeSystem2.default.Int64 = function JayInt64(v) {};\n_TypeSystem2.default.ObjectID = typeof _TypeSystem2.default.mongoDBDriver !== 'undefined' && typeof _TypeSystem2.default.mongoDBDriver.ObjectID !== 'undefined' ? _TypeSystem2.default.mongoDBDriver.ObjectID : function JayObjectID() {};\n_TypeSystem2.default.Time = function JayTime() {};\n_TypeSystem2.default.Day = function JayDay() {};\n_TypeSystem2.default.Duration = function JayDuration() {};\n_TypeSystem2.default.DateTimeOffset = function JayDateTimeOffset(val) {\n    this.value = val;\n};\n_TypeSystem2.default.DateTimeOffset.prototype.toJSON = function () {\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], _TypeSystem2.default.Number);\n_TypeSystem2.default.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], _TypeSystem2.default.Integer);\n_TypeSystem2.default.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], _TypeSystem2.default.Int32);\n_TypeSystem2.default.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], _TypeSystem2.default.Byte);\n_TypeSystem2.default.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], _TypeSystem2.default.SByte);\n_TypeSystem2.default.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], _TypeSystem2.default.Decimal);\n_TypeSystem2.default.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], _TypeSystem2.default.Float);\n_TypeSystem2.default.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], _TypeSystem2.default.Int16);\n_TypeSystem2.default.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], _TypeSystem2.default.Int64);\n_TypeSystem2.default.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], _TypeSystem2.default.String);\n_TypeSystem2.default.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], _TypeSystem2.default.Array, function () {\n    return _TypeSystem2.default.Array.apply(undefined, arguments);\n});\n_TypeSystem2.default.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], _TypeSystem2.default.Date);\n_TypeSystem2.default.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], _TypeSystem2.default.Time);\n_TypeSystem2.default.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], _TypeSystem2.default.Day);\n_TypeSystem2.default.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], _TypeSystem2.default.Duration);\n_TypeSystem2.default.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], _TypeSystem2.default.DateTimeOffset);\n_TypeSystem2.default.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], _TypeSystem2.default.Boolean);\n_TypeSystem2.default.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], _TypeSystem2.default.Object);\n_TypeSystem2.default.Container.registerType([\"$data.Function\", \"Function\", \"function\"], _TypeSystem2.default.Function);\n_TypeSystem2.default.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], _TypeSystem2.default.ObjectID);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":34}],44:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Container = exports.$C = exports.Exception = exports.Guard = undefined;\n\nvar _TypeSystem = _dereq_('./TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _Types = _dereq_('./Types/Types.js');\n\nvar _Types2 = _interopRequireDefault(_Types);\n\nvar _Trace = _dereq_('./Trace/Trace.js');\n\nvar _Trace2 = _interopRequireDefault(_Trace);\n\nvar _Logger = _dereq_('./Trace/Logger.js');\n\nvar _Logger2 = _interopRequireDefault(_Logger);\n\nvar _SimpleBase = _dereq_('./Types/SimpleBase.js');\n\nvar _SimpleBase2 = _interopRequireDefault(_SimpleBase);\n\nvar _Geospatial = _dereq_('./Types/Geospatial.js');\n\nvar _Geospatial2 = _interopRequireDefault(_Geospatial);\n\nvar _Geography = _dereq_('./Types/Geography.js');\n\nvar _Geography2 = _interopRequireDefault(_Geography);\n\nvar _Geometry = _dereq_('./Types/Geometry.js');\n\nvar _Geometry2 = _interopRequireDefault(_Geometry);\n\nvar _Guid = _dereq_('./Types/Guid.js');\n\nvar _Guid2 = _interopRequireDefault(_Guid);\n\nvar _Blob = _dereq_('./Types/Blob.js');\n\nvar _Blob2 = _interopRequireDefault(_Blob);\n\nvar _EdmTypes = _dereq_('./Types/EdmTypes.js');\n\nvar _EdmTypes2 = _interopRequireDefault(_EdmTypes);\n\nvar _Converter = _dereq_('./Types/Converter.js');\n\nvar _Converter2 = _interopRequireDefault(_Converter);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nvar _jaydataPromiseHandler = _dereq_('jaydata-promise-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_jaydataPromiseHandler.PromiseHandler.use(_TypeSystem2.default);\n\nvar Guard = exports.Guard = _jaydataErrorHandler.Guard;\n_TypeSystem2.default.Guard = _jaydataErrorHandler.Guard;\n\nvar Exception = exports.Exception = _jaydataErrorHandler.Exception;\n_TypeSystem2.default.Exception = _jaydataErrorHandler.Exception;\n\nvar $C = exports.$C = _TypeSystem.$C;\n_TypeSystem2.default.$C = _TypeSystem.$C;\n\nvar Container = exports.Container = _TypeSystem.Container;\nexports.default = _TypeSystem2.default;\n\n},{\"./Trace/Logger.js\":32,\"./Trace/Trace.js\":33,\"./TypeSystem.js\":34,\"./Types/Blob.js\":35,\"./Types/Converter.js\":36,\"./Types/EdmTypes.js\":37,\"./Types/Geography.js\":38,\"./Types/Geometry.js\":39,\"./Types/Geospatial.js\":40,\"./Types/Guid.js\":41,\"./Types/SimpleBase.js\":42,\"./Types/Types.js\":43,\"jaydata-error-handler\":8,\"jaydata-promise-handler\":19}],45:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _initializeJayDataClient = _dereq_('./initializeJayDataClient.js');\n\nvar _initializeJayDataClient2 = _interopRequireDefault(_initializeJayDataClient);\n\nvar _acorn = _dereq_('acorn');\n\nvar acorn = _interopRequireWildcard(_acorn);\n\nvar _package = _dereq_('../../package.json');\n\nvar pkg = _interopRequireWildcard(_package);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof console === 'undefined') {\n  console = {\n    warn: function warn() {},\n    error: function error() {},\n    log: function log() {},\n    dir: function dir() {},\n    time: function time() {},\n    timeEnd: function timeEnd() {}\n  };\n}\n\nif (!console.warn) console.warn = function () {};\nif (!console.error) console.error = function () {};\n\n(function ($data) {\n  ///<summary>\n  /// Collection of JayData services\n  ///</summary>\n  $data.__namespace = true;\n  $data.version = \"JayData \" + pkg.version;\n  $data.versionNumber = pkg.version;\n  $data.root = {};\n  $data.Acorn = acorn;\n})(_initializeJayDataClient2.default);\nexports.default = _initializeJayDataClient2.default;\n// Do not remove this block, it is used by jsdoc\n/**\r\n    @name $data.Base\r\n    @class base class\r\n*/\n\nmodule.exports = exports['default'];\n\n},{\"../../package.json\":27,\"./initializeJayDataClient.js\":46,\"acorn\":1}],46:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _data_handler;\nfunction _data_handler() {\n  //console.log(\"@@@@\", this);\n  if (this instanceof _data_handler) {\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\n    return new type(arguments[1]);\n  } else {\n    return _data_handler[\"implementation\"].apply(this, arguments);\n  }\n};\nmodule.exports = exports['default'];\n\n},{}],47:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Access', null, null, {}, {\n    isAuthorized: function isAuthorized(access, user, sets, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n\n        //clbWrapper.error('Authorization failed', 'Access authorization');\n        clbWrapper.success(true);\n\n        return pHandlerResult;\n\n        /*var error;\r\n          if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n          var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n          if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n          if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n          if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n          var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n          var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n          var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n              if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n                  if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n          callbackFn();\r\n          return pHandlerResult;*/\n    },\n    getAccessBitmaskFromPermission: function getAccessBitmaskFromPermission(p) {\n        var access = _index2.default.Access.None;\n\n        if (p.Create) access |= _index2.default.Access.Create;\n        if (p.Read) access |= _index2.default.Access.Read;\n        if (p.Update) access |= _index2.default.Access.Update;\n        if (p.Delete) access |= _index2.default.Access.Delete;\n        if (p.DeleteBatch) access |= _index2.default.Access.DeleteBatch;\n        if (p.Execute) access |= _index2.default.Access.Execute;\n\n        return access;\n    },\n    None: { value: 0 },\n    Create: { value: 1 },\n    Read: { value: 2 },\n    Update: { value: 4 },\n    Delete: { value: 8 },\n    DeleteBatch: { value: 16 },\n    Execute: { value: 32 }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],48:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.ajax = _index2.default.ajax || function () {\n    var cfg = arguments[arguments.length - 1];\n    var clb = _index2.default.PromiseHandlerBase.createCallbackSettings(cfg);\n    clb.error(\"Not implemented\");\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],49:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof Ext !== 'undefined' && _typeof(Ext.Ajax)) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        Ext.Ajax.request(options);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],50:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        _index2.default.typeSystem.extend(options, {\n            dataType: 'json',\n            headers: {}\n        });\n        var dataTypes = {\n            'json': {\n                accept: 'application/json, text/javascript',\n                convert: JSON.parse\n            },\n            'text': {\n                accept: 'text/plain',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'html': {\n                accept: 'text/html',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'xml': {\n                accept: 'application/xml, text/xml',\n                convert: function convert(e) {\n                    // TODO?\n                    return e;\n                }\n            }\n        };\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\n\n        options.headers.Accept = dataTypeContext.accept;\n\n        var successClb = options.success || _index2.default.defaultSuccessCallback;\n        var errorClb = options.error || _index2.default.defaultErrorCallback;\n        var progressClb = options.progress;\n\n        var success = function success(r) {\n            var result = dataTypeContext.convert(r.responseText);\n            successClb(result);\n        };\n        var error = function error(r) {\n            var error = dataTypeContext.convert(r.responseText);\n            errorClb(error);\n        };\n        var progress = progressClb;\n\n        WinJS.xhr(options).done(success, error, progress);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],51:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\n    _index2.default.ajax = _index2.default.ajax || jQuery.ajax;\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],52:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.Anonymous\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {},\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        _index2.default.ajax(cfg);\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],53:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    Logout: function Logout() {\n        _index.Guard.raise(\"Pure class\");\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],54:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Username: '',\n            Password: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (callbacks && typeof callbacks.pending == \"function\") callbacks.pending();\n    },\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        var origBeforeSend = cfg.beforeSend;\n        cfg.beforeSend = function (xhr) {\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\n\n            if (typeof origBeforeSend == \"function\") origBeforeSend(xhr);\n        };\n\n        _index2.default.ajax(cfg);\n    },\n    __encodeBase64: function __encodeBase64(val) {\n        var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n        input = val;\n        var base64 = \"\";\n        var hex = \"\";\n        var chr1,\n            chr2,\n            chr3 = \"\";\n        var enc1,\n            enc2,\n            enc3,\n            enc4 = \"\";\n        var i = 0;\n\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return base64;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],55:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.FacebookAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Url_code: '',\n            type_code: '',\n            scope: '',\n            Url_token: '',\n            type_token: '',\n            access_token: '',\n            app_id: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (this.Authenticated) {\n            return;\n        }\n\n        var provider = this;\n        provider.configuration.stateCallbacks = callbacks || {};\n\n        _index2.default.ajax({\n            url: this.configuration.Url_code,\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(data) {\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\") provider.configuration.stateCallbacks.pending(data);\n                provider._processRequestToken(data);\n                provider.Authenticated = true;\n            },\n            error: function error() {\n                if (typeof provider.configuration.stateCallbacks.error == \"function\") provider.configuration.stateCallbacks.error(arguments);\n            }\n        });\n    },\n    Logout: function Logout() {\n        this.Authenticated = false;\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        if (cfg.url.indexOf('access_token=') === -1) {\n            if (cfg.url && this.Authenticated) {\n                var andChar = '?';\n                if (cfg.url.indexOf(andChar) > 0) andChar = '&';\n\n                if (this.configuration.access_token) cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\n            }\n        }\n\n        _index2.default.ajax(cfg);\n    },\n    _processRequestToken: function _processRequestToken(verification_data) {\n        var provider = this;\n\n        _index2.default.ajax({\n            url: provider.configuration.Url_token,\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(result) {\n                provider.configuration.access_token = result.access_token;\n                if (typeof provider.configuration.stateCallbacks.success == \"function\") provider.configuration.stateCallbacks.success(result);\n            },\n            error: function error(obj) {\n                var data = eval('(' + obj.responseText + ')');\n                if (data.error) {\n                    if (data.error.message == \"authorization_pending\") {\n                        setTimeout(function () {\n                            provider._processRequestToken(verification_data);\n                        }, 2000);\n                    } else if (\"authorization_declined\") {\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\") provider.configuration.stateCallbacks.abort(arguments);\n                    }\n                }\n            }\n        });\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],56:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Entity = exports.Event = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EventSubscriber = _index2.default.Class.define(\"EventSubscriber\", null, null, {\n    constructor: function constructor(handler, state, thisArg) {\n        /// <param name=\"handler\" type=\"Function\">\n        ///     <summary>event handler</summary>\n        ///     <signature>\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\n        ///         <param name=\"eventData\" type=\"EventData\" />\n        ///         <param name=\"state\" type=\"Object\" />\n        ///     </signature>\n        /// </param>\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\n        ///\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\n        this.handler = handler;\n        this.state = state;\n        this.thisArg = thisArg;\n    },\n    handler: {},\n    state: {},\n    thisArg: {}\n});\n\n_index2.default.Event = _index2.default.Class.define(\"$data.Event\", null, null, {\n    constructor: function constructor(name, sender) {\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\n        var subscriberList = null;\n        var parentObject = sender;\n\n        function detachHandler(list, handler) {\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\n            ///<param name=\"handler\" type=\"Function\" />\n            list.forEach(function (item, index) {\n                if (item.handler == handler) {\n                    list.splice(index, 1);\n                }\n            });\n        }\n\n        this.attach = function (handler, state, thisArg) {\n            ///<param name=\"handler\" type=\"Function\">\n            ///<signature>\n            ///<param name=\"sender\" type=\"Object\" />\n            ///<param name=\"eventData\" type=\"Object\" />\n            ///<param name=\"state\" type=\"Object\" />\n            ///</signature>\n            ///</param>\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\n            if (!subscriberList) {\n                subscriberList = [];\n            }\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\n        };\n        this.detach = function (handler) {\n            detachHandler(subscriberList, handler);\n        };\n        this.fire = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n        };\n        this.fireCancelAble = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            var isValid = true;\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n            return isValid;\n        };\n    }\n});\n\nvar EventData = _index2.default.Class.define(\"EventData\", null, null, {\n    eventName: {}\n});\n\nvar PropertyChangeEventData = _index2.default.Class.define(\"PropertyChangeEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {}\n});\n\nvar PropertyValidationEventData = _index2.default.Class.define(\"PropertyValidationEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue, errors) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n        this.errors = errors;\n        this.cancel = false;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {},\n    errors: {},\n    cancel: {}\n});\n\n_index2.default.Entity = _index2.default.Class.define(\"$data.Entity\", null, null, {\n    constructor: function constructor(initData, newInstanceOptions) {\n        /// <description>\n        ///     This class provide a light weight, object-relational interface between\n        ///     your javascript code and database.\n        /// </description>\n        ///\n        /// <signature>\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\n        ///     <example>\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\n        ///         $news.context.Categories.add(category);\n        ///     </example>\n        /// </signature>\n        ///\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\n        /// <field name=\"entityState\" type=\"Integer\"></field>\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\n\n        this.initData = {};\n        var thisType = this.getType();\n        if (thisType.__copyPropertiesToInstance) {\n            _index2.default.typeSystem.writePropertyValues(this);\n        }\n\n        var ctx = null;\n        this.context = ctx;\n        if (\"setDefaultValues\" in thisType) {\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\n                if (!initData || Object.keys(initData).length < 1) {\n                    initData = thisType.setDefaultValues(initData);\n                }\n            }\n        }\n\n        if ((typeof initData === \"undefined\" ? \"undefined\" : _typeof(initData)) === \"object\") {\n            var typeMemDefs = thisType.memberDefinitions;\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\n\n            for (var i in initData) {\n                if (memDefNames.indexOf(i) > -1) {\n                    var memberDef = typeMemDefs.getMember(i);\n                    var type = _index.Container.resolveType(memberDef.type);\n                    var value = initData[i];\n\n                    if (memberDef.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                        this.initData[i] = value;\n                    } else {\n                        if (newInstanceOptions && newInstanceOptions.converters) {\n                            var converter = newInstanceOptions.converters[_index.Container.resolveName(type)];\n                            if (converter) value = converter(value);\n                        }\n\n                        this.initData[i] = _index.Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\n                    }\n                }\n            }\n        }\n\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\n        }\n\n        this.changedProperties = undefined;\n        this.entityState = undefined;\n\n        if (thisType.inheritsFrom != _index2.default.Entity) {\n            this[\"@odata.type\"] = '#' + thisType.fullName;\n        }\n    },\n    toString: function toString() {\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\n        /// <returns type=\"String\"/>\n\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\";\n    },\n    toJSON: function toJSON() {\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\n        /// <returns type=\"Object\">JSON representation</returns>\n\n        var result = {};\n        var self = this;\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            if (self[memDef.name] instanceof Date && memDef.type && _index.Container.resolveType(memDef.type) === _index2.default.DateTimeOffset) {\n                result[memDef.name] = new _index2.default.DateTimeOffset(self[memDef.name]);\n            } else {\n                result[memDef.name] = self[memDef.name];\n            }\n        });\n        return result;\n    },\n    equals: function equals(entity) {\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\n\n        if (entity.getType() !== this.getType()) {\n            return false;\n        }\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\n        for (var i = 0; i < entityPk.length; i++) {\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    propertyChanging: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanging) this._propertyChanging = new _index2.default.Event('propertyChanging', this);\n\n            return this._propertyChanging;\n        },\n        set: function set(value) {\n            this._propertyChanging = value;\n        }\n    },\n\n    propertyChanged: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanged) this._propertyChanged = new _index2.default.Event('propertyChanged', this);\n\n            return this._propertyChanged;\n        },\n        set: function set(value) {\n            this._propertyChanged = value;\n        }\n    },\n\n    propertyValidationError: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyValidationError) this._propertyValidationError = new _index2.default.Event('propertyValidationError', this);\n\n            return this._propertyValidationError;\n        },\n        set: function set(value) {\n            this._propertyValidationError = value;\n        }\n    },\n\n    // protected\n    storeProperty: function storeProperty(memberDefinition, value) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n\n        if (memberDefinition.concurrencyMode !== _index2.default.ConcurrencyMode.Fixed) {\n            value = _index.Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\n        }\n\n        var eventData = null;\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\n            var origValue = this[memberDefinition.name];\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\n            if (this._propertyChanging) this.propertyChanging.fire(eventData);\n        }\n\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\n            var errors = _index2.default.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\n            if (errors.length > 0) {\n                var origValue = this[memberDefinition.name];\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\n\n                if (this._propertyValidationError) this.propertyValidationError.fire(errorEventData);\n                if (\"instancePropertyValidationError\" in this.constructor) this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\n\n                if (errorEventData.cancel == true) return;\n            }\n        }\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            this[backingFieldName] = value;\n        } else {\n            this.initData[memberDefinition.name] = value;\n        }\n        this.isValidated = false;\n\n        if (memberDefinition.monitorChanges != false && this.entityState == _index2.default.EntityState.Unchanged) this.entityState = _index2.default.EntityState.Modified;\n\n        this._setPropertyChanged(memberDefinition);\n\n        if (memberDefinition.monitorChanges != false) {\n            //if (!this.changedProperties) {\n            //    this.changedProperties = [];\n            //}\n\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\n            //    this.changedProperties.push(memberDefinition);\n\n            if (this._propertyChanged) this.propertyChanged.fire(eventData);\n\n            //TODO mixin framework\n            if (\"instancePropertyChanged\" in this.constructor) {\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\n            }\n        }\n    },\n    _setPropertyChanged: function _setPropertyChanged(memberDefinition) {\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\n            if (!this.changedProperties) {\n                this.changedProperties = [];\n            }\n\n            if (!this.changedProperties.some(function (memDef) {\n                return memDef.name == memberDefinition.name;\n            })) this.changedProperties.push(memberDefinition);\n        }\n    },\n\n    // protected\n    retrieveProperty: function retrieveProperty(memberDefinition) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            return this[backingFieldName];\n        } else {\n            return this.initData[memberDefinition.name];\n        }\n    },\n\n    // protected\n    getProperty: function getProperty(memberDefinition, callback, tran) {\n        /// <summary>Retrieve value of member</summary>\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"callback\" type=\"Function\">\n        ///     <signature>\n        ///         <param name=\"value\" />\n        ///     </signature>\n        /// </param>\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\n\n        callback = _index2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        if (this[memberDefinition.name] != undefined) {\n            if (tran instanceof _index2.default.Transaction) callback.success(this[memberDefinition.name], tran);else callback.success(this[memberDefinition.name]);\n            return;\n        }\n\n        var context = this.context;\n        if (!this.context) {\n            try {\n                var that = this;\n                var storeToken = this.storeToken || this.getType().storeToken;\n                if (storeToken && typeof storeToken.factory === 'function') {\n                    var ctx = storeToken.factory();\n                    return ctx.onReady().then(function (context) {\n                        return context.loadItemProperty(that, memberDefinition, callback);\n                    });\n                }\n            } catch (e) {}\n\n            _index.Guard.raise(new _index.Exception('Entity not in context', 'Invalid operation'));\n        } else {\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\n        }\n    },\n    // protected\n    setProperty: function setProperty(memberDefinition, value, callback, tran) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n        /// <param name=\"callback\" type=\"Function\">done</param>\n        this[memberDefinition.name] = value;\n\n        //callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        callback.success(this[memberDefinition.name]);\n        return pHandler.getPromise();\n    },\n\n    isValid: function isValid() {\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\n        /// <returns type=\"Boolean\" />\n\n        if (!this.isValidated) {\n            this.ValidationErrors = _index2.default.Validation.Entity.ValidateEntity(this);\n            this.isValidated = true;\n        }\n        return this.ValidationErrors.length == 0;\n    },\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\n    ValidationErrors: {\n        dataType: Array,\n        elementType: _index2.default.Validation.ValidationError,\n        storeOnObject: true,\n        monitorChanges: true,\n        notMapped: true,\n        enumerable: false\n    },\n\n    resetChanges: function resetChanges() {\n        /// <summary>reset changes</summary>\n\n        delete this._changedProperties;\n    },\n\n    changedProperties: {\n        dataType: Array,\n        elementType: _index.MemberDefinition,\n        storeOnObject: true,\n        monitorChanges: false,\n        notMapped: true,\n        enumerable: false\n    },\n\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\n    //,\n\n    //onReady: function (callback) {\n    //    this.__onReadyList = this.__onReadyList || [];\n    //    this.__onReadyList.push(callback);\n    //},\n\n    remove: function remove() {\n        if (_index2.default.ItemStore && 'EntityInstanceRemove' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRemove.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    save: function save() {\n        if (_index2.default.ItemStore && 'EntityInstanceSave' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceSave.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    refresh: function refresh() {\n        if (_index2.default.ItemStore && 'EntityInstanceRefresh' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRefresh.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\n\n    getFieldUrl: function getFieldUrl(field) {\n        if (this.context) {\n            return this.context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\n            var context = this.getType().storeToken.factory();\n            return context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken) {\n            try {\n                var ctx = _index2.default.ItemStore._getContextPromise('default', this.getType());\n                if (ctx instanceof _index2.default.EntityContext) {\n                    return ctx.getFieldUrl(this, field);\n                }\n            } catch (e) {}\n        }\n        return '#';\n    }\n}, {\n    //create get_[property] and set_[property] functions for properties\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\n    //copy public properties to current instance\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\n\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (_index2.default.ItemStore && 'EntityInheritedTypeProcessor' in _index2.default.ItemStore) _index2.default.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\n\n        //default value setter method factory\n        type.defaultValues = {};\n\n        type.memberDefinitions.asArray().forEach(function (pd) {\n            if (pd.hasOwnProperty(\"defaultValue\")) {\n                type.defaultValues[pd.name] = pd.defaultValue;\n            }\n        });\n\n        if (Object.keys(type.defaultValues).length > 0) {\n            type.setDefaultValues = function (initData, instance) {\n                initData = initData || {};\n                var dv = type.defaultValues;\n                for (var n in dv) {\n                    if (!(n in initData)) {\n                        var value = dv[n];\n                        if (\"function\" === typeof value) {\n                            initData[n] = dv[n](n, instance);\n                        } else {\n                            initData[n] = dv[n];\n                        }\n                    }\n                }\n                return initData;\n            };\n        }\n    },\n\n    //Type Events\n    addEventListener: function addEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            this[delegateName] = new _index2.default.Event(eventName, this);\n        }\n        this[delegateName].attach(fn);\n    },\n    removeEventListener: function removeEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].detach(fn);\n    },\n    raiseEvent: function raiseEvent(eventName, data) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].fire(data);\n    },\n\n    getFieldNames: function getFieldNames() {\n        return this.memberDefinitions.getPublicMappedPropertyNames();\n    },\n\n    'from$data.Object': function from$dataObject(value, type, t, options) {\n        if (!_index.Guard.isNullOrUndefined(value)) {\n            var newInstanceOptions;\n            if (options && options.converters) {\n                newInstanceOptions = {\n                    converters: options.converters\n                };\n            }\n\n            return new this(value, newInstanceOptions);\n        } else {\n            return value;\n        }\n    }\n\n});\n\n_index2.default.define = function (name, container, definition) {\n    if (container && !(container instanceof _index2.default.ContainerClass)) {\n        definition = container;\n        container = undefined;\n    }\n    if (!definition) {\n        throw new Error(\"json object type is not supported yet\");\n    }\n    var _def = {};\n    var hasKey = false;\n    var keyFields = [];\n    Object.keys(definition).forEach(function (fieldName) {\n        var propDef = definition[fieldName];\n        if ((typeof propDef === \"undefined\" ? \"undefined\" : _typeof(propDef)) === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\n\n            _def[fieldName] = propDef;\n            if (propDef.key) {\n                keyFields.push(propDef);\n            }\n\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\n                propDef.notMapped = true;\n                propDef.storeOnObject = true;\n            }\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\n                propDef.set = function () {};\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\n                propDef.get = function () {};\n            }\n        } else {\n            _def[fieldName] = { type: propDef };\n        }\n    });\n\n    if (keyFields.length < 1) {\n        var keyProp;\n        switch (true) {\n            case \"id\" in _def:\n                keyProp = \"id\";\n                break;\n            case \"Id\" in _def:\n                keyProp = \"Id\";\n                break;\n            case \"ID\" in _def:\n                keyProp = \"ID\";\n                break;\n        }\n        if (keyProp) {\n            _def[keyProp].key = true;\n            var propTypeName = _index2.default.Container.resolveName(_def[keyProp].type);\n            _def[keyProp].computed = true;\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\n            //}\n        } else {\n                _def.Id = { type: \"int\", key: true, computed: true };\n            }\n    }\n\n    var entityType = _index2.default.Entity.extend(name, container, _def);\n    return entityType;\n};\n_index2.default.$data = _index2.default.implementation = function (name) {\n    return _index.Container.resolveType(name);\n};\n\nvar Event = exports.Event = _index2.default.Event;\nvar Entity = exports.Entity = _index2.default.Entity;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":44}],57:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\n    defaultMode: 'Default',\n    AllChanged: function AllChanged(data) {\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            data._setPropertyChanged(memDefs[i]);\n        }\n        data.entityState = _index2.default.EntityState.Modified;\n    },\n    KeepChanges: function KeepChanges(data) {\n        if (data.changedProperties && data.changedProperties.length > 0) {\n            data.entityState = _index2.default.EntityState.Modified;\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n        }\n    },\n    Default: function Default(data) {\n        data.entityState = _index2.default.EntityState.Unchanged;\n        data.changedProperties = undefined;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],58:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n\n    _index2.default.defaults = _index2.default.defaults || {};\n    _index2.default.defaults.defaultDatabaseName = 'JayDataDefault';\n    _index2.default.defaults.enableRelatedEntityReadMethods = true;\n    _index2.default.defaults.relatedEntityReadMethodPrefix = 'get';\n    _index2.default.defaults.relatedEntityProxyPrefix = '$relatedProxy';\n})();\n\n_index2.default.Class.define('$data.StorageModel', null, null, {\n    constructor: function constructor() {\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\n        this.ComplexTypes = [];\n        this.Enums = [];\n        this.Associations = [];\n    },\n    LogicalType: {},\n    LogicalTypeName: {},\n    PhysicalType: {},\n    PhysicalTypeName: {},\n    EventHandlers: {},\n    TableName: {},\n    TableOptions: { value: undefined },\n    ComplexTypes: {},\n    Enums: {},\n    Associations: {},\n    ContextType: {},\n    Roles: {}\n}, null);\n_index2.default.Class.define('$data.Association', null, null, {\n    constructor: function constructor(initParam) {\n        if (initParam) {\n            this.From = initParam.From;\n            this.FromType = initParam.FromType;\n            this.FromMultiplicity = initParam.FromMultiplicity;\n            this.FromPropertyName = initParam.FromPropertyName;\n            this.To = initParam.To;\n            this.ToType = initParam.ToType;\n            this.ToMultiplicity = initParam.ToMultiplicity;\n            this.ToPropertyName = initParam.ToPropertyName;\n        }\n    },\n    From: {},\n    FromType: {},\n    FromMultiplicity: {},\n    FromPropertyName: {},\n    To: {},\n    ToType: {},\n    ToMultiplicity: {},\n    ToPropertyName: {},\n    ReferentialConstraint: {}\n}, null);\n_index2.default.Class.define('$data.ComplexType', _index2.default.Association, null, {}, null);\n\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\n_index2.default.Class.define('$data.EntityContext', null, null, {\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\n    constructor: function constructor(storageProviderCfg) {\n        if (_index2.default.ItemStore && 'ContextRegister' in _index2.default.ItemStore) _index2.default.ItemStore.ContextRegister.apply(this, arguments);\n\n        if (storageProviderCfg.queryCache) this.queryCache = storageProviderCfg.queryCache;\n\n        if (\"string\" === typeof storageProviderCfg) {\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\n                storageProviderCfg = {\n                    name: \"oData\",\n                    oDataServiceHost: storageProviderCfg\n                };\n            } else {\n                storageProviderCfg = {\n                    name: \"local\",\n                    databaseName: storageProviderCfg\n                };\n            }\n        }\n\n        if (\"provider\" in storageProviderCfg) {\n            storageProviderCfg.name = storageProviderCfg.provider;\n        }\n\n        //Initialize properties\n        this.lazyLoad = false;\n        this.trackChanges = false;\n        this._entitySetReferences = {};\n        this._storageModel = [];\n\n        var ctx = this;\n        ctx._isOK = false;\n\n        var origSuccessInitProvider = this._successInitProvider;\n        this._successInitProvider = function (errorOrContext) {\n            if (errorOrContext instanceof _index2.default.EntityContext) {\n                origSuccessInitProvider(ctx);\n            } else {\n                origSuccessInitProvider(ctx, errorOrContext);\n            }\n        };\n\n        this._storageModel.getStorageModel = function (typeName) {\n            var name = _index.Container.resolveName(typeName);\n            return ctx._storageModel[name];\n        };\n        if (typeof storageProviderCfg.name === 'string') {\n            var tmp = storageProviderCfg.name;\n            storageProviderCfg.name = [tmp];\n        }\n        var i = 0,\n            providerType;\n        var providerList = [].concat(storageProviderCfg.name);\n        var callBack = _index2.default.PromiseHandlerBase.createCallbackSettings({ success: this._successInitProvider, error: this._successInitProvider });\n\n        this._initStorageModelSync();\n        this._initStorageModelNavigationProperties();\n        ctx._initializeEntitySets(ctx.getType());\n\n        _index2.default.StorageProviderLoader.load(providerList, {\n            success: function success(providerType) {\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\n                ctx.storageProvider.setContext(ctx);\n                ctx.stateManager = new _index2.default.EntityStateManager(ctx);\n\n                var contextType = ctx.getType();\n                if (providerType.name in contextType._storageModelCache) {\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\n                } else {\n                    _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\n                    ctx._initializeStorageModel();\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\n                }\n                _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\n\n                //ctx._initializeEntitySets(contextType);\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\n\n                //ctx._isOK = false;\n                ctx._initializeStore(callBack);\n            },\n            error: function error() {\n                callBack.error('Provider fallback failed!');\n            }\n        });\n\n        this.addEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                this[delegateName] = new _index2.default.Event(eventName, this);\n            }\n            this[delegateName].attach(fn);\n        };\n\n        this.removeEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].detach(fn);\n        };\n\n        this.raiseEvent = function (eventName, data) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].fire(data);\n        };\n\n        this.ready = this.onReady({\n            success: _index2.default.defaultSuccessCallback,\n            error: function error() {\n                if (_index2.default.PromiseHandler !== _index2.default.PromiseHandlerBase) {\n                    _index2.default.defaultErrorCallback.apply(this, arguments);\n                } else {\n                    _index2.default.Trace.error(arguments);\n                }\n            }\n        });\n    },\n    beginTransaction: function beginTransaction() {\n        var tables = null;\n        var callBack = null;\n        var isWrite = false;\n\n        function readParam(value) {\n            if (_index.Guard.isNullOrUndefined(value)) return;\n\n            if (typeof value === 'boolean') {\n                isWrite = value;\n            } else if (Array.isArray(value)) {\n                tables = value;\n            } else {\n                callBack = value;\n            }\n        }\n\n        readParam(arguments[0]);\n        readParam(arguments[1]);\n        readParam(arguments[2]);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        callBack = pHandler.createCallback(callBack);\n\n        //callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\n        this.storageProvider._beginTran(tables, isWrite, callBack);\n\n        return pHandler.getPromise();\n    },\n    _isReturnTransaction: function _isReturnTransaction(transaction) {\n        return transaction instanceof _index2.default.Base || transaction === 'returnTransaction';\n    },\n    _applyTransaction: function _applyTransaction(scope, cb, args, transaction, isReturnTransaction) {\n        if (isReturnTransaction === true) {\n            if (transaction instanceof _index2.default.Transaction) {\n                Array.prototype.push.call(args, transaction);\n                cb.apply(scope, args);\n            } else {\n                this.beginTransaction(function (tran) {\n                    Array.prototype.push.call(args, tran);\n                    cb.apply(scope, args);\n                });\n            }\n        } else {\n            cb.apply(scope, args);\n        }\n    },\n\n    getDataType: function getDataType(dataType) {\n        // Obsolate\n        if (typeof dataType == \"string\") {\n            var memDef_dataType = this[dataType];\n            if (memDef_dataType === undefined || memDef_dataType === null) {\n                memDef_dataType = eval(dataType);\n            }\n            return memDef_dataType;\n        }\n        return dataType;\n    },\n    _initializeEntitySets: function _initializeEntitySets(ctor) {\n\n        for (var i = 0, l = this._storageModel.length; i < l; i++) {\n            var storageModel = this._storageModel[i];\n            if (storageModel.BaseType) continue;\n            this[storageModel.ItemName] = new _index2.default.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\n            var sm = this[storageModel.ItemName];\n            sm.name = storageModel.ItemName;\n            sm.tableName = storageModel.TableName;\n            sm.tableOptions = storageModel.TableOptions;\n            sm.eventHandlers = storageModel.EventHandlers;\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\n\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\n        }\n    },\n    _initializeStore: function _initializeStore(callBack) {\n        if (this.storageProvider) {\n            this.storageProvider.initializeStore(callBack);\n        }\n    },\n    _createNavPropStorageModel: function _createNavPropStorageModel(logicalType) {\n        var ctx = this;\n        logicalType.memberDefinitions.getPublicMappedProperties().filter(function (it) {\n            return it.inverseProperty;\n        }).forEach(function (memDef) {\n            var item = _index.Container.resolveType(memDef.elementType || memDef.dataType);\n            if (!ctx._storageModel.filter(function (it) {\n                return it.LogicalType == item;\n            })[0]) {\n                var storageModel = new _index2.default.StorageModel();\n                storageModel.TableName = memDef.name;\n                storageModel.TableOptions = item.tableOptions;\n                storageModel.ItemName = item.name;\n                storageModel.LogicalType = item;\n                storageModel.LogicalTypeName = item.name;\n                storageModel.PhysicalTypeName = _index2.default.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\n                storageModel.ContextType = ctx.getType();\n\n                ctx._storageModel.push(storageModel);\n                var name = _index.Container.resolveName(item);\n                ctx._storageModel[name] = storageModel;\n\n                ctx._createNavPropStorageModel(storageModel.LogicalType);\n            }\n        });\n    },\n    _initStorageModelNavigationProperties: function _initStorageModelNavigationProperties() {\n        for (var i = 0; i < this._storageModel.length; i++) {\n            var storageModel = this._storageModel[i];\n            this._createNavPropStorageModel(storageModel.LogicalType);\n        }\n    },\n    _initStorageModelSync: function _initStorageModelSync() {\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        for (var i = 0; i < _memDefArray.length; i++) {\n            var item = _memDefArray[i];\n            if ('dataType' in item) {\n                var itemResolvedDataType = _index.Container.resolveType(item.dataType);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    var storageModel = new _index2.default.StorageModel();\n                    storageModel.TableName = item.tableName || item.name;\n                    storageModel.TableOptions = item.tableOptions;\n                    storageModel.ItemName = item.name;\n                    storageModel.LogicalType = elementType;\n                    storageModel.LogicalTypeName = elementType.name;\n                    storageModel.PhysicalTypeName = _index2.default.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\n                    storageModel.ContextType = this.getType();\n                    storageModel.Roles = item.roles;\n                    if (item.indices) {\n                        storageModel.indices = item.indices;\n                    }\n                    if (item.beforeCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\n                    }\n                    if (item.beforeRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\n                    }\n                    if (item.beforeUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\n                    }\n                    if (item.beforeDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\n                    }\n                    if (item.afterCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\n                    }\n                    if (item.afterRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterRead = item.afterRead;\n                    }\n                    if (item.afterUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\n                    }\n                    if (item.afterDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\n                    }\n                    this._storageModel.push(storageModel);\n                    var name = _index.Container.resolveName(elementType);\n                    this._storageModel[name] = storageModel;\n\n                    if (elementType.inheritedTo) {\n                        var ctx = this;\n                        elementType.inheritedTo.forEach(function (type) {\n                            var storageModel = new _index2.default.StorageModel();\n                            storageModel.TableName = item.tableName || item.name;\n                            storageModel.TableOptions = item.tableOptions;\n                            storageModel.ItemName = item.name;\n                            storageModel.LogicalType = type;\n                            storageModel.LogicalTypeName = type.name;\n                            storageModel.PhysicalTypeName = _index2.default.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\n                            storageModel.ContextType = ctx.getType();\n                            storageModel.BaseType = elementType;\n\n                            ctx._storageModel.push(storageModel);\n                            var name = _index.Container.resolveName(type);\n                            ctx._storageModel[name] = storageModel;\n                        });\n                    }\n                }\n            }\n        }\n    },\n    _inheritanceMemberDefinitions: function _inheritanceMemberDefinitions(type, memdefs) {\n        var self = this;\n        if (type.inheritedTo) {\n            type.inheritedTo.forEach(function (it) {\n                memdefs = self._inheritanceMemberDefinitions(it, memdefs.concat(it.memberDefinitions.getPublicMappedProperties()));\n            });\n        }\n        return memdefs;\n    },\n    _buildDbInstanceDefinition: function _buildDbInstanceDefinition(storageModel, dbEntityInstanceDefinition) {\n        storageModel.Associations = storageModel.Associations || [];\n        storageModel.ComplexTypes = storageModel.ComplexTypes || [];\n        storageModel.Enums = storageModel.Enums || [];\n        var memberDefinitions = this._inheritanceMemberDefinitions(storageModel.LogicalType, storageModel.LogicalType.memberDefinitions.getPublicMappedProperties());\n        for (var j = 0; j < memberDefinitions.length; j++) {\n            var memDef = memberDefinitions[j];\n            ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\n\n            var memDefResolvedDataType = _index.Container.resolveType(memDef.dataType);\n\n            if ((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1 || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) && _index.Guard.isNullOrUndefined(memDef.inverseProperty)) {\n                //copy member definition\n                var t = JSON.parse(JSON.stringify(memDef));\n                //change datatype to resolved type\n                t.dataType = memDefResolvedDataType;\n                dbEntityInstanceDefinition[memDef.name] = t;\n\n                if (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) {\n                    this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                }\n\n                continue;\n            }\n\n            this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\n\n            if ((memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) && memDef.inverseProperty && memDef.inverseProperty !== '$$unbound') {\n                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n            } else {\n                if (memDef.inverseProperty) {\n                    if (memDef.inverseProperty === '$$unbound') {\n                        //member definition is navigation but not back reference\n                        if (memDefResolvedDataType === _index2.default.Array) {\n                            this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                        } else {\n                            this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                        }\n                    } else {\n                        //member definition is navigation property one..one or one..many case\n                        var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\n                        if (fields) {\n                            if (fields.elementType) {\n                                //member definition is one..many connection\n                                var referealResolvedType = _index.Container.resolveType(fields.elementType);\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            } else {\n                                //member definition is one..one connection\n                                this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            }\n                        } else {\n                            if (typeof intellisense === 'undefined') {\n                                _index.Guard.raise(new _index.Exception('Inverse property not valid'));\n                            }\n                        }\n                    }\n                } else {\n                    //member definition is a complex type\n                    this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                }\n            }\n        }\n    },\n    _initializeStorageModel: function _initializeStorageModel() {\n\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        if (typeof intellisense !== 'undefined') return;\n\n        for (var i = 0; i < this._storageModel.length; i++) {\n            var storageModel = this._storageModel[i];\n\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\n            var dbEntityInstanceDefinition = {};\n            this._buildDbInstanceDefinition(storageModel, dbEntityInstanceDefinition);\n\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\n            var dbEntityClassDefinition = {};\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\n\n            //create physical type\n            //TODO\n            storageModel.PhysicalType = _index2.default.Class.define(storageModel.PhysicalTypeName, _index2.default.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\n        }\n    },\n    _initializeActions: function _initializeActions(es, ctor, esDef) {\n        if (esDef && esDef.actions) {\n            var actionKeys = Object.keys(esDef.actions);\n            for (var i = 0; i < actionKeys.length; i++) {\n                var actionName = actionKeys[i];\n                var action = esDef.actions[actionName];\n                if (typeof action === 'function') {\n                    es[actionName] = action;\n                } else {\n                    var actionDef = _index2.default.MemberDefinition.translateDefinition(action, actionName, ctor);\n                    if (actionDef instanceof _index2.default.MemberDefinition && actionDef.kind === _index2.default.MemberTypes.method) {\n                        es[actionName] = actionDef.method;\n                    }\n                }\n            }\n        }\n    },\n    _buildDbType_navigationPropertyComplite: function _buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel) {\n        if (!memDef.inverseProperty) {\n            var refMemDefs = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                var refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === _index.Container.resolveType(storageModel.LogicalType)) refMemDefs.push(m);\n                    }\n                }\n            } else {\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.elementType && m.inverseProperty == memDef.name && _index.Container.resolveType(m.elementType) === storageModel.LogicalType) refMemDefs.push(m);else if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === storageModel.LogicalType) refMemDefs.push(m);\n                    }\n                }\n            }\n            if (refMemDefs) {\n                if (refMemDefs.length > 1) {\n                    if (typeof intellisense !== 'undefined') {\n                        _index.Guard.raise(new _index.Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + _index.Container.resolveName(storageModel.LogicalType)));\n                    }\n                }\n                var refMemDef = refMemDefs.pop();\n                if (refMemDef) {\n                    memDef.inverseProperty = refMemDef.name;\n                }\n            }\n        } else {\n            var refStorageModel = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n            } else {\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n            }\n\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n            if (p) {\n                if (p.inverseProperty) {\n                    if (p.inverseProperty != memDef.name) {\n                        if (typeof intellisense === 'undefined') {\n                            _index.Guard.raise(new _index.Exception('Inverse property mismatch'));\n                        }\n                    }\n                } else {\n                    p.inverseProperty = memDef.name;\n                }\n            }\n        }\n    },\n    _buildDbType_generateConvertToFunction: function _buildDbType_generateConvertToFunction(storageModel) {\n        return function (instance) {\n            return instance;\n        };\n    },\n    _buildDbType_modifyInstanceDefinition: function _buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_modifyClassDefinition: function _buildDbType_modifyClassDefinition(classDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_addComplexTypePropertyDefinition: function _buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, _index2.default.MemberTypes.complexProperty);\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\n        storageModel.ComplexTypes[memDef.name] = complexType;\n        storageModel.ComplexTypes.push(complexType);\n    },\n    _buildDbType_Collection_OneManyDefinition: function _buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.elementType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\n        var association = this._addAssociationElement(memDef.definedBy, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneManyDefinition: function _buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\n        var association = this._addAssociationElement(memDef.definedBy, associationType, memDef.name, refereedType, \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneOneDefinition: function _buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n        if (!refereedMemberDefinition.required && !memDef.required) {\n            if (typeof intellisense === 'undefined') {\n                if (typeof intellisense === 'undefined') {\n                    _index.Guard.raise(new _index.Exception('In one to one connection, one side must required!', 'One to One connection', memDef));\n                }\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n\n        var association = this._addAssociationElement(memDef.definedBy, memDef.required ? \"0..1\" : \"1\", memDef.name, refereedStorageModel.LogicalType, memDef.required ? \"1\" : \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _addNavigationPropertyDefinition: function _addNavigationPropertyDefinition(definition, member, associationName, kind) {\n        var t = JSON.parse(JSON.stringify(member));\n        t.dataType = _index2.default.EntitySet;\n        t.notMapped = true;\n        t.kind = kind ? kind : _index2.default.MemberTypes.navProperty;\n        t.association = associationName;\n        definition[member.name] = t;\n    },\n    _addAssociationElement: function _addAssociationElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.Association({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _createComplexElement: function _createComplexElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.ComplexType({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _build_EnumDefinition: function _build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\n        storageModel.Enums.push(memDefResolvedDataType);\n\n        var typeName = _index.Container.resolveName(memDefResolvedDataType);\n        var converterGroups = this.storageProvider.fieldConverter;\n\n        var createEnumConverter = function createEnumConverter(converterGroup) {\n            converterGroup[typeName] = function (value) {\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\n            };\n        };\n\n        for (var i in converterGroups) {\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\n                createEnumConverter(converterGroups[i]);\n                if (_index2.default.SqLiteFieldMapping) _index2.default.SqLiteFieldMapping[typeName] = 'INTEGER';\n            }\n        }\n    },\n\n    _successInitProvider: function _successInitProvider(context, error) {\n        if (context instanceof _index2.default.EntityContext && context._isOK !== undefined) {\n            if (!error) {\n                context._isOK = true;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].success(context);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            } else {\n                context._isOK = error;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].error(error);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            }\n        }\n    },\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\n    onReady: function onReady(fn) {\n        /// <signature>\n        ///     <summary>\n        ///\n        ///     </summary>\n        ///     <param name=\"successCallback\" type=\"Function\">\n        ///         <summary>Success callback</summary>\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\n        ///     </param>\n        ///     <returns type=\"\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\n        ///     </summary>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        var pHandler = new _index2.default.PromiseHandler();\n        var callBack = pHandler.createCallback(fn);\n        if (this._isOK === true) {\n            callBack.success(this);\n        } else if (this._isOK !== false) {\n            callBack.error(this._isOK);\n        } else {\n            this.onReadyFunction = this.onReadyFunction || [];\n            this.onReadyFunction.push(callBack);\n        }\n\n        return pHandler.getPromise();\n    },\n    ready: { type: _index2.default.Promise },\n    getEntitySetFromElementType: function getEntitySetFromElementType(elementType) {\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"Function\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"String\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        var result = this._entitySetReferences[elementType];\n        if (!result) {\n            try {\n                result = this._entitySetReferences[eval(elementType).name];\n            } catch (ex) {}\n        }\n        if (!result && elementType.isAssignableTo && elementType.isAssignableTo(_index2.default.Entity)) {\n            if (!this._storageModel[elementType.name]) {\n                var storageModel = new _index2.default.StorageModel();\n                storageModel.TableName = elementType.name;\n                storageModel.ItemName = elementType.name;\n                storageModel.LogicalType = elementType;\n                storageModel.LogicalTypeName = elementType.name;\n\n                var dbEntityInstanceDefinition = {};\n                this._buildDbInstanceDefinition(storageModel, dbEntityInstanceDefinition);\n\n                var dbEntityClassDefinition = {};\n                dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\n\n                storageModel.PhysicalTypeName = _index2.default.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\n                storageModel.PhysicalType = _index2.default.Class.define(storageModel.PhysicalTypeName, _index2.default.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\n                storageModel.ContextType = this.getType();\n\n                this._storageModel.push(storageModel);\n                var name = _index.Container.resolveName(elementType);\n                this._storageModel[name] = storageModel;\n            }\n\n            result = this._entitySetReferences[elementType.name] = new _index2.default.EntitySet(elementType, this, elementType.name);\n            result.tableName = storageModel.TableName;\n        }\n\n        //console.log(Object.keys(this._entitySetReferences), Object.keys(this._storageModel), elementType.name);\n        return result;\n    },\n    executeQuery: function executeQuery(queryable, callBack, transaction) {\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        query.transaction = transaction instanceof _index2.default.Transaction ? transaction : undefined;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        var that = this;\n        var clbWrapper = {};\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\n\n        var sets = query.getEntitySets();\n\n        var authorizedFn = function authorizedFn() {\n            var ex = true;\n            var wait = false;\n            var ctx = that;\n\n            var readyFn = function readyFn(cancel) {\n                if (cancel === false) ex = false;\n\n                if (ex) {\n                    if (query.transaction) {\n                        if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                            _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                        } else {\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\n                        }\n                    } else {\n                        ctx.beginTransaction(function (tran) {\n                            query.transaction = tran;\n                            if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                                _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                            } else {\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\n                            }\n                        });\n                    }\n                } else {\n                    query.rawDataList = [];\n                    query.result = [];\n                    clbWrapper.success(query);\n                }\n            };\n\n            var i = 0;\n            var callbackFn = function callbackFn(cancel) {\n                if (cancel === false) ex = false;\n\n                var es = sets[i];\n                if (es.beforeRead) {\n                    i++;\n                    var r = es.beforeRead.call(this, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length && ex ? callbackFn : readyFn, sets, query);\n                    } else {\n                        if (r === false) ex = false;\n\n                        if (i < sets.length && ex) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete ? _index2.default.Access.DeleteBatch : _index2.default.Access.Read, this.user, sets, {\n                success: authorizedFn,\n                error: clbWrapper.error\n            });\n        } else authorizedFn();\n    },\n    executeQuerySuccess: function executeQuerySuccess(that, returnTransaction, callBack) {\n        return function (query) {\n            if (_index2.default.QueryCache && _index2.default.QueryCache.isCacheable(that, query)) {\n                _index2.default.QueryCache.addToCache(that, query);\n            }\n\n            query.buildResultSet(that);\n\n            if (_index2.default.ItemStore && 'QueryResultModifier' in _index2.default.ItemStore) _index2.default.ItemStore.QueryResultModifier.call(that, query);\n\n            var successResult;\n\n            if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.Single || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Find || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Count || query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Some || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Every) {\n                if (query.result.length !== 1) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.First) {\n                if (query.result.length === 0) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else {\n                if (typeof query.__count === 'number' && query.result) query.result.totalCount = query.__count;\n\n                that.storageProvider._buildContinuationFunction(that, query);\n\n                successResult = query.result;\n            }\n\n            var readyFn = function readyFn() {\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\n\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\n            };\n\n            var i = 0;\n            var sets = query.getEntitySets();\n\n            var callbackFn = function callbackFn() {\n                var es = sets[i];\n                if (es.afterRead) {\n                    i++;\n                    var r = es.afterRead.call(this, successResult, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\n                    } else {\n                        if (i < sets.length) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n    },\n    executeQueryError: function executeQueryError(that, returnTransaction, callBack) {\n        return function () {\n            if (returnTransaction) callBack.error.apply(this, arguments);else callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                return !(p instanceof _index2.default.Transaction);\n            }));\n        };\n    },\n\n    batchExecuteQuery: function batchExecuteQuery(queryableOptions, callBack, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(callBack);\n\n        var self = this;\n        var methodOperationMappings = {\n            count: 'length',\n            length: 'length',\n            forEach: 'forEach',\n            toArray: 'toArray',\n            single: 'single',\n            some: 'some',\n            every: 'every',\n            first: 'first',\n            removeAll: 'batchDelete'\n        };\n        var methodFrameMappings = {\n            count: 'CountExpression',\n            length: 'CountExpression',\n            forEach: 'ForEachExpression',\n            toArray: 'ToArrayExpression',\n            single: 'SingleExpression',\n            some: 'SomeExpression',\n            every: 'EveryExpression',\n            first: 'FirstExpression',\n            removeAll: 'BatchDeleteExpression'\n        };\n\n        var returnFunc = function returnFunc() {\n            return pHandler.getPromise();\n        };\n\n        if (typeof queryableOptions.length != \"number\") {\n            cbWrapper.error(new _index.Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\n            return returnFunc();\n        }\n\n        var qOptions = [];\n        for (var i = 0; i < queryableOptions.length; i++) {\n            var queryOption = {};\n            if (queryableOptions[i] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i];\n                queryOption.method = 'toArray';\n            } else if (queryableOptions[i].queryable instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i].queryable;\n                queryOption.method = queryableOptions[i].method || 'toArray';\n            } else if (queryableOptions[i][0] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i][0];\n                queryOption.method = queryableOptions[i][1] || 'toArray';\n            } else {\n                cbWrapper.error(new _index.Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            if (queryOption.queryable.entityContext !== self) {\n                cbWrapper.error(new _index.Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\n            qOptions.push(queryOption);\n        }\n\n        var executableQueries = [];\n        for (var i = 0; i < qOptions.length; i++) {\n            var queryOption = qOptions[i];\n\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\n            if (frameExpressionName && _index2.default.Expressions[frameExpressionName] && _index2.default.Expressions[frameExpressionName].isAssignableTo(_index2.default.Expressions.FrameOperator)) {\n\n                var queryExpression = _index.Container['create' + frameExpressionName](queryOption.queryable.expression);\n                var preparator = _index.Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\n\n                try {\n                    var expression = preparator.Visit(queryExpression);\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                    var queryable = _index.Container.createQueryable(queryOption.queryable, expression);\n                    executableQueries.push(queryable);\n                } catch (e) {\n                    cbWrapper.error(e);\n                    return returnFunc();\n                }\n            } else {\n                cbWrapper.error(new _index.Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n        }\n\n        var queryResults = [];\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\n            //wrap queries\n            var batchExecuteQueryExpression = _index.Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\n                return new _index2.default.Query(queryable.expression, queryable.defaultType, self);\n            }));\n\n            var batchExecuteQuery = _index.Container.createQueryable(self, batchExecuteQueryExpression);\n            self.executeQuery(batchExecuteQuery, {\n                success: function success(results) {\n                    var batchResult = [];\n                    var hasError = false;\n                    var errorValue = null;\n                    for (var i = 0; i < results.length && !hasError; i++) {\n                        var query = results[i];\n                        self.executeQuerySuccess(self, returnTransaction, {\n                            success: function success(result) {\n                                batchResult.push(result);\n                            },\n                            error: function error(err) {\n                                hasError = true;\n                                errorValue = err;\n                            }\n                        })(query);\n                    }\n                    if (!hasError) {\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\n                    } else {\n                        cbWrapper.error(errorValue);\n                    }\n                },\n                error: cbWrapper.error\n            }, transaction);\n        } else {\n            var returnTransaction = this._isReturnTransaction(transaction);\n\n            var readIterator = function readIterator(queries, index, iteratorCallback, itTransaction) {\n                var query = queries[index];\n                if (!query) {\n                    return iteratorCallback.success(itTransaction);\n                }\n\n                self.executeQuery(executableQueries[index], {\n                    success: function success(result, tr) {\n                        queryResults.push(result);\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\n                    },\n                    error: iteratorCallback.error\n                }, itTransaction);\n            };\n\n            readIterator(executableQueries, 0, {\n                success: function success(lastTran) {\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\n                },\n                error: cbWrapper.error\n            }, transaction);\n        }\n        return returnFunc();\n    },\n\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\n    saveChanges: function saveChanges(callback, transaction) {\n        if (_index2.default.QueryCache) {\n            _index2.default.QueryCache.reset(this);\n        }\n\n        var changedEntities = [];\n        var trackedEntities = this.stateManager.trackedEntities;\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        var skipItems = [];\n        while (trackedEntities.length > 0) {\n            var additionalEntities = [];\n            //trackedEntities.forEach(function (entityCachedItem) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entityCachedItem = trackedEntities[i];\n\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\n                if (entityCachedItem.data.entityState == _index2.default.EntityState.Unchanged) {\n                    entityCachedItem.skipSave = true;\n                    skipItems.push(entityCachedItem.data);\n                } else {\n                    if (entityCachedItem.data.entityState == _index2.default.EntityState.Modified) {\n                        if (entityCachedItem.data.changedProperties) {\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\n                                if (pMemDef.kind == _index2.default.MemberTypes.navProperty) {\n                                    var a = sModel.Associations[pMemDef.association];\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\n                                    return multiplicity == '*0..1' || multiplicity == '0..11';\n                                }\n                                return true;\n                            });\n                            if (!changeStoredProperty) {\n                                entityCachedItem.skipSave = true;\n                                skipItems.push(entityCachedItem.data);\n                            }\n                        } else {\n                            entityCachedItem.skipSave = true;\n                            skipItems.push(entityCachedItem.data);\n                        }\n                    }\n                }\n\n                //type before events with items\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\n\n                var navigationProperties = [];\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\n                    var p = smPhyMemDefs[ism];\n                    if (p.kind == _index2.default.MemberTypes.navProperty) navigationProperties.push(p);\n                }\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\n                //navigationProperties.forEach(function (navProp) {\n                for (var j = 0; j < navigationProperties.length; j++) {\n                    var navProp = navigationProperties[j];\n\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\n                    var name = navProp.name; //eg.: \"Profile\"\n                    var navPropertyName = association.ToPropertyName; //eg.: User\n\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\n                    //connectedDataList.forEach(function (data) {\n                    for (var k = 0; k < connectedDataList.length; k++) {\n                        var data = connectedDataList[k];\n\n                        if (data) {\n                            var value = data[navPropertyName];\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\n                            if (association.FromMultiplicity === '$$unbound') {\n                                if (data instanceof _index2.default.Array) {\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                    //data.forEach(function (dataItem) {\n                                    for (var l = 0; l < data.length; l++) {\n                                        var dataItem = data[l];\n\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                                    //}, this);\n                                } else {\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                            } else {\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                        //Array\n                                        if (value) {\n                                            if (value instanceof Array) {\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\n                                                    value.push(entityCachedItem.data);\n                                                    data.initData[navPropertyName] = value;\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                                }\n                                            } else {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Item must be array or subtype of array\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                    default:\n                                        //Item\n                                        if (value) {\n                                            if (value !== entityCachedItem.data) {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Integrity check error! Item assigned to another entity!\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                }\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                    case \"0..11\":\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                        break;\n                                }\n                            }\n                            if (!data.entityState) {\n                                //if (data.storeToken === this.storeToken) {\n                                //    data.entityState = $data.EntityState.Modified;\n                                //} else {\n                                //    data.entityState = $data.EntityState.Added;\n                                //}\n                                this.discoverDependentItemEntityState(data);\n                            }\n                            if (additionalEntities.indexOf(data) == -1) {\n                                additionalEntities.push(data);\n                            }\n                        }\n                    }\n                    //}, this);\n                }\n                //}, this);\n            }\n            //}, this);\n\n            //trackedEntities.forEach(function (entity) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entity = trackedEntities[i];\n\n                if (entity.skipSave !== true) {\n                    changedEntities.push(entity);\n                }\n            }\n            //});\n\n            trackedEntities = [];\n            //additionalEntities.forEach(function (item) {\n            for (var i = 0; i < additionalEntities.length; i++) {\n                var item = additionalEntities[i];\n\n                if (!skipItems.some(function (entity) {\n                    return entity == item;\n                })) {\n                    if (!changedEntities.some(function (entity) {\n                        return entity.data == item;\n                    })) {\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\n                    }\n                }\n            }\n            //}, this);\n        }\n\n        //changedEntities.forEach(function (d) {\n        for (var j = 0; j < changedEntities.length; j++) {\n            var d = changedEntities[j];\n\n            if (d.dependentOn) {\n                var temp = [];\n                for (var i = 0; i < d.dependentOn.length; i++) {\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\n                        temp.push(d.dependentOn[i]);\n                    } else {\n                        d.additionalDependentOn = d.additionalDependentOn || [];\n                        d.additionalDependentOn.push(d.dependentOn[i]);\n                    }\n                }\n                d.dependentOn = temp;\n            }\n        }\n        //});\n        skipItems = null;\n        var ctx = this;\n        if (changedEntities.length == 0) {\n            this.stateManager.trackedEntities.length = 0;\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\n            return pHandlerResult;\n        }\n\n        //validate entities\n        var errors = [];\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (entity.data.entityState === _index2.default.EntityState.Added) {\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\n\n                    var memDefType = _index.Container.resolveType(memDef.type);\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\n                        switch (memDefType) {\n                            case _index2.default.String:\n                            case _index2.default.Number:\n                            case _index2.default.Float:\n                            case _index2.default.Decimal:\n                            case _index2.default.Integer:\n                            case _index2.default.Int16:\n                            case _index2.default.Int32:\n                            case _index2.default.Int64:\n                            case _index2.default.Byte:\n                            case _index2.default.SByte:\n                            case _index2.default.Date:\n                            case _index2.default.Boolean:\n                                entity.data[memDef.name] = _index.Container.getDefault(memDef.dataType);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n                //}, this);\n            }\n            if ((entity.data.entityState === _index2.default.EntityState.Added || entity.data.entityState === _index2.default.EntityState.Modified) && !entity.data.isValid()) {\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\n            }\n        }\n        //});\n        if (errors.length > 0) {\n            clbWrapper.error(errors);\n            return pHandlerResult;\n        }\n\n        var access = _index2.default.Access.None;\n\n        var eventData = {};\n        var sets = [];\n        for (var i = 0; i < changedEntities.length; i++) {\n            var it = changedEntities[i];\n            var n = it.entitySet.elementType.name;\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\n            var es = this._entitySetReferences[n];\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || this.user && this.checkPermission) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (it.data.entityState) {\n                    case _index2.default.EntityState.Added:\n                        access |= _index2.default.Access.Create;\n                        if (es.beforeCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        access |= _index2.default.Access.Update;\n                        if (es.beforeUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        access |= _index2.default.Access.Delete;\n                        if (es.beforeDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(it);\n                        }\n                        break;\n                }\n            }\n        }\n\n        var readyFn = function readyFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n            }\n\n            if (changedEntities.length) {\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\n\n                var innerCallback = {\n                    success: function success(tran) {\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\n                    },\n                    error: function error() {\n                        //TODO remove trans from args;\n                        if (returnTransaction) clbWrapper.error.apply(this, arguments);else clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                            return !(p instanceof _index2.default.Transaction);\n                        }));\n                    }\n                };\n\n                if (transaction instanceof _index2.default.Transaction) {\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\n                } else {\n                    ctx.beginTransaction(true, function (tran) {\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\n                    });\n                }\n            } else if (cancelEvent) {\n                clbWrapper.error(new _index.Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\n            } else {\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\n            };\n\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\n        };\n\n        var cancelEvent;\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n        var cmdAll = {\n            beforeCreate: 'createAll',\n            beforeDelete: 'deleteAll',\n            beforeUpdate: 'modifyAll'\n        };\n\n        var callbackFn = function callbackFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n\n                readyFn(cancel);\n                return;\n            }\n\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length && !cancelEvent ? callbackFn : readyFn, m);\n                } else if (r === false) {\n                    cancelEvent = es.name + '.' + c;\n                    //all.forEach(function (it) {\n                    for (var index = 0; index < all.length; index++) {\n                        var it = all[index];\n\n                        var ix = changedEntities.indexOf(it);\n                        changedEntities.splice(ix, 1);\n                    }\n                    //});\n\n                    readyFn();\n                } else {\n                    if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n            }\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(access, this.user, sets, {\n                success: function success() {\n                    if (i < ies.length) callbackFn();else readyFn();\n                },\n                error: clbWrapper.error\n            });\n        } else {\n            if (i < ies.length) callbackFn();else readyFn();\n        }\n\n        return pHandlerResult;\n    },\n    discoverDependentItemEntityState: function discoverDependentItemEntityState(data) {\n        if (data.storeToken === this.storeToken) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else {\n            data.entityState = _index2.default.EntityState.Added;\n        }\n    },\n\n    processEntityTypeBeforeEventHandler: function processEntityTypeBeforeEventHandler(skipItems, entityCachedItem) {\n        if (!entityCachedItem.skipSave) {\n            var entity = entityCachedItem.data;\n            var entityType = entity.getType();\n            var state = entity.entityState;\n\n            switch (true) {\n                case state === _index2.default.EntityState.Added && entityType.onbeforeCreate instanceof _index2.default.Event:\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Modified && entityType.onbeforeUpdate instanceof _index2.default.Event:\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Deleted && entityType.onbeforeDelete instanceof _index2.default.Event:\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    },\n    processEntityTypeAfterEventHandler: function processEntityTypeAfterEventHandler(entityCachedItem) {\n        var entity = entityCachedItem.data;\n        var entityType = entity.getType();\n        var state = entity.entityState;\n\n        switch (true) {\n            case state === _index2.default.EntityState.Added && entityType.onafterCreate instanceof _index2.default.Event:\n                entityType.onafterCreate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Modified && entityType.onafterUpdate instanceof _index2.default.Event:\n                entityType.onafterUpdate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Deleted && entityType.onafterDelete instanceof _index2.default.Event:\n                entityType.onafterDelete.fire(entity);\n                break;\n            default:\n                break;\n        }\n    },\n\n    bulkInsert: function bulkInsert(entitySet, fields, datas, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        if (typeof entitySet === 'string') {\n            var currentEntitySet;\n\n            for (var entitySetName in this._entitySetReferences) {\n                var actualEntitySet = this._entitySetReferences[entitySetName];\n                if (actualEntitySet.tableName === entitySet) {\n                    currentEntitySet = actualEntitySet;\n                    break;\n                }\n            }\n\n            if (!currentEntitySet) currentEntitySet = this[entitySet];\n\n            entitySet = currentEntitySet;\n        }\n        if (entitySet) {\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\n        } else {\n            callback.error(new _index.Exception('EntitySet not found'));\n        }\n        return pHandler.getPromise();\n    },\n\n    prepareRequest: function prepareRequest() {},\n    _postProcessSavedItems: function _postProcessSavedItems(callBack, changedEntities, transaction, returnTransaction) {\n        if (this.ChangeCollector && this.ChangeCollector instanceof _index2.default.Notifications.ChangeCollectorBase) this.ChangeCollector.processChangedData(changedEntities);\n\n        var eventData = {};\n        var ctx = this;\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (!entity.data.storeToken) entity.data.storeToken = ctx.storeToken;\n\n            //type after events with items\n            this.processEntityTypeAfterEventHandler(entity);\n\n            var oes = entity.data.entityState;\n\n            entity.data.entityState = _index2.default.EntityState.Unchanged;\n            entity.data.changedProperties = [];\n            entity.physicalData = undefined;\n\n            var n = entity.entitySet.elementType.name;\n            var es = ctx._entitySetReferences[n];\n\n            var eventName = undefined;\n            switch (oes) {\n                case _index2.default.EntityState.Added:\n                    eventName = 'added';\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    eventName = 'deleted';\n                    break;\n                case _index2.default.EntityState.Modified:\n                    eventName = 'updated';\n                    break;\n            }\n            if (eventName) {\n                this.raiseEvent(eventName, entity);\n            }\n\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (oes) {\n                    case _index2.default.EntityState.Added:\n                        if (es.afterCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        if (es.afterUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        if (es.afterDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(entity);\n                        }\n                        break;\n                }\n            }\n        }\n        //});\n\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var ctx = this;\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n        var cmdAll = {\n            afterCreate: 'createAll',\n            afterDelete: 'deleteAll',\n            afterUpdate: 'modifyAll'\n        };\n\n        var readyFn = function readyFn() {\n            if (!ctx.trackChanges) {\n                ctx.stateManager.reset();\n            }\n\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\n\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\n        };\n\n        var callbackFn = function callbackFn() {\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\n                } else {\n                    if (i < ies.length) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                if (i < ies.length) callbackFn();else readyFn();\n            }\n        };\n\n        if (i < ies.length) callbackFn();else readyFn();\n    },\n    forEachEntitySet: function forEachEntitySet(fn, ctx) {\n        /// <summary>\n        ///     Iterates over the entity sets' of current EntityContext.\n        /// </summary>\n        /// <param name=\"fn\" type=\"Function\">\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\n        /// </param>\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\n        for (var entitySetName in this._entitySetReferences) {\n            var actualEntitySet = this._entitySetReferences[entitySetName];\n            fn.call(ctx, actualEntitySet);\n        }\n    },\n\n    loadItemProperty: function loadItemProperty(entity, property, callback, transaction) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>C  allback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        _index.Guard.requireType('entity', entity, _index2.default.Entity);\n\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        if (entity[memberDefinition.name] != undefined) {\n\n            var pHandler = new _index2.default.PromiseHandler();\n            var callBack = pHandler.createCallback(callback);\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\n\n            return pHandler.getPromise();\n        }\n\n        var isSingleSide = true;\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\n        var elementType = _index.Container.resolveType(memberDefinition.dataType);\n        if (elementType === _index2.default.Array || elementType.isAssignableTo && elementType.isAssignableTo(_index2.default.EntitySet)) {\n            elementType = _index.Container.resolveType(memberDefinition.elementType);\n\n            isSingleSide = false;\n        } else {\n            var associations;\n            for (var i = 0; i < storageModel.Associations.length; i++) {\n                var assoc = storageModel.Associations[i];\n                if (assoc.FromPropertyName == memberDefinition.name) {\n                    associations = assoc;\n                    break;\n                }\n            }\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\") isSingleSide = false;\n        }\n\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\n        if (isSingleSide === true) {\n            //singleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\n            return entitySet.map('function (e) { return e.' + memberDefinition.name + ' }').single(filterFunc, filterParams, callback, transaction);\n        } else {\n            //multipleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(elementType);\n            return entitySet.filter(filterFunc, filterParams).toArray(callback, transaction);\n        }\n    },\n\n    getTraceString: function getTraceString(queryable) {\n        /// <summary>\n        /// Returns a trace string. Used for debugging purposes!\n        /// </summary>\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\n        /// <returns>Trace string</returns>\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        return this.storageProvider.getTraceString(query);\n    },\n    log: function log(logInfo) {\n        //noop as do nothing\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\n    },\n    resolveFieldOperation: function resolveFieldOperation(operation, expression, frameType) {\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\n    },\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\n    },\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\n    },\n\n    _generateServiceOperationQueryable: function _generateServiceOperationQueryable(functionName, returnEntitySet, arg, parameters) {\n        if (typeof console !== 'undefined' && console.log) console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\n\n        var params = [];\n        for (var i = 0; i < parameters.length; i++) {\n            var obj = {};\n            obj[parameters[i]] = _index.Container.resolveType(_index.Container.getTypeName(arg[i]));\n            params.push(obj);\n        }\n\n        var tempOperation = _index2.default.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: _index2.default.Queryable, elementType: this[returnEntitySet].elementType, params: params });\n        return tempOperation.apply(this, arg);\n    },\n    attach: function attach(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attach(entity, mode);\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attachOrGet(entity, mode);\n    },\n\n    addMany: function addMany(entities) {\n        /// <summary>\n        ///     Adds several entities to their matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"Array\" />\n        /// <returns type=\"Array\">Returns the added entities.</returns>\n        var self = this;\n        entities.forEach(function (entity) {\n            self.add(entity);\n        });\n        return entities;\n    },\n\n    add: function add(entity) {\n        /// <summary>\n        ///     Adds a new entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.add(entity);\n    },\n    remove: function remove(entity) {\n        /// <summary>\n        ///     Removes an entity from its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.remove(entity);\n    },\n    storeToken: { type: Object },\n\n    getFieldUrl: function getFieldUrl(entity, member, collection) {\n        try {\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\n            var fieldName = typeof member === 'string' ? member : member.name;\n            if (entity instanceof _index2.default.Entity) {\n                entitySet = this.getEntitySetFromElementType(entity.getType());\n            } else if (!_index.Guard.isNullOrUndefined(entity) && entity.constructor !== _index2.default.Object) {\n                //just a single key\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\n                var key = {};\n                key[keyDef.name] = entity;\n                entity = key;\n            }\n\n            //key object\n            if (!(entity instanceof _index2.default.Entity)) {\n                entity = new entitySet.elementType(entity);\n            }\n\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\n        } catch (e) {}\n        return '#';\n    },\n\n    //xxxx\n    _applyRelatedEntityMethodsToContext: function _applyRelatedEntityMethodsToContext() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                var es = this._entitySetReferences[esName];\n                var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + es.name;\n                //EntitiySets\n                if (!(newMemberName in es)) {\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n                //Context\n                if (!(newMemberName in this)) {\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n            }\n        }\n    },\n    _applyRelatedEntityMethodsToTypes: function _applyRelatedEntityMethodsToTypes() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                //add to Type\n                var elementType = this._entitySetReferences[esName].elementType;\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\n                for (var i = 0; i < members.length; i++) {\n                    var member = members[i];\n                    var memberElementType = null;\n                    if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                        var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                        if (!elementType.getMemberDefinition(newMemberName)) {\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member));\n                        }\n                    }\n                }\n            }\n        }\n    },\n    _createRelatedEntityProxyClass: function _createRelatedEntityProxyClass(type) {\n        var proxyClassName = type.namespace + _index2.default.defaults.relatedEntityProxyPrefix + type.name;\n        if (!_index.Container.isTypeRegistered(proxyClassName)) {\n            var definition = {};\n            var members = type.memberDefinitions.getPublicMappedProperties();\n            for (var i = 0; i < members.length; i++) {\n                var member = members[i];\n                var memberElementType = null;\n                if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                    var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member);\n                }\n            }\n            _index2.default.Class.define(proxyClassName, _index2.default.RelatedEntityProxy, null, definition, null);\n        }\n\n        return _index.Container.resolveType(proxyClassName);\n    },\n    _relatedEntityGetMethod: function _relatedEntityGetMethod(targetType, navigation, context) {\n        var that = this;\n        var keys = targetType.memberDefinitions.getKeyProperties();\n\n        return function (keyValue) {\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof _index2.default.EntityContext ? this.context : undefined));\n            }\n        };\n    }\n}, {\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (type.resolveForwardDeclarations) {\n            type.resolveForwardDeclarations();\n        }\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity) {\n                    if (!cfg.method) {\n                        cfg.method = 'POST';\n                    }\n\n                    if (this.context) {\n                        context = this.context;\n                    } else {\n                        _index.Guard.raise('entity not attached into context');\n                        return;\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: context.getEntitySetFromElementType(this.getType())\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    for (var i = 0; i < cfg.params.length; i++) {\n                        //TODO: check params type\n                        for (var name in cfg.params[i]) {\n                            paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(cfg.params[i][name]), name));\n                        }\n                    }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (typeof clb !== 'function') {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = [];\n        if (cfg.params) {\n            for (var i = 0; i < cfg.params.length; i++) {\n                var param = cfg.params[i];\n                for (var name in param) {\n                    params.push({\n                        name: name,\n                        type: param[name]\n                    });\n                }\n            }\n        }\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    },\n    _convertLogicalTypeNameToPhysical: function _convertLogicalTypeNameToPhysical(name) {\n        return name + '_$db$';\n    },\n    _storageModelCache: {\n        get: function get() {\n            if (!this.__storageModelCache) this.__storageModelCache = {};\n            return this.__storageModelCache;\n        },\n        set: function set() {\n            //todo exception\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],59:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n///EntitySet is responsible for\n/// -creating and holding entityType through schema\n/// - provide Add method\n/// - provide Delete method\n/// - provide Update method\n/// - provide queryProvider for queryable\n\n_index2.default.EntitySchemaConfig = function EntitySchemaConfig() {\n    this.Name = \"\";\n};\n_index2.default.entitySetState = { created: 0, defined: 1, active: 2 };\n\n_index2.default.Class.defineEx('$data.EntitySet', [{ type: _index2.default.Queryable, params: [new _index2.default.Class.ConstructorParameter(1)] }], null, {\n    constructor: function constructor(elementType, context, collectionName, eventHandlers, roles) {\n        /// <signature>\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\n        /// </signature>\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\n        var self = this;\n        context['createAdd' + elementType.name] = function (initData) {\n            var entity = new elementType(initData);\n            return self.add(entity);\n        };\n        this.stateManager = new _index2.default.EntityStateManager(this);\n\n        this.collectionName = collectionName;\n        this.roles = roles;\n\n        for (var i in eventHandlers) {\n            this[i] = eventHandlers[i];\n        }\n    },\n\n    addNew: function addNew(item, cb) {\n        var callback = _index2.default.PromiseHandlerBase.createCallbackSettings(cb);\n        var _item = new this.createNew(item);\n        this.entityContext.saveChanges(cb);\n        return _item;\n    },\n\n    executeQuery: function executeQuery(expression, on_ready) {\n        //var compiledQuery = this.entityContext\n        var callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(on_ready);\n        this.entityContext.executeQuery(expression, callBack);\n    },\n    getTraceString: function getTraceString(expression) {\n        return this.entityContext.getTraceString(expression);\n    },\n    setContext: function setContext(entityContext) {\n        this.entitySetState = _index2.default.entitySetState.active;\n        this.entityContext = entityContext;\n        this.entityContext[this.schema.name] = this[this.schema.name];\n    },\n    _trackEntity: function _trackEntity(entity) {\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEntities.length; i++) {\n            if (trackedEntities[i].data === entity) return;\n        }\n        trackedEntities.push({ entitySet: this, data: entity });\n    },\n    add: function add(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds the given entity to the context.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\n        ///     <example>\n        ///\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\n        ///\n        ///     </example>\n        ///     <example>\n        ///\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///         Persons.add(person);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Added;\n        data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n\n    addMany: function addMany(entities) {\n        var result = [];\n        var self = this;\n        entities.forEach(function (entity) {\n            result.push(self.add(entity));\n        });\n        return result;\n    },\n    remove: function remove(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\n        ///         Persons.remove({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Marks the given entity as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\n        ///     <example>\n        ///\n        ///         Persons.remove(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Deleted;\n        data.changedProperties = undefined;\n        this._trackEntity(data);\n    },\n    attach: function attach(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\n        ///     <example>\n        ///\n        ///         Persons.attach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Set an entity's related entities without loading\n        ///\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\n        ///         Category.attach(categoryPromo);\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\n        ///         Article.attach(article);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\n            var current = this.entityContext.stateManager.trackedEntities[i];\n            if (current.data === data) break;\n            if (current.data.equals(data)) {\n                _index.Guard.raise(new _index.Exception(\"Context already contains this entity!!!\"));\n            }\n        }\n\n        if (mode === true) {\n            if (data.changedProperties && data.changedProperties.length > 0) {\n                data.entityState = _index2.default.EntityState.Modified;\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n            }\n        } else {\n            if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n            var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n            if (typeof attachMode === \"function\") {\n                attachMode.call(_index2.default.EntityAttachMode, data);\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n                data.changedProperties = undefined;\n            }\n        }\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\n        data.context = this.entityContext;\n        this._trackEntity(data);\n    },\n    detach: function detach(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\n        ///         Persons.detach({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Detach from the context and sets state Detached.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <example>\n        ///\n        ///         Persons.detach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\n            entity.entityState = _index2.default.EntityState.Detached;\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\n            return;\n        }\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var person = Persons.attachOrGet({ Id: 5  });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///\n        ///         var attachedPerson = Persons.attachOrGet(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var p = new $news.Types.Person({ Id: 5 });\n        ///         var attachedPerson = Persons.attachOrGet(p);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            return existsItem.data;\n        }\n\n        if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n        var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n        if (typeof attachMode === \"function\") {\n            attachMode.call(_index2.default.EntityAttachMode, data);\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n            data.changedProperties = undefined;\n        }\n        //data.entityState = $data.EntityState.Unchanged;\n        //data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n    //find: function (keys) {\n    //    //todo global scope\n    //    if (!this.entityKeys) {\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\n    //    }\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\n    //        if (item.entitySet == this) {\n    //            var isOk = true;\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\n    //            if (isOk) {\n    //                return item.data;\n    //            }\n    //        }\n    //    }, this);\n    //    //TODO: db call\n    //    return null;\n    //},\n    loadItemProperty: function loadItemProperty(entity, memberDefinition, callback) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\n    },\n    saveChanges: function saveChanges() {\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\n    },\n    addProperty: function addProperty(name, getter, setter) {\n        return this.elementType.addProperty.apply(this.elementType, arguments);\n    },\n    expression: {\n        get: function get() {\n            if (!this._expression) {\n                var ec = _index.Container.createEntityContextExpression(this.entityContext);\n                //var name = entitySet.collectionName;\n                //var entitySet = this.entityContext[entitySetName];\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\n                var es = _index.Container.createEntitySetExpression(ec, _index.Container.createMemberInfoExpression(memberdef), null, this);\n                this._expression = es;\n            }\n\n            return this._expression;\n        },\n        set: function set(value) {\n            this._expression = value;\n        }\n    },\n    getFieldUrl: function getFieldUrl(keys, field) {\n        return this.entityContext.getFieldUrl(keys, field, this);\n    },\n    bulkInsert: function bulkInsert(fields, datas, callback) {\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],60:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.EntityState = {\n    Detached: 0,\n    Unchanged: 10,\n    Added: 20,\n    Modified: 30,\n    Deleted: 40\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],61:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.EntityStateManager', null, null, {\n    constructor: function constructor(entityContext) {\n        this.entityContext = null;\n        this.trackedEntities = [];\n        this.init(entityContext);\n    },\n    init: function init(entityContext) {\n        this.entityContext = entityContext;\n    },\n    reset: function reset() {\n        this.trackedEntities = [];\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],62:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Base.extend('$data.EntityWrapper', {\n    getEntity: function getEntity() {\n        _index.Guard.raise(\"pure object\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],63:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Enum = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.createEnum = function (name, container, enumType, enumDefinition) {\n    return _index2.default.Enum.extend(name, container, enumType, enumDefinition);\n};\n\n_index2.default.Enum = _index2.default.Class.define(\"$data.Enum\", null, null, {\n    constructor: function constructor() {\n        return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Cannot create instance from enum type!\"));\n    }\n}, {\n    extend: function extend(name, container, enumType, enumDefinition) {\n        if (!enumDefinition) {\n            if (!enumType) {\n                enumDefinition = container;\n                container = undefined;\n            } else {\n                enumDefinition = enumType;\n                enumType = container;\n                container = undefined;\n            }\n        }\n\n        enumType = enumType || _index2.default.Integer;\n        enumType = _index.Container.resolveType(enumType);\n        var classDefinition = {\n            __enumType: { get: function get() {\n                    return enumType;\n                }, set: function set() {}, enumerable: false, writable: false }\n        };\n\n        var getEnumDef = function getEnumDef(value, index) {\n            return { get: function get() {\n                    return value;\n                }, set: function set() {}, enumMember: true, index: index };\n        };\n\n        var defaultValue = 0;\n        var isValueCalculation = [_index2.default.Byte, _index2.default.SByte, _index2.default.Int16, _index2.default.Integer, _index2.default.Int64].indexOf(enumType) >= 0;\n        var hasIndex = false;\n\n        var enumDef = [];\n        if (Array.isArray(enumDefinition)) {\n            for (var i = 0; i < enumDefinition.length; i++) {\n                var enumValA = enumDefinition[i];\n                if ((typeof enumValA === \"undefined\" ? \"undefined\" : _typeof(enumValA)) === \"object\" && typeof enumValA.name === \"string\") {\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\n                    if (typeof enumValA.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else if (typeof enumValA === \"string\") {\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\n                } else {\n                    return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Invalid enum member\"));\n                }\n            }\n        } else if ((typeof enumDefinition === \"undefined\" ? \"undefined\" : _typeof(enumDefinition)) === \"object\") {\n            for (var enumName in enumDefinition) {\n                var enumValO = enumDefinition[enumName];\n                if ((typeof enumValO === \"undefined\" ? \"undefined\" : _typeof(enumValO)) === \"object\") {\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\n                    if (typeof enumValO.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else {\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\n                }\n            }\n        }\n\n        if (hasIndex) {\n            enumDef.sort(function (a, b) {\n                if (a.index < b.index) return -1;\n                if (a.index > b.index) return 1;\n                return 0;\n            });\n        }\n\n        var enumOptions = [];\n        for (var i = 0; i < enumDef.length; i++) {\n            var enumVal = enumDef[i];\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\n                enumVal.value = defaultValue;\n            }\n            if (typeof enumVal.value === \"number\") {\n                defaultValue = enumVal.value;\n            }\n            defaultValue++;\n            enumOptions.push(enumVal.name);\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\n        }\n        classDefinition.getEnumName = function (enumValue) {\n            var def = enumDef.filter(function (d) {\n                return d.value === enumValue;\n            })[0];\n            if (def) {\n                return def.name;\n            }\n        };\n\n        var enumClass = _index2.default.Base.extend.call(this, name, container, {}, classDefinition);\n\n        _index2.default.Container.registerConverter(name, {\n            'default': function _default(value) {\n                if (typeof value == \"string\" && enumOptions.indexOf(value) >= 0) {\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\n                    if (enumMember) {\n                        return enumMember.get();\n                    }\n                }\n\n                for (var i = 0; i < enumDef.length; i++) {\n                    var enumVal = enumDef[i];\n                    if (enumVal.value === value) return value;\n                }\n\n                throw 0;\n            }\n        });\n\n        return enumClass;\n    },\n\n    hasMetadata: function hasMetadata(key, property) {\n        return typeof Reflect !== 'undefined' && Reflect.hasMetadata && Reflect.hasMetadata(key, this, property);\n    },\n    getAllMetadata: function getAllMetadata(property) {\n        var _this = this;\n\n        var result = {};\n        if (typeof Reflect !== 'undefined' && Reflect.getMetadataKeys && Reflect.getMetadata) {\n            var keys = Reflect.getMetadataKeys(this, property);\n            keys.forEach(function (key) {\n                result[key] = Reflect.getMetadata(key, _this, property);\n            });\n        }\n\n        return result;\n    },\n    getMetadata: function getMetadata(key, property) {\n        return typeof Reflect !== 'undefined' && Reflect.getMetadata ? Reflect.getMetadata(key, this, property) : undefined;\n    },\n    setMetadata: function setMetadata(key, value, property) {\n        return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.defineMetadata(key, value, this, property);\n    }\n});\n\nvar Enum = exports.Enum = _index2.default.Enum;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":44}],64:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ArrayLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(items) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\n        this.items = items || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ArrayLiteral, writable: true },\n\n    items: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ExpressionNode },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        ///<var nam\n        var result = \"[\" + this.items.map(function (item) {\n            return item.toString();\n        }).join(\",\") + \"]\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],65:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CallExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member, args) {\n        ///<summary>Represents a call to an object or global method</summary>\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\n        this.expression = expression;\n        this.member = member;\n        this.args = args;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.Call\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (thisObj, method, args) {\n                if (typeof method !== 'function') {\n                    method = thisObj[method];\n                }\n                _index.Guard.requireType(\"method\", method, Function);\n                return method.apply(thisObj, args);\n            };\n        },\n        set: function set(value) {\n            _index.Guard.raise(\"Property can not be set\");\n        }\n    },\n\n    toString: function toString(debug) {\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],66:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeParser', null, null, {\n\n    constructor: function constructor(scopeContext) {\n        ///<signature>\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        ///</signature>\n        ///<signature>\n        ///</signature>\n        this.scopeContext = scopeContext;\n        this.lambdaParams = [];\n    },\n\n    log: function log(logInfo) {\n        if (this.scopeContext) this.scopeContext.log(logInfo);\n    },\n\n    parseExpression: function parseExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        if ((typeof code === 'undefined' ? 'undefined' : _typeof(code)) === 'object') {\n            code = '';\n        }\n        var result = {\n            success: true,\n            errorMessage: '',\n            errorDetails: ''\n        };\n        ///<var name=\"AST\" type=\"Date\" />\n\n        //console.log(code.toString());\n        if (_index2.default.Acorn) {\n            //console.log('using acorn.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else if (_index2.default.Esprima) {\n            //console.log('using esprima.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else {\n            //console.log('using JayLint');\n            var AST = _index2.default.ASTParser.parseCode(code);\n            this.log({ event: \"AST\", data: AST });\n            if (!AST.success) {\n                return {\n                    success: false,\n                    error: \"ASTParser error\",\n                    errorMessage: AST.errors ? JSON.stringify(AST.errors) : \"could not get code\"\n                };\n            }\n            var b = this.Build2(AST.tree.first[0]);\n            result = { success: true, expression: b, errors: AST.errors };\n            return result;\n        }\n    },\n\n    createExpression: function createExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n\n        var result = this.parseExpression(code, resolver);\n        if (!result.success) {\n            _index.Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\n        }\n        return result.expression;\n    },\n\n    ParserBuild: function ParserBuild(node) {\n        //console.log(node);\n        return this['Parser' + node.type](node);\n    },\n\n    ParserExpressionStatement: function ParserExpressionStatement(node) {\n        return this.ParserBuild(node.expression);\n    },\n\n    ParserBlockStatement: function ParserBlockStatement(node) {\n        return this.ParserBuild(node.body[0]);\n    },\n\n    ParserReturnStatement: function ParserReturnStatement(node) {\n        return this.ParserBuild(node.argument);\n    },\n\n    ParserMemberExpression: function ParserMemberExpression(node) {\n        return new _index2.default.Expressions.PropertyExpression(this.ParserBuild(node.object), new _index2.default.Expressions.ConstantExpression(node.property.name || node.property.value, _typeof(node.property.name || node.property.value)));\n    },\n\n    ParserIdentifier: function ParserIdentifier(node) {\n        return this.ParserParameter(node, this.lambdaParams.indexOf(node.name) > -1 ? _index2.default.Expressions.ExpressionType.LambdaParameterReference : _index2.default.Expressions.ExpressionType.ParameterReference);\n    },\n\n    ParserObjectExpression: function ParserObjectExpression(node) {\n        var props = new Array(node.properties.length);\n        for (var i = 0; i < node.properties.length; i++) {\n            props[i] = this.ParserProperty(node.properties[i]);\n        }\n\n        return new _index2.default.Expressions.ObjectLiteralExpression(props);\n    },\n\n    ParserArrayExpression: function ParserArrayExpression(node) {\n        var items = new Array(node.elements.length);\n        for (var i = 0; i < node.elements.length; i++) {\n            items[i] = this.ParserBuild(node.elements[i]);\n        }\n\n        return new _index2.default.Expressions.ArrayLiteralExpression(items);\n    },\n\n    ParserProperty: function ParserProperty(node) {\n        return new _index2.default.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\n    },\n\n    ParserArrowFunctionExpression: function ParserArrowFunctionExpression(node) {\n        return this.ParserFunctionExpression(node);\n    },\n\n    ParserFunctionExpression: function ParserFunctionExpression(node) {\n        var params = new Array(node.params.length);\n        for (var i = 0; i < node.params.length; i++) {\n            if (i === 0 || _index2.default.defaults.parameterResolutionCompatibility) {\n                this.lambdaParams.push(node.params[i].name);\n                params[i] = this.ParserParameter(node.params[i], _index2.default.Expressions.ExpressionType.LambdaParameter);\n            } else {\n                params[i] = this.ParserParameter(node.params[i], _index2.default.Expressions.ExpressionType.Parameter);\n            }\n            params[i].owningFunction = result;\n        }\n        var result = new _index2.default.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\n\n        return result;\n    },\n\n    ParserParameter: function ParserParameter(node, nodeType) {\n        var result = new _index2.default.Expressions.ParameterExpression(node.name, null, nodeType);\n        if (nodeType == _index2.default.Expressions.ExpressionType.LambdaParameterReference) {\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\n        }\n\n        return result;\n    },\n\n    ParserLogicalExpression: function ParserLogicalExpression(node) {\n        return this.ParserBinaryExpression(node);\n    },\n\n    ParserOperators: {\n        value: {\n            \"==\": { expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a == b;\n                } },\n            \"===\": { expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a === b;\n                } },\n            \"!=\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a != b;\n                } },\n            \"!==\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a !== b;\n                } },\n            \">\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a > b;\n                } },\n            \">=\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a >= b;\n                } },\n            \"<=\": { expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a <= b;\n                } },\n            \"<\": { expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a < b;\n                } },\n            \"&&\": { expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a && b;\n                } },\n            \"||\": { expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a || b;\n                } },\n            \"&\": { expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a & b;\n                } },\n            \"|\": { expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a | b;\n                } },\n            \"+\": { expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n                    return a + b;\n                } },\n            \"-\": { expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n                    return a - b;\n                } },\n            \"/\": { expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n                    return a / b;\n                } },\n            \"%\": { expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n                    return a % b;\n                } },\n            \"*\": { expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n                    return a * b;\n                } },\n            \"[\": { expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n                    return a[b];\n                } },\n            \"in\": { expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n                    return a in b;\n                } }\n        }\n    },\n\n    ParserUnaryOperators: {\n        value: {\n            \"+\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n                    return +operand;\n                } },\n            \"-\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n                    return -operand;\n                } },\n            \"++true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return ++operand;\n                } },\n            \"--true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return --operand;\n                } },\n            \"++false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return operand++;\n                } },\n            \"!\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n                    return !operand;\n                } },\n            \"--false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return operand--;\n                } }\n        }\n    },\n\n    ParserUnaryExpression: function ParserUnaryExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\n    },\n\n    ParserUpdateExpression: function ParserUpdateExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\n    },\n\n    ParserBinaryExpression: function ParserBinaryExpression(node) {\n        return new _index2.default.Expressions.SimpleBinaryExpression(this.ParserBuild(node.left), this.ParserBuild(node.right), this.ParserOperators[node.operator].expressionType, node.operator, this.ParserOperators[node.operator].type);\n    },\n\n    ParserThisExpression: function ParserThisExpression(node) {\n        return new _index2.default.Expressions.ThisExpression();\n    },\n\n    ParserLiteral: function ParserLiteral(node) {\n        return new _index2.default.Expressions.ConstantExpression(node.value, _typeof(node.value));\n    },\n\n    ParserCallExpression: function ParserCallExpression(node) {\n        var method = this.ParserBuild(node.callee);\n        var args = new Array(node.arguments.length);\n        for (var i = 0; i < node.arguments.length; i++) {\n            args[i] = this.ParserBuild(node.arguments[i]);\n        }\n\n        var member;\n        var expression;\n        switch (true) {\n            case method instanceof _index2.default.Expressions.PropertyExpression:\n                expression = method.expression;\n                member = method.member;\n                break;\n            case method instanceof _index2.default.Expressions.ParameterExpression:\n                expression = new _index2.default.Expressions.ConstantExpression(null, _typeof(null));\n                member = method;\n                break;\n        }\n\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    } /*,\r\n       Build2: function (node) {\r\n         ///<param name=\"node\" type=\"Lint\" />\r\n         ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n         var n;\r\n         switch (node.arity) {\r\n             case \"number\":\r\n             case \"string\":\r\n                 n = this.BuildConstant(node);\r\n                 break;\r\n             case \"prefix\":\r\n                 switch (node.value) {\r\n                     case \"{\":\r\n                         n = this.BuildObjectLiteral(node);\r\n                         break;\r\n                     case \"[\":\r\n                         n = this.BuildArrayLiteral(node);\r\n                         break;\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     //TODO: default case\r\n                 }\r\n                 break;\r\n             case \"suffix\":\r\n                 switch (node.value) {\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     default:\r\n                         Guard.raise(\"Unknown suffix: \" + node.value);\r\n                 }\r\n                 break;\r\n             case \"infix\":\r\n                 switch (node.value) {\r\n                     case \"[\":\r\n                         n = this.BuildArray(node);\r\n                         break;\r\n                     case $data.binaryOperators.resolve(node.value):\r\n                         n = this.BuildSimpleBinary(node);\r\n                         break;\r\n                     case \"function\":\r\n                         Guard.raise(\"Unexpected function arity\");\r\n                     case \"(\":\r\n                         n = this.BuildCall(node);\r\n                         break;\r\n                     case \".\":\r\n                         n = this.BuildProperty(node);\r\n                         break;\r\n                     default:\r\n                         debugger;\r\n                         //TODO: remove debugger, throw exception or break\r\n                 }\r\n                 break;\r\n             case \"statement\":\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         //TODO: consider adding break\r\n                 }\r\n                 break;\r\n             default:\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         break;\r\n                     case \"true\":\r\n                     case \"false\":\r\n                     case \"null\":\r\n                         n = this.BuildConstant(node);\r\n                         break;\r\n                     case \"this\":\r\n                         n = this.BuildThis(node);\r\n                         break;\r\n                     default:\r\n                         n = this.BuildParameter(node);\r\n                         break;\r\n                 }\r\n         }\r\n         return n;\r\n      },\r\n       BuildThis: function (node) {\r\n         var result = Container.createThisExpression();\r\n         return result;\r\n      },\r\n       BuildConstant: function (node) {\r\n         ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n         var value = node.value;\r\n         var type = node.type;\r\n         if (node.reserved === true) {\r\n             switch (node.value) {\r\n                 case \"true\": value = true; type = typeof true; break;\r\n                 case \"false\": value = false; type = typeof false; break;\r\n                 case \"null\": value = null; type = typeof null; break;\r\n                 //TODO: missing default case\r\n             }\r\n         }\r\n         var result = new $data.Expressions.ConstantExpression(value, type);\r\n         return result;\r\n      },\r\n       BuildFunctionParameter: function (node) {\r\n       },\r\n       BuildArray: function (node) {\r\n         switch (node.second.type) {\r\n             case \"string\":\r\n                 return this.BuildProperty(node);\r\n             case \"number\":\r\n             default:\r\n                 return this.BuildSimpleBinary(node);\r\n         }\r\n      },\r\n       BuildParameter: function (node) {\r\n         ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n         ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n         var paramName = node.value;\r\n         //TODO\r\n         //var paramType = this.resolver.resolveParameterType(node);\r\n         var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                     this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                 $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n         var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n           if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n             result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n         }\r\n           return result;\r\n      },\r\n       BuildArrayLiteral: function(node) {\r\n         var self = this;\r\n         var items = node.first.map(function (item) { return self.Build2(item); });\r\n         var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n         return result;\r\n      },\r\n       BuildObjectLiteral: function (node) {\r\n         var self = this;\r\n         var fields = node.first.map(function (item) {\r\n             var eItem = self.Build2(item.first);\r\n             var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n             return result;\r\n         });\r\n         var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n         return result;\r\n      },\r\n       BuildFunction: function (node) {\r\n         ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n         ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n         var self = this;\r\n         var paramStack = [];\r\n         var params = node.first && node.first.map(function (paramNode) {\r\n             //paramStack.push(paramNode.value);\r\n             this.lambdaParams.push(paramNode.value);\r\n             return self.BuildParameter(paramNode);\r\n         }, this);\r\n         params = params || [];\r\n           //skipping return for convenience\r\n         //Possible we should raise an error as predicates and selectors can\r\n         //not be code blocks just expressions\r\n           var hasReturn = node.block.length == 0 ? false :\r\n             node.block[0].value === \"return\" ? true : false;\r\n         var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n           paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n           var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n         params.forEach(function (param) {\r\n             param.owningFunction = result;\r\n         });\r\n           //TODO place on prototyope\r\n         result.name = node.name;\r\n         return result;\r\n      },\r\n       BuildCall: function (node) {\r\n         var self = this;\r\n         var method = self.Build2(node.first);\r\n         var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n         var member;\r\n         var expression;\r\n         switch(true){\r\n             case method instanceof $data.Expressions.PropertyExpression:\r\n                 expression = method.expression;\r\n                 member = method.member;\r\n                 break;\r\n             case method instanceof $data.Expressions.ParameterExpression:\r\n                 expression = Container.createConstantExpression(null, typeof null);\r\n                 member = method;\r\n                 break;\r\n             //TODO: missing default case\r\n         }\r\n           var result = Container.createCallExpression(expression, member, args);\r\n         return result;\r\n      },\r\n       BuildProperty: function (node) {\r\n         ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n         ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n         ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n         var expression = this.Build2(node.first);\r\n         //TODO\r\n         //var type = expression.type;\r\n         //var member = type.getMemberDefinition()\r\n         //TODO how to not if?????\r\n         var member;\r\n         if (node.second.identifier) {\r\n             member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n         } else {\r\n             member = this.Build2(node.second);\r\n         }\r\n         var result = new $data.Expressions.PropertyExpression(expression, member);\r\n         return result;\r\n      },\r\n         BuildUnary: function(node) {\r\n         var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n         var nodeType = operator.expressionType;\r\n         var operand = this.Build2(node.first);\r\n         var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n         return result;\r\n      },\r\n       BuildSimpleBinary: function (node) {\r\n         ///<param name=\"node\" type=\"LintInflixNode\" />\r\n           var operator = $data.binaryOperators.getOperator(node.value);\r\n         var nodeType = operator.expressionType;\r\n           var left = this.Build2(node.first || node.left);\r\n         var right = this.Build2(node.second || node.right);\r\n         var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n         return result;\r\n      }\r\n       //Build: function (node, expNode) {\r\n      //    var n;\r\n      //    switch (node.arity) {\r\n      //        case \"ternary\":\r\n      //            if (node.value == \"?\")\r\n      //                n = this.BuildDecision(node, expNode);\r\n      //            else\r\n      //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n      //            break;\r\n      //        case null:\r\n      //        default:\r\n      //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n      //    }\r\n      //    return n;\r\n      //},*/\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],67:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ConstantExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(value, type, name, elementType) {\n        this.value = value;\n        //TODO\n        //this.type = Container.getTypeName(value);\n\n        this.type = type;\n        this.name = name;\n        this.elementType = elementType;\n        if (!_index.Guard.isNullOrUndefined(this.value)) {\n            this.type = _index.Container.resolveType(this.type);\n            if (this.type === _index2.default.Array && this.elementType || _index.Container.resolveType(_index.Container.getTypeName(this.value)) !== this.type) this.value = _index.Container.convertTo(value, this.type, this.elementType);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Constant, enumerable: true },\n    type: { value: Object, writable: true },\n    elementType: { value: Object, writable: true },\n    value: { value: undefined, writable: true },\n    toString: function toString(debug) {\n        //return \"[constant: \" + this.value.toString() + \"]\";\n        return this.value.toString();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],68:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ContinuationExpressionBuilder', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(mode) {\n        this.mode = mode;\n    },\n    compile: function compile(query) {\n\n        var findContext = { mode: \"find\", skipExists: false };\n        this.Visit(query.expression, findContext);\n\n        var result = {\n            skip: findContext.skipSize,\n            take: findContext.pageSize,\n            message: ''\n        };\n\n        if ('pageSize' in findContext) {\n            var expression;\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\n\n            if (!findContext.skipExists && findContext.pageSize) {\n                context.append = true;\n                expression = this.Visit(query.expression, context);\n            } else if (findContext.skipExists) {\n                expression = this.Visit(query.expression, context);\n            }\n\n            if (!context.abort) {\n                result.expression = expression;\n            } else {\n                result.skip = (result.skip || 0) - result.take;\n                result.message = 'Invalid skip value!';\n            }\n        } else {\n            result.message = 'take expression not defined in the chain!';\n        }\n\n        return result;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n\n        switch (context.mode) {\n            case 'find':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Take) {\n                    context.pageSize = expression.amount.value;\n                } else {\n                    context.skipSize = expression.amount.value;\n                    context.skipExists = true;\n                }\n                break;\n            case 'prev':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = expression.amount.value - context.pageSize;\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\n\n                    var constExp = _index.Container.createConstantExpression(Math.max(amount, 0), \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0, no prev\n                    context.abort = true;\n                }\n                break;\n            case 'next':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = context.pageSize + expression.amount.value;\n                    var constExp = _index.Container.createConstantExpression(amount, \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0\n                    var constExp = _index.Container.createConstantExpression(context.pageSize, \"number\");\n                    return _index.Container.createPagingExpression(expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n                }\n                break;\n            default:\n        }\n\n        this.Visit(expression.source, context);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],69:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.AssociationInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(associationInfo) {\n        this.associationInfo = associationInfo;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.AssociationInfo, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],70:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, parameters) {\n        if (_index.Container.resolveType(_index.Container.getTypeName(source)) == _index2.default.String && source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\" && !/^[^\\.]*(=>)/.test(source.replace(/^[\\s\\xA0]+/, \"\"))) {\n            source = \"function (it) { return \" + source + \"; }\";\n        }\n\n        this.source = source;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Code, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],71:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeToEntityConverter', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\n        this.scopeContext = scopeContext;\n        this.parameters = [];\n    },\n\n    VisitBinary: function VisitBinary(expression, context) {\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n\n        if (!(left instanceof _index2.default.Expressions.ConstantExpression) && right instanceof _index2.default.Expressions.ConstantExpression || !(right instanceof _index2.default.Expressions.ConstantExpression) && left instanceof _index2.default.Expressions.ConstantExpression) {\n\n            var refExpression, constExpr;\n            if (right instanceof _index2.default.Expressions.ConstantExpression) {\n                refExpression = left;\n                constExpr = right;\n            } else {\n                refExpression = right;\n                constExpr = left;\n            }\n\n            var memInfo;\n            if ((memInfo = refExpression.selector) instanceof _index2.default.Expressions.MemberInfoExpression || (memInfo = refExpression.operation) instanceof _index2.default.Expressions.MemberInfoExpression) {\n\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\n                    var fieldType = _index.Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\n                    var constExprType = _index.Container.resolveType(constExpr.type);\n\n                    if (fieldType !== constExprType) {\n\n                        var value = constExpr.value;\n                        if (expression.operator === _index2.default.Expressions.ExpressionType.In) {\n                            if (Array.isArray(value)) {\n                                var resultExp = [];\n                                for (var i = 0; i < value.length; i++) {\n                                    resultExp.push(new _index2.default.Expressions.ConstantExpression(value[i], fieldType));\n                                }\n                                value = resultExp;\n                                fieldType = _index2.default.Array;\n                            } else {\n                                fieldType = constExprType;\n                            }\n                        }\n\n                        if (right === constExpr) {\n                            right = new _index2.default.Expressions.ConstantExpression(value, fieldType, right.name);\n                        } else {\n                            left = new _index2.default.Expressions.ConstantExpression(value, fieldType, left.name);\n                        }\n                    }\n                }\n            }\n        }\n\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\n        return result;\n    },\n\n    VisitUnary: function VisitUnary(expression, context) {\n        var operand = this.Visit(expression.operand, context);\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\n        return result;\n    },\n\n    VisitParameter: function VisitParameter(expression, context) {\n        _index.Guard.requireValue(\"context\", context);\n        var et = _index2.default.Expressions.ExpressionType;\n        switch (expression.nodeType) {\n            case et.LambdaParameterReference:\n                var result = _index.Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\n                return result;\n            case et.LambdaParameter:\n                //TODO: throw descriptive exception or return a value\n                break;\n            default:\n                _index.Guard.raise(\"Parameter '\" + expression.name + \"' is missing!\");\n                break;\n        }\n    },\n\n    VisitThis: function VisitThis(expression, context) {\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\n        var result = _index.Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\n        return result;\n    },\n\n    VisitFunction: function VisitFunction(expression, context) {\n        var result = _index2.default.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\n        return result.body;\n    },\n\n    VisitCall: function VisitCall(expression, context) {\n        //var exp = this.Visit(expression.expression);\n        var self = this;\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n        var args = expression.args.map(function (arg) {\n            if (arg instanceof _index2.default.Expressions.FunctionExpression && (exp instanceof _index2.default.Expressions.EntitySetExpression || exp instanceof _index2.default.Expressions.FrameOperationExpression)) {\n                var operation = self.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n\n                var entitySet = self.scopeContext.getEntitySetFromElementType(exp.elementType);\n                var setExpr = null;\n                if (!entitySet) {\n                    //TODO\n                    _index.Guard.raise(\"Nested operations without entity set is not supported\");\n                } else {\n                    setExpr = entitySet.expression;\n                }\n\n                var frameType = context.frameType;\n                context.frameType = operation.frameType;\n                context.lambdaParameters.push(setExpr);\n                var res = self.Visit(arg, context);\n                context.lambdaParameters.pop();\n                context.frameType = frameType;\n\n                if (operation.frameTypeFactory) {\n                    return operation.frameTypeFactory(setExpr, res);\n                } else {\n                    return new operation.frameType(setExpr, res);\n                }\n            } else {\n                return self.Visit(arg, context);\n            }\n        });\n        var result;\n\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\n        switch (true) {\n            case exp instanceof _index2.default.Expressions.QueryParameterExpression:\n                var argValues = args.map(function (a) {\n                    return a.value;\n                });\n                result = expression.implementation(exp.value, member.value, argValues);\n                //var args = expressions\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n            case exp instanceof _index2.default.Expressions.EntityFieldExpression:\n\n            case exp instanceof _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntitySetExpression:\n            case exp instanceof _index2.default.Expressions.FrameOperationExpression:\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntityExpression:\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            case exp instanceof _index2.default.Expressions.EntityContextExpression:\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            default:\n                _index.Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\n            //TODO we must not alter the visited tree\n        }\n    },\n    _resolveFunctionArguments: function _resolveFunctionArguments(args, params) {\n        if (params) // remove current field poz\n            params = params.filter(function (p, i) {\n                return p.name !== '@expression';\n            });\n\n        //objectArgs\n        if (args.length === 1 && args[0] instanceof _index2.default.Expressions.ConstantExpression && _typeof(args[0].value) === 'object' && args[0].value && params && params[0] && args[0].value.constructor === _index2.default.Object && params.some(function (param) {\n            return param.name in args[0].value;\n        })) {\n\n            return params.map(function (p) {\n                var type = p.type || p.dataType || args[0].type;\n                return new _index2.default.Expressions.ConstantExpression(args[0].value[p.name], _index.Container.resolveType(type), p.name);\n            });\n        } else {\n            return args.map(function (expr, i) {\n                if (expr instanceof _index2.default.Expressions.ConstantExpression && params && params[i]) {\n                    var type = params[i].type || params[i].dataType || expr.type;\n                    return new _index2.default.Expressions.ConstantExpression(expr.value, _index.Container.resolveType(type), params[i].name);\n                } else {\n                    return expr;\n                }\n            });\n        }\n    },\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\n        _index.Guard.requireType(\"member\", member, _index2.default.Expressions.ConstantExpression);\n\n        function isPrimitiveType(memberDefinitionArg) {\n\n            var t = memberDefinitionArg.dataType;\n            if (typeof t === 'function') {\n                return false;\n            }\n\n            // suspicious code\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\n        }\n\n        switch (exp.expressionType) {\n            case _index2.default.Expressions.EntitySetExpression:\n            case _index2.default.Expressions.EntityExpression:\n                var memberDefinition = exp.getMemberDefinition(member.value);\n                if (!memberDefinition) {\n                    _index.Guard.raise(new _index.Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\n                }\n                //var storageMemberDefinition =\n                var storageField = memberDefinition.storageModel.PhysicalType.memberDefinitions.getMember(memberDefinition.name);\n                var res;\n                var memberDefinitionExp;\n                switch (storageField.kind) {\n                    case \"property\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createEntityFieldExpression(exp, memberDefinitionExp);\n                        return res;\n                    case \"navProperty\":\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\n                        var setExpression = _index.Container.createEntitySetExpression(exp, _index.Container.createAssociationInfoExpression(assocInfo));\n                        if (assocInfo.ToMultiplicity !== \"*\") {\n                            var ee = _index.Container.createEntityExpression(setExpression, {});\n                            return ee;\n                        } /* else {\r\n                             context.lambdaParameters.push(setExpression);\r\n                          }*/\n                        return setExpression;\n                    case \"complexProperty\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createComplexTypeExpression(exp, memberDefinitionExp);\n                        return res;\n                    //TODO: missing default case\n                }\n\n            //s/switch => property or navigationproperty\n            case _index2.default.Expressions.ComplexTypeExpression:\n                var memDef = exp.getMemberDefinition(member.value);\n                if (!memDef) {\n                    _index.Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\n                }\n                var memDefExp = _index.Container.createMemberInfoExpression(memDef);\n                var result;\n                //TODO!!!!\n                if (_index.Container.isPrimitiveType(_index.Container.resolveType(memDef.dataType))) {\n                    result = _index.Container.createEntityFieldExpression(exp, memDefExp);\n                    return result;\n                }\n                result = _index.Container.createComplexTypeExpression(exp, memDefExp);\n                return result;\n            case _index2.default.Expressions.QueryParameterExpression:\n                var value = expression.implementation(exp.value, member.value);\n                this.parameters[exp.index].name += \"$\" + member.value;\n                this.parameters[exp.index].value = value;\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, _index.Container.getTypeName(value));\n            case _index2.default.Expressions.EntityFieldExpression:\n            case _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, []);\n\n                return result;\n            default:\n                _index.Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],72:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ComplexTypeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.ComplexTypeExpression]);\n        _index.Guard.requireType(\"selector\", selector, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.MemberInfoExpression]);\n        this.source = source;\n        this.selector = selector;\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\n        var t = _index.Container.resolveType(dt);\n        this.entityType = t;\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Com }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],73:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityContextExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(instance) {\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\n        this.instance = instance;\n        //this.storage_type = {};\n        //this.typeName = this.type.name;\n    },\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityContext, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],74:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\n        ///</signature>\n        _index.Guard.requireValue(\"source\", source);\n        _index.Guard.requireValue(\"selector\", selector);\n        if (!(source instanceof _index2.default.Expressions.EntitySetExpression) && !(source instanceof _index2.default.Expressions.ServiceOperationExpression)) {\n            _index.Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\n        }\n\n        this.source = source;\n        this.selector = selector;\n\n        this.entityType = this.source.elementType;\n        this.storageModel = this.source.storageModel;\n\n        _index.Guard.requireValue(\"entityType\", this.entityType);\n        _index.Guard.requireValue(\"storageModel\", this.storageModel);\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        var memdef = this.entityType.getMemberDefinition(name);\n        if (!memdef) {\n            var findMember = function findMember(type) {\n                if (type.inheritedTo) {\n                    for (var i = 0; i < type.inheritedTo.length; i++) {\n                        memdef = type.inheritedTo[i].getMemberDefinition(name);\n                        if (!memdef) findMember(type.inheritedTo[i]);else break;\n                    }\n                }\n            };\n            findMember(this.entityType);\n            if (!memdef) {\n                _index.Guard.raise(new _index.Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\n            }\n        };\n        memdef.storageModel = this.storageModel;\n        return memdef;\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],75:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpressionVisitor', null, null, {\n\n    constructor: function constructor() {\n        this.lambdaTypes = [];\n    },\n\n    canVisit: function canVisit(expression) {\n        return expression instanceof _index2.default.Expressions.ExpressionNode;\n    },\n\n    Visit: function Visit(expression, context) {\n        if (!this.canVisit(expression)) return expression;\n\n        var visitorName = \"Visit\" + expression.getType().name;\n        if (visitorName in this) {\n            var fn = this[visitorName];\n            var result = fn.call(this, expression, context);\n            if (typeof result === 'undefined') {\n                return expression;\n            }\n            return result;\n        }\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\n        return expression;\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createToArrayExpression(source);\n        }\n        return expression;\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createForEachExpression(source);\n        }\n        return expression;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        return expression;\n    },\n\n    VisitSingleExpression: function VisitSingleExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSingleExpression(source);\n        return expression;\n    },\n\n    VisitFirstExpression: function VisitFirstExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFirstExpression(source);\n        return expression;\n    },\n\n    VisitSomeExpression: function VisitSomeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSomeExpression(source);\n        return expression;\n    },\n\n    VisitFindExpression: function VisitFindExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFindExpression(source, expression.params, expression.subMember);\n        return expression;\n    },\n\n    VisitEveryExpression: function VisitEveryExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createEveryExpression(source);\n        return expression;\n    },\n\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createCountExpression(source);\n        return expression;\n    },\n\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createBatchDeleteExpression(source);\n        }\n        return expression;\n    },\n\n    VisitBatchExecuteQueryExpression: function VisitBatchExecuteQueryExpression(expression, context) {\n        var newQueries = expression.members.map(function (expr) {\n            return this.Visit(expr, context);\n        }, this);\n\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newQueries[i];\n        }\n        if (!equal) {\n            return _index.Container.createBatchExecuteQueryExpression(newQueries);\n        }\n\n        return expression;\n    },\n\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        var newValues = expression.members.map(function (ofe) {\n            return this.Visit(ofe, context);\n        }, this);\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newValues[i];\n        }\n        if (!equal) {\n            return _index.Container.createObjectLiteralExpression(newValues);\n        }\n        return expression;\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n        var newExpression = this.Visit(expression.expression, context);\n        if (expression.expression !== newExpression) {\n            return _index.Container.createObjectFieldExpression(expression.fieldName, newExpression);\n        }\n        return expression;\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        var newExpression = this.Visit(expression.source, context);\n        if (newExpression !== expression.source) {\n            return _index.Container.createIncludeExpression(newExpression, expression.selector);\n        }\n        return expression;\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n\n        /// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\n        /// <param name=\"context\"></param>\n        var operand = this.Visit(expression.operand, context);\n        if (expression.operand !== operand) {\n            return _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\n        };\n        return expression;\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n        if (left !== expression.left || right !== expression.right) {\n            return new _index2.default.Expressions.SimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, expression.resolution);\n        }\n        return expression;\n    },\n\n    VisitEntityContextExpression: function VisitEntityContextExpression(expression, context) {\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\n        /// <param name=\"context\"></param>\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\n        return expression;\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createComplexTypeExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityFieldExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var operation = this.Visit(expression.operation, context);\n        var parameters = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createEntityFieldOperationExpression(source, operation, parameters);\n        return result;\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        var exp = this.Visit(expression.expression, context);\n        var args = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createParametricQueryExpression(exp, args);\n        return result;\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var amount = this.Visit(expression.amount, context);\n        if (source !== expression.source || amount !== expression.amount) {\n            return _index.Container.createPagingExpression(source, amount, expression.nodeType);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],76:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\n        this.selector = selector;\n        this.source = source;\n\n        if (this.selector instanceof _index2.default.Expressions.MemberInfoExpression || this.selector.name) {\n            this.memberName = this.selector.name;\n        }\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityField }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],77:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFieldOperation }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],78:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntitySetExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, instance) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression, _index2.default.Expressions.EntitySetExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression, _index2.default.Expressions.CodeExpression, _index2.default.Expressions.ParametricQueryExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\n        this.instance = instance;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        ///TODO!!!\n        this.storage_type = {};\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.MemberInfoExpression);\n                this.elementType = selector.memberDefinition.elementType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntityExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.AssociationInfoExpression);\n                this.elementType = selector.associationInfo.ToType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntitySetExpression:\n                if (selector instanceof _index2.default.Expressions.AssociationInfoExpression) {\n                    this.elementType = selector.associationInfo.ToType, this.storageModel = c.instance._storageModel.getStorageModel(selector.associationInfo.ToType);\n                } else {\n                    this.elementType = this.source.elementType;\n                    this.storageModel = this.source.storageModel;\n                }\n                break;\n            case this.source instanceof _index2.default.Expressions.ServiceOperationExpression:\n                this.elementType = this.source.elementType; //?????????\n                this.storageModel = this.source.storageModel;\n                break;\n            case this.source instanceof _index2.default.Expressions.FindExpression:\n                this.elementType = this.source.resultType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            default:\n                _index.Guard.raise(\"take and skip must be the last expressions in the chain!\");\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\n                break;\n        }\n\n        // suspicious code\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\n        //EntityTypeInfo\n    },\n    getMemberDefinition: function getMemberDefinition(name) {\n        var memdef = this.elementType.getMemberDefinition(name);\n        if (!memdef) {\n            _index.Guard.raise(new _index.Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\n        };\n        memdef.storageModel = this.storageModel;\n        return memdef;\n    },\n\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntitySet, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],79:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionMonitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(monitorDefinition) {\n        this.Visit = function (expression, context) {\n\n            var result = expression;\n            var methodName;\n            if (this.canVisit(expression)) {\n\n                //if (monitorDefinition.FilterExpressionNode) {\n\n                //};\n\n                if (monitorDefinition.VisitExpressionNode) {\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\n                };\n\n                methodName = \"Visit\" + expression.getType().name;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\n                }\n            }\n\n            //apply is about 3-4 times faster then call on webkit\n\n            var args = arguments;\n            if (result !== expression) args = [result, context];\n            result = _index2.default.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\n\n            args = [result, context];\n\n            if (this.canVisit(result)) {\n                var expressionTypeName = result.getType().name;\n                if (monitorDefinition.MonitorExpressionNode) {\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Monitor\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n\n                if (monitorDefinition.MutateExpressionNode) {\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Mutate\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n            }\n            return result;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],80:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FilterExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Filter, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.InlineCountExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.InlineCount, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchExecuteQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FrameOperator', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor() {\n        this.isTerminated = true;\n    }\n});\n\n(0, _index.$C)('$data.Expressions.CountExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Count, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SingleExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Single, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FindExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source, params, subMember) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.params = params;\n        this.subMember = subMember;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Find, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FirstExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.First, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.ForEachExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ForEach, enumerable: true }\n});\n(0, _index.$C)('$data.Expressions.ToArrayExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ToArray, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SomeExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.selector = selector;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Some, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.EveryExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.selector = selector;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Every, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchDeleteExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchDelete, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],81:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FrameOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntitySetExpression:\n            case this.source instanceof _index2.default.Expressions.FrameOperationExpression:\n                this.elementType = this.source.elementType;\n                this.storageModel = this.source.storageModel;\n                break;\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.FrameOperation }\n\n});\n\n(0, _index.$C)('$data.Expressions.EntityFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFunctionOperation }\n});\n\n(0, _index.$C)('$data.Expressions.ContextFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ContextFunctionOperation }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],82:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.IncludeExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Include, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],83:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.MemberInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n        this.memberName = memberDefinition.name;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.MemberInfo, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],84:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.OrderExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.source = source;\n        //this.selector = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.OrderBy, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],85:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParametricQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, parameters) {\n        this.expression = expression;\n        this.parameters = parameters || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ParametricQuery, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],86:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ProjectionExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector, params, instance) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Projection, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],87:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryExpressionCreator', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        _index.Guard.requireValue(\"scopeContext\", scopeContext);\n        this.scopeContext = scopeContext;\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\n        var source = expression.source.toString();\n        var jsCodeTree = _index.Container.createCodeParser(this.scopeContext).createExpression(source);\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\n\n        //TODO rename classes to reflex variable names\n        //TODO engage localValueResolver here\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\n        var constantResolver = _index.Container.createConstantValueResolver(expression.parameters, _index2.default.__global, this.scopeContext);\n        var parameterProcessor = _index.Container.createParameterResolverVisitor();\n\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\n\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\n        var code2entity = _index.Container.createCodeToEntityConverter(this.scopeContext);\n\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\n        var entityExpression = code2entity.Visit(jsCodeTree, { queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\n\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\n        var result = _index.Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\n\n        return result;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    },\n\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createIncludeExpression(source, selector);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],88:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, index, value, type) {\n        this.name = name;\n        this.index = index;\n        this.value = value;\n        //TODO\n        this.type = _index.Container.getTypeName(value);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.QueryParameter, writable: false }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],89:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.RepresentationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(kind) {},\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],90:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ServiceOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, cfg, boundItem) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///<param name=\"params\" type=\"$data.Array\" />\n        ///<param name=\"cfg\" type=\"$data.Object\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        this.cfg = cfg;\n        this.boundItem = boundItem;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                this.elementType = cfg.elementType ? _index.Container.resolveType(cfg.elementType) : this.elementType ? _index.Container.resolveType(cfg.returnType) : null;\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(_index.Container.resolveType(cfg.elementType)) : null;\n                break;\n            default:\n                _index.Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ServiceOperation, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],91:[function(_dereq_,module,exports){\n'use strict';\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpressionBuilder', null, null, {\n    constructor: function constructor(context) {\n        this.context = context;\n    },\n    _isLambdaParam: function _isLambdaParam(name) {\n        var p = this.context.lambdaParams;\n        for (var i = 0; i < p.length; i++) {\n            if (p[i] == name) return true;\n        }\n        return false;\n    },\n    _isParam: function _isParam(name) {\n        return this.context.paramContext[name] != undefined;\n    },\n    _isParamRoot: function _isParamRoot(name) {\n        return this.context.paramsName == name;\n    },\n    Build: function Build(node, expNode) {\n        var n;\n        switch (node.arity) {\n            case \"infix\":\n                if (\"(\" == node.value) n = this.BuildMethodCall(node, expNode);else if (\".\" == node.value) n = this.BuildMember(node, expNode);else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0) n = this.BuildEquality(node, expNode);else if ([\"&&\", \"||\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if (\"[\" == node.value) n = this.BuildArrayAccess(node, expNode);else _index.Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\n                break;\n            case \"prefix\":\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0) n = this.BuildUnary(node, expNode);else if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else if (\"{\" == node.value /* && \"object\" == node.type*/) //TODO: check the second condition necessity\n                    n = this.BuildNewExpression(node, expNode);else _index.Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\n                break;\n            case \"suffix\":\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else _index.Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\n                break;\n            case \"string\":\n            case \"number\":\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\n                break;\n            case \"ternary\":\n                if (node.value == \"?\") n = this.BuildDecision(node, expNode);else _index.Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\n                break;\n            case null:\n            case undefined:\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\")) n = this.BuildBoolLiteral(node, expNode);else n = this.BuildVariable(node, expNode);\n                break;\n            default:\n                _index.Guard.raise(\"Arity isn't implemented: \" + node.arity);\n        }\n        return n;\n    },\n    BuildNewExpression: function BuildNewExpression(node, expNode) {\n        var newExpression = _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\n        var n = node.first;\n        for (var i = 0; i < n.length; i++) {\n            newExpression.values.push(this.Build(n[i], newExpression));\n        }return newExpression;\n    },\n    BuildLiteral: function BuildLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n    },\n    BuildBoolLiteral: function BuildBoolLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\n    },\n    BuildVariable: function BuildVariable(node, expNode) {\n        if (!node.first) {\n            if (expNode.type == MEMBERACCESS) {\n                var subType;\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else subType = \"PROPERTY\";\n            } else {\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else if (_index2.default.__global[node.value] != undefined) subType = \"GLOBALOBJECT\";else _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\", \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value }));\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\n        }\n\n        var left = _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\n\n        var jsonAssign = _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\n        var right = this.Build(node.first, jsonAssign);\n        //left.parent = jsonAssign;\n        jsonAssign.left = left;\n        jsonAssign.right = right;\n\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n\n        return jsonAssign;\n    },\n    BuildMember: function BuildMember(node, expNode) {\n        if (node.value != \".\" || node.arity != \"infix\") {\n            if (node.type == \"string\") {\n                //TODO: more types?\n                return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\n        }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\n        var expression = this.Build(node.first, result);\n        var member = this.Build(node.second, result);\n        result.expression = expression;\n        result.member = member;\n        return result;\n    },\n    BuildUnary: function BuildUnary(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildIncDec: function BuildIncDec(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildBinary: function BuildBinary(node, expNode) {\n        if (!node.first) _index.Guard.raise(\"Cannot build binary: node.first is null\");\n        if (!node.second) _index.Guard.raise(\"Cannot build binary: node.second is null\");\n        var result = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildEquality: function BuildEquality(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildDecision: function BuildDecision(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\n        result.expression = this.Build(node.first, result);\n        result.left = this.Build(node.second, result);\n        result.right = this.Build(node.third, result);\n        return result;\n    },\n    BuildMethodCall: function BuildMethodCall(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\n        if (node.first.type == \"function\") {\n            //-- object's function\n            result.object = this.Build(node.first.first, result);\n            result.method = node.first.second.value;\n        } else {\n            //-- global function\n            if (node.first.type != null) _index.Guard.raise(\"Cannot build MethodCall because type is \" + type);\n            result.object = null;\n            result.method = node.first.value;\n        }\n        var argNodes = node.second;\n        var args = [];\n        for (var i = 0; i < argNodes.length; i++) {\n            var arg = argNodes[i];\n            args[i] = this.Build(arg, result);\n        }\n        result.args = args;\n        return result;\n    },\n    BuildArrayAccess: function BuildArrayAccess(node, expNode) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\n        result.array = this.Build(node.first, result);\n        result.index = this.Build(node.second, result);\n        return result;\n    }\n}, null);\n\n},{\"../../TypeSystem/index.js\":44}],92:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO: Finish refactoring ExpressionNode.js\n\n_index2.default.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\n    MemberAccess: \"memberAccess\", // { type:MEMBERACCESS, executable:true, expression:, member: }\n    Call: \"call\",\n\n    /* binary operators */\n    Equal: \"equal\",\n    NotEqual: \"notEqual\",\n    EqualTyped: \"equalTyped\",\n    NotEqualTyped: \"notEqualTyped\",\n    GreaterThen: \"greaterThan\",\n    LessThen: \"lessThan\",\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\n    LessThenOrEqual: \"lessThenOrEqual\",\n    Or: \"or\",\n    OrBitwise: \"orBitwise\",\n    And: \"and\",\n    AndBitwise: \"andBitwise\",\n\n    In: \"in\",\n\n    Add: \"add\",\n    Divide: \"divide\",\n    Multiply: \"multiply\",\n    Subtract: \"subtract\",\n    Modulo: \"modulo\",\n    ArrayIndex: \"arrayIndex\",\n\n    /* unary operators */\n    New: \"new\",\n    Positive: \"positive\",\n    Negative: \"negative\",\n    Increment: \"increment\",\n    Decrement: \"decrement\",\n    Not: \"not\",\n\n    This: \"this\",\n    LambdaParameterReference: \"lambdaParameterReference\",\n    LambdaParameter: \"lambdaParameter\",\n    ParameterReference: \"parameterReference\",\n    Parameter: \"parameter\",\n\n    ArrayLiteral: \"arrayLiteral\",\n    ObjectLiteral: \"objectLiteral\",\n    ObjectField: \"objectField\",\n    Function: \"Function\",\n    Unknown: \"UNKNOWN\",\n\n    EntitySet: \"EntitySet\",\n    ServiceOperation: \"ServiceOperation\",\n    EntityField: \"EntityField\",\n    EntityContext: \"EntityContext\",\n    Entity: \"Entity\",\n    Filter: \"Filter\",\n    First: \"First\",\n    Count: \"Count\",\n    InlineCount: \"InlineCount\",\n    BatchExecuteQuery: \"BatchExecuteQuery\",\n    Single: \"Single\",\n    Find: \"Find\",\n    Some: \"Some\",\n    Every: \"Every\",\n    ToArray: \"ToArray\",\n    BatchDelete: \"BatchDelete\",\n    ForEach: \"ForEach\",\n    Projection: \"Projection\",\n    EntityMember: \"EntityMember\",\n    EntityFieldOperation: \"EntityFieldOperation\",\n    FrameOperation: \"FrameOperation\",\n    EntityFunctionOperation: \"EntityFunctionOperation\",\n    ContextFunctionOperation: \"ContextFunctionOperation\",\n    EntityBinary: \"EntityBinary\",\n    Code: \"Code\",\n    ParametricQuery: \"ParametricQuery\",\n    MemberInfo: \"MemberInfo\",\n    QueryParameter: \"QueryParameter\",\n    ComplexEntityField: \"ComplexEntityField\",\n\n    Take: \"Take\",\n    Skip: \"Skip\",\n    OrderBy: \"OrderBy\",\n    OrderByDescending: \"OrderByDescending\",\n    Include: \"Include\",\n\n    IndexedPhysicalAnd: \"IndexedDBPhysicalAndFilterExpression\",\n    IndexedLogicalAnd: \"IndexedDBLogicalAndFilterExpression\",\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\n});\n\n_index2.default.BinaryOperator = function () {\n    ///<field name=\"operator\" type=\"string\" />\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\n    ///<field name=\"type\" type=\"string\" />\n};\n\n_index2.default.binaryOperators = [{ operator: \"==\", expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n        return a == b;\n    } }, { operator: \"===\", expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a === b;\n    } }, { operator: \"!=\", expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a != b;\n    } }, { operator: \"!==\", expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a !== b;\n    } }, { operator: \">\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a > b;\n    } }, { operator: \">=\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a >= b;\n    } }, { operator: \"<=\", expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a <= b;\n    } }, { operator: \"<\", expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a < b;\n    } }, { operator: \"&&\", expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n        return a && b;\n    } }, { operator: \"||\", expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n        return a || b;\n    } }, { operator: \"&\", expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a & b;\n    } }, { operator: \"|\", expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a | b;\n    } }, { operator: \"+\", expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n        return a + b;\n    } }, { operator: \"-\", expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n        return a - b;\n    } }, { operator: \"/\", expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n        return a / b;\n    } }, { operator: \"%\", expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n        return a % b;\n    } }, { operator: \"*\", expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n        return a * b;\n    } }, { operator: \"[\", expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n        return a[b];\n    } }, { operator: \"in\", expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n        return a in b;\n    } }];\n\n_index2.default.binaryOperators.resolve = function (operator) {\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.binaryOperators.contains = function (operator) {\n    return _index2.default.binaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.binaryOperators.getOperator = function (operator) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.unaryOperators = [{ operator: \"+\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n        return +operand;\n    } }, { operator: \"-\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n        return -operand;\n    } }, { operator: \"++\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return ++operand;\n    } }, { operator: \"--\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return --operand;\n    } }, { operator: \"++\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return operand++;\n    } }, { operator: \"!\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n        return !operand;\n    } }, { operator: \"--\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return operand--;\n    } }\n\n//{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\n];\n\n_index2.default.unaryOperators.resolve = function (operator) {\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.unaryOperators.contains = function (operator) {\n    return _index2.default.unaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.unaryOperators.getOperator = function (operator, arity) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator && (!arity || item.arity == arity);\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.timeIt = function (fn, iterations) {\n    iterations = iterations || 1;\n\n    console.time(\"!\");\n    for (var i = 0; i < iterations; i++) {\n        fn();\n    }\n    console.timeEnd(\"!\");\n};\n\n_index2.default.Expressions.OperatorTypes = {\n    UNARY: \"UNARY\", // { type:UNARY, executable:true, operator:, operand: }\n    INCDEC: \"INCDEC\", // { type:INCDEC, executable:true, operator:, operand:, suffix: }\n    DECISION: \"DECISION\", // { type:DECISION, executable:true, expression:, left:, right: }\n    METHODCALL: \"METHODCALL\", // { type:METHODCALL, executable:true, object:, method:, args: }\n    NEW: \"NEW\", // { type:NEW, executable:true, values: [] };\n    JSONASSIGN: \"JSONASSIGN\", // { type:JSONASSIGN, executable:true, left:, right: }\n    ARRAYACCESS: \"ARRAYACCESS\", // { type:ARRAYACCESS, executable:true, array:, index: }\n    UNKNOWN: \"UNKNOWN\"\n};\n\n_index2.default.executable = true;\n\nfunction jsonify(obj) {\n    return JSON.stringify(obj, null, \"\\t\");\n}\n\n(0, _index.$C)('$data.Expressions.ExpressionNode', null, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for all Expressions.</summary>\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\n        ///</field>\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.type = type;\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\n        ///TODO\n        this.expressionType = this.constructor;\n    },\n    toJSON: function toJSON() {\n        var __proto__ = (0, _index2.default)('$data.Expressions.ExpressionNode').prototype;\n        var origToJSON = __proto__.toJSON;\n        delete __proto__.toJSON;\n        var res = JSON.parse(JSON.stringify(this));\n        res.expressionType = _index.Container.resolveName(this._expressionType);\n        __proto__.toJSON = origToJSON;\n        return res;\n    },\n    getJSON: function getJSON() {\n        return jsonify(this);\n    },\n\n    //TOBLOG maybe\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n                          if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n              this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\n    expressionType: {\n        set: function set(value) {\n            if (typeof value === 'string') {\n                value = _index.Container.resolveType(value);\n            }\n            this._expressionType = value;\n        },\n        get: function get(value) {\n            //IE ommits listing JSON.stringify in call chain\n\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\n            //     return Container.resolveName(this._expressionType);\n            // }\n            return this._expressionType;\n        },\n        enumerable: true\n    },\n    ///toString: function () { },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: false },\n\n    type: {},\n\n    isTerminated: { value: false },\n\n    toString: function toString() {\n        return this.value;\n    }\n}, null);\n\n(0, _index.$C)('$data.Expressions.UnaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(operand, operator, nodeType, resolution) {\n        /// <summary>\n        /// Represents an operation with only one operand and an operator\n        /// </summary>\n        /// <param name=\"operand\"></param>\n        /// <param name=\"operator\"></param>\n        /// <param name=\"nodeType\"></param>\n        /// <param name=\"resolution\"></param>\n        this.operand = operand;\n        this.operator = operator;\n        this.nodeType = nodeType;\n        this.resolution = resolution;\n    },\n\n    operator: { value: undefined, writable: true },\n    operand: { value: undefined, writable: true },\n    nodeType: { value: undefined, writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],93:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FunctionExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, parameters, body) {\n        ///<signature>\n        ///<summary>Represents a function declaration.</summary>\n        ///<param name=\"name\" type=\"String\">Function name</param>\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\n        ///</signature>\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\n\n        this.parameters = parameters || [];\n        this.name = name;\n        this.body = body;\n    },\n\n    toString: function toString(debug) {\n        var paramStrings = this.parameters.map(function (p) {\n            return p.toString();\n        });\n        paramStrings = paramStrings.join(\",\");\n        var bodyString = this.body ? this.body.toString(debug) : '';\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Function, writable: true },\n    parameters: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ParameterExpression },\n    body: { value: undefined, dataType: _index2.default.Expressions.ExpressionNode },\n    type: {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],94:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(fieldName, expression) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.fieldName = fieldName;\n        this.expression = expression;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectField, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],95:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectLiteral, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    },\n\n    implementation: {\n        get: function get() {\n            return function (namesAndValues) {\n                var result = {};\n                namesAndValues.forEach(function (item) {\n                    result[item.name] = item.value;\n                });\n                return result;\n            };\n        },\n        set: function set() {}\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],96:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PagingExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.source = source;\n        this.amount = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],97:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, type, nodeType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.writePropertyValue(\"name\", name);\n        //this.writePropertyValue(\"type\", type);\n        this.nodeType = nodeType || _index2.default.Expressions.ExpressionType.Parameter;\n        this.name = name;\n        this.type = type || \"unknown\";\n        var _owningFunction;\n    },\n\n    owningFunction: { value: undefined, enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Parameter, writable: true },\n    name: { value: undefined, dataType: String, writable: true },\n    type: { value: undefined, dataType: \"object\", writable: true },\n    toString: function toString(debug) {\n        var result;\n        result = debug ? this.type + \" \" : \"\";\n        result = result + this.name;\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],98:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PropertyExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member) {\n        ///<summary>Represents accessing a property or field of an object</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\n\n        this.expression = expression;\n        this.member = member;\n\n        this.type = member.dataType;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.MemberAccess\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (holder, memberName) {\n                if (holder[memberName] === undefined) _index.Guard.raise(new _index.Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\n                return holder[memberName];\n            };\n        },\n        set: function set() {}\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    toString: function toString(debug) {\n        return this.expression.toString() + \".\" + this.member.toString();\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],99:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.SimpleBinaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(left, right, nodeType, operator, type, resolution) {\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\n        ///<field name=\"implementation\" type=\"function\" />\n        this.left = left;\n        this.right = right;\n        this.nodeType = nodeType;\n        this.operator = operator;\n        this.type = type;\n        this.resolution = resolution;\n    },\n\n    implementation: {\n        get: function get() {\n            return _index2.default.binaryOperators.getOperator(this.operator).implementation;\n        },\n        set: function set() {}\n\n    },\n    //nodeType: { value: $data.Expressions.ExpressionType },\n    type: { value: \"number\", writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],100:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ThisExpression', _index2.default.Expressions.ExpressionNode, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.This }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],101:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExecutorVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    //--\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var value = eNode.name == context.paramsName ? context.paramContext : _index2.default.__global[eNode.name];\n        if (typeof value == 'undefined') _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\", \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name }));\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var chain = this.GetMemberChain(eNode);\n        var value;\n        for (var i = 0; i < chain.length; i++) {\n            if (i == 0) value = context.paramContext;else value = value[chain[i].name];\n        }\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var operandValue = operand.valueType == \"string\" ? \"'\" + operand.value + \"'\" : operand.value;\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        if (eNode.suffix) value = eNode.operator == \"++\" ? operand.value++ : operand.value--;else value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value = expression.value ? left.value : right.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object !== eNode.object || args != eNode.args) eNode = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var a = [];\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            var t = _typeof(arg.value);\n            a.push(t == \"string\" ? \"'\" + arg.value + \"'\" : arg.value);\n        }\n        var value;\n        var src = object ? \"value = object.value[eNode.method](\" + a.join(\",\") + \");\" : \"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var arrayNode = this.Visit(eNode.array, context);\n        var indexNode = this.Visit(eNode.index, context);\n        var value = arrayNode.value[indexNode.value];\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],102:[function(_dereq_,module,exports){\n'use strict';\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpTreeVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        this._deep = this._deep + 1;\n        var result = null;\n        switch (eNode.type) {\n            case LITERAL:\n                result = this.VisitLiteral(eNode, context);break;\n            case VARIABLE:\n                result = this.VisitVariable(eNode, context);break;\n            case MEMBERACCESS:\n                result = this.VisitMember(eNode, context);break;\n            case BINARY:\n                result = this.VisitBinary(eNode, context);break;\n            case UNARY:\n                result = this.VisitUnary(eNode, context);break;\n            case INCDEC:\n                result = this.VisitIncDec(eNode, context);break;\n            case EQUALITY:\n                result = this.VisitEquality(eNode, context);break;\n            case DECISION:\n                result = this.VisitDecision(eNode, context);break;\n            case METHODCALL:\n                result = this.VisitMethodCall(eNode, context);break;\n            case NEW:\n                result = this.VisitNew(eNode, context);break;\n            case JSONASSIGN:\n                result = this.VisitJsonAssign(eNode, context);break;\n            case ARRAYACCESS:\n                result = this.VisitArrayAccess(eNode, context);break;\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n        this._deep = this._deep - 1;\n        return result;\n    },\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\n},{\"../../../TypeSystem/index.js\":44}],103:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNode\"/>\n\n        //this._deep = this._deep + 1;\n        if (!eNode) {\n            return eNode;\n        }\n\n        var result = null;\n\n        switch (eNode.expressionType) {\n            case _index2.default.Expressions.ParameterExpression:\n                result = this.VisitParameter(eNode, context);\n                break;\n            case _index2.default.Expressions.ConstantExpression:\n                result = this.VisitConstant(eNode, context);\n                break;\n            case _index2.default.Expressions.FunctionExpression:\n                result = this.VisitFunction(eNode, context);\n                break;\n            case _index2.default.Expressions.CallExpression:\n                result = this.VisitCall(eNode, context);\n                break;\n            case _index2.default.Expressions.SimpleBinaryExpression:\n                result = this.VisitBinary(eNode, context);\n                break;\n            case _index2.default.Expressions.PropertyExpression:\n                result = this.VisitProperty(eNode, context);\n                break;\n            //result = th\n            case _index2.default.Expressions.ThisExpression:\n                if (_index2.default.defaults.parameterResolutionCompatibility) {\n                    result = this.VisitThis(eNode, context);\n                } else {\n                    _index.Guard.raise(\"Keyword 'this' is not allowed. You should get value from parameter. (it, p1) => it.Title == p1\");\n                }\n                break;\n            case _index2.default.Expressions.ObjectLiteralExpression:\n                result = this.VisitObjectLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.ObjectFieldExpression:\n                result = this.VisitObjectField(eNode, context);\n                break;\n            case _index2.default.Expressions.ArrayLiteralExpression:\n                result = this.VisitArrayLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.UnaryExpression:\n                result = this.VisitUnary(eNode, context);\n                break;\n            case _index2.default.Expressions.EntityContextExpression:\n                result = this.VisitEntityContext(eNode, context);\n                break;\n            default:\n                debugger;\n                break;\n            //case VARIABLE:\n\n            //    result = this.VisitVariable(eNode, context);\n            //    break;\n            //case MEMBERACCESS:\n            //    result = this.VisitMember(eNode, context);\n            //    break;\n            //case BINARY:\n            //    result = this.VisitBinary(eNode, context);\n            //    break;\n            //case UNARY:\n            //    result = this.VisitUnary(eNode, context);\n            //    break;\n            //case INCDEC:\n            //    result = this.VisitIncDec(eNode, context);\n            //    break;\n            //case EQUALITY: result = this.VisitEquality(eNode, context); break;\n            //case DECISION: result = this.VisitDecision(eNode, context); break;\n            //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\n            //case NEW: result = this.VisitNew(eNode, context); break;\n            //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\n            //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\n            //default:\n            //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n\n        this._deep = this._deep - 1;\n        return result;\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var result = _index.Container.createArrayLiteralExpression(items);\n        return result;\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var self = this;\n        var members = eNode.members.map(function (member) {\n            return self.Visit(member, context);\n        });\n        var result = _index.Container.createObjectLiteralExpression(members);\n        return result;\n    },\n\n    VisitObjectField: function VisitObjectField(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var result = _index.Container.createObjectFieldExpression(eNode.fieldName, expression);\n        return result;\n    },\n\n    VisitThis: function VisitThis(eNode, context) {\n        return eNode;\n    },\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        var self = this;\n        var args = eNode.args.map(function (arg) {\n            return this.Visit(arg, context);\n        }, this);\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    },\n\n    VisitParameter: function VisitParameter(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n        var self = this;\n\n        var params = eNode.parameters.map(function (p, i) {\n            return self.Visit(p, context);\n        });\n\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        return new _index2.default.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.PropertyExpression(expression, member);\n        //var member =\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<returns type=\"$data.Expressions.UnaryExpression\"/>\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return new _index2.default.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitEntityContext: function VisitEntityContext(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.EntityContextExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],104:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.GlobalContextProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(global) {\n        ///<param name=\"global\" type=\"object\" />\n        this.global = global;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        return (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter || _index2.default.defaults.parameterResolutionCompatibility && paramExpression.nodeType == _index2.default.Expressions.ExpressionType.ParameterReference) && this.global && _typeof(this.global) === 'object' && paramExpression.name in this.global;\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        var resultValue = this.global[paramExpression.name];\n        var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === 'undefined' ? 'undefined' : _typeof(resultValue), paramExpression.name);\n        return expression;\n    }\n\n});\n\n(0, _index.$C)(\"$data.Expressions.ConstantValueResolver\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(paramsObject, global, scopeContext) {\n        ///<param name=\"global\" type=\"object\" />\n        this.globalResolver = _index.Container.createGlobalContextProcessor(global);\n        this.paramResolver = _index.Container.createGlobalContextProcessor(paramsObject);\n        this.paramsObject = paramsObject;\n        this.scopeContext = scopeContext;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        if (_index2.default.defaults.parameterResolutionCompatibility) {\n            return paramExpression.name === '$context' || paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This && this.paramsObject ? true : this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression);\n        }\n        return paramExpression.name === '$context' ? true : this.paramResolver.canResolve(paramExpression);\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        if (paramExpression.name === '$context') {\n            return _index.Container.createEntityContextExpression(this.scopeContext);\n        }\n        if (_index2.default.defaults.parameterResolutionCompatibility) {\n            if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This) {\n                return _index.Container.createConstantExpression(this.paramsObject, _typeof(this.paramsObject), 'this');\n            }\n            return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\n        }\n        return this.paramResolver.resolve(paramExpression);\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],105:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LambdaParameterProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(lambdaParameterTypeInfos) {\n        ///<param name=\"global\" />\n        ///<param name=\"evalMethod\" />\n        var paramIndices = {};\n        var $idx = \"name\";\n\n        this.canResolve = function (paramExpression, context) {\n            if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.LambdaParameter) {\n                var fnParams = paramExpression.owningFunction.parameters;\n\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\n                    return true;\n                }\n\n                for (var j = 0; j < fnParams.length; j++) {\n                    if (fnParams[j].name == paramExpression.name) {\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return false;\n        };\n\n        this.resolve = function (paramExpression, context) {\n            var lambdaParamType = paramIndices[paramExpression.name];\n            var result = _index.Container.createParameterExpression(paramExpression.name, lambdaParamType, _index2.default.Expressions.ExpressionType.LambdaParameter);\n            result.owningFunction = paramExpression.owningFunction;\n            return result;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],106:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LocalContextProcessor\", _index2.default.Expressions.GlobalContextProcessor, null, {\n    constructor: function constructor(evalMethod) {\n        ///<param name=\"global\" type=\"object\" />\n        this.canResolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            return paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter && evalMethod(\"typeof \" + paramExpression.name) !== 'undefined';\n        };\n        this.resolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\n            var resultValue = evalMethod(paramExpression.name);\n            var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === \"undefined\" ? \"undefined\" : _typeof(resultValue));\n            return expression;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],107:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\"use strict\"; // suspicious code\n\n(0, _index.$C)('$data.Expressions.LogicalSchemaBinderVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(expression, binder) {},\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        var exp = this.Visit(expression.expression, context);\n        var mem = this.Visit(expression.member, context);\n\n        var type = exp.type;\n        var memberType = context.memberResolver.resolve(type, mem.value);\n        mem.type = memberType;\n        return _index.Container.createPropertyExpression(exp, mem);\n    }\n\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],108:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.ParameterProcessor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\n    },\n\n    Visit: function Visit(node, context) {\n        if ((node instanceof _index2.default.Expressions.ParameterExpression || node instanceof _index2.default.Expressions.ThisExpression) && this.canResolve(node)) {\n            var result = this.resolve(node, context);\n            if (result !== node) result[\"resolvedBy\"] = this.constructor.name;\n            return result;\n        } else {\n            return node;\n        }\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<returns type=\"boolean\" />\n        _index.Guard.raise(\"Pure method\");\n    },\n    resolve: function resolve(paramExpression) {\n        ///<returns type=\"XXX\" />\n        _index.Guard.raise(\"Pure method\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],109:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterResolverVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n\n    constructor: function constructor(expression, resolver) {\n        /// <summary>\n        /// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\n        /// is transformed into a constant that has the current href as its value\n        /// </summary>\n        /// <param name=\"expression\"></param>\n        /// <param name=\"resolver\"></param>\n        this.lambdaParamCache = {};\n        this.paramCache = {};\n    },\n\n    Visit: function Visit(expression, resolver) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\n        //TODO base call is just ugly\n        return _index2.default.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = items.every(function (item) {\n            return item instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            items = items.map(function (item) {\n                return item.value;\n            });\n            return _index.Container.createConstantExpression(items, \"array\");\n        } else {\n            return _index.Container.createArrayLiteralExpression(items);\n        }\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        var self = this;\n        var members = eNode.members.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = members.every(function (member) {\n            return member.expression instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            var params = members.map(function (member) {\n                return { name: member.fieldName, value: member.expression.value };\n            });\n            var value = eNode.implementation(params);\n            return _index.Container.createConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        } else {\n            return _index.Container.createObjectLiteralExpression(members);\n        }\n    },\n\n    VisitThis: function VisitThis(eNode, resolver) {\n        return resolver.Visit(eNode, resolver);\n    },\n\n    VisitParameter: function VisitParameter(eNode, resolver) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n\n        var node;\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\n        switch (eNode.nodeType) {\n            case _index2.default.Expressions.ExpressionType.Parameter:\n                node = resolver.Visit(eNode, resolver);\n                this.paramCache[node.name] = node;\n                return node;\n            case _index2.default.Expressions.ExpressionType.ParameterReference:\n                if (_index2.default.defaults.parameterResolutionCompatibility) {\n                    return resolver.Visit(eNode, resolver);\n                }\n\n                var paramNode = this.paramCache[eNode.name];\n                if (paramNode) {\n                    return paramNode;\n                } else {\n                    _index.Guard.raise(\"Missing parameter '\" + eNode.name + \"'\");\n                }\n                break;\n            case _index2.default.Expressions.ExpressionType.LambdaParameter:\n                node = resolver.Visit(eNode, resolver);\n                this.lambdaParamCache[node.name] = node;\n                return node;\n            case _index2.default.Expressions.ExpressionType.LambdaParameterReference:\n                var lambdaParam = this.lambdaParamCache[eNode.name];\n                if (lambdaParam) {\n                    node = _index.Container.createParameterExpression(eNode.name, lambdaParam.type, _index2.default.Expressions.ExpressionType.LambdaParameterReference);\n                    node.paramIndex = eNode.paramIndex;\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\n                    return node;\n                }\n                break;\n            default:\n                return eNode;\n\n        }\n\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n\n        var self = this;\n        var params = eNode.parameters.map(function (p, i) {\n            var result = self.Visit(p, context);\n            return result;\n        });\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        var expr = _index2.default.Expressions;\n\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression) {\n            var result = eNode.implementation(left.value, right.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        //var imp = $data.unaryOperators.getOperator(\n        var expr = _index2.default.Expressions;\n        if (operand instanceof expr.ConstantExpression) {\n            var result = eNode.operator.implementation(operand.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        var result;\n        if (expression instanceof _index2.default.Expressions.ConstantExpression && member instanceof _index2.default.Expressions.ConstantExpression) {\n            ///TODO implement checking for the member, throw on error\n            result = eNode.implementation(expression.value, member.value);\n\n            //Method call processed before\n            //if (typeof result === 'function') {\n            //    return new $data.Expressions.ConstantExpression(\n            //        function () { return result.apply(expression.value, arguments); });\n            //}\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result), expression.name + '$' + member.value);\n        }\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n\n        result = _index.Container.createPropertyExpression(expression, member);\n        return result;\n    },\n\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        function isExecutable(args, body, obj) {\n            return body instanceof _index2.default.Expressions.ConstantExpression && (\n            //global methods will not have a this.\n            !obj || obj instanceof _index2.default.Expressions.ConstantExpression) && args.every(function (item) {\n                return item instanceof _index2.default.Expressions.ConstantExpression;\n            });\n        }\n        var call = _index2.default.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\n        var obj = call.expression;\n        var body = call.member;\n        var args = call.args;\n\n        function convertToValue(arg) {\n            if (arg instanceof _index2.default.Expressions.ConstantExpression) return arg.value;\n            return arg;\n        };\n\n        if (isExecutable(args, body, obj)) {\n            var fn = body.value;\n            if (typeof fn === 'string' && obj.value) {\n                fn = obj.value[fn];\n            }\n            if (typeof fn !== 'function') {\n                //TODO dig that name out from somewhere\n                _index.Guard.raise(\"Constant expression is not a method...\");\n            }\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\n            return new _index2.default.Expressions.ConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        }\n        return call;\n    }\n}, {});\n(0, _index.$C)(\"$data.Expressions.AggregatedVisitor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(visitors) {\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\n\n        this.Visit = function (node, context) {\n            for (var i = 0; i < visitors.length; i++) {\n                var n = visitors[i].Visit(node, context);\n                if (n !== node) return n;\n            }\n            return node;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],110:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.SetExecutableVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    Visit: function Visit(eNode, context) {\n        switch (eNode.type) {\n            case LITERAL:\n                return this.VisitLiteral(eNode, context);\n            case VARIABLE:\n                return this.VisitVariable(eNode, context);\n            case MEMBERACCESS:\n                return this.VisitMember(eNode, context);\n            case BINARY:\n                return this.VisitBinary(eNode, context);\n            case UNARY:\n                return this.VisitUnary(eNode, context);\n            case INCDEC:\n                return this.VisitIncDec(eNode, context);\n            case EQUALITY:\n                return this.VisitEquality(eNode, context);\n            case DECISION:\n                return this.VisitDecision(eNode, context);\n            case METHODCALL:\n                return this.VisitMethodCall(eNode, context);\n            case NEW:\n                return this.VisitNew(eNode, context);\n            case JSONASSIGN:\n                return this.VisitJsonAssign(eNode, context);\n            case ARRAYACCESS:\n                return this.VisitArrayAccess(eNode, context);\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && left.executable && right.executable && expression.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args && (object == null ? true : object.executable) == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        // { type:NEW, executable:true, values: [] };\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (_typeof(context.paramContext[eNode.name]) == undefined) // isn't param  //TODO: check ParamContext\n            _index.Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\n        //this._setExecutable(eNode, true);\n        return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        var chain = this.GetMemberChain(eNode);\n        var firstMember = chain[0].name;\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\n        if (!isLocalParam && !isLambdaParam) _index.Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":44}],111:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _ExpressionNode = _dereq_('./ExpressionNode2.js');\n\nvar _ExpressionNode2 = _interopRequireDefault(_ExpressionNode);\n\nvar _ArrayLiteralExpression = _dereq_('./ArrayLiteralExpression.js');\n\nvar _ArrayLiteralExpression2 = _interopRequireDefault(_ArrayLiteralExpression);\n\nvar _CallExpression = _dereq_('./CallExpression.js');\n\nvar _CallExpression2 = _interopRequireDefault(_CallExpression);\n\nvar _CodeParser = _dereq_('./CodeParser.js');\n\nvar _CodeParser2 = _interopRequireDefault(_CodeParser);\n\nvar _ConstantExpression = _dereq_('./ConstantExpression.js');\n\nvar _ConstantExpression2 = _interopRequireDefault(_ConstantExpression);\n\nvar _FunctionExpression = _dereq_('./FunctionExpression.js');\n\nvar _FunctionExpression2 = _interopRequireDefault(_FunctionExpression);\n\nvar _ObjectFieldExpression = _dereq_('./ObjectFieldExpression.js');\n\nvar _ObjectFieldExpression2 = _interopRequireDefault(_ObjectFieldExpression);\n\nvar _ObjectLiteralExpression = _dereq_('./ObjectLiteralExpression.js');\n\nvar _ObjectLiteralExpression2 = _interopRequireDefault(_ObjectLiteralExpression);\n\nvar _PagingExpression = _dereq_('./PagingExpression.js');\n\nvar _PagingExpression2 = _interopRequireDefault(_PagingExpression);\n\nvar _ParameterExpression = _dereq_('./ParameterExpression.js');\n\nvar _ParameterExpression2 = _interopRequireDefault(_ParameterExpression);\n\nvar _PropertyExpression = _dereq_('./PropertyExpression.js');\n\nvar _PropertyExpression2 = _interopRequireDefault(_PropertyExpression);\n\nvar _SimpleBinaryExpression = _dereq_('./SimpleBinaryExpression.js');\n\nvar _SimpleBinaryExpression2 = _interopRequireDefault(_SimpleBinaryExpression);\n\nvar _ThisExpression = _dereq_('./ThisExpression.js');\n\nvar _ThisExpression2 = _interopRequireDefault(_ThisExpression);\n\nvar _ExpressionVisitor = _dereq_('./Visitors/ExpressionVisitor.js');\n\nvar _ExpressionVisitor2 = _interopRequireDefault(_ExpressionVisitor);\n\nvar _ParameterProcessor = _dereq_('./Visitors/ParameterProcessor.js');\n\nvar _ParameterProcessor2 = _interopRequireDefault(_ParameterProcessor);\n\nvar _GlobalContextProcessor = _dereq_('./Visitors/GlobalContextProcessor.js');\n\nvar _GlobalContextProcessor2 = _interopRequireDefault(_GlobalContextProcessor);\n\nvar _LocalContextProcessor = _dereq_('./Visitors/LocalContextProcessor.js');\n\nvar _LocalContextProcessor2 = _interopRequireDefault(_LocalContextProcessor);\n\nvar _LambdaParameterProcessor = _dereq_('./Visitors/LambdaParameterProcessor.js');\n\nvar _LambdaParameterProcessor2 = _interopRequireDefault(_LambdaParameterProcessor);\n\nvar _ParameterResolverVisitor = _dereq_('./Visitors/ParameterResolverVisitor.js');\n\nvar _ParameterResolverVisitor2 = _interopRequireDefault(_ParameterResolverVisitor);\n\nvar _LogicalSchemaBinderVisitor = _dereq_('./Visitors/LogicalSchemaBinderVisitor.js');\n\nvar _LogicalSchemaBinderVisitor2 = _interopRequireDefault(_LogicalSchemaBinderVisitor);\n\nvar _ExpTreeVisitor = _dereq_('./Visitors/ExpTreeVisitor.js');\n\nvar _ExpTreeVisitor2 = _interopRequireDefault(_ExpTreeVisitor);\n\nvar _SetExecutableVisitor = _dereq_('./Visitors/SetExecutableVisitor.js');\n\nvar _SetExecutableVisitor2 = _interopRequireDefault(_SetExecutableVisitor);\n\nvar _ExecutorVisitor = _dereq_('./Visitors/ExecutorVisitor.js');\n\nvar _ExecutorVisitor2 = _interopRequireDefault(_ExecutorVisitor);\n\nvar _ExpressionBuilder = _dereq_('./ExpressionBuilder.js');\n\nvar _ExpressionBuilder2 = _interopRequireDefault(_ExpressionBuilder);\n\nvar _AssociationInfoExpression = _dereq_('./EntityExpressions/AssociationInfoExpression.js');\n\nvar _AssociationInfoExpression2 = _interopRequireDefault(_AssociationInfoExpression);\n\nvar _CodeExpression = _dereq_('./EntityExpressions/CodeExpression.js');\n\nvar _CodeExpression2 = _interopRequireDefault(_CodeExpression);\n\nvar _CodeToEntityConverter = _dereq_('./EntityExpressions/CodeToEntityConverter.js');\n\nvar _CodeToEntityConverter2 = _interopRequireDefault(_CodeToEntityConverter);\n\nvar _ComplexTypeExpression = _dereq_('./EntityExpressions/ComplexTypeExpression.js');\n\nvar _ComplexTypeExpression2 = _interopRequireDefault(_ComplexTypeExpression);\n\nvar _EntityContextExpression = _dereq_('./EntityExpressions/EntityContextExpression.js');\n\nvar _EntityContextExpression2 = _interopRequireDefault(_EntityContextExpression);\n\nvar _EntityExpression = _dereq_('./EntityExpressions/EntityExpression.js');\n\nvar _EntityExpression2 = _interopRequireDefault(_EntityExpression);\n\nvar _EntityExpressionVisitor = _dereq_('./EntityExpressions/EntityExpressionVisitor.js');\n\nvar _EntityExpressionVisitor2 = _interopRequireDefault(_EntityExpressionVisitor);\n\nvar _ExpressionMonitor = _dereq_('./EntityExpressions/ExpressionMonitor.js');\n\nvar _ExpressionMonitor2 = _interopRequireDefault(_ExpressionMonitor);\n\nvar _EntityFieldExpression = _dereq_('./EntityExpressions/EntityFieldExpression.js');\n\nvar _EntityFieldExpression2 = _interopRequireDefault(_EntityFieldExpression);\n\nvar _EntityFieldOperationExpression = _dereq_('./EntityExpressions/EntityFieldOperationExpression.js');\n\nvar _EntityFieldOperationExpression2 = _interopRequireDefault(_EntityFieldOperationExpression);\n\nvar _EntitySetExpression = _dereq_('./EntityExpressions/EntitySetExpression.js');\n\nvar _EntitySetExpression2 = _interopRequireDefault(_EntitySetExpression);\n\nvar _FrameOperationExpression = _dereq_('./EntityExpressions/FrameOperationExpression.js');\n\nvar _FrameOperationExpression2 = _interopRequireDefault(_FrameOperationExpression);\n\nvar _FilterExpression = _dereq_('./EntityExpressions/FilterExpression.js');\n\nvar _FilterExpression2 = _interopRequireDefault(_FilterExpression);\n\nvar _IncludeExpression = _dereq_('./EntityExpressions/IncludeExpression.js');\n\nvar _IncludeExpression2 = _interopRequireDefault(_IncludeExpression);\n\nvar _MemberInfoExpression = _dereq_('./EntityExpressions/MemberInfoExpression.js');\n\nvar _MemberInfoExpression2 = _interopRequireDefault(_MemberInfoExpression);\n\nvar _OrderExpression = _dereq_('./EntityExpressions/OrderExpression.js');\n\nvar _OrderExpression2 = _interopRequireDefault(_OrderExpression);\n\nvar _ParametricQueryExpression = _dereq_('./EntityExpressions/ParametricQueryExpression.js');\n\nvar _ParametricQueryExpression2 = _interopRequireDefault(_ParametricQueryExpression);\n\nvar _ProjectionExpression = _dereq_('./EntityExpressions/ProjectionExpression.js');\n\nvar _ProjectionExpression2 = _interopRequireDefault(_ProjectionExpression);\n\nvar _QueryExpressionCreator = _dereq_('./EntityExpressions/QueryExpressionCreator.js');\n\nvar _QueryExpressionCreator2 = _interopRequireDefault(_QueryExpressionCreator);\n\nvar _QueryParameterExpression = _dereq_('./EntityExpressions/QueryParameterExpression.js');\n\nvar _QueryParameterExpression2 = _interopRequireDefault(_QueryParameterExpression);\n\nvar _RepresentationExpression = _dereq_('./EntityExpressions/RepresentationExpression.js');\n\nvar _RepresentationExpression2 = _interopRequireDefault(_RepresentationExpression);\n\nvar _ServiceOperationExpression = _dereq_('./EntityExpressions/ServiceOperationExpression.js');\n\nvar _ServiceOperationExpression2 = _interopRequireDefault(_ServiceOperationExpression);\n\nvar _ContinuationExpressionBuilder = _dereq_('./ContinuationExpressionBuilder.js');\n\nvar _ContinuationExpressionBuilder2 = _interopRequireDefault(_ContinuationExpressionBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.defaults = _index2.default.defaults || {};\n_index2.default.defaults.parameterResolutionCompatibility = true;\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44,\"./ArrayLiteralExpression.js\":64,\"./CallExpression.js\":65,\"./CodeParser.js\":66,\"./ConstantExpression.js\":67,\"./ContinuationExpressionBuilder.js\":68,\"./EntityExpressions/AssociationInfoExpression.js\":69,\"./EntityExpressions/CodeExpression.js\":70,\"./EntityExpressions/CodeToEntityConverter.js\":71,\"./EntityExpressions/ComplexTypeExpression.js\":72,\"./EntityExpressions/EntityContextExpression.js\":73,\"./EntityExpressions/EntityExpression.js\":74,\"./EntityExpressions/EntityExpressionVisitor.js\":75,\"./EntityExpressions/EntityFieldExpression.js\":76,\"./EntityExpressions/EntityFieldOperationExpression.js\":77,\"./EntityExpressions/EntitySetExpression.js\":78,\"./EntityExpressions/ExpressionMonitor.js\":79,\"./EntityExpressions/FilterExpression.js\":80,\"./EntityExpressions/FrameOperationExpression.js\":81,\"./EntityExpressions/IncludeExpression.js\":82,\"./EntityExpressions/MemberInfoExpression.js\":83,\"./EntityExpressions/OrderExpression.js\":84,\"./EntityExpressions/ParametricQueryExpression.js\":85,\"./EntityExpressions/ProjectionExpression.js\":86,\"./EntityExpressions/QueryExpressionCreator.js\":87,\"./EntityExpressions/QueryParameterExpression.js\":88,\"./EntityExpressions/RepresentationExpression.js\":89,\"./EntityExpressions/ServiceOperationExpression.js\":90,\"./ExpressionBuilder.js\":91,\"./ExpressionNode2.js\":92,\"./FunctionExpression.js\":93,\"./ObjectFieldExpression.js\":94,\"./ObjectLiteralExpression.js\":95,\"./PagingExpression.js\":96,\"./ParameterExpression.js\":97,\"./PropertyExpression.js\":98,\"./SimpleBinaryExpression.js\":99,\"./ThisExpression.js\":100,\"./Visitors/ExecutorVisitor.js\":101,\"./Visitors/ExpTreeVisitor.js\":102,\"./Visitors/ExpressionVisitor.js\":103,\"./Visitors/GlobalContextProcessor.js\":104,\"./Visitors/LambdaParameterProcessor.js\":105,\"./Visitors/LocalContextProcessor.js\":106,\"./Visitors/LogicalSchemaBinderVisitor.js\":107,\"./Visitors/ParameterProcessor.js\":108,\"./Visitors/ParameterResolverVisitor.js\":109,\"./Visitors/SetExecutableVisitor.js\":110}],112:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ItemStoreClass', null, null, {\n    constructor: function constructor() {\n        var self = this;\n        self.itemStoreConfig = {\n            aliases: {},\n            contextTypes: {}\n        };\n\n        self.resetStoreToDefault('local', true);\n        _index2.default.addStore = function () {\n            return self.addItemStoreAlias.apply(self, arguments);\n        };\n        _index2.default.implementation = self.implementation;\n\n        _index2.default.Entity.addMember('storeToken', {\n            get: function get() {\n                if (this.storeConfigs && this.storeConfigs['default']) return this.storeConfigs.stores[this.storeConfigs['default']];\n            },\n            set: function set(value) {\n                self._setTypeStoreConfig(this, 'default', value);\n            }\n        }, true);\n    },\n    itemStoreConfig: {},\n    attachMode: _index2.default.EntityAttachMode ? _index2.default.EntityAttachMode.KeepChanges : true,\n\n    addItemStoreAlias: function addItemStoreAlias(name, contextFactoryOrToken, isDefault) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n\n        if ('string' === typeof name) {\n            //storeToken\n            if ('object' === (typeof contextFactoryOrToken === 'undefined' ? 'undefined' : _typeof(contextFactoryOrToken)) && 'factory' in contextFactoryOrToken) {\n                var type = _index.Container.resolveType(contextFactoryOrToken.typeName);\n\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\n                self.itemStoreConfig.contextTypes[name] = type;\n                if (isDefault) {\n                    self.itemStoreConfig['default'] = name;\n                }\n\n                callback.success();\n                return promise.getPromise();\n            }\n            //contextFactory\n            else if ('function' === typeof contextFactoryOrToken) {\n                    var preContext = contextFactoryOrToken();\n                    var contextPromise;\n                    if (preContext && preContext instanceof _index2.default.EntityContext) {\n                        callback.success(preContext);\n                        contextPromise = promise.getPromise();\n                    } else {\n                        contextPromise = preContext;\n                    }\n\n                    return contextPromise.then(function (ctx) {\n                        if (typeof ctx === 'function') {\n                            //factory resolve factory\n                            return self.addItemStoreAlias(name, ctx, isDefault);\n                        }\n\n                        if (ctx instanceof _index2.default.EntityContext) {\n                            return ctx.onReady().then(function (ctx) {\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\n                                if (isDefault) {\n                                    self.itemStoreConfig['default'] = name;\n                                }\n\n                                return ctx;\n                            });\n                        } else {\n                            promise = new _index2.default.PromiseHandler();\n                            callback = promise.createCallback();\n                            callback.error(new _index.Exception('factory dont have context instance', 'Invalid arguments'));\n                            return promise.getPromise();\n                        }\n                    });\n                }\n        }\n\n        callback.error(new _index.Exception('Name or factory missing', 'Invalid arguments'));\n        return promise.getPromise();\n    },\n    resetStoreToDefault: function resetStoreToDefault(name, isDefault) {\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\n        delete this.itemStoreConfig.contextTypes[name];\n        if (isDefault) {\n            this.itemStoreConfig['default'] = name;\n        }\n    },\n    _setStoreAlias: function _setStoreAlias(entity, storeToken) {\n        if ('object' === (typeof storeToken === 'undefined' ? 'undefined' : _typeof(storeToken)) && !entity.storeToken) entity.storeToken = storeToken;\n        return entity;\n    },\n    _getStoreAlias: function _getStoreAlias(entity, storeAlias) {\n        var type;\n        if (entity instanceof _index2.default.Entity) {\n            var alias = storeAlias || entity.storeToken;\n            if (alias) {\n                return alias;\n            } else {\n                type = entity.getType();\n            }\n        } else {\n            type = entity;\n        }\n\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\n    },\n    _getStoreContext: function _getStoreContext(aliasOrToken, type, nullIfInvalid) {\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\n\n        if (!contextPromise || contextPromise instanceof _index2.default.EntityContext) {\n            var promise = new _index2.default.PromiseHandler();\n            var callback = promise.createCallback();\n            callback.success(contextPromise);\n            contextPromise = promise.getPromise();\n        }\n\n        return contextPromise.then(function (context) {\n            if (context instanceof _index2.default.EntityContext) {\n                return context.onReady();\n            } else if (nullIfInvalid) {\n                return null;\n            } else {\n                var promise = new _index2.default.PromiseHandler();\n                var callback = promise.createCallback();\n                callback.error(new _index.Exception('factory return type error', 'Error'));\n                return promise.getPromise();\n            }\n        });\n    },\n    _getContextPromise: function _getContextPromise(aliasOrToken, type) {\n        /*Token*/\n        if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'function' === typeof aliasOrToken.factory) {\n            return aliasOrToken.factory(type);\n        } else if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'object' === _typeof(aliasOrToken.args) && 'string' === typeof aliasOrToken.typeName) {\n            var type = _index.Container.resolveType(aliasOrToken.typeName);\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\n        }\n        /*resolve alias from type (Token)*/\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\n                return type.storeConfigs.stores[aliasOrToken].factory();\n            }\n            /*resolve alias from type (constructor options)*/\n            else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\n                    return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\n                }\n                /*resolve alias from ItemStore (factories)*/\n                else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\n                        return this.itemStoreConfig.aliases[aliasOrToken](type);\n                    }\n                    /*token is factory*/\n                    else if (aliasOrToken && 'function' === typeof aliasOrToken) {\n                            return aliasOrToken();\n                        }\n                        /*default no hint*/\n                        else {\n                                return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\n                            }\n    },\n    _getStoreEntitySet: function _getStoreEntitySet(storeAlias, instanceOrType) {\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\n        var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();;\n\n        return this._getStoreContext(aliasOrToken, type).then(function (ctx) {\n            var entitySet = ctx.getEntitySetFromElementType(type);\n            if (!entitySet) {\n                var d = new _index2.default.PromiseHandler();\n                var callback = d.createCallback();\n                callback.error(\"EntitySet not exist for \" + type.fullName);\n                return d.getPromise();\n            }\n            return entitySet;\n        });\n    },\n    _getDefaultItemStoreFactory: function _getDefaultItemStoreFactory(instanceOrType, initStoreConfig) {\n        if (instanceOrType) {\n            var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();\n            var typeName = _index2.default.Container.resolveName(type) + \"_items\";\n            var typeName = typeName.replace(/\\./g, \"_\");\n\n            var storeConfig = _index2.default.typeSystem.extend({\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\n                tableName: typeName,\n                initParam: { provider: 'local', databaseName: typeName }\n            }, initStoreConfig);\n\n            var contextDef = {};\n            contextDef[storeConfig.collectionName] = { type: _index2.default.EntitySet, elementType: type };\n            if (storeConfig.tableName) contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\n\n            var inMemoryType = _index2.default.EntityContext.extend(typeName, contextDef);\n            var ctx = new inMemoryType(storeConfig.initParam);\n            if (initStoreConfig && (typeof initStoreConfig === 'undefined' ? 'undefined' : _typeof(initStoreConfig)) === 'object') initStoreConfig.factory = ctx._storeToken.factory;\n            return ctx;\n        }\n        return undefined;\n    },\n    implementation: function implementation(name, contextOrAlias) {\n        var self = _index2.default.ItemStore;\n        var result;\n\n        if (typeof contextOrAlias === 'string') {\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias];\n        } else if (contextOrAlias instanceof _index2.default.EntityContext) {\n            contextOrAlias = contextOrAlias.getType();\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\n        }\n\n        if (contextOrAlias) {\n            result = self._resolveFromContext(contextOrAlias, name);\n        }\n\n        if (!result) {\n            result = _index.Container.resolveType(name);\n        }\n\n        return result;\n    },\n    _resolveFromContext: function _resolveFromContext(contextType, name) {\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            var memDef = memDefs[i];\n            if (memDef.type) {\n                var memDefType = _index.Container.resolveType(memDef.type);\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(memDef.elementType);\n                    if (elementType.name === name) {\n                        return elementType;\n                    }\n                }\n            }\n        }\n        return null;\n    },\n\n    //Entity Instance\n    EntityInstanceSave: function EntityInstanceSave(storeAlias, hint, attachMode) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            return self._getSaveMode(entity, entitySet, hint, storeAlias).then(function (mode) {\n                mode = mode || 'add';\n                switch (mode) {\n                    case 'add':\n                        entitySet.add(entity);\n                        break;\n                    case 'attach':\n                        entitySet.attach(entity, attachMode || true);\n                        break;\n                    default:\n                        var d = new _index2.default.PromiseHandler();\n                        var callback = d.createCallback();\n                        callback.error('save mode not supported: ' + mode);\n                        return d.getPromise();\n                }\n\n                return entitySet.entityContext.saveChanges().then(function () {\n                    self._setStoreAlias(entity, entitySet.entityContext.storeToken);return entity;\n                });\n            });\n        });\n    },\n    EntityInstanceRemove: function EntityInstanceRemove(storeAlias) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            entitySet.remove(entity);\n\n            return entitySet.entityContext.saveChanges().then(function () {\n                return entity;\n            });\n        });\n    },\n    EntityInstanceRefresh: function EntityInstanceRefresh(storeAlias, keepStore) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        var entityType = entity.getType();\n\n        var key = self._getKeyObjectFromEntity(entity, entityType);\n\n        return entityType.read(key, storeAlias).then(function (loadedEntity) {\n            entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                entity[memDef.name] = loadedEntity[memDef.name];\n            });\n            entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\n            entity.changedProperties = undefined;\n            return entity;\n        });\n    },\n\n    //Entity Type\n    EntityInheritedTypeProcessor: function EntityInheritedTypeProcessor(type) {\n        var self = _index2.default.ItemStore;\n        type.readAll = self.EntityTypeReadAll(type);\n        type.read = self.EntityTypeRead(type);\n        type.removeAll = self.EntityTypeRemoveAll(type);\n        type.remove = self.EntityTypeRemove(type);\n        type.get = self.EntityTypeGet(type); //Not complete\n        type.save = self.EntityTypeSave(type);\n        type.addMany = self.EntityTypeAddMany(type);\n        type.itemCount = self.EntityTypeItemCount(type);\n        type.query = self.EntityTypeQuery(type);\n        type.takeFirst = self.EntityTypeTakeFirst(type);\n\n        type.setStore = self.EntityTypeSetStore(type);\n    },\n    EntityTypeReadAll: function EntityTypeReadAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeRemoveAll: function EntityTypeRemoveAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.toArray().then(function (items) {\n                    items.forEach(function (item) {\n                        entitySet.remove(item);\n                    });\n\n                    return entitySet.entityContext.saveChanges().then(function () {\n                        return items;\n                    });\n                });\n            });\n        };\n    },\n    EntityTypeRead: function EntityTypeRead(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                try {\n                    var singleParam = self._findByIdQueryable(entitySet, key);\n                    return entitySet.single(singleParam.predicate, singleParam.thisArgs).then(function (item) {\n                        return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                    });\n                } catch (e) {\n                    var d = new _index2.default.PromiseHandler();\n                    var callback = d.createCallback();\n                    callback.error(e);\n                    return d.getPromise();\n                }\n            });\n        };\n    },\n    EntityTypeGet: function EntityTypeGet(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var item = new type(self._getKeyObjectFromEntity(key));\n            item.refresh(storeAlias);\n            return item;\n        };\n    },\n    EntityTypeSave: function EntityTypeSave(type) {\n        return function (initData, storeAlias, hint) {\n\n            var self = _index2.default.ItemStore;\n            var instance = new type(initData);\n            return instance.save(storeAlias, hint);\n        };\n    },\n    EntityTypeAddMany: function EntityTypeAddMany(type) {\n        return function (initDatas, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                var items = entitySet.addMany(initDatas);\n                return entitySet.entityContext.saveChanges().then(function () {\n                    return items;\n                });\n            });\n        };\n    },\n    EntityTypeRemove: function EntityTypeRemove(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var entityPk = type.memberDefinitions.getKeyProperties();\n            var entity;\n            if (entityPk.length === 1) {\n                var obj = {};\n                obj[entityPk[0].name] = key;\n                entity = new type(obj);\n            } else {\n                entity = new type(key);\n            }\n            return entity.remove(storeAlias);\n        };\n    },\n    EntityTypeItemCount: function EntityTypeItemCount(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.length();\n            });\n        };\n    },\n    EntityTypeQuery: function EntityTypeQuery(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.filter(predicate, thisArg).forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeTakeFirst: function EntityTypeTakeFirst(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.first(predicate, thisArg).then(function (item) {\n                    return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n\n    EntityTypeSetStore: function EntityTypeSetStore(type) {\n        return function (name, config) {\n            if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object' && typeof config === 'undefined') {\n                config = name;\n                name = 'default';\n            }\n\n            var self = _index2.default.ItemStore;\n\n            var defStoreConfig = {};\n            if (config) {\n                if (config.tableName) {\n                    defStoreConfig.tableName = config.tableName;\n                    delete config.tableName;\n                }\n\n                if (config.collectionName) {\n                    defStoreConfig.collectionName = config.collectionName;\n                    delete config.collectionName;\n                }\n\n                if (typeof config.dataSource === 'string') {\n                    var ds = config.dataSource;\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\n                    }\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\n                    if (!defStoreConfig.tableName) defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\n\n                    var provider = config.provider || config.name;\n                    switch (provider) {\n                        case 'oData':\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\n                            break;\n                        case 'webApi':\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            } else {\n                config = { name: 'local' };\n            }\n\n            defStoreConfig.initParam = config;\n            self._setTypeStoreConfig(type, name, defStoreConfig);\n\n            return type;\n        };\n    },\n    _setTypeStoreConfig: function _setTypeStoreConfig(type, name, config) {\n        if (!type.storeConfigs) {\n            type.storeConfigs = {\n                stores: {}\n            };\n        }\n        type.storeConfigs.stores[name] = config;\n        if (name === 'default') {\n            type.storeConfigs['default'] = name;\n        }\n    },\n\n    _findByIdQueryable: function _findByIdQueryable(set, keys) {\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\n        if (keysProps.length > 1 && keys && 'object' === (typeof keys === 'undefined' ? 'undefined' : _typeof(keys))) {\n            var predicate = \"\",\n                thisArgs = {};\n            for (var i = 0; i < keysProps.length; i++) {\n                if (i > 0) predicate += \" && \";\n\n                var key = keysProps[i];\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\n                thisArgs[key.name] = keys[key.name];\n            }\n\n            return {\n                predicate: predicate,\n                thisArgs: thisArgs\n            };\n        } else if (keysProps.length === 1) {\n            return {\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\n                thisArgs: { value: keys }\n            };\n        } else {\n            throw 'invalid keys';\n        }\n    },\n    _getKeyObjectFromEntity: function _getKeyObjectFromEntity(obj, entityType) {\n        var key;\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\n        if (keyDefs.length === 1) key = obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[keyDefs[0].name] : obj;else {\n            key = {};\n\n            for (var i = 0; i < keyDefs.length; i++) {\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\n            }\n        }\n\n        return key;\n    },\n    _getSaveMode: function _getSaveMode(entity, entitySet, hint, storeAlias) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n        var entityType = entity.getType();\n\n        switch (true) {\n            case hint === 'update':\n                callback.success('attach');break;\n            case hint === 'new':\n                callback.success('add');break;\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) {\n                return entity[keyDef.name];\n            }):\n                callback.success('add');break;\n            case !!entity.storeToken:\n                callback.success('attach');break;\n                break;\n            default:\n                //use the current entity store informations\n                storeAlias = this._getStoreAlias(entity, storeAlias);\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias).then(function () {\n                    callback.success('attach');\n                }, function () {\n                    callback.success('add');\n                });\n                break;\n        }\n\n        return promise.getPromise();\n    },\n\n    //EntityContext\n    ContextRegister: function ContextRegister(storageProviderCfg) {\n        //context instance\n        var self = this;\n        if (typeof storageProviderCfg.name === \"string\") {\n            storageProviderCfg.name = [storageProviderCfg.name];\n        }\n\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\n        this.storeToken = {\n            typeName: this.getType().fullName,\n            args: args,\n            factory: function factory() {\n                return new (self.getType())(args);\n            }\n        };\n\n        //set elementType storetoken\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < members.length; i++) {\n            var item = members[i];\n            if (item.type) {\n                var itemResolvedDataType = _index.Container.resolveType(item.type);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    if (!elementType.storeToken) {\n                        elementType.storeToken = this.storeToken;\n                    }\n                }\n            }\n        }\n    },\n    QueryResultModifier: function QueryResultModifier(query) {\n        var self = _index2.default.ItemStore;\n        var context = query.context;\n        var type = query.modelBinderConfig.$type;\n        if ('string' === typeof type) {\n            type = _index.Container.resolveType(type);\n        }\n\n        if (type === _index2.default.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\n            type = query.modelBinderConfig.$item.$type;\n        }\n\n        //TODO: runs when model binding missed (inmemory)\n        if (typeof type === 'undefined' && query.result && query.result[0] instanceof _index2.default.Entity) {\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                return !!memDef.inverseProperty;\n            });\n\n            for (var i = 0; i < query.result.length; i++) {\n                self._setStoreAlias(query.result[i], context.storeToken);\n\n                for (var j = 0; j < navProps.length; j++) {\n                    var navProp = navProps[j];\n                    if (query.result[i][navProp.name] instanceof _index2.default.Entity) {\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\n                            if (query.result[i][navProp.name][k] instanceof _index2.default.Entity) {\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n_index2.default.ItemStore = new _index2.default.ItemStoreClass();\n\n_index2.default.Entity.addMember('field', function (propName) {\n    var def = this.memberDefinitions.getMember(propName);\n    if (def) {\n        if (def.definedBy === this) {\n            return new _index2.default.MemberWrapper(def);\n        } else {\n            _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\n        }\n    } else {\n        _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\n    }\n\n    return this;\n}, true);\n\n_index2.default.Class.define('$data.MemberWrapper', null, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n    },\n    setKey: function setKey(value) {\n        this.memberDefinition.key = value || value === undefined ? true : false;\n        return this;\n    },\n    setComputed: function setComputed(value) {\n        this.memberDefinition.computed = value || value === undefined ? true : false;\n        return this;\n    },\n    setRequired: function setRequired(value) {\n        this.memberDefinition.required = value || value === undefined ? true : false;\n        return this;\n    },\n    setNullable: function setNullable(value) {\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\n        return this;\n    },\n    changeDefinition: function changeDefinition(attr, value) {\n        this.memberDefinition[attr] = value;\n        return this;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],113:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ModelBinder', null, null, {\n\n    constructor: function constructor(context) {\n        this.context = context;\n        this.providerName = null;\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\n            this.providerName = this.context.storageProvider.providerName;\n            if (!this.providerName) {\n                for (var i in _index2.default.RegisteredStorageProviders) {\n                    if (_index2.default.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\n                        this.providerName = i;\n                        break;\n                    }\n                }\n            }\n        }\n    },\n\n    _deepExtend: function _deepExtend(o, r) {\n        if (o === null || o === undefined) {\n            return r;\n        }\n        for (var i in r) {\n            if (o.hasOwnProperty(i)) {\n                if (_typeof(r[i]) === 'object') {\n                    if (Array.isArray(r[i])) {\n                        for (var j = 0; j < r[i].length; j++) {\n                            if (o[i].indexOf(r[i][j]) < 0) {\n                                o[i].push(r[i][j]);\n                            }\n                        }\n                    } else this._deepExtend(o[i], r[i]);\n                }\n            } else {\n                o[i] = r[i];\n            }\n        }\n        return this._finalize(o);\n    },\n\n    _finalize: function _finalize(o) {\n        if (o instanceof _index2.default.Entity) {\n            o.changedProperties = undefined;\n            o.storeToken = this.context.storeToken;\n        }\n        return o;\n    },\n\n    _buildSelector: function _buildSelector(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) {\n                meta.$selector = [meta.$selector];\n            }\n\n            for (var i = 0; i < meta.$selector.length; i++) {\n                var selector = meta.$selector[i].replace('json:', '');\n                context.src += 'if(';\n                var path = selector.split('.');\n                for (var j = 0; j < path.length; j++) {\n                    context.src += 'di[\"' + path.slice(0, j + 1).join('\"][\"') + '\"]' + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\n                }\n                context.src += '){di = di[\"' + path.join('\"][\"') + '\"];}' + (i < meta.$selector.length - 1 ? 'else ' : '');\n            }\n\n            context.src += 'if (di === null){';\n            if (context.iter) context.src += context.iter + ' = null;';\n            context.src += 'return null;';\n            context.src += '}';\n        }\n    },\n\n    _buildKey: function _buildKey(name, type, keys, context, data) {\n        if (keys) {\n            var type = _index.Container.resolveType(type);\n            var typeIndex = _index.Container.getIndex(type);\n            type = type.fullName || type.name;\n            context.src += 'var ' + name + 'Fn = function(di){';\n            if (!Array.isArray(keys) || keys.length == 1) {\n                if (typeof keys !== 'string') keys = keys[0];\n                context.src += 'if (typeof di[\"' + keys + '\"] === \"undefined\") return undefined;';\n                context.src += 'if (di[\"' + keys + '\"] === null) return null;';\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di[\"' + keys + '\"]);';\n            } else {\n                context.src += 'var key = \"\";';\n                for (var i = 0; i < keys.length; i++) {\n                    var id = _typeof(keys[i]) !== 'object' ? keys[i] : keys[i].$source;\n                    context.src += 'if (typeof di[\"' + id + '\"] === \"undefined\") return undefined;';\n                    context.src += 'if (di[\"' + id + '\"] === null) return null;';\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di[\"' + id + '\"]);';\n                }\n            }\n\n            context.src += 'return key;};';\n        }\n\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\n    },\n\n    build: function build(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) meta.$selector = [meta.$selector];\n            for (var i = 0; i < meta.$selector.length; i++) {\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\n            }\n        }\n\n        if (meta.$value) {\n            if (typeof meta.$value === 'function') {\n                context.src += 'var di = di || data;';\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\n                if (meta.$type) {\n                    var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                    var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                    if (converter) {\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\n                    } else {\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\n                    }\n                } else context.item = 'fn()';\n            } else if (meta.$type) {\n                var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\n                } else {\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\n                }\n            } else context.item = meta.$value;\n        } else if (meta.$source) {\n            var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n            var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (!context.forEach) context.src += 'var di = data;';\n            context.item = item;\n            this._buildSelector(meta, context);\n            if (converter) {\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta.$source + '\"]);';\n            } else {\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta.$source + '\"]);';\n            }\n            context.src += 'var ' + item + '_inheritance;';\n        } else if (meta.$item) {\n            context.meta.push('$item');\n            var iter = context.item && context.current ? context.item + '.' + context.current : context.item ? context.item : 'result';\n            context.iter = iter;\n            if (iter.indexOf('.') < 0) {\n                context.src += 'var ' + iter + ';';\n                context.src += 'var ' + iter + '_inheritance;';\n            }\n            context.src += 'var fn = function(di){';\n            if (meta.$selector) {\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\n            if (this.references && meta.$item.$keys) {\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\n                context.src += 'var ' + keycacheName + ';';\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\n                context.src += 'if (kci < 0){';\n                context.src += keycacheName + ' = [];';\n                context.src += 'keycache.push(' + keycacheName + ');';\n                context.src += 'keycacheIter.push(' + iter + ');';\n                context.src += '}else{';\n                context.src += keycacheName + ' = keycache[kci];';\n                context.src += '}';\n            }\n            context.iter = undefined;\n            context.forEach = true;\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\n            context.src += 'var forEachFn = function(di, i){';\n            context.src += 'var diBackup = di;';\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\n            var item = context.item || 'iter';\n            context.item = item;\n            if (!meta.$item.$source) {\n                this._buildSelector(meta.$item, context);\n            }\n            this.build(meta.$item, context);\n            if (this.references && meta.$keys) {\n                context.src += 'if (forKey){';\n                context.src += 'if (cache[forKey]){';\n                context.src += iter + ' = cache[forKey];';\n                context.src += 'if (' + iter + '.indexOf(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ') < 0){';\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                context.src += '}}else{';\n                context.src += 'cache[forKey] = ' + iter + ';';\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                context.src += '}}else{';\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\n                context.src += '}';\n                context.src += '}else{';\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                context.src += '}';\n                context.src += '}';\n                context.src += '}';\n            } else {\n                if (this.references && meta.$item.$keys) {\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                    context.src += '}';\n                } else {\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\n                }\n            }\n            context.src += '};';\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\n            context.src += 'else forEachFn(di, 0);';\n            context.forEach = false;\n            context.item = null;\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);';\n            context.meta.pop();\n        } else if (meta.$type) {\n            if (!context.forEach) {\n                context.src += 'if (typeof di === \"undefined\"){';\n                context.src += 'var di = data;';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            var resolvedType = _index.Container.resolveType(meta.$type);\n            var type = _index.Container.resolveName(resolvedType);\n            var typeIndex = _index.Container.getIndex(resolvedType);\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo(_index2.default.Entity);\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (context.item == item) item += 'new_';\n            context.item = item;\n\n            var isPrimitive = false;\n            if (!meta.$source && !meta.$value && resolvedType !== _index2.default.Array && resolvedType !== _index2.default.Object && !resolvedType.isAssignableTo) isPrimitive = true;\n            if (resolvedType === _index2.default.Object || resolvedType === _index2.default.Array) {\n                var keys = Object.keys(meta);\n                if (keys.length == 1 || keys.length == 2 && meta.$selector) isPrimitive = true;\n            }\n\n            if (isPrimitive) {\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\n                } else {\n                    context.src += 'var ' + item + ' = di;';\n                }\n                context.src += 'var ' + item + '_inheritance;';\n            } else {\n                if (this.references && meta.$keys) {\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\n                    context.src += 'if (itemKey === null) return null;';\n                    context.src += 'var ' + item + ';';\n                    context.src += 'var ' + item + '_inheritance;';\n                    context.src += 'if (itemKey && cache[itemKey]){';\n                    context.src += item + ' = cache[itemKey];';\n                    context.src += '}else{';\n                    if (resolvedType.inheritedTo) {\n                        context.src += 'if (di && di[\"@odata.type\"]){';\n                        context.src += 'var odataTypeName = di[\"@odata.type\"].split(\"#\")[1];';\n                        context.src += 'var odataType = Container.resolveType(odataTypeName);';\n                        context.src += 'if (odataType){';\n                        context.src += item + '_inheritance = new odataType(undefined, { setDefaultValues: false });'; //di);';\n                        context.src += '}';\n                        context.src += '}else{';\n                    }\n                    if (isEntityType) {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                    if (resolvedType.inheritedTo) {\n                        context.src += '}';\n                    }\n                    context.src += 'if (itemKey){';\n                    context.src += 'cache[itemKey] = ' + item + ' || ' + item + '_inheritance;';\n                    context.src += '}';\n                    context.src += '}';\n                } else {\n                    var isEnum = resolvedType.isAssignableTo && resolvedType.isAssignableTo(_index2.default.Enum);\n                    context.src += 'var ' + item + ';';\n                    context.src += 'var ' + item + '_inheritance;';\n                    if (resolvedType.inheritedTo) {\n                        context.src += 'if (di[\"' + context.current + '\"] && di[\"' + context.current + '\"][\"@odata.type\"]){';\n                        context.src += 'var odataType = Container.resolveType(di[\"' + context.current + '\"][\"@odata.type\"].split(\"#\")[1]);';\n                        context.src += 'if (odataType){';\n                        context.src += item + '_inheritance = new odataType(undefined, { setDefaultValues: false });'; /*di[\"' + context.current + '\"])';*/\n                        context.src += '}';\n                        context.src += '}else{';\n                    }\n                    if (isEntityType) {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else if (isEnum) {\n                        context.src += item + ' = Container.resolveByIndex(' + typeIndex + ')[di[\"' + context.current + '\"]];';\n                    } else {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                    if (resolvedType.inheritedTo) {\n                        context.src += '}';\n                    }\n                }\n            }\n            var openTypeProperty = null;\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType) {\n                openTypeProperty = resolvedType.openType === true ? _index2.default.defaults.openTypeDefaultPropertyName : resolvedType.openType;\n                context.src += item + '.' + openTypeProperty + ' = {};';\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function (prop) {\n                    return '\"' + prop + '\"';\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\n            }\n            context.src += 'var ' + context.item + '_type;';\n            context.src += 'var ' + context.item + '_memberDefinitionNames;';\n            context.src += 'if (' + context.item + '_inheritance){';\n            context.src += context.item + ' = ' + context.item + '_inheritance;';\n            context.src += 'if (typeof ' + context.item + '.getType == \"function\"){';\n            context.src += context.item + '_type = ' + context.item + '.getType();';\n            context.src += context.item + '_memberDefinitionNames = ' + context.item + '_type' + '.memberDefinitions.getPublicMappedProperties()' + '.filter(function(it){ return it.definedBy == ' + context.item + '_type || it.definedBy == ' + context.item + '_type.inheritsFrom; })' + '.map(function(it){ return it.name; });';\n            context.src += '}';\n            context.src += '}';\n            for (var i in meta) {\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\n                    context.src += 'if (!' + context.item + '_memberDefinitionNames || (' + context.item + '_memberDefinitionNames && ' + context.item + '_memberDefinitionNames.indexOf(\"' + i + '\") >= 0)){';\n                    context.current = i;\n                    if (!meta[i].$item) {\n                        if (meta[i].$value) {\n                            context.meta.push(i);\n                            var item = context.item;\n                            this.build(meta[i], context);\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta[i].$source) {\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            if (meta[i].$type) {\n                                var type = _index.Container.resolveName(_index.Container.resolveType(meta[i].$type));\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta[i].$type));\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                                if (converter) {\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i].$source + '\"]);';\n                                } else {\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i].$source + '\"]);';\n                                }\n                            } else {\n                                context.src += item + '.' + i + ' = di[\"' + meta[i].$source + '\"];';\n                            }\n                            context.src += '};';\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';else context.src += 'fn(di);';\n                        } else if (meta[i].$type) {\n                            context.meta.push(i);\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            this.build(meta[i], context);\n                            context.src += 'return ' + context.item + ';};';\n                            if (meta[i].$type === _index2.default.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';else context.src += item + '.' + i + ' = fn(di);';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta.$type) {\n                            var memDef = _index.Container.resolveType(meta.$type).memberDefinitions.getMember(i);\n                            var type = _index.Container.resolveName(memDef.type);\n                            var entityType = _index.Container.resolveType(meta.$type);\n                            var entityTypeIndex = _index.Container.getIndex(meta.$type);\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                            if (entityType.inheritedTo) {\n                                context.src += 'if (di[\"' + meta[i] + '\"] && di[\"' + meta[i] + '\"][\"@odata.type\"]){';\n                                context.src += 'var odataType = Container.resolveType(di[\"' + meta[i] + '\"][\"@odata.type\"].split(\"#\")[1]);';\n                                context.src += 'if (odataType){';\n                                context.src += item + '.' + i + ' = new odataType(undefined, { setDefaultValues: false });'; //di[\"' + meta[i] + '\"])';\n                                context.src += '}';\n                                context.src += '}else{';\n                            }\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di[\"' + meta[i] + '\"], Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\n                            } else if (converter) {\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i] + '\"]);';\n                            } else {\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(type.memberDefinitions.getMember(i).type));\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i] + '\"]);';\n                            }\n                            if (entityType.inheritedTo) {\n                                context.src += '}';\n                            }\n                        }\n                    } else {\n                        context.meta.push(i);\n                        this.build(meta[i], context);\n                        context.item = item;\n                        context.meta.pop();\n                    }\n                    context.src += '}';\n                }\n            }\n            context.src += item + ' = self._finalize(' + /*item + '_inheritance' + ' || ' +*/item + ');';\n        }\n    },\n\n    call: function call(data, meta) {\n        if (!Object.getOwnPropertyNames(meta).length) {\n            return data;\n        }\n        var context = {\n            src: '',\n            meta: []\n        };\n        context.src += 'var self = this;';\n        context.src += 'var result;';\n        context.src += 'var cache = {};';\n        context.src += 'var keycache = [];';\n        context.src += 'var keycacheIter = [];';\n        this.build(meta, context);\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\n        context.src += 'return result;';\n\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\n        var ret = fn(meta, data, _index.Container);\n        return ret;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],114:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollector', _index2.default.Notifications.ChangeCollectorBase, null, {\n    buildData: function buildData(entities) {\n        var result = [];\n        entities.forEach(function (element) {\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\n            var enumerableMemDefCollection = [];\n\n            switch (element.data.entityState) {\n                case _index2.default.EntityState.Added:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\n                    break;\n                case _index2.default.EntityState.Modified:\n                    enumerableMemDefCollection = element.data.changedProperties;\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\n                    break;\n                default:\n                    break;\n            }\n\n            enumerableMemDefCollection.forEach(function (memDef) {\n                resObj[memDef.name] = element.data[memDef.name];\n            });\n\n            result.push(resObj);\n        });\n\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],115:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\n    buildData: function buildData(entityContextData) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    processChangedData: function processChangedData(entityData) {\n        if (this.Distrbutor && this.Distrbutor.distributeData) this.Distrbutor.distributeData(this.buildData(entityData));\n    },\n    Distrbutor: { enumerable: false, dataType: _index2.default.Notifications.ChangeDistributorBase, storeOnObject: true }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],116:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributor', _index2.default.Notifications.ChangeDistributorBase, null, {\n    constructor: function constructor(broadcastUrl) {\n        this.broadcastUrl = broadcastUrl;\n    },\n    distributeData: function distributeData(data) {\n        _index2.default.ajax({\n            url: this.broadcastUrl,\n            type: \"POST\",\n            data: 'data=' + JSON.stringify(data),\n            succes: this.success,\n            error: this.error\n        });\n    },\n    broadcastUrl: { dataType: \"string\" },\n    success: function success() {},\n    error: function error() {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],117:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\n    distributeData: function distributeData(collectorData) {\n        _index.Guard.raise(\"Pure class\");\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],118:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Query', null, null, {\n    constructor: function constructor(expression, defaultType, context) {\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\n\n        this.expression = expression;\n        this.context = context;\n\n        //TODO: expressions get as JSON string?!\n\n        this.expressions = expression;\n        this.defaultType = defaultType;\n        this.result = [];\n        this.rawDataList = [];\n        this.modelBinderConfig = {};\n        this.context = context;\n    },\n\n    rawDataList: { dataType: \"Array\" },\n    result: { dataType: \"Array\" },\n    resultType: {},\n    buildResultSet: function buildResultSet(ctx) {\n        var converter = new _index2.default.ModelBinder(this.context);\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\n        return;\n    },\n    getEntitySets: function getEntitySets() {\n        var ret = [];\n        var ctx = this.context;\n\n        var fn = function fn(expression) {\n            if (expression instanceof _index2.default.Expressions.EntitySetExpression) {\n                if (ctx._entitySetReferences[expression.elementType.name] && ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0) ret.push(ctx._entitySetReferences[expression.elementType.name]);\n            }\n            if (expression.source) fn(expression.source);\n            if (expression.members) {\n                for (var i = 0; i < expression.members.length; i++) {\n                    fn(expression.members[i].expression);\n                }\n            }\n        };\n\n        fn(this.expression);\n\n        return ret;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],119:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.queryBuilder', null, null, {\n    constructor: function constructor() {\n        this._fragments = {};\n        this.selectedFragment = null;\n        this._binderConfig = {};\n        this.modelBinderConfig = this._binderConfig;\n        this._binderConfigPropertyStack = [];\n    },\n    selectTextPart: function selectTextPart(name) {\n        if (!this._fragments[name]) {\n            this._fragments[name] = { text: '', params: [] };\n        }\n        this.selectedFragment = this._fragments[name];\n    },\n    getTextPart: function getTextPart(name) {\n        return this._fragments[name];\n    },\n    addText: function addText(textParticle) {\n        this.selectedFragment.text += textParticle;\n    },\n    addParameter: function addParameter(param) {\n        this.selectedFragment.params.push(param);\n    },\n    selectModelBinderProperty: function selectModelBinderProperty(name) {\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\n        if (!(name in this.modelBinderConfig)) {\n            this.modelBinderConfig[name] = {};\n        }\n        this.modelBinderConfig = this.modelBinderConfig[name];\n    },\n    popModelBinderProperty: function popModelBinderProperty() {\n        if (this._binderConfigPropertyStack.length === 0) {\n            this.modelBinderConfig = this._binderConfig();\n        } else {\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\n        }\n    },\n    resetModelBinderProperty: function resetModelBinderProperty(name) {\n        this._binderConfigPropertyStack = [];\n        this.modelBinderConfig = this._binderConfig;\n    },\n    addKeyField: function addKeyField(name) {\n        if (!this.modelBinderConfig['$keys']) {\n            this.modelBinderConfig['$keys'] = new Array();\n        }\n        this.modelBinderConfig['$keys'].push(name);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],120:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.QueryProvider', null, null, {\n    //TODO: instance member?????\n    constructor: function constructor() {\n        this.requiresExpressions = false;\n    },\n    executeQuery: function executeQuery(queryable, resultHandler) {},\n    getTraceString: function getTraceString(queryable) {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],121:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Queryable', null, null, {\n    constructor: function constructor(source, rootExpression) {\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n\n        var context = source instanceof _index2.default.EntityContext ? source : source.entityContext;\n        this.defaultType = source instanceof _index2.default.EntityContext ? null : source.defaultType;\n        this.entityContext = context;\n        this.expression = rootExpression;\n    },\n\n    filter: function filter(predicate, thisArg) {\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\n        ///<param name=\"predicate\" type=\"string\">\n        ///The expression body of the predicate function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: filter(\"it.Title == 'Hello'\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\n        ///<param name=\"predicate\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Filtering a set of entities with a predicate function&#10;\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate function and parameters&#10;\n        ///var draftables = Persons.filter( function( person ) {\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\n        /// }, { gender: 'Male',  age: 21 });\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\n        /// { gender: 'Male',  age: 21 });\n        ///</example>\n        ///</signature>\n        if (arguments.length === 3) {\n            predicate = \"it.\" + arguments[0] + (arguments[1][0] === \".\" ? arguments[1] + \"(param)\" : \" \" + arguments[1] + \" param\");\n            thisArg = { param: arguments[2] };\n        }\n        this._checkOperation('filter');\n        var expression = _index.Container.createCodeExpression(predicate, thisArg);\n        var expressionSource = this.expression;\n        if (this.expression instanceof _index2.default.Expressions.FilterExpression) {\n            expressionSource = this.expression.source;\n\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\n            expression = _index.Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\n        }\n        var exp = _index.Container.createFilterExpression(expressionSource, expression);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    where: function where(predicate, params) {\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.filter(predicate, params);\n    },\n\n    map: function map(projection, thisArg, mappedTo) {\n        ///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"string\">\n        ///\t\t\tThe expression body of the projection function in string. &#10;\n        ///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\n        ///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"Function\">\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///\t\t\tContains the projection parameters.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\n        ///\t\t</example>\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\n        ///\t\t\tvar custom = Persons.map( function( person ) {\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('map');\n        var codeExpression = _index.Container.createCodeExpression(projection, thisArg);\n        var exp = _index.Container.createProjectionExpression(this.expression, codeExpression);\n\n        if (mappedTo === 'default') exp.projectionAs = this.defaultType;else if (mappedTo) exp.projectionAs = _index.Container.resolveType(mappedTo);else exp.projectionAs = _index2.default.Object;\n\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    select: function select(projection, thisArg, mappedTo) {\n        ///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.map(projection, thisArg, mappedTo);\n    },\n\n    length: function length(onResult, transaction) {\n        ///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet the count of Person entities. &#10;\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('length');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var countExpression = _index.Container.createCountExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(countExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    count: function count(onResult, transaction) {\n        ///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\n        ///<returns type=\"$data.Integer\" />\n        return this.length(onResult, transaction);\n    },\n\n    forEach: function forEach(iterator, transaction) {\n        ///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t\t<param name=\"iterator\" type=\"Function\">\n        ///\t\t\tIterator function to handle the result elements.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('forEach');\n        var pHandler = new _index2.default.PromiseHandler();\n        function iteratorFunc(items) {\n            items.forEach(iterator);\n        }\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\n\n        var forEachExpression = _index.Container.createForEachExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(forEachExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toArray: function toArray(onResult_items, transaction) {\n        ///\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet all Person entities. &#10;\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        if (onResult_items instanceof _index2.default.Array) {\n            return this.toArray(function (results) {\n                onResult_items.length = 0;\n                results.forEach(function (item, idx) {\n                    onResult_items.push(item);\n                });\n            });\n        }\n\n        this._checkOperation('toArray');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var toArrayExpression = _index.Container.createToArrayExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(toArrayExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    toLiveArray: function toLiveArray(onResult, transaction) {\n        var self = this;\n        var result = [];\n\n        var doAction = function doAction(action) {\n            return function (onResult) {\n                var pHandler = new _index2.default.PromiseHandler();\n                var callback = pHandler.createCallback(onResult);\n\n                var successFunc = function successFunc(res) {\n                    result.length = 0;\n\n                    var data = res;\n                    _index2.default.typeSystem.extend(result, data);\n\n                    result.prev = doAction(function (cb) {\n                        data.prev(cb);\n                    });\n                    result.next = doAction(function (cb) {\n                        data.next(cb);\n                    });\n\n                    callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\n                };\n\n                action({\n                    success: successFunc,\n                    error: callback.error\n                }, transaction);\n\n                var promise = pHandler.getPromise();\n                _index2.default.typeSystem.extend(result, promise);\n\n                return result;\n            };\n        };\n\n        result.refresh = doAction(function (cb) {\n            self.toArray(cb);\n        });\n\n        return result.refresh.apply(result, arguments);\n    },\n\n    single: function single(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('single');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(2);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var singleExpression = _index.Container.createSingleExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(singleExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    some: function some(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///         Is there any person who's first name is \"George\"? &#10;\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('some');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var someExpression = _index.Container.createSomeExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(someExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    every: function every(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tResult is true when all person are married. &#10;\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('every');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var everyExpression = _index.Container.createEveryExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(everyExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    take: function take(amount) {\n        ///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('take');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Take);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n    skip: function skip(amount) {\n        ///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('skip');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n\n    order: function order(selector) {\n        if (selector === '' || selector === undefined || selector === null) {\n            return this;\n        }\n        if (selector[0] === \"-\") {\n            var orderString = \"it.\" + selector.replace(\"-\", \"\");\n            return this.orderByDescending(orderString);\n        } else {\n            return this.orderBy(\"it.\" + selector);\n        }\n    },\n\n    orderBy: function orderBy(selector, thisArg) {\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderBy');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderBy);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    orderByDescending: function orderByDescending(selector, thisArg) {\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderByDescending');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderByDescending);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n\n    first: function first(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('first');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var firstExpression = _index.Container.createFirstExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(firstExpression);\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    find: function find(keyValue, onResult, transaction) {\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\n\n        try {\n\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n\n                var parameters = [];\n                for (var i = 0; i < keys.length; i++) {\n                    var keyProp = keys[i];\n                    if (!(keyProp.name in keyValue)) {\n                        throw new _index.Exception('Key value missing');\n                    }\n                    parameters.push(_index.Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\n                }\n\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\n                if (operation) {\n\n                    var findExpression = _index.Container.createFindExpression(this.expression, parameters);\n                    var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n                    try {\n                        var expression = preparator.Visit(findExpression);\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                        this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n                } else {\n                    var predicate = '';\n                    var params = {};\n                    for (var i = 0; i < parameters.length; i++) {\n                        var param = parameters[i];\n                        params[param.name] = param.value;\n                        if (i > 0) predicate += ' && ';\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\n                    }\n\n                    this.single(predicate, params, cbWrapper, transaction);\n                }\n            }\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    include: function include(selector) {\n        ///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\n        ///\t\t\tThe name of the entity set you want to include in the query.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tInclude the Category on every Article. &#10;\n        ///\t\t\tArticles.include(\"Category\");\n        ///\t\t</example>\n        ///\t</signature>\n\n        if (this.entityContext && this.entityContext.storageProvider && this.entityContext.storageProvider.name === \"oData\") {\n            return this.include2.apply(this, arguments);\n        }\n\n        this._checkOperation('include');\n        var constExp = _index.Container.createConstantExpression(selector, \"string\");\n        var takeExp = _index.Container.createIncludeExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n    include2: function include2(selector, thisArg) {\n        ///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\n        ///\t\t\tThe name of the entity set you want to include in the query.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tInclude the Category on every Article. &#10;\n        ///\t\t\tArticles.include(\"Category\");\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('include');\n        if (typeof selector === 'string' && (selector.length < 3 || selector.substr(0, 3) !== 'it.') && !/^[^\\.]*(=>)/.test(selector)) {\n            selector = 'it.' + selector;\n        }\n        var expression = _index.Container.createCodeExpression(selector, thisArg);\n        var includeExp = _index.Container.createIncludeExpression(this.expression, expression);\n\n        return _index.Container.createQueryable(this, includeExp);\n    },\n\n    withInlineCount: function withInlineCount(selector) {\n        this._checkOperation('withInlineCount');\n        var constExp = _index.Container.createConstantExpression(selector || 'allpages', \"string\");\n        var inlineCountExp = _index.Container.createInlineCountExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, inlineCountExp);\n    },\n    withCount: function withCount(selector) {\n        return this.withInlineCount(selector);\n    },\n\n    removeAll: function removeAll(onResult, transaction) {\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('batchDelete');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var batchDeleteExpression = _index.Container.createBatchDeleteExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(batchDeleteExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    _runQuery: function _runQuery(onResult_items, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(this.expression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toTraceString: function toTraceString(name) {\n        ///\t<summary>Returns the trace string of the query.</summary>\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\n        ///\t<returns type=\"$data.String\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the trace string of the query.</summary>\n        ///\t\t<param name=\"name\" type=\"$data.String\">\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.String\" />\n        ///\t\t<example>\n        ///\t\t\tGet the trace string for Articles.toArray() &#10;\n        ///\t\t\tArticles.toTraceString();\n        ///\t\t</example>\n        ///\t</signature>\n\n        var expression = this.expression;\n\n        if (name) {\n            expression = _index.Container['create' + name + 'Expression'](expression);\n        } else {\n            expression = _index.Container.createToArrayExpression(expression);\n        }\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        expression = preparator.Visit(expression);\n\n        //this.expression = expression;\n        var q = _index.Container.createQueryable(this, expression);\n        return q.entityContext.getTraceString(q);\n    },\n\n    _checkOperation: function _checkOperation(name) {\n        var operation = this.entityContext.resolveSetOperations(name);\n        if (operation.invokable != undefined && !operation.invokable) _index.Guard.raise(new _index.Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\n    },\n    defaultType: {}\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],122:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.RelatedEntityProxy\", null, null, {\n    constructor: function constructor(entityKeyObject, navigationProperty, type, parent, context) {\n        this._entityKeyObject = entityKeyObject;\n        this._navigationProperty = navigationProperty;\n        this._type = type;\n        this._parent = parent;\n        this._context = context;\n    },\n    _entityKeyObject: { type: _index2.default.Object },\n    _ctxFactory: {},\n    _type: {},\n    _navigationProperty: { type: _index2.default.String },\n    _parent: { type: '$data.RelatedEntityProxy' },\n    _context: { type: '$data.EntityContext' },\n\n    _getContext: function _getContext(proxyChains) {\n        proxyChains = proxyChains || this._chainToArray();\n        var firstProxy = proxyChains[0];\n        var context = firstProxy._context;\n        if (!context) {\n            var storeToken = firstProxy._parent instanceof _index2.default.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\n            if (storeToken && typeof storeToken.factory === 'function') {\n                context = storeToken.factory();\n            }\n        }\n\n        if (!context) throw new _index.Exception('ContextNotExists');\n        return context;\n    },\n    _createQueryable: function _createQueryable() {\n        var proxyChains = this._chainToArray();\n        var firstProxy = proxyChains[0];\n        var context = this._getContext(proxyChains);\n\n        var entitySet = null;\n        var expression = null;\n        if (firstProxy._parent instanceof _index2.default.Entity) {\n            entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\n\n            var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\n            proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\n        } else {\n            entitySet = context.getEntitySetFromElementType(firstProxy._type);\n        }\n\n        expression = entitySet.expression;\n        var returnType = null;\n\n        for (var i = 0; i < proxyChains.length; i++) {\n            var item = proxyChains[i];\n            var keys = item._type.memberDefinitions.getKeyProperties();\n\n            var parameters = [];\n            var missingKeyCount = 0;\n            for (var j = 0; j < keys.length; j++) {\n                var keyProp = keys[j];\n                if (!(keyProp.name in item._entityKeyObject) || typeof item._entityKeyObject[keyProp.name] == 'undefined') {\n                    missingKeyCount++;\n                } else parameters.push(_index.Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\n            }\n            if (missingKeyCount > 0 && missingKeyCount < keys.length) {\n                throw new _index.Exception('Key value missing');\n            }\n\n            var member = undefined;\n            if (item._navigationProperty) {\n                member = _index.Container.createMemberInfoExpression(item._navigationProperty);\n                returnType = item._navigationProperty.elementType;\n            }\n            if (missingKeyCount == 0) {\n                expression = _index.Container.createFindExpression(expression, parameters, member);\n                this._lastEntityKeys = item._entityKeyObject;\n            } else {\n                expression = _index.Container.createEntitySetExpression(expression, member, null, context.getEntitySetFromElementType(returnType));\n                expression = _index.Container.createToArrayExpression(expression);\n                this._lastEntityKeys = null;\n            }\n        }\n\n        var preparator = _index.Container.createQueryExpressionCreator(context);\n        expression = preparator.Visit(expression);\n        //context.log({ event: \"EntityExpression\", data: expression });\n\n        var queryable = _index.Container.createQueryable(entitySet, expression);\n        queryable.defaultType = returnType || queryable.defaultType;\n\n        return queryable;\n    },\n    _save: function _save(entity, method, onResult) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        try {\n            var queryable = this._createQueryable();\n            var context = queryable.entityContext;\n            var returnType = queryable.defaultType;\n            if (entity instanceof _index2.default.Entity) {\n                queryable.defaultType = returnType = entity.getType();\n            }\n            var odataContext = queryable.toTraceString().queryText;\n\n            var originalEntity = entity;\n            var originalInitData = entity.initData || entity;\n            entity = new returnType();\n            entity[\"@odata.context\"] = odataContext;\n            if (entity.getType().inheritsFrom != _index2.default.Entity) {\n                entity[\"@odata.type\"] = '#' + returnType.fullName;\n            }\n            /*if (this._lastEntityKeys){\r\n                for (var key in this._lastEntityKeys){\r\n                    entity[key] = this._lastEntityKeys[key];\r\n                }\r\n            }*/\n            //console.log(entity);\n\n            if (method == 'update') {\n                context.attach(entity);\n                for (var prop in originalInitData) {\n                    entity[prop] = originalInitData[prop];\n                }\n            } else if (method == 'create') {\n                /*for (var prop in originalEntity){\r\n                    entity[prop] = originalEntity[prop];\r\n                }*/\n                context.add(originalEntity);\n            } else if (method == 'delete') {\n                context.remove(entity);\n            }\n            context.saveChanges(cbWrapper);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    create: function create(entity, onResult) {\n        return this._save(entity, 'create', onResult);\n    },\n    read: function read(onResult) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        try {\n            this._getContext().executeQuery(this._createQueryable(), cbWrapper);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    update: function update(entity, onResult) {\n        this._save(entity, 'update', onResult);\n    },\n    delete: function _delete(entity, onResult) {\n        if (typeof entity == 'function') onResult = entity;\n        return this._save({}, 'delete', onResult);\n    },\n    _chainToArray: function _chainToArray(result) {\n        result = result || [];\n        if (this._parent instanceof _index2.default.RelatedEntityProxy) {\n            this._parent._chainToArray(result);\n        }\n\n        result.push(this);\n        return result;\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],123:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ServiceOperation', null, null, {}, {\n    translateDefinition: function translateDefinition(propertyDef, name, definedBy) {\n        propertyDef.serviceName = name;\n        var memDef = new _index2.default.MemberDefinition(this.generateServiceOperation(propertyDef), this);\n        memDef.name = name;\n        return memDef;\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n                var memberdef;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity || this instanceof _index2.default.EntitySet) {\n                    var entitySet;\n                    if (this instanceof _index2.default.Entity) {\n                        if (this.context) {\n                            context = this.context;\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\n                            context = this.storeToken.factory();\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else {\n                            _index.Guard.raise(new _index.Exception(\"entity can't resolve context\", 'Not Found!', this));\n                            return;\n                        }\n                    } else if (this instanceof _index2.default.EntitySet) {\n                        context = this.entityContext;\n                        entitySet = this;\n\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\n                        memberdef = _index2.default.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: entitySet\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    //object as parameter\n                    //FIX: object type parameters with the same property name as the name of the first parameter\n                    if (arguments[0] && _typeof(arguments[0]) === 'object' && arguments[0].constructor === _index2.default.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\n                        var argObj = arguments[0];\n                        for (var i = 0; i < cfg.params.length; i++) {\n                            var paramConfig = cfg.params[i];\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\n                                paramConstExpression.push(_index.Container.createConstantExpression(argObj[paramConfig.name], _index.Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\n                            }\n                        }\n                    }\n                    //arg params\n                    else {\n                            for (var i = 0; i < cfg.params.length; i++) {\n                                if (typeof arguments[i] == 'function') break;\n\n                                //TODO: check params type\n                                var paramConfig = cfg.params[i];\n                                if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\n                                    paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\n                                }\n                            }\n                        }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                if (!memberdef) {\n                    if (boundItem && boundItem.data) {\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\n                    } else {\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\n                    }\n                }\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (!(typeof clb === 'function' || (typeof clb === 'undefined' ? 'undefined' : _typeof(clb)) === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function'))) {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = cfg.params || [];\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    }\n});\n\n_index2.default.Class.define('$data.ServiceAction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'POST'; //default Action method is POST\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\n_index2.default.Class.define('$data.ServiceFunction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'GET'; //default Function method is GET\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],124:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.storageProviders = {\n    DbCreationType: {\n        Merge: 10,\n        DropTableIfChanged: 20,\n        DropTableIfChange: 20,\n        DropAllExistingTables: 30,\n        ErrorIfChange: 40,\n        DropDbIfChange: 50\n    }\n};\n\n_index2.default.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\n_index2.default.Class.define('$data.StorageProviderBase', null, null, {\n    constructor: function constructor(schemaConfiguration, context) {\n        this.providerConfiguration = schemaConfiguration || {};\n\n        this.name = this.getType().name;\n        if (_index2.default.RegisteredStorageProviders) {\n            var keys = Object.keys(_index2.default.RegisteredStorageProviders);\n            for (var i = 0; i < keys.length; i++) {\n                if (this instanceof _index2.default.RegisteredStorageProviders[keys[i]]) {\n                    this.name = keys[i];\n                    break;\n                }\n            }\n        }\n    },\n    providers: {},\n    supportedDataTypes: { value: [], writable: false },\n    initializeStore: function initializeStore(callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n\n    executeQuery: function executeQuery(queryable, callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    loadRawData: function loadRawData(tableName, callBack) {\n        callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        callBack.error(new _index.Exception('loadRawData is not supported', 'Invalid Operation'));\n    },\n\n    buildIndependentBlocks: function buildIndependentBlocks(changedItems) {\n        /// <summary>\n        /// Build and processes a dependency graph from the changed items,\n        /// and generates blocks that can be inserted to the database sequentially.\n        /// </summary>\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\n        var edgesTo = [];\n        var edgesFrom = [];\n\n        function hasOwnProperty(obj) {\n            /// <summary>\n            /// Returns true if object has own property (used for 'hashset'-like objects)\n            /// </summary>\n            /// <param name=\"obj\">Target object</param>\n            /// <returns>True if the object has own property</returns>\n            for (var p in obj) {\n                if (obj.hasOwnProperty(p)) return true;\n            }\n            return false;\n        }\n\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\n        for (var i = 0; i < changedItems.length; i++) {\n            var current = changedItems[i];\n            if (!current.dependentOn || current.dependentOn.length == 0) {\n                // This item is independent\n                continue;\n            }\n\n            var to = null;\n            // Iterating over items 'current' depends on\n            for (var j = 0; j < current.dependentOn.length; j++) {\n                var currentDependency = current.dependentOn[j];\n                if (currentDependency.entityState == _index2.default.EntityState.Unchanged) {\n                    continue;\n                }\n                to = to || {};\n                // Getting the index of current dependency\n                var ixDependendOn = -1;\n                for (var k = 0; k < changedItems.length; k++) {\n                    if (changedItems[k].data == currentDependency) {\n                        ixDependendOn = k;\n                        changedItems[k].referredBy = changedItems[k].referredBy || [];\n                        changedItems[k].referredBy.push(current.data);\n                        break;\n                    }\n                }\n                // Sanity check\n                if (ixDependendOn == -1) {\n                    _index.Guard.raise(new _index.Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\n                }\n                // Setting edge in 'to' array\n                to[ixDependendOn] = true;\n                // Setting edge in 'from' array\n                var from = edgesFrom[ixDependendOn] || {};\n                from[i] = true;\n                edgesFrom[ixDependendOn] = from;\n            }\n            // Persisting found edges in edgesTo array\n            if (to !== null) edgesTo[i] = to;\n        }\n\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\n        var independentBlocks = [];\n        // Objects getting their dependency resolved in the current cycle.\n        var currentBlock = [];\n        // Filling currentBlock with initially independent objects.\n        for (var x = 0; x < changedItems.length; x++) {\n            if (!edgesTo.hasOwnProperty(x)) {\n                currentBlock.push(x);\n            }\n        }\n        while (currentBlock.length > 0) {\n            // Shifting currentBlock to cbix,\n            // and clearing currentBlock for next independent block\n            var cbix = [].concat(currentBlock);\n            currentBlock = [];\n            // Iterating over previous independent block, to generate the new one\n            for (var b = 0; b < cbix.length; b++) {\n                var dependentNodes = edgesFrom[cbix[b]];\n                if (typeof dependentNodes !== 'undefined') {\n                    for (var d in dependentNodes) {\n                        // Removing edge from 'edgesTo'\n                        delete edgesTo[d][cbix[b]];\n                        // Check if has any more dependency\n                        if (!hasOwnProperty(edgesTo[d])) {\n                            // It doesn't, so let's clean up a bit\n                            delete edgesTo[d];\n                            // and push the item to 'currentBlock'\n                            currentBlock.push(d);\n                        }\n                    }\n                }\n                // Clearing processed item from 'edgesFrom'\n                delete edgesFrom[cbix[b]];\n            }\n            // Push cbix t to independentBlocks\n            var cb = [];\n            for (var c = 0; c < cbix.length; c++) {\n                var item = changedItems[cbix[c]];\n                if (item.data.entityState != _index2.default.EntityState.Unchanged) cb.push(item);\n            }\n            if (cb.length > 0) independentBlocks.push(cb);\n        }\n        return independentBlocks;\n    },\n    getTraceString: function getTraceString(queryable) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    setContext: function setContext(ctx) {\n        this.context = ctx;\n    },\n\n    _buildContinuationFunction: function _buildContinuationFunction(context, query) {\n        if (Array.isArray(query.result)) {\n            query.result.next = this._buildPagingMethod(context, query, 'next');\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\n        }\n    },\n    _buildPagingMethod: function _buildPagingMethod(context, query, mode) {\n        return function (onResult_items) {\n            var pHandler = new _index2.default.PromiseHandler();\n            var cbWrapper = pHandler.createCallback(onResult_items);\n\n            var continuation = new _index2.default.Expressions.ContinuationExpressionBuilder(mode);\n            var continuationResult = continuation.compile(query);\n            if (continuationResult.expression) {\n                var queryable = _index.Container.createQueryable(context, continuationResult.expression);\n                queryable.defaultType = query.defaultType;\n                context.executeQuery(queryable, cbWrapper);\n            } else {\n                cbWrapper.error(new _index.Exception(continuationResult.message, 'Invalid Operation', continuationResult));\n            }\n\n            return pHandler.getPromise();\n        };\n    },\n\n    buildDbType_modifyInstanceDefinition: function buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        var buildDbType_copyPropertyDefinition = function buildDbType_copyPropertyDefinition(propertyDefinition, refProp) {\n            var cPropertyDef;\n            if (refProp) {\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\n                cPropertyDef.kind = propertyDefinition.kind;\n                cPropertyDef.name = propertyDefinition.name;\n                cPropertyDef.notMapped = false;\n            } else {\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\n            }\n\n            cPropertyDef.dataType = _index.Container.resolveType(propertyDefinition.dataType);\n            cPropertyDef.type = cPropertyDef.dataType;\n            cPropertyDef.key = false;\n            cPropertyDef.computed = false;\n            return cPropertyDef;\n        };\n        var buildDbType_createConstrain = function buildDbType_createConstrain(foreignType, dataType, propertyName, prefix, keyPropertyName) {\n            var constrain = new Object();\n            constrain[foreignType.name] = propertyName;\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\n            return constrain;\n        };\n\n        if (storageModel.Associations) {\n            storageModel.Associations.forEach(function (association) {\n                var addToEntityDef = false;\n                var foreignType = association.FromType;\n                var dataType = association.ToType;\n                var foreignPropName = association.ToPropertyName;\n\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\n                var keyProperties = [];\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\n                    keyProperties = [memDef.keys];\n                } else if (memDef && Array.isArray(memDef.keys)) {\n                    keyProperties = [].concat(memDef.keys);\n                }\n\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\n\n                if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                    foreignType = association.ToType;\n                    dataType = association.FromType;\n                    foreignPropName = association.FromPropertyName;\n                    addToEntityDef = true;\n                }\n\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) {\n                    return d.key;\n                }).forEach(function (d, i) {\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\n                    if (addToEntityDef) {\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\n                        if (dependentMemDef) {\n                            dependentMemDef.isDependentProperty = true;\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\n                        }\n                    }\n                    association.ReferentialConstraint.push(constraint);\n                }, this);\n            }, this);\n        }\n        //Copy complex type properties\n        if (storageModel.ComplexTypes) {\n            storageModel.ComplexTypes.forEach(function (complexType) {\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\n\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\n                }, this);\n            }, this);\n        }\n    },\n    buildDbType_generateConvertToFunction: function buildDbType_generateConvertToFunction(storageModel) {\n        return function (logicalEntity) {\n            var dbInstance = new storageModel.PhysicalType();\n            dbInstance.entityState = logicalEntity.entityState;\n\n            //logicalEntity.changedProperties.forEach(function(memberDef){\n            //}, this);\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\n                if (logicalEntity[property.name] !== undefined) {\n                    dbInstance[property.name] = logicalEntity[property.name];\n                }\n            }, this);\n\n            if (storageModel.Associations) {\n                storageModel.Associations.forEach(function (association) {\n                    if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                        var complexInstance = logicalEntity[association.FromPropertyName];\n                        if (complexInstance !== undefined) {\n                            association.ReferentialConstraint.forEach(function (constrain) {\n                                if (complexInstance !== null) {\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\n                                } else {\n                                    dbInstance[constrain[association.From]] = null;\n                                }\n                            }, this);\n                        }\n                    }\n                }, this);\n            }\n            if (storageModel.ComplexTypes) {\n                storageModel.ComplexTypes.forEach(function (cmpType) {\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\n                    if (complexInstance !== undefined) {\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\n                            if (complexInstance !== null) {\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\n                            } else {\n                                dbInstance[constrain[cmpType.From]] = null;\n                            }\n                        }, this);\n                    }\n                }, this);\n            }\n            return dbInstance;\n        };\n    },\n\n    bulkInsert: function bulkInsert(a, b, c, callback) {\n        callback.error(new _index.Exception('Not Implemented'));\n    },\n\n    supportedFieldOperations: {\n        value: {\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\n            toLowerCase: { dataType: \"string\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveFieldOperation: function resolveFieldOperation(operationName, expression, frameType) {\n        ///<summary></summary>\n        var result = this.supportedFieldOperations[operationName];\n        if (Array.isArray(result)) {\n            var i = 0;\n            for (; i < result.length; i++) {\n                if (result[i].allowedType === 'default' || _index.Container.resolveType(result[i].allowedType) === _index.Container.resolveType(expression.selector.memberDefinition.type) && frameType && result[i].allowedIn && (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function (type) {\n                    return frameType === _index.Container.resolveType(type);\n                }) || !Array.isArray(result[i].allowedIn) && frameType === _index.Container.resolveType(result[i].allowedIn))) {\n                    result = result[i];\n                    break;\n                }\n            }\n            if (i === result.length) {\n                result = undefined;\n            }\n        }\n\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operationName + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operationName;\n        return result;\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        var result = this.supportedBinaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        var result = this.supportedUnaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedSetOperations: {\n        value: {\n            toArray: { invokable: true, allowedIn: [] }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        var result = this.supportedSetOperations[operation];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\n        };\n        var allowedIn = result.allowedIn || [];\n        if (frameType && allowedIn) {\n            if (allowedIn instanceof Array && !allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(allowedIn instanceof Array) && frameType !== _index.Container.resolveType(allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operation + \" not supported in: \" + frameType.name));\n            }\n        }\n        return result;\n    },\n\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    makePhysicalTypeDefinition: function makePhysicalTypeDefinition(entityDefinition, association) {},\n\n    _beginTran: function _beginTran(tables, isWrite, callBack) {\n        callBack.success(new _index2.default.Transaction());\n    },\n\n    getFieldUrl: function getFieldUrl() {\n        return '#';\n    },\n\n    supportedAutoincrementKeys: {\n        value: {}\n    }\n}, {\n    onRegisterProvider: { value: new _index2.default.Event() },\n    registerProvider: function registerProvider(name, provider) {\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || [];\n        _index2.default.RegisteredStorageProviders[name] = provider;\n    },\n    getProvider: function getProvider(name) {\n        var provider = _index2.default.RegisteredStorageProviders[name];\n        if (!provider) console.warn(\"Provider not found: '\" + name + \"'\");\n        return provider;\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\n    },\n    isSupported: {\n        get: function get() {\n            return true;\n        },\n        set: function set() {}\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],125:[function(_dereq_,module,exports){\n(function (process,global){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.StorageProviderLoaderBase', null, null, {\n    isSupported: function isSupported(providerName) {\n        _index2.default.Trace.log('Detecting ' + providerName + ' provider support');\n        var supported = true;\n        switch (providerName) {\n            case 'indexedDb':\n                supported = _index2.default.__global.indexedDB || _index2.default.__global.webkitIndexedDB || _index2.default.__global.mozIndexedDB || _index2.default.__global.msIndexedDB && !/^file:/.test(_index2.default.__global.location && _index2.default.__global.location.href);\n                break;\n            case 'storm':\n                supported = 'XMLHttpRequest' in _index2.default.__global;\n                break;\n            case 'webSql':\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'LocalStore':\n                supported = 'localStorage' in _index2.default.__global && _index2.default.__global.localStorage ? true : false;\n                break;\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'mongoDB':\n                supported = _index2.default.mongoDBDriver;\n                break;\n            default:\n                break;\n        }\n        _index2.default.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\n        return supported;\n    },\n    scriptLoadTimeout: { type: 'int', value: 1000 },\n    scriptLoadInterval: { type: 'int', value: 50 },\n    npmModules: {\n        value: {\n            'indexedDb': 'jaydata-indexeddb',\n            'InMemory': 'jaydata-inmemory',\n            'LocalStore': 'jaydata-inmemory',\n            'mongoDB': 'jaydata-mongodb',\n            'oData': 'jaydata-odata',\n            'webApi': 'jaydata-webapi',\n            'sqLite': 'jaydata-sqlite',\n            'webSql': 'jaydata-sqlite',\n            'storm': 'jaydata-storm'\n        }\n    },\n    ProviderNames: {\n        value: {\n            'indexedDb': 'IndexedDb',\n            'InMemory': 'InMemory',\n            'LocalStore': 'InMemory',\n            'oData': 'oData',\n            'webApi': 'WebApi',\n            'sqLite': 'SqLite',\n            'webSql': 'SqLite',\n            'storm': 'Storm'\n        }\n    },\n    load: function load(providerList, callback) {\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || {};\n\n        _index2.default.Trace.log('Loading provider(s): ' + providerList);\n        callback = _index2.default.PromiseHandlerBase.createCallbackSettings(callback);\n\n        var self = this;\n        var cacheKey = providerList.join(',');\n        self._fallbackCache = self._fallbackCache || {};\n\n        if (self._fallbackCache[cacheKey]) {\n            callback.success(self._fallbackCache[cacheKey]);\n        } else {\n            this.find(providerList, {\n                success: function success(provider, selectedProvider) {\n                    self._fallbackCache[cacheKey] = provider;\n                    callback.success.call(this, provider);\n                },\n                error: callback.error\n            });\n        }\n    },\n    find: function find(providerList, callback) {\n        var currentProvider = providerList.shift();\n        var currentProvider = this.getVirtual(currentProvider);\n        if (Array.isArray(currentProvider)) {\n            providerList = currentProvider;\n            currentProvider = providerList.shift();\n        }\n\n        while (currentProvider && !this.isSupported(currentProvider)) {\n            currentProvider = providerList.shift();\n        }\n\n        _index2.default.Trace.log('First supported provider is ' + currentProvider);\n\n        if (!currentProvider) {\n            _index2.default.Trace.log('Provider fallback failed');\n            callback.error();\n        }\n\n        if (_index2.default.RegisteredStorageProviders) {\n            _index2.default.Trace.log('Is the ' + currentProvider + ' provider already registered?');\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback.success(provider);\n                return;\n            } else {\n                _index2.default.Trace.log(currentProvider + ' provider not registered');\n            }\n        }\n\n        if (!process.browser) {\n            // NodeJS\n            _index2.default.Trace.log('node.js detected trying to load NPM module');\n            this.loadNpmModule(currentProvider, providerList, callback);\n        } else {\n            _index2.default.Trace.log('Browser detected trying to load provider');\n            this.loadProvider(currentProvider, providerList, callback);\n        }\n    },\n    loadProvider: function loadProvider(currentProvider, providerList, callback) {\n        var self = this;\n        var mappedName = _index2.default.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\n        _index2.default.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\n        if (mappedName) {\n            var url = this.getUrl(mappedName);\n            _index2.default.Trace.log(currentProvider + ' provider from URL: ' + url);\n\n            var loader = this.loadScript;\n            if (document && document.createElement) {\n                _index2.default.Trace.log('document and document.createElement detected, using script element loader method');\n                loader = this.loadScriptElement;\n            }\n\n            loader.call(this, url, currentProvider, function (successful) {\n                var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n                if (successful && provider) {\n                    _index2.default.Trace.log(currentProvider + ' provider successfully registered');\n                    callback.success(provider);\n                } else if (providerList.length > 0) {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\n                    self.find(providerList, callback);\n                } else {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load');\n                    callback.error();\n                }\n            });\n        }\n    },\n    getUrl: function getUrl(providerName) {\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';else return 'jaydataproviders/' + providerName + 'Provider.js';\n    },\n    loadScript: function loadScript(url, currentProvider, callback) {\n        if (!url) {\n            callback(false);\n            return;\n        }\n\n        function getHttpRequest() {\n            if (_index2.default.__global.XMLHttpRequest) return new XMLHttpRequest();else if (_index2.default.__global.ActiveXObject !== undefined) return new ActiveXObject(\"MsXml2.XmlHttp\");else {\n                _index2.default.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\n                callback(false);\n                return;\n            }\n        }\n\n        var oXmlHttp = getHttpRequest();\n        oXmlHttp.onreadystatechange = function () {\n            _index2.default.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\n            if (oXmlHttp.readyState == 4) {\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\n                    _index2.default.Trace.log('HTTP request succeeded');\n                    _index2.default.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\n                    eval.call(_index2.default.__global, oXmlHttp.responseText);\n                    if (typeof callback === 'function') callback(true);else _index2.default.Trace.log('Callback function is undefined');\n                } else {\n                    _index2.default.Trace.log('HTTP request status: ', oXmlHttp.status);\n                    if (typeof callback === 'function') callback(false);else _index2.default.Trace.log('Callback function is undefined');\n                }\n            }\n        };\n        oXmlHttp.open('GET', url, true);\n        oXmlHttp.send(null);\n    },\n    loadScriptElement: function loadScriptElement(url, currentProvider, callback) {\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\n\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        _index2.default.Trace.log('Appending child ' + script + ' to ' + head);\n        head.appendChild(script);\n\n        var loadInterval = this.scriptLoadInterval || 50;\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\n        _index2.default.Trace.log('Script element watcher iterating ' + iteration + ' times');\n        function watcher() {\n            _index2.default.Trace.log('Script element watcher iteration ' + iteration);\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback(true);\n            } else {\n                iteration--;\n                if (iteration > 0) {\n                    _index2.default.Trace.log('Script element watcher next iteration');\n                    setTimeout(watcher, loadInterval);\n                } else {\n                    _index2.default.Trace.log('Script element loader failed');\n                    callback(false);\n                }\n            }\n        }\n        setTimeout(watcher, loadInterval);\n    },\n\n    loadNpmModule: function loadNpmModule(currentProvider, providerList, callback) {\n        var provider = null;\n        try {\n            global[\"require\"](this.npmModules[currentProvider]);\n            provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            _index2.default.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\n        } catch (e) {\n            _index2.default.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\n        }\n\n        if (provider) {\n            callback.success(provider);\n        } else if (providerList.length > 0) {\n            this.find(providerList, callback);\n        } else {\n            callback.error();\n        }\n    },\n\n    virtualProviders: {\n        type: _index2.default.Array,\n        value: {\n            local: {\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\n            }\n        }\n    },\n    getVirtual: function getVirtual(name) {\n        if (this.virtualProviders[name]) return [].concat(this.virtualProviders[name].fallbacks);\n\n        return name;\n    }\n});\n\n_index2.default.StorageProviderLoader = new _index2.default.StorageProviderLoaderBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n}).call(this,_dereq_('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../TypeSystem/index.js\":44,\"_process\":23}],126:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.modelBinder.FindProjectionVisitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(includes) {\n        this._includes = includes;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        this.projectionExpression = this.projectionExpression || expression;\n        context && (context.projectionExpression = context.projectionExpression || expression);\n        this.Visit(expression.source, context);\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (!(expression.selector instanceof _index2.default.Expressions.ConstantExpression)) {\n            var selectorContext = {};\n            this.Visit(expression.selector.expression, selectorContext);\n\n            if (selectorContext.hasIncludeProjectionExpression) {\n                var include = this._includes.filter(function (it) {\n                    return it.name === selectorContext.includePath;\n                })[0];\n                if (include) {\n                    include.projectionExpression = selectorContext.includeProjectionExpression;\n                }\n\n                context && (context.hasIncludeProjectionExpression = true);\n            }\n        }\n    },\n    VisitFrameOperationExpression: function VisitFrameOperationExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var opDef = expression.operation.memberDefinition;\n        if (opDef && opDef.frameType === _index2.default.Expressions.ProjectionExpression) {\n            var paramCounter = 0;\n            var params = opDef.parameters || [{ name: \"@expression\" }];\n\n            var args = params.map(function (item, index) {\n                if (item.name === \"@expression\") {\n                    return expression.source;\n                } else {\n                    return expression.parameters[paramCounter++];\n                };\n            });\n\n            for (var i = 0; i < args.length; i++) {\n                var arg = args[i];\n\n                if (arg instanceof _index2.default.Expressions.ConstantExpression && arg.value instanceof _index2.default.Queryable) {\n                    var preparator = _index.Container.createQueryExpressionCreator(arg.value.entityContext);\n                    arg = preparator.Visit(arg.value.expression);\n                }\n\n                var visitor = new _index2.default.modelBinder.FindProjectionVisitor(this._inculdes);\n                var visitorContext = {};\n                var compiled = visitor.Visit(arg, visitorContext);\n\n                if (context && visitorContext.projectionExpression) {\n                    context.hasIncludeProjectionExpression = true;\n                    context.includeProjectionExpression = visitorContext.projectionExpression;\n                }\n            }\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        var propName = expression.associationInfo.FromPropertyName;\n\n        if (context) {\n            context.includePath = context.includePath ? context.includePath + '.' : \"\";\n            context.includePath += propName;\n        }\n    }\n});\n\n(0, _index.$C)('$data.modelBinder.ModelBinderConfigCompiler', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(query, includes, oDataProvider) {\n        this._query = query;\n        this._includes = includes;\n        this._isoDataProvider = oDataProvider || false;\n        this.depth = [];\n    },\n    VisitSingleExpression: function VisitSingleExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitSomeExpression: function VisitSomeExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFindExpression: function VisitFindExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitEveryExpression: function VisitEveryExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFirstExpression: function VisitFirstExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression) {\n        if (expression.cfg.returnType) {\n            var returnType = _index.Container.resolveType(expression.cfg.returnType);\n            if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Queryable) || returnType === _index2.default.Array) {\n                this._defaultModelBinder(expression);\n            } else {\n                var builder = _index.Container.createqueryBuilder();\n                builder.modelBinderConfig['$type'] = returnType;\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Entity)) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\n                } else {\n                    builder.modelBinderConfig['$type'] = returnType;\n                    builder.modelBinderConfig['$value'] = function (a, v) {\n                        return expression.cfg.serviceName in v ? v[expression.cfg.serviceName] : v.value;\n                    };\n                }\n                this.VisitExpression(expression, builder);\n                builder.resetModelBinderProperty();\n                this._query.modelBinderConfig = builder.modelBinderConfig;\n            }\n        }\n    },\n    VisitCountExpression: function VisitCountExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.type;\n        builder.modelBinderConfig['$value'] = expression.value;\n    },\n\n    VisitExpression: function VisitExpression(expression, builder) {\n        var projVisitor = _index.Container.createFindProjectionVisitor(this._includes);\n        var projContext = {};\n        projVisitor.Visit(expression, projContext);\n\n        if (projContext.projectionExpression) {\n            this.Visit(projContext.projectionExpression, builder);\n        } else {\n            this.DefaultSelection(builder, this._query.defaultType, this._includes, projContext.hasIncludeProjectionExpression);\n        }\n    },\n    _defaultModelBinder: function _defaultModelBinder(expression) {\n        var builder = _index.Container.createqueryBuilder();\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        if (this._isoDataProvider) {\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\n        }\n        builder.modelBinderConfig['$item'] = {};\n        builder.selectModelBinderProperty('$item');\n\n        this.VisitExpression(expression, builder);\n\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    _inheritanceMemberDefinitions: function _inheritanceMemberDefinitions(type, memdefs) {\n        var self = this;\n        if (type.inheritedTo) {\n            type.inheritedTo.forEach(function (it) {\n                memdefs = self._inheritanceMemberDefinitions(it, memdefs.concat(it.memberDefinitions.getPublicMappedProperties()));\n            });\n        }\n        return memdefs;\n    },\n    _addPropertyToModelBinderConfig: function _addPropertyToModelBinderConfig(elementType, builder) {\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\n        if (elementType.memberDefinitions) {\n            var memberDefinitions = this._inheritanceMemberDefinitions(elementType, elementType.memberDefinitions.getPublicMappedProperties());\n            memberDefinitions.forEach(function (prop) {\n                if (!storageModel || storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name]) {\n\n                    var type = _index.Container.resolveType(prop.dataType);\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\n                        //complex type\n                        builder.selectModelBinderProperty(prop.name);\n                        builder.modelBinderConfig['$type'] = type;\n                        if (this._isoDataProvider) {\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                        } else {\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                        }\n                        this._addPropertyToModelBinderConfig(type, builder);\n                        builder.popModelBinderProperty();\n                    } else {\n                        if (prop.key) {\n                            builder.addKeyField(prop.name);\n                        }\n                        if (prop.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                            builder.modelBinderConfig[prop.name] = { $source: '@odata.etag' };\n                        } else if (type === _index2.default.Array && prop.elementType) {\n                            builder.selectModelBinderProperty(prop.name);\n                            builder.modelBinderConfig['$type'] = type;\n                            if (this._isoDataProvider) {\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                            } else {\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                            }\n                            builder.selectModelBinderProperty('$item');\n                            var arrayElementType = _index.Container.resolveType(prop.elementType);\n                            builder.modelBinderConfig['$type'] = arrayElementType;\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\n                            builder.popModelBinderProperty();\n                            builder.popModelBinderProperty();\n                        } else {\n                            builder.modelBinderConfig[prop.name] = {\n                                $source: prop.name,\n                                $type: prop.type\n                            };\n                        }\n                    }\n                }\n            }, this);\n        } else {\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\n            if (builder._binderConfig.$type === _index2.default.Array) {\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\n                builder.modelBinderConfig = builder._binderConfig.$item;\n            }\n        }\n        if (storageModel) {\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\n        }\n    },\n    _addComplexTypeProperties: function _addComplexTypeProperties(complexTypes, builder) {\n        complexTypes.forEach(function (ct) {\n            if (ct.ToType !== _index2.default.Array) {\n                builder.selectModelBinderProperty(ct.FromPropertyName);\n                builder.modelBinderConfig['$type'] = ct.ToType;\n                if (this._isoDataProvider) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\n                } else {\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\n                }\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\n\n                builder.popModelBinderProperty();\n            } else {\n                var dt = ct.ToType;\n                var et = _index.Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\n                if (dt === _index2.default.Array && et && et.isAssignableTo && et.isAssignableTo(_index2.default.Entity)) {\n                    config = {\n                        $type: _index2.default.Array,\n                        $selector: 'json:' + ct.FromPropertyName,\n                        $item: {\n                            $type: et\n                        }\n                    };\n                    var md = et.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < md.length; i++) {\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\n                    }\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\n                } else {\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\n                        $type: ct.ToType,\n                        $source: ct.FromPropertyName\n                    };\n                }\n            }\n        }, this);\n    },\n    DefaultSelection: function DefaultSelection(builder, type, allIncludes, custom) {\n        var _this = this;\n\n        //no projection, get all item from entitySet\n        builder.modelBinderConfig['$type'] = custom ? _index2.default.Object : type;\n\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\n        this._addPropertyToModelBinderConfig(type, builder);\n        if (allIncludes) {\n            (function () {\n                var excludeDeepInclude = [];\n                allIncludes.forEach(function (include) {\n                    if (excludeDeepInclude.some(function (incName) {\n                        return include.name.length > incName.length && include.name.substr(0, incName.length) === incName;\n                    })) {\n                        return;\n                    }\n                    this.depth.push(include.name);\n\n                    var includes = include.name.split('/').pop().split('.');\n                    var association = null;\n                    var tmpStorageModel = storageModel;\n                    var itemCount = 0;\n                    for (var i = 0; i < includes.length; i++) {\n                        if (builder.modelBinderConfig.$item) {\n                            builder.selectModelBinderProperty('$item');\n                            itemCount++;\n                        }\n                        builder.selectModelBinderProperty(includes[i]);\n                        association = tmpStorageModel.Associations[includes[i]];\n                        tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\n                    }\n                    if (this._isoDataProvider) {\n                        builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\n                    } else {\n                        builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\n                    }\n                    if (association.ToMultiplicity === '*') {\n                        builder.modelBinderConfig['$type'] = _index2.default.Array;\n                        builder.selectModelBinderProperty('$item');\n                        builder.modelBinderConfig['$type'] = include.type;\n                        if (include.projectionExpression) {\n                            excludeDeepInclude.push(include.name);\n                            this.Visit(include.projectionExpression, builder);\n                        } else {\n                            this._addPropertyToModelBinderConfig(include.type, builder);\n                        }\n                        builder.popModelBinderProperty();\n                    } else {\n                        builder.modelBinderConfig['$type'] = include.type;\n                        if (include.projectionExpression) {\n                            excludeDeepInclude.push(include.name);\n                            this.Visit(include.projectionExpression, builder);\n                        } else {\n                            this._addPropertyToModelBinderConfig(include.type, builder);\n                        }\n                    }\n\n                    for (var i = 0; i < includes.length + itemCount; i++) {\n                        builder.popModelBinderProperty();\n                    }\n                    this.depth.pop();\n                }, _this);\n            })();\n        }\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, builder) {\n        this.hasProjection = true;\n        this.Visit(expression.selector, builder);\n\n        if (expression.selector && expression.selector.expression instanceof _index2.default.Expressions.ObjectLiteralExpression) {\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || _index2.default.Object;\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, builder) {\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n    },\n    VisitEntityAsProjection: function VisitEntityAsProjection(expression, builder) {\n        this.mapping = '';\n        this.Visit(expression.expression, builder);\n        this.depth.push(this.mapping);\n        this.mapping = this.depth.join('.');\n\n        var includes;\n        var currentInclude;\n        if (this.mapping && this._includes instanceof Array) {\n            includes = this._includes.filter(function (inc) {\n                return inc.name.indexOf(this.mapping + '.') === 0;\n            }, this);\n            includes = includes.map(function (inc) {\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\n            }, this);\n\n            // if (includes.length > 0){\n            //     this.DefaultSelection(builder, expression.expression.entityType, includes);\n            //     //console.warn('WARN: include for mapped properties is not supported!');\n            // }\n\n            currentInclude = this._includes.filter(function (inc) {\n                return inc.name === this.mapping;\n            }, this)[0];\n        }\n\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression) {\n            if (currentInclude && currentInclude.projectionExpression) {\n                var tmpIncludes = this._includes;\n                this._includes = includes;\n                var tmpDepth = this.depth;\n                this.depth = [];\n                this.Visit(currentInclude.projectionExpression, builder);\n                this._includes = tmpIncludes;\n                this.depth = tmpDepth;\n            } else {\n                this.DefaultSelection(builder, expression.expression.entityType, includes);\n            }\n        } else if (expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            builder.modelBinderConfig.$type = _index2.default.Array;\n            builder.modelBinderConfig.$item = {};\n            builder.selectModelBinderProperty('$item');\n            if (currentInclude && currentInclude.projectionExpression) {\n                var _tmpIncludes = this._includes;\n                this._includes = includes;\n                var _tmpDepth = this.depth;\n                this.depth = [];\n                this.Visit(currentInclude.projectionExpression, builder);\n                this._includes = _tmpIncludes;\n                this.depth = _tmpDepth;\n            } else {\n                this.DefaultSelection(builder, expression.expression.elementType, includes);\n            }\n            builder.popModelBinderProperty();\n        }\n        this.depth.pop();\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\n            this._addPropertyToModelBinderConfig(_index.Container.resolveType(expression.memberDefinition.type), builder);\n        } else {\n            if (!(builder.modelBinderConfig.$type && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo(_index2.default.Entity))) builder.modelBinderConfig['$source'] = expression.memberName;\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, builder) {\n        if (expression.source instanceof _index2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, builder);\n            this.Visit(expression.selector, builder);\n        }\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\n            }\n        }\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, builder) {\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\n            }\n        }\n\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.associationInfo.FromPropertyName;\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = _index2.default.Object;\n        expression.members.forEach(function (of) {\n            this.Visit(of, builder);\n        }, this);\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, builder) {\n        builder.selectModelBinderProperty(expression.fieldName);\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n        builder.popModelBinderProperty();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],127:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Transaction', null, null, {\n    constructor: function constructor() {\n        this._objectId = new Date().getTime();\n        _index2.default.Trace.log(\"create: \", this._objectId);\n\n        this.oncomplete = new _index2.default.Event(\"oncomplete\", this);\n        this.onerror = new _index2.default.Event(\"onerror\", this);\n    },\n    abort: function abort() {\n        _index.Guard.raise(new _index.Exception('Not Implemented', 'Not Implemented', arguments));\n    },\n\n    _objectId: { type: _index2.default.Integer },\n    transaction: { type: _index2.default.Object },\n\n    oncomplete: { type: _index2.default.Event },\n    onerror: { type: _index2.default.Event }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44}],128:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.Defaults', null, null, null, {\n    validators: {\n        value: {\n            required: function required(value, definedValue) {\n                return !_index.Guard.isNullOrUndefined(value);\n            },\n            customValidator: function customValidator(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true;\n            },\n\n            minValue: function minValue(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value >= definedValue;\n            },\n            maxValue: function maxValue(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value <= definedValue;\n            },\n\n            minLength: function minLength(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length >= definedValue;\n            },\n            maxLength: function maxLength(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length <= definedValue;\n            },\n            length: function length(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length == definedValue;\n            },\n            regex: function regex(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.match(typeof definedValue === 'string' ? new RegExp(definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === definedValue.length - 1 ? definedValue.slice(1, -1) : definedValue) : definedValue);\n            }\n        }\n    },\n\n    _getGroupValidations: function _getGroupValidations(validations) {\n        var validators = {};\n        if (Array.isArray(validations)) {\n            for (var i = 0; i < validations.length; i++) {\n                var validator = validations[i];\n                if (typeof this.validators[validator] === 'function') {\n                    validators[validator] = this.validators[validator];\n                }\n            }\n        }\n\n        return validators;\n    }\n});\n\n_index2.default.Class.define('$data.Validation.EntityValidation', _index2.default.Validation.EntityValidationBase, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n\n        var errors = [];\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\n        }, this);\n        return errors;\n    },\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition, newValue, valueNotSet) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        var errors = [];\n        var resolvedType = _index.Container.resolveType(memberDefinition.dataType);\n        var typeName = _index.Container.resolveName(resolvedType);\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\n\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo(_index2.default.Entity)) {\n            typeName = _index2.default.Entity.fullName;\n        }\n\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\n        return errors;\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        var value;\n        if (memberDefinition[validationName] && memberDefinition[validationName].value) value = memberDefinition[validationName].value;else value = memberDefinition[validationName];\n\n        if (this.convertableValidation[validationName]) {\n            var typeToConvert;\n            if (this.convertableValidation[validationName] === true) {\n                typeToConvert = memberDefinition.type;\n            } else {\n                typeToConvert = this.convertableValidation[validationName];\n            }\n\n            if (typeToConvert) value = _index.Container.convertTo(value, typeToConvert, memberDefinition.elementType);\n        }\n\n        return value;\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        var eMessage = defaultMessage;\n        if (_typeof(memberDefinition[validationName]) == \"object\" && memberDefinition[validationName].message) eMessage = memberDefinition[validationName].message;else if (memberDefinition.errorMessage) eMessage = memberDefinition.errorMessage;\n\n        return eMessage;\n    },\n    createValidationError: function createValidationError(memberDefinition, validationName, defaultMessage) {\n        return new _index2.default.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\n    },\n\n    convertableValidation: {\n        value: {\n            required: '$data.Boolean',\n            minValue: true,\n            maxValue: true,\n            minLength: '$data.Integer',\n            maxLength: '$data.Integer',\n            length: '$data.Integer'\n        }\n\n    },\n    supportedValidations: {\n        value: {\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.ObjectID': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Byte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.SByte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Decimal': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Float': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Number': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int16': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Integer': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int32': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int64': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.String': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\n            '$data.Date': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.DateTimeOffset': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Time': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Day': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Duration': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Boolean': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Array': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\n            '$data.Object': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Guid': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Blob': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\n            '$data.GeographyPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\n        }\n    },\n\n    fieldValidate: function fieldValidate(entity, memberDefinition, value, errors, validationTypeName) {\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        ///<param name=\"value\" type=\"Object\" />\n        ///<param name=\"errors\" type=\"Array\" />\n        ///<param name=\"validationTypeName\" type=\"string\" />\n        if (entity.entityState == _index2.default.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0) return;\n\n        var validatonGroup = this.supportedValidations[validationTypeName];\n        if (validatonGroup) {\n            var validations = Object.keys(validatonGroup);\n            validations.forEach(function (validation) {\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation))) errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\n            }, this);\n\n            if (validationTypeName === _index2.default.Entity.fullName && value instanceof _index2.default.Entity && !value.isValid()) {\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\n            }\n        }\n    }\n\n}, null);\n\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidation();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],129:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.ValidationError', null, null, {\n    constructor: function constructor(message, propertyDefinition, type) {\n        ///<param name=\"message\" type=\"string\" />\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\n\n        this.Message = message;\n        this.PropertyDefinition = propertyDefinition;\n        this.Type = type;\n    },\n    Type: { dataType: 'string' },\n    Message: { dataType: \"string\" },\n    PropertyDefinition: { dataType: _index2.default.MemberDefinition }\n}, null);\n\n_index2.default.Class.define('$data.Validation.EntityValidationBase', null, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        return [];\n    },\n\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        return [];\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\n_index2.default.Validation = _index2.default.Validation || {};\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidationBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":44}],130:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = _dereq_('./Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _EntityValidationBase = _dereq_('./Validation/EntityValidationBase.js');\n\nvar _EntityValidationBase2 = _interopRequireDefault(_EntityValidationBase);\n\nvar _EntityValidation = _dereq_('./Validation/EntityValidation.js');\n\nvar _EntityValidation2 = _interopRequireDefault(_EntityValidation);\n\nvar _ChangeDistributorBase = _dereq_('./Notifications/ChangeDistributorBase.js');\n\nvar _ChangeDistributorBase2 = _interopRequireDefault(_ChangeDistributorBase);\n\nvar _ChangeCollectorBase = _dereq_('./Notifications/ChangeCollectorBase.js');\n\nvar _ChangeCollectorBase2 = _interopRequireDefault(_ChangeCollectorBase);\n\nvar _ChangeDistributor = _dereq_('./Notifications/ChangeDistributor.js');\n\nvar _ChangeDistributor2 = _interopRequireDefault(_ChangeDistributor);\n\nvar _ChangeCollector = _dereq_('./Notifications/ChangeCollector.js');\n\nvar _ChangeCollector2 = _interopRequireDefault(_ChangeCollector);\n\nvar _Transaction = _dereq_('./Transaction.js');\n\nvar _Transaction2 = _interopRequireDefault(_Transaction);\n\nvar _Access = _dereq_('./Access.js');\n\nvar _Access2 = _interopRequireDefault(_Access);\n\nvar _Entity = _dereq_('./Entity.js');\n\nvar _Entity2 = _interopRequireDefault(_Entity);\n\nvar _Enum = _dereq_('./Enum.js');\n\nvar _Enum2 = _interopRequireDefault(_Enum);\n\nvar _RelatedEntityProxy = _dereq_('./RelatedEntityProxy.js');\n\nvar _RelatedEntityProxy2 = _interopRequireDefault(_RelatedEntityProxy);\n\nvar _EntityContext = _dereq_('./EntityContext.js');\n\nvar _EntityContext2 = _interopRequireDefault(_EntityContext);\n\nvar _QueryProvider = _dereq_('./QueryProvider.js');\n\nvar _QueryProvider2 = _interopRequireDefault(_QueryProvider);\n\nvar _ModelBinder = _dereq_('./ModelBinder.js');\n\nvar _ModelBinder2 = _interopRequireDefault(_ModelBinder);\n\nvar _QueryBuilder = _dereq_('./QueryBuilder.js');\n\nvar _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);\n\nvar _Query = _dereq_('./Query.js');\n\nvar _Query2 = _interopRequireDefault(_Query);\n\nvar _Queryable = _dereq_('./Queryable.js');\n\nvar _Queryable2 = _interopRequireDefault(_Queryable);\n\nvar _EntitySet = _dereq_('./EntitySet.js');\n\nvar _EntitySet2 = _interopRequireDefault(_EntitySet);\n\nvar _EntityState = _dereq_('./EntityState.js');\n\nvar _EntityState2 = _interopRequireDefault(_EntityState);\n\nvar _EntityAttachModes = _dereq_('./EntityAttachModes.js');\n\nvar _EntityAttachModes2 = _interopRequireDefault(_EntityAttachModes);\n\nvar _EntityStateManager = _dereq_('./EntityStateManager.js');\n\nvar _EntityStateManager2 = _interopRequireDefault(_EntityStateManager);\n\nvar _ItemStore = _dereq_('./ItemStore.js');\n\nvar _ItemStore2 = _interopRequireDefault(_ItemStore);\n\nvar _StorageProviderLoader = _dereq_('./StorageProviderLoader.js');\n\nvar _StorageProviderLoader2 = _interopRequireDefault(_StorageProviderLoader);\n\nvar _StorageProviderBase = _dereq_('./StorageProviderBase.js');\n\nvar _StorageProviderBase2 = _interopRequireDefault(_StorageProviderBase);\n\nvar _ServiceOperation = _dereq_('./ServiceOperation.js');\n\nvar _ServiceOperation2 = _interopRequireDefault(_ServiceOperation);\n\nvar _EntityWrapper = _dereq_('./EntityWrapper.js');\n\nvar _EntityWrapper2 = _interopRequireDefault(_EntityWrapper);\n\nvar _jQueryAjaxWrapper = _dereq_('./Ajax/jQueryAjaxWrapper.js');\n\nvar _jQueryAjaxWrapper2 = _interopRequireDefault(_jQueryAjaxWrapper);\n\nvar _WinJSAjaxWrapper = _dereq_('./Ajax/WinJSAjaxWrapper.js');\n\nvar _WinJSAjaxWrapper2 = _interopRequireDefault(_WinJSAjaxWrapper);\n\nvar _ExtJSAjaxWrapper = _dereq_('./Ajax/ExtJSAjaxWrapper.js');\n\nvar _ExtJSAjaxWrapper2 = _interopRequireDefault(_ExtJSAjaxWrapper);\n\nvar _AjaxStub = _dereq_('./Ajax/AjaxStub.js');\n\nvar _AjaxStub2 = _interopRequireDefault(_AjaxStub);\n\nvar _modelBinderConfigCompiler = _dereq_('./StorageProviders/modelBinderConfigCompiler.js');\n\nvar _modelBinderConfigCompiler2 = _interopRequireDefault(_modelBinderConfigCompiler);\n\nvar _AuthenticationBase = _dereq_('./Authentication/AuthenticationBase.js');\n\nvar _AuthenticationBase2 = _interopRequireDefault(_AuthenticationBase);\n\nvar _Anonymous = _dereq_('./Authentication/Anonymous.js');\n\nvar _Anonymous2 = _interopRequireDefault(_Anonymous);\n\nvar _FacebookAuth = _dereq_('./Authentication/FacebookAuth.js');\n\nvar _FacebookAuth2 = _interopRequireDefault(_FacebookAuth);\n\nvar _BasicAuth = _dereq_('./Authentication/BasicAuth.js');\n\nvar _BasicAuth2 = _interopRequireDefault(_BasicAuth);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\n//import deferred from '../JayDataModules/deferred.js';\n//import JayStorm from './JayStorm.js';\n\nexports.default = _index2.default;\n//import Promise from './Promise.js';\n\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":44,\"./Access.js\":47,\"./Ajax/AjaxStub.js\":48,\"./Ajax/ExtJSAjaxWrapper.js\":49,\"./Ajax/WinJSAjaxWrapper.js\":50,\"./Ajax/jQueryAjaxWrapper.js\":51,\"./Authentication/Anonymous.js\":52,\"./Authentication/AuthenticationBase.js\":53,\"./Authentication/BasicAuth.js\":54,\"./Authentication/FacebookAuth.js\":55,\"./Entity.js\":56,\"./EntityAttachModes.js\":57,\"./EntityContext.js\":58,\"./EntitySet.js\":59,\"./EntityState.js\":60,\"./EntityStateManager.js\":61,\"./EntityWrapper.js\":62,\"./Enum.js\":63,\"./Expressions/index.js\":111,\"./ItemStore.js\":112,\"./ModelBinder.js\":113,\"./Notifications/ChangeCollector.js\":114,\"./Notifications/ChangeCollectorBase.js\":115,\"./Notifications/ChangeDistributor.js\":116,\"./Notifications/ChangeDistributorBase.js\":117,\"./Query.js\":118,\"./QueryBuilder.js\":119,\"./QueryProvider.js\":120,\"./Queryable.js\":121,\"./RelatedEntityProxy.js\":122,\"./ServiceOperation.js\":123,\"./StorageProviderBase.js\":124,\"./StorageProviderLoader.js\":125,\"./StorageProviders/modelBinderConfigCompiler.js\":126,\"./Transaction.js\":127,\"./Validation/EntityValidation.js\":128,\"./Validation/EntityValidationBase.js\":129}],\"jaydata/core\":[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('./TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = _dereq_('./Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = _dereq_('./JaySvcUtil/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _index7 = _dereq_('./Types/index.js');\n\nvar _index8 = _interopRequireDefault(_index7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"./JaySvcUtil/index.js\":28,\"./TypeSystem/index.js\":44,\"./Types/Expressions/index.js\":111,\"./Types/index.js\":130}]},{},[])\n\n\t/*var $data = require('jaydata/core');\r\n\t$data.version = 'JayData 1.5.10';\r\n\t$data.versionNumber = '1.5.10';*/\r\n\r\n\tif (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n\t\tmodule.exports = require('jaydata/core')\r\n\t} else if (typeof define === \"function\" && define.amd) {\r\n\t\tvar interopRequire = require;\r\n\t\tdefine('jaydata/core', [], function(){\r\n\t\t\treturn interopRequire('jaydata/core');\r\n\t\t});\r\n\t} else {\r\n\t\tvar g;\r\n\t\tif (typeof window !== \"undefined\") {\r\n\t\t\twindow.require = require;\r\n\t\t\tg = window\r\n\t\t} else if (typeof global !== \"undefined\") {\r\n\t\t\tg = global\r\n\t\t} else if (typeof self !== \"undefined\") {\r\n\t\t\tg = self\r\n\t\t} else {\r\n\t\t\tg = this\r\n\t\t}\r\n\t\tg.$data = require('jaydata/core');\r\n\t}\r\n})();\r\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.acorn = global.acorn || {})));\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    7: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  }\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  }\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i]\n      if (pos > code) return false\n      pos += set[i + 1]\n      if (pos >= code) return true\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) return code === 36\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) return code === 36\n    if (code < 58) return true\n    if (code < 65) return false\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label\n    this.keyword = conf.keyword\n    this.beforeExpr = !!conf.beforeExpr\n    this.startsExpr = !!conf.startsExpr\n    this.isLoop = !!conf.isLoop\n    this.isAssign = !!conf.isAssign\n    this.prefix = !!conf.prefix\n    this.postfix = !!conf.postfix\n    this.binop = conf.binop || null\n    this.updateContext = null\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true};\n  var startsExpr = {startsExpr: true};\n  // Map keyword names to token types.\n\n  var keywordTypes = {}\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name\n    return keywordTypes[name] = new TokenType(name, options)\n  }\n\n  var tt = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=\", 6),\n    relational: binop(\"</>\", 7),\n    bitShift: binop(\"<</>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\"),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\"),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  }\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\n  var lineBreakG = new RegExp(lineBreak.source, \"g\")\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code == 0x2029\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\"\n  }\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return Object.prototype.hasOwnProperty.call(obj, propName)\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line\n    this.column = col\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start\n    this.end = end\n    if (p.sourceFile !== null) this.source = p.sourceFile\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur\n      var match = lineBreakG.exec(input)\n      if (match && match.index < offset) {\n        ++line\n        cur = match.index + match[0].length\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n    // be either 3, or 5, or 6. This influences support for strict\n    // mode, the set of reserved words, support for getters and\n    // setters and other features. The default is 6.\n    ecmaVersion: 6,\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // th position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false,\n    plugins: {}\n  }\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {}\n    for (var opt in defaultOptions)\n      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n    if (options.allowReserved == null)\n      options.allowReserved = options.ecmaVersion < 5\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken\n      options.onToken = function (token) { return tokens.push(token); }\n    }\n    if (isArray(options.onComment))\n      options.onComment = pushComment(options, options.onComment)\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function (block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? 'Block' : 'Line',\n        value: text,\n        start: start,\n        end: end\n      }\n      if (options.locations)\n        comment.loc = new SourceLocation(this, startLoc, endLoc)\n      if (options.ranges)\n        comment.range = [start, end]\n      array.push(comment)\n    }\n  }\n\n  // Registered plugins\n  var plugins = {}\n\n  function keywordRegexp(words) {\n    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options)\n    this.sourceFile = options.sourceFile\n    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n    var reserved = options.allowReserved ? \"\" :\n        reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\")\n    this.reservedWords = keywordRegexp(reserved)\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n    this.reservedWordsStrict = keywordRegexp(reservedStrict)\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n    this.input = String(input)\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false\n\n    // Load plugins\n    this.loadPlugins(options.plugins)\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos))\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n    } else {\n      this.pos = this.lineStart = 0\n      this.curLine = 1\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = tt.eof\n    // For tokens that include more information than their type, the value\n    this.value = null\n    // Its start and end offset\n    this.start = this.end = this.pos\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition()\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null\n    this.lastTokStart = this.lastTokEnd = this.pos\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext()\n    this.exprAllowed = true\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\"\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false\n    // Labels in scope.\n    this.labels = []\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n      this.skipLineComment(2)\n  };\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\n  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\n  Parser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name])\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n      var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = plugins[name]\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n      plugin(this$1, pluginConfigs[name])\n    }\n  };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode()\n    this.nextToken()\n    return this.parseTopLevel(node)\n  };\n\n  var pp = Parser.prototype\n\n  // ## Parser utilities\n\n  // Test whether a statement node is the string literal `\"use strict\"`.\n\n  pp.isUseStrict = function(stmt) {\n    return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"Literal\" &&\n      stmt.expression.raw.slice(1, -1) === \"use strict\"\n  }\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === tt.name && this.value === name\n  }\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    return this.value === name && this.eat(tt.name)\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) this.unexpected()\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === tt.eof ||\n      this.type === tt.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  }\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n      return true\n    }\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n  }\n\n  pp.afterTrailingComma = function(tokType) {\n    if (this.type == tokType) {\n      if (this.options.onTrailingComma)\n        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n      this.next()\n      return true\n    }\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected()\n  }\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n  }\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = 0\n    this.trailingComma = 0\n  };\n\n  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma\n    if (!andThrow) return !!trailing\n    if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\")\n  }\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign\n    if (!andThrow) return !!pos\n    if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n  }\n\n  var pp$1 = Parser.prototype\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var this$1 = this;\n\n    var first = true\n    if (!node.body) node.body = []\n    while (this.type !== tt.eof) {\n      var stmt = this$1.parseStatement(true, true)\n      node.body.push(stmt)\n      if (first) {\n        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)\n        first = false\n      }\n    }\n    this.next()\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType\n    }\n    return this.finishNode(node, \"Program\")\n  }\n\n  var loopLabel = {kind: \"loop\"};\n  var switchLabel = {kind: \"switch\"};\n  pp$1.isLet = function() {\n    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n    skipWhiteSpace.lastIndex = this.pos\n    var skip = skipWhiteSpace.exec(this.input)\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n    if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n    if (isIdentifierStart(nextCh, true)) {\n      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n      var ident = this.input.slice(next, pos)\n      if (!this.isKeyword(ident)) return true\n    }\n    return false\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(declaration, topLevel) {\n    var starttype = this.type, node = this.startNode(), kind\n\n    if (this.isLet()) {\n      starttype = tt._var\n      kind = \"let\"\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case tt._debugger: return this.parseDebuggerStatement(node)\n    case tt._do: return this.parseDoStatement(node)\n    case tt._for: return this.parseForStatement(node)\n    case tt._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n      return this.parseFunctionStatement(node)\n    case tt._class:\n      if (!declaration) this.unexpected()\n      return this.parseClass(node, true)\n    case tt._if: return this.parseIfStatement(node)\n    case tt._return: return this.parseReturnStatement(node)\n    case tt._switch: return this.parseSwitchStatement(node)\n    case tt._throw: return this.parseThrowStatement(node)\n    case tt._try: return this.parseTryStatement(node)\n    case tt._const: case tt._var:\n      kind = kind || this.value\n      if (!declaration && kind != \"var\") this.unexpected()\n      return this.parseVarStatement(node, kind)\n    case tt._while: return this.parseWhileStatement(node)\n    case tt._with: return this.parseWithStatement(node)\n    case tt.braceL: return this.parseBlock()\n    case tt.semi: return this.parseEmptyStatement(node)\n    case tt._export:\n    case tt._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n        if (!this.inModule)\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n      }\n      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value, expr = this.parseExpression()\n      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n        return this.parseLabeledStatement(node, maybeName, expr)\n      else return this.parseExpressionStatement(node, expr)\n    }\n  }\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var this$1 = this;\n\n    var isBreak = keyword == \"break\"\n    this.next()\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n    else if (this.type !== tt.name) this.unexpected()\n    else {\n      node.label = this.parseIdent()\n      this.semicolon()\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    for (var i = 0; i < this.labels.length; ++i) {\n      var lab = this$1.labels[i]\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n        if (node.label && isBreak) break\n      }\n    }\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  }\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n  }\n\n  pp$1.parseDoStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    this.expect(tt._while)\n    node.test = this.parseParenExpression()\n    if (this.options.ecmaVersion >= 6)\n      this.eat(tt.semi)\n    else\n      this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    this.expect(tt.parenL)\n    if (this.type === tt.semi) return this.parseFor(node, null)\n    var isLet = this.isLet()\n    if (this.type === tt._var || this.type === tt._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n      this.next()\n      this.parseVar(init$1, true, kind)\n      this.finishNode(init$1, \"VariableDeclaration\")\n      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n          !(kind !== \"var\" && init$1.declarations[0].init))\n        return this.parseForIn(node, init$1)\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors\n    var init = this.parseExpression(true, refDestructuringErrors)\n    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      this.toAssignable(init)\n      this.checkLVal(init)\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return this.parseFor(node, init)\n  }\n\n  pp$1.parseFunctionStatement = function(node) {\n    this.next()\n    return this.parseFunction(node, true)\n  }\n\n  pp$1.parseIfStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement(false)\n    node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null\n    return this.finishNode(node, \"IfStatement\")\n  }\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      this.raise(this.start, \"'return' outside of function\")\n    this.next()\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n  }\n\n  pp$1.parseSwitchStatement = function(node) {\n    var this$1 = this;\n\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.expect(tt.braceL)\n    this.labels.push(switchLabel)\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n      if (this$1.type === tt._case || this$1.type === tt._default) {\n        var isCase = this$1.type === tt._case\n        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this$1.startNode())\n        cur.consequent = []\n        this$1.next()\n        if (isCase) {\n          cur.test = this$1.parseExpression()\n        } else {\n          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n          sawDefault = true\n          cur.test = null\n        }\n        this$1.expect(tt.colon)\n      } else {\n        if (!cur) this$1.unexpected()\n        cur.consequent.push(this$1.parseStatement(true))\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.next() // Closing brace\n    this.labels.pop()\n    return this.finishNode(node, \"SwitchStatement\")\n  }\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next()\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n  }\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = []\n\n  pp$1.parseTryStatement = function(node) {\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.type === tt._catch) {\n      var clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.parseBindingAtom()\n      this.checkLVal(clause.param, true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer)\n      this.raise(node.start, \"Missing catch or finally clause\")\n    return this.finishNode(node, \"TryStatement\")\n  }\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next()\n    this.parseVar(node, false, kind)\n    this.semicolon()\n    return this.finishNode(node, \"VariableDeclaration\")\n  }\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"WhileStatement\")\n  }\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement(false)\n    return this.finishNode(node, \"WithStatement\")\n  }\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n  }\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.labels.length; ++i)\n      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n      var label = this$1.labels[i$1]\n      if (label.statementStart == node.start) {\n        label.statementStart = this$1.start\n        label.kind = kind\n      } else break\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n    node.body = this.parseStatement(true)\n    this.labels.pop()\n    node.label = expr\n    return this.finishNode(node, \"LabeledStatement\")\n  }\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExpressionStatement\")\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(allowStrict) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, oldStrict\n    node.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      var stmt = this$1.parseStatement(true)\n      node.body.push(stmt)\n      if (first && allowStrict && this$1.isUseStrict(stmt)) {\n        oldStrict = this$1.strict\n        this$1.setStrict(this$1.strict = true)\n      }\n      first = false\n    }\n    if (oldStrict === false) this.setStrict(false)\n    return this.finishNode(node, \"BlockStatement\")\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init\n    this.expect(tt.semi)\n    node.test = this.type === tt.semi ? null : this.parseExpression()\n    this.expect(tt.semi)\n    node.update = this.type === tt.parenR ? null : this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"ForStatement\")\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n    this.next()\n    node.left = init\n    node.right = this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, type)\n  }\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    var this$1 = this;\n\n    node.declarations = []\n    node.kind = kind\n    for (;;) {\n      var decl = this$1.startNode()\n      this$1.parseVarId(decl)\n      if (this$1.eat(tt.eq)) {\n        decl.init = this$1.parseMaybeAssign(isFor)\n      } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n        this$1.unexpected()\n      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n      } else {\n        decl.init = null\n      }\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n      if (!this$1.eat(tt.comma)) break\n    }\n    return node\n  }\n\n  pp$1.parseVarId = function(decl) {\n    decl.id = this.parseBindingAtom()\n    this.checkLVal(decl.id, true)\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseFunction = function(node, isStatement, allowExpressionBody) {\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = this.eat(tt.star)\n    var oldInGen = this.inGenerator\n    this.inGenerator = node.generator\n    if (isStatement || this.type === tt.name)\n      node.id = this.parseIdent()\n    this.parseFunctionParams(node)\n    this.parseFunctionBody(node, allowExpressionBody)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  }\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false, true)\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    var this$1 = this;\n\n    this.next()\n    this.parseClassId(node, isStatement)\n    this.parseClassSuper(node)\n    var classBody = this.startNode()\n    var hadConstructor = false\n    classBody.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (this$1.eat(tt.semi)) continue\n      var method = this$1.startNode()\n      var isGenerator = this$1.eat(tt.star)\n      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n      this$1.parsePropertyName(method)\n      method.static = isMaybeStatic && this$1.type !== tt.parenL\n      if (method.static) {\n        if (isGenerator) this$1.unexpected()\n        isGenerator = this$1.eat(tt.star)\n        this$1.parsePropertyName(method)\n      }\n      method.kind = \"method\"\n      var isGetSet = false\n      if (!method.computed) {\n        var key = method.key;\n        if (!isGenerator && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n          isGetSet = true\n          method.kind = key.name\n          key = this$1.parsePropertyName(method)\n        }\n        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n            key.type === \"Literal\" && key.value === \"constructor\")) {\n          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n          method.kind = \"constructor\"\n          hadConstructor = true\n        }\n      }\n      this$1.parseClassMethod(classBody, method, isGenerator)\n      if (isGetSet) {\n        var paramCount = method.kind === \"get\" ? 0 : 1\n        if (method.value.params.length !== paramCount) {\n          var start = method.value.start\n          if (method.kind === \"get\")\n            this$1.raiseRecoverable(start, \"getter should have no params\")\n          else\n            this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n        }\n        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n          this$1.raise(method.value.params[0].start, \"Setter cannot use rest params\")\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\")\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  }\n\n  pp$1.parseClassMethod = function(classBody, method, isGenerator) {\n    method.value = this.parseMethod(isGenerator)\n    classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n\n  pp$1.parseClassId = function(node, isStatement) {\n    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n  }\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n  }\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node) {\n    var this$1 = this;\n\n    this.next()\n    // export * from '...'\n    if (this.eat(tt.star)) {\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      this.semicolon()\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(tt._default)) { // export default ...\n      var parens = this.type == tt.parenL\n      var expr = this.parseMaybeAssign()\n      var needsSemi = true\n      if (!parens && (expr.type == \"FunctionExpression\" ||\n                      expr.type == \"ClassExpression\")) {\n        needsSemi = false\n        if (expr.id) {\n          expr.type = expr.type == \"FunctionExpression\"\n            ? \"FunctionDeclaration\"\n            : \"ClassDeclaration\"\n        }\n      }\n      node.declaration = expr\n      if (needsSemi) this.semicolon()\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(true)\n      node.specifiers = []\n      node.source = null\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null\n      node.specifiers = this.parseExportSpecifiers()\n      if (this.eatContextual(\"from\")) {\n        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      } else {\n        // check for keywords used as local names\n        for (var i = 0; i < node.specifiers.length; i++) {\n          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n            this$1.unexpected(node.specifiers[i].local.start)\n          }\n        }\n\n        node.source = null\n      }\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  }\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword || this.isLet()\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node = this$1.startNode()\n      node.local = this$1.parseIdent(this$1.type === tt._default)\n      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n    }\n    return nodes\n  }\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next()\n    // import '...'\n    if (this.type === tt.string) {\n      node.specifiers = empty\n      node.source = this.parseExprAtom()\n    } else {\n      node.specifiers = this.parseImportSpecifiers()\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    }\n    this.semicolon()\n    return this.finishNode(node, \"ImportDeclaration\")\n  }\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    if (this.type === tt.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode()\n      node.local = this.parseIdent()\n      this.checkLVal(node.local, true)\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n      if (!this.eat(tt.comma)) return nodes\n    }\n    if (this.type === tt.star) {\n      var node$1 = this.startNode()\n      this.next()\n      this.expectContextual(\"as\")\n      node$1.local = this.parseIdent()\n      this.checkLVal(node$1.local, true)\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n      return nodes\n    }\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node$2 = this$1.startNode()\n      node$2.imported = this$1.parseIdent(true)\n      if (this$1.eatContextual(\"as\")) {\n        node$2.local = this$1.parseIdent()\n      } else {\n        node$2.local = node$2.imported\n        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raise(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n      }\n      this$1.checkLVal(node$2.local, true)\n      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n    }\n    return nodes\n  }\n\n  var pp$2 = Parser.prototype\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding) {\n    var this$1 = this;\n\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\"\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i]\n          if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n          this$1.toAssignable(prop.value, isBinding)\n        }\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\"\n        this.toAssignableList(node.elements, isBinding)\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\"\n          delete node.operator\n          // falls through to AssignmentPattern\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n          break\n        }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\")\n          this.raise(node.right.start, \"Yield expression cannot be a default value\")\n        break\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding)\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) break\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\")\n      }\n    }\n    return node\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var this$1 = this;\n\n    var end = exprList.length\n    if (end) {\n      var last = exprList[end - 1]\n      if (last && last.type == \"RestElement\") {\n        --end\n      } else if (last && last.type == \"SpreadElement\") {\n        last.type = \"RestElement\"\n        var arg = last.argument\n        this.toAssignable(arg, isBinding)\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n          this.unexpected(arg.start)\n        --end\n      }\n\n      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        this.unexpected(last.argument.start)\n    }\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i]\n      if (elt) this$1.toAssignable(elt, isBinding)\n    }\n    return exprList\n  }\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n\n  pp$2.parseRest = function(allowNonIdent) {\n    var node = this.startNode()\n    this.next()\n\n    // RestElement inside of a function parameter must be an identifier\n    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\n    return this.finishNode(node, \"RestElement\")\n  }\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion < 6) return this.parseIdent()\n    switch (this.type) {\n    case tt.name:\n      return this.parseIdent()\n\n    case tt.bracketL:\n      var node = this.startNode()\n      this.next()\n      node.elements = this.parseBindingList(tt.bracketR, true, true)\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case tt.braceL:\n      return this.parseObj(true)\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (first) first = false\n      else this$1.expect(tt.comma)\n      if (allowEmpty && this$1.type === tt.comma) {\n        elts.push(null)\n      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break\n      } else if (this$1.type === tt.ellipsis) {\n        var rest = this$1.parseRest(allowNonIdent)\n        this$1.parseBindingListItem(rest)\n        elts.push(rest)\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n        this$1.expect(close)\n        break\n      } else {\n        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n        this$1.parseBindingListItem(elem)\n        elts.push(elem)\n      }\n    }\n    return elts\n  }\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom()\n    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.right = this.parseMaybeAssign()\n    return this.finishNode(node, \"AssignmentPattern\")\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  pp$2.checkLVal = function(expr, isBinding, checkClashes) {\n    var this$1 = this;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          this.raiseRecoverable(expr.start, \"Argument name clash\")\n        checkClashes[expr.name] = true\n      }\n      break\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++)\n        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n        var elem = expr.elements[i$1]\n        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes)\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes)\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes)\n      break\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n    }\n  }\n\n  var pp$3 = Parser.prototype\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash) {\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      return\n    var key = prop.key;\n    var name\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n        propHash.proto = true\n      }\n      return\n    }\n    name = \"$\" + name\n    var other = propHash[name]\n    if (other) {\n      var isGetSet = kind !== \"init\"\n      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n        this.raiseRecoverable(key.start, \"Redefinition of property\")\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      }\n    }\n    other[kind] = true\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n    if (this.type === tt.comma) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.expressions = [expr]\n      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n    var ownDestructuringErrors = false\n    if (!refDestructuringErrors) {\n      refDestructuringErrors = new DestructuringErrors\n      ownDestructuringErrors = true\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    if (this.type == tt.parenL || this.type == tt.name)\n      this.potentialArrowAt = this.start\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n    if (this.type.isAssign) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n      var node = this.startNodeAt(startPos, startLoc)\n      node.operator = this.value\n      node.left = this.type === tt.eq ? this.toAssignable(left) : left\n      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly\n      this.checkLVal(left)\n      this.next()\n      node.right = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return left\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprOps(noIn, refDestructuringErrors)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    if (this.eat(tt.question)) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.test = expr\n      node.consequent = this.parseMaybeAssign()\n      this.expect(tt.colon)\n      node.alternate = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  }\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop\n    if (prec != null && (!noIn || this.type !== tt._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n        var op = this.value\n        this.next()\n        var startPos = this.start, startLoc = this.startLoc\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  }\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.operator = op\n    node.right = right\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, expr\n    if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === tt.incDec\n      node.operator = this.value\n      node.prefix = true\n      this.next()\n      node.argument = this.parseMaybeUnary(null, true)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n      if (update) this.checkLVal(node.argument)\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n      else sawUnary = true\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors)\n      if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.operator = this$1.value\n        node$1.prefix = false\n        node$1.argument = expr\n        this$1.checkLVal(expr)\n        this$1.next()\n        expr = this$1.finishNode(node$1, \"UpdateExpression\")\n      }\n    }\n\n    if (!sawUnary && this.eat(tt.starstar))\n      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n    else\n      return expr\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprAtom(refDestructuringErrors)\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n    return this.parseSubscripts(expr, startPos, startLoc)\n  }\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var this$1 = this;\n\n    for (;;) {\n      if (this$1.eat(tt.dot)) {\n        var node = this$1.startNodeAt(startPos, startLoc)\n        node.object = base\n        node.property = this$1.parseIdent(true)\n        node.computed = false\n        base = this$1.finishNode(node, \"MemberExpression\")\n      } else if (this$1.eat(tt.bracketL)) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.object = base\n        node$1.property = this$1.parseExpression()\n        node$1.computed = true\n        this$1.expect(tt.bracketR)\n        base = this$1.finishNode(node$1, \"MemberExpression\")\n      } else if (!noCalls && this$1.eat(tt.parenL)) {\n        var node$2 = this$1.startNodeAt(startPos, startLoc)\n        node$2.callee = base\n        node$2.arguments = this$1.parseExprList(tt.parenR, false)\n        base = this$1.finishNode(node$2, \"CallExpression\")\n      } else if (this$1.type === tt.backQuote) {\n        var node$3 = this$1.startNodeAt(startPos, startLoc)\n        node$3.tag = base\n        node$3.quasi = this$1.parseTemplate()\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n      } else {\n        return base\n      }\n    }\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    var node, canBeArrow = this.potentialArrowAt == this.start\n    switch (this.type) {\n    case tt._super:\n      if (!this.inFunction)\n        this.raise(this.start, \"'super' outside of function or class\")\n\n    case tt._this:\n      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n      node = this.startNode()\n      this.next()\n      return this.finishNode(node, type)\n\n    case tt.name:\n      var startPos = this.start, startLoc = this.startLoc\n      var id = this.parseIdent(this.type !== tt.name)\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow))\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id])\n      return id\n\n    case tt.regexp:\n      var value = this.value\n      node = this.parseLiteral(value.value)\n      node.regex = {pattern: value.pattern, flags: value.flags}\n      return node\n\n    case tt.num: case tt.string:\n      return this.parseLiteral(this.value)\n\n    case tt._null: case tt._true: case tt._false:\n      node = this.startNode()\n      node.value = this.type === tt._null ? null : this.type === tt._true\n      node.raw = this.type.keyword\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case tt.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow)\n\n    case tt.bracketL:\n      node = this.startNode()\n      this.next()\n      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case tt.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case tt._function:\n      node = this.startNode()\n      this.next()\n      return this.parseFunction(node, false)\n\n    case tt._class:\n      return this.parseClass(this.startNode(), false)\n\n    case tt._new:\n      return this.parseNew()\n\n    case tt.backQuote:\n      return this.parseTemplate()\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode()\n    node.value = value\n    node.raw = this.input.slice(this.start, this.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n  }\n\n  pp$3.parseParenExpression = function() {\n    this.expect(tt.parenL)\n    var val = this.parseExpression()\n    this.expect(tt.parenR)\n    return val\n  }\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, val\n    if (this.options.ecmaVersion >= 6) {\n      this.next()\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc\n      var exprList = [], first = true\n      var refDestructuringErrors = new DestructuringErrors, spreadStart, innerParenStart\n      while (this.type !== tt.parenR) {\n        first ? first = false : this$1.expect(tt.comma)\n        if (this$1.type === tt.ellipsis) {\n          spreadStart = this$1.start\n          exprList.push(this$1.parseParenItem(this$1.parseRest()))\n          break\n        } else {\n          if (this$1.type === tt.parenL && !innerParenStart) {\n            innerParenStart = this$1.start\n          }\n          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc\n      this.expect(tt.parenR)\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, true)\n        if (innerParenStart) this.unexpected(innerParenStart)\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length) this.unexpected(this.lastTokStart)\n      if (spreadStart) this.unexpected(spreadStart)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc)\n        val.expressions = exprList\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n      } else {\n        val = exprList[0]\n      }\n    } else {\n      val = this.parseParenExpression()\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc)\n      par.expression = val\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  }\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  }\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = []\n\n  pp$3.parseNew = function() {\n    var node = this.startNode()\n    var meta = this.parseIdent(true)\n    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n      node.meta = meta\n      node.property = this.parseIdent(true)\n      if (node.property.name !== \"target\")\n        this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n      if (!this.inFunction)\n        this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, false)\n    else node.arguments = empty$1\n    return this.finishNode(node, \"NewExpression\")\n  }\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function() {\n    var elem = this.startNode()\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.value\n    }\n    this.next()\n    elem.tail = this.type === tt.backQuote\n    return this.finishNode(elem, \"TemplateElement\")\n  }\n\n  pp$3.parseTemplate = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    node.expressions = []\n    var curElt = this.parseTemplateElement()\n    node.quasis = [curElt]\n    while (!curElt.tail) {\n      this$1.expect(tt.dollarBraceL)\n      node.expressions.push(this$1.parseExpression())\n      this$1.expect(tt.braceR)\n      node.quasis.push(curElt = this$1.parseTemplateElement())\n    }\n    this.next()\n    return this.finishNode(node, \"TemplateLiteral\")\n  }\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var prop = this$1.startNode(), isGenerator, startPos, startLoc\n      if (this$1.options.ecmaVersion >= 6) {\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this$1.start\n          startLoc = this$1.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this$1.eat(tt.star)\n      }\n      this$1.parsePropertyName(prop)\n      this$1.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n      this$1.checkPropClash(prop, propHash)\n      node.properties.push(this$1.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n      prop.kind = \"init\"\n    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n      if (isPattern) this.unexpected()\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type != tt.comma && this.type != tt.braceR)) {\n      if (isGenerator || isPattern) this.unexpected()\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n      var paramCount = prop.kind === \"get\" ? 0 : 1\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start\n        if (prop.kind === \"get\")\n          this.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this.raiseRecoverable(start, \"setter should have exactly one param\")\n      }\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (this.keywords.test(prop.key.name) ||\n          (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) ||\n          (this.inGenerator && prop.key.name == \"yield\"))\n        this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n      prop.kind = \"init\"\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else if (this.type === tt.eq && refDestructuringErrors) {\n        if (!refDestructuringErrors.shorthandAssign)\n          refDestructuringErrors.shorthandAssign = this.start\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else {\n        prop.value = prop.key\n      }\n      prop.shorthand = true\n    } else this.unexpected()\n  }\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(tt.bracketL)) {\n        prop.computed = true\n        prop.key = this.parseMaybeAssign()\n        this.expect(tt.bracketR)\n        return prop.key\n      } else {\n        prop.computed = false\n      }\n    }\n    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n  }\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false\n      node.expression = false\n    }\n  }\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator) {\n    var node = this.startNode(), oldInGen = this.inGenerator\n    this.inGenerator = isGenerator\n    this.initFunction(node)\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = isGenerator\n    this.parseFunctionBody(node, false)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"FunctionExpression\")\n  }\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params) {\n    var oldInGen = this.inGenerator\n    this.inGenerator = false\n    this.initFunction(node)\n    node.params = this.toAssignableList(params, true)\n    this.parseFunctionBody(node, true)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  }\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction) {\n    var isExpression = isArrowFunction && this.type !== tt.braceL\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign()\n      node.expression = true\n    } else {\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldInFunc = this.inFunction, oldLabels = this.labels\n      this.inFunction = true; this.labels = []\n      node.body = this.parseBlock(true)\n      node.expression = false\n      this.inFunction = oldInFunc; this.labels = oldLabels\n    }\n\n    // If this is a strict mode function, verify that argument names\n    // are not repeated, and it does not try to bind the words `eval`\n    // or `arguments`.\n    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null;\n    if (this.strict || useStrict) {\n      var oldStrict = this.strict\n      this.strict = true\n      if (node.id)\n        this.checkLVal(node.id, true)\n      this.checkParams(node, useStrict)\n      this.strict = oldStrict\n    } else if (isArrowFunction) {\n      this.checkParams(node, useStrict)\n    }\n  }\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node, useStrict) {\n      var this$1 = this;\n\n      var nameHash = {}\n      for (var i = 0; i < node.params.length; i++) {\n        if (useStrict && this$1.options.ecmaVersion >= 7 && node.params[i].type !== \"Identifier\")\n          this$1.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        this$1.checkLVal(node.params[i], true, nameHash)\n      }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n      } else first = false\n\n      var elt\n      if (allowEmpty && this$1.type === tt.comma)\n        elt = null\n      else if (this$1.type === tt.ellipsis) {\n        elt = this$1.parseSpread(refDestructuringErrors)\n        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n          refDestructuringErrors.trailingComma = this$1.lastTokStart\n        }\n      } else\n        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n      elts.push(elt)\n    }\n    return elts\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal) {\n    var node = this.startNode()\n    if (liberal && this.options.allowReserved == \"never\") liberal = false\n    if (this.type === tt.name) {\n      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n          (this.options.ecmaVersion >= 6 ||\n           this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n        this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n      if (!liberal && this.inGenerator && this.value === \"yield\")\n        this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n      node.name = this.value\n    } else if (liberal && this.type.keyword) {\n      node.name = this.type.keyword\n    } else {\n      this.unexpected()\n    }\n    this.next()\n    return this.finishNode(node, \"Identifier\")\n  }\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function() {\n    var node = this.startNode()\n    this.next()\n    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var pp$4 = Parser.prototype\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos)\n    message += \" (\" + loc.line + \":\" + loc.column + \")\"\n    var err = new SyntaxError(message)\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n    throw err\n  }\n\n  pp$4.raiseRecoverable = pp$4.raise\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  }\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$5 = Parser.prototype\n\n  pp$5.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  }\n\n  pp$5.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type\n    node.end = pos\n    if (this.options.locations)\n      node.loc.end = loc\n    if (this.options.ranges)\n      node.range[1] = pos\n    return node\n  }\n\n  pp$5.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  }\n\n  // Finish node at given position\n\n  pp$5.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  }\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", true),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n    f_expr: new TokContext(\"function\", true)\n  }\n\n  var pp$6 = Parser.prototype\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  }\n\n  pp$6.braceIsBlock = function(prevType) {\n    if (prevType === tt.colon) {\n      var parent = this.curContext()\n      if (parent === types.b_stat || parent === types.b_expr)\n        return !parent.isExpr\n    }\n    if (prevType === tt._return)\n      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n      return true\n    if (prevType == tt.braceL)\n      return this.curContext() === types.b_stat\n    return !this.exprAllowed\n  }\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type\n    if (type.keyword && prevType == tt.dot)\n      this.exprAllowed = false\n    else if (update = type.updateContext)\n      update.call(this, prevType)\n    else\n      this.exprAllowed = type.beforeExpr\n  }\n\n  // Token-specific context update code\n\n  tt.parenR.updateContext = tt.braceR.updateContext = function() {\n    if (this.context.length == 1) {\n      this.exprAllowed = true\n      return\n    }\n    var out = this.context.pop()\n    if (out === types.b_stat && this.curContext() === types.f_expr) {\n      this.context.pop()\n      this.exprAllowed = false\n    } else if (out === types.b_tmpl) {\n      this.exprAllowed = true\n    } else {\n      this.exprAllowed = !out.isExpr\n    }\n  }\n\n  tt.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n    this.exprAllowed = true\n  }\n\n  tt.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl)\n    this.exprAllowed = true\n  }\n\n  tt.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n    this.context.push(statementParens ? types.p_stat : types.p_expr)\n    this.exprAllowed = true\n  }\n\n  tt.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  }\n\n  tt._function.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n      this.context.push(types.f_expr)\n    this.exprAllowed = false\n  }\n\n  tt.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      this.context.pop()\n    else\n      this.context.push(types.q_tmpl)\n    this.exprAllowed = false\n  }\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  };\n\n  // ## Tokenizer\n\n  var pp$7 = Parser.prototype\n\n  // Are we running under Rhino?\n  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n  // Move to the next token\n\n  pp$7.next = function() {\n    if (this.options.onToken)\n      this.options.onToken(new Token(this))\n\n    this.lastTokEnd = this.end\n    this.lastTokStart = this.start\n    this.lastTokEndLoc = this.endLoc\n    this.lastTokStartLoc = this.startLoc\n    this.nextToken()\n  }\n\n  pp$7.getToken = function() {\n    this.next()\n    return new Token(this)\n  }\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    pp$7[Symbol.iterator] = function () {\n      var self = this\n      return {next: function () {\n        var token = self.getToken()\n        return {\n          done: token.type === tt.eof,\n          value: token\n        }\n      }}\n    }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$7.setStrict = function(strict) {\n    var this$1 = this;\n\n    this.strict = strict\n    if (this.type !== tt.num && this.type !== tt.string) return\n    this.pos = this.start\n    if (this.options.locations) {\n      while (this.pos < this.lineStart) {\n        this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1\n        --this$1.curLine\n      }\n    }\n    this.nextToken()\n  }\n\n  pp$7.curContext = function() {\n    return this.context[this.context.length - 1]\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$7.nextToken = function() {\n    var curContext = this.curContext()\n    if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n    this.start = this.pos\n    if (this.options.locations) this.startLoc = this.curPosition()\n    if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n    if (curContext.override) return curContext.override(this)\n    else this.readToken(this.fullCharCodeAtPos())\n  }\n\n  pp$7.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      return this.readWord()\n\n    return this.getTokenFromCode(code)\n  }\n\n  pp$7.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos)\n    if (code <= 0xd7ff || code >= 0xe000) return code\n    var next = this.input.charCodeAt(this.pos + 1)\n    return (code << 10) + next - 0x35fdc00\n  }\n\n  pp$7.skipBlockComment = function() {\n    var this$1 = this;\n\n    var startLoc = this.options.onComment && this.curPosition()\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n    this.pos = end + 2\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start\n      var match\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this$1.curLine\n        this$1.lineStart = match.index + match[0].length\n      }\n    }\n    if (this.options.onComment)\n      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  pp$7.skipLineComment = function(startSkip) {\n    var this$1 = this;\n\n    var start = this.pos\n    var startLoc = this.options.onComment && this.curPosition()\n    var ch = this.input.charCodeAt(this.pos+=startSkip)\n    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this$1.pos\n      ch = this$1.input.charCodeAt(this$1.pos)\n    }\n    if (this.options.onComment)\n      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$7.skipSpace = function() {\n    var this$1 = this;\n\n    loop: while (this.pos < this.input.length) {\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      switch (ch) {\n        case 32: case 160: // ' '\n          ++this$1.pos\n          break\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n            ++this$1.pos\n          }\n        case 10: case 8232: case 8233:\n          ++this$1.pos\n          if (this$1.options.locations) {\n            ++this$1.curLine\n            this$1.lineStart = this$1.pos\n          }\n          break\n        case 47: // '/'\n          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n            case 42: // '*'\n              this$1.skipBlockComment()\n              break\n            case 47:\n              this$1.skipLineComment(2)\n              break\n            default:\n              break loop\n          }\n          break\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this$1.pos\n          } else {\n            break loop\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$7.finishToken = function(type, val) {\n    this.end = this.pos\n    if (this.options.locations) this.endLoc = this.curPosition()\n    var prevType = this.type\n    this.type = type\n    this.value = val\n\n    this.updateContext(prevType)\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$7.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next >= 48 && next <= 57) return this.readNumber(true)\n    var next2 = this.input.charCodeAt(this.pos + 2)\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3\n      return this.finishToken(tt.ellipsis)\n    } else {\n      ++this.pos\n      return this.finishToken(tt.dot)\n    }\n  }\n\n  pp$7.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.slash, 1)\n  }\n\n  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    var tokentype = code === 42 ? tt.star : tt.modulo\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && next === 42) {\n      ++size\n      tokentype = tt.starstar\n      next = this.input.charCodeAt(this.pos + 2)\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tokentype, size)\n  }\n\n  pp$7.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n  }\n\n  pp$7.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.bitwiseXOR, 1)\n  }\n\n  pp$7.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) {\n      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3)\n        this.skipSpace()\n        return this.nextToken()\n      }\n      return this.finishOp(tt.incDec, 2)\n    }\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.plusMin, 1)\n  }\n\n  pp$7.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n      return this.finishOp(tt.bitShift, size)\n    }\n    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n        this.input.charCodeAt(this.pos + 3) == 45) {\n      if (this.inModule) this.unexpected()\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    if (next === 61) size = 2\n    return this.finishOp(tt.relational, size)\n  }\n\n  pp$7.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2\n      return this.finishToken(tt.arrow)\n    }\n    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n  }\n\n  pp$7.getTokenFromCode = function(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n      // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(tt.parenL)\n    case 41: ++this.pos; return this.finishToken(tt.parenR)\n    case 59: ++this.pos; return this.finishToken(tt.semi)\n    case 44: ++this.pos; return this.finishToken(tt.comma)\n    case 91: ++this.pos; return this.finishToken(tt.bracketL)\n    case 93: ++this.pos; return this.finishToken(tt.bracketR)\n    case 123: ++this.pos; return this.finishToken(tt.braceL)\n    case 125: ++this.pos; return this.finishToken(tt.braceR)\n    case 58: ++this.pos; return this.finishToken(tt.colon)\n    case 63: ++this.pos; return this.finishToken(tt.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) break\n      ++this.pos\n      return this.finishToken(tt.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1)\n      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n      // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(tt.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n  }\n\n  pp$7.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size)\n    this.pos += size\n    return this.finishToken(type, str)\n  }\n\n  // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n    try {\n      return new RegExp(src, flags)\n    } catch (e) {\n      if (throwErrorAt !== undefined) {\n        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n        throw e\n      }\n    }\n  }\n\n  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\n  pp$7.readRegexp = function() {\n    var this$1 = this;\n\n    var escaped, inClass, start = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n      var ch = this$1.input.charAt(this$1.pos)\n      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n      if (!escaped) {\n        if (ch === \"[\") inClass = true\n        else if (ch === \"]\" && inClass) inClass = false\n        else if (ch === \"/\" && !inClass) break\n        escaped = ch === \"\\\\\"\n      } else escaped = false\n      ++this$1.pos\n    }\n    var content = this.input.slice(start, this.pos)\n    ++this.pos\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1()\n    var tmp = content, tmpFlags = \"\"\n    if (mods) {\n      var validFlags = /^[gim]*$/\n      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n      if (mods.indexOf(\"u\") >= 0) {\n        if (regexpUnicodeSupport) {\n          tmpFlags = \"u\"\n        } else {\n          // Replace each astral symbol and every Unicode escape sequence that\n          // possibly represents an astral symbol or a paired surrogate with a\n          // single ASCII symbol to avoid throwing on regular expressions that\n          // are only valid in combination with the `/u` flag.\n          // Note: replacing with the ASCII symbol `x` might cause false\n          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n          // be replaced by `[x-b]` which throws an error.\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n            code = Number(\"0x\" + code)\n            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n            return \"x\"\n          })\n          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n          tmpFlags = tmpFlags.replace(\"u\", \"\")\n        }\n      }\n    }\n    // Detect invalid regular expressions.\n    var value = null\n    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n    // so don't do detection if we are running under Rhino\n    if (!isRhino) {\n      tryCreateRegexp(tmp, tmpFlags, start, this)\n      // Get a regular expression object for this pattern-flag pair, or `null` in\n      // case the current environment doesn't support the flags it uses.\n      value = tryCreateRegexp(content, mods)\n    }\n    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$7.readInt = function(radix, len) {\n    var this$1 = this;\n\n    var start = this.pos, total = 0\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this$1.input.charCodeAt(this$1.pos), val\n      if (code >= 97) val = code - 97 + 10 // a\n      else if (code >= 65) val = code - 65 + 10 // A\n      else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n      else val = Infinity\n      if (val >= radix) break\n      ++this$1.pos\n      total = total * radix + val\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) return null\n\n    return total\n  }\n\n  pp$7.readRadixNumber = function(radix) {\n    this.pos += 2 // 0x\n    var val = this.readInt(radix)\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$7.readNumber = function(startsWithDot) {\n    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    var next = this.input.charCodeAt(this.pos)\n    if (next === 46) { // '.'\n      ++this.pos\n      this.readInt(10)\n      isFloat = true\n      next = this.input.charCodeAt(this.pos)\n    }\n    if (next === 69 || next === 101) { // 'eE'\n      next = this.input.charCodeAt(++this.pos)\n      if (next === 43 || next === 45) ++this.pos // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n      isFloat = true\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n    var str = this.input.slice(start, this.pos), val\n    if (isFloat) val = parseFloat(str)\n    else if (!octal || str.length === 1) val = parseInt(str, 10)\n    else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n    else val = parseInt(str, 8)\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$7.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code\n\n    if (ch === 123) {\n      if (this.options.ecmaVersion < 6) this.unexpected()\n      var codePos = ++this.pos\n      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n      ++this.pos\n      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n    } else {\n      code = this.readHexChar(4)\n    }\n    return code\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code)\n    code -= 0x10000\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$7.readString = function(quote) {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = ++this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === quote) break\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(false)\n        chunkStart = this$1.pos\n      } else {\n        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n        ++this$1.pos\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++)\n    return this.finishToken(tt.string, out)\n  }\n\n  // Reads template string tokens.\n\n  pp$7.readTmplToken = function() {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n          if (ch === 36) {\n            this$1.pos += 2\n            return this$1.finishToken(tt.dollarBraceL)\n          } else {\n            ++this$1.pos\n            return this$1.finishToken(tt.backQuote)\n          }\n        }\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        return this$1.finishToken(tt.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(true)\n        chunkStart = this$1.pos\n      } else if (isNewLine(ch)) {\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        ++this$1.pos\n        switch (ch) {\n          case 13:\n            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n          case 10:\n            out += \"\\n\"\n            break\n          default:\n            out += String.fromCharCode(ch)\n            break\n        }\n        if (this$1.options.locations) {\n          ++this$1.curLine\n          this$1.lineStart = this$1.pos\n        }\n        chunkStart = this$1.pos\n      } else {\n        ++this$1.pos\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  pp$7.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos)\n    ++this.pos\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n      return \"\"\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n        var octal = parseInt(octalStr, 8)\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1)\n          octal = parseInt(octalStr, 8)\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\")\n        }\n        this.pos += octalStr.length - 1\n        return String.fromCharCode(octal)\n      }\n      return String.fromCharCode(ch)\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$7.readHexChar = function(len) {\n    var codePos = this.pos\n    var n = this.readInt(16, len)\n    if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n    return n\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$7.readWord1 = function() {\n    var this$1 = this;\n\n    this.containsEsc = false\n    var word = \"\", first = true, chunkStart = this.pos\n    var astral = this.options.ecmaVersion >= 6\n    while (this.pos < this.input.length) {\n      var ch = this$1.fullCharCodeAtPos()\n      if (isIdentifierChar(ch, astral)) {\n        this$1.pos += ch <= 0xffff ? 1 : 2\n      } else if (ch === 92) { // \"\\\"\n        this$1.containsEsc = true\n        word += this$1.input.slice(chunkStart, this$1.pos)\n        var escStart = this$1.pos\n        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n        ++this$1.pos\n        var esc = this$1.readCodePoint()\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          this$1.raise(escStart, \"Invalid Unicode escape\")\n        word += codePointToString(esc)\n        chunkStart = this$1.pos\n      } else {\n        break\n      }\n      first = false\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$7.readWord = function() {\n    var word = this.readWord1()\n    var type = tt.name\n    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n      type = keywordTypes[word]\n    return this.finishToken(type, word)\n  }\n\n  var version = \"3.3.0\"\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return new Parser(options, input).parse()\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    var p = new Parser(options, input, pos)\n    p.nextToken()\n    return p.parseExpression()\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return new Parser(options, input)\n  }\n\n  exports.version = version;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokenizer = tokenizer;\n  exports.Parser = Parser;\n  exports.plugins = plugins;\n  exports.defaultOptions = defaultOptions;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.getLineInfo = getLineInfo;\n  exports.Node = Node;\n  exports.TokenType = TokenType;\n  exports.tokTypes = tt;\n  exports.TokContext = TokContext;\n  exports.tokContexts = types;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.Token = Token;\n  exports.isNewLine = isNewLine;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n","\"use strict\";\r\nvar Annotations = (function () {\r\n    function Annotations() {\r\n        this.includes = [];\r\n        this.annotations = [];\r\n        this.processedAnnotations = {\r\n            \"Org.OData.Core.V1.Computed\": function (annotationInfo, typeDef) {\r\n                if (typeDef.definition && annotationInfo.property && typeDef.definition[annotationInfo.property]) {\r\n                    var propDef = typeDef.definition[annotationInfo.property];\r\n                    if (annotationInfo.annotation.bool === 'true') {\r\n                        if (propDef.required) {\r\n                            delete propDef.required;\r\n                        }\r\n                        propDef.computed = true;\r\n                    }\r\n                }\r\n            },\r\n            \"Org.OData.Core.V1.OptimisticConcurrency\": function (annotationInfo, typeDef) {\r\n                if (typeDef.definition && Array.isArray(annotationInfo.annotation.propertyPaths)) {\r\n                    annotationInfo.annotation.propertyPaths.forEach(function (property) {\r\n                        var propDef = typeDef.definition[property];\r\n                        if (propDef) {\r\n                            propDef.concurrencyMode = 'fixed';\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n    Annotations.prototype.addInclude = function (include) {\r\n        this.includes.push(include);\r\n    };\r\n    Annotations.prototype.processEntityPropertyAnnotations = function (typeName, property, annotations, isStatic) {\r\n        var _this = this;\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        annotations.forEach(function (annot) {\r\n            _this.annotations.push({\r\n                typeName: typeName,\r\n                property: property,\r\n                annotation: annot,\r\n                isStatic: isStatic\r\n            });\r\n        });\r\n    };\r\n    Annotations.prototype.processEntityAnnotations = function (typeName, annotations, isStatic) {\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        return this.processEntitySetAnnotations(typeName, annotations, isStatic);\r\n    };\r\n    Annotations.prototype.processEntitySetAnnotations = function (typeName, annotations, isStatic) {\r\n        var _this = this;\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        annotations.forEach(function (annot) {\r\n            var property = annot.path;\r\n            _this.annotations.push({\r\n                typeName: typeName,\r\n                property: property,\r\n                annotation: annot,\r\n                isStatic: isStatic\r\n            });\r\n        });\r\n    };\r\n    Annotations.prototype.processSchemaAnnotations = function (target, annotations, qualifier, isStatic) {\r\n        var _this = this;\r\n        if (isStatic === void 0) { isStatic = false; }\r\n        annotations.forEach(function (annot) {\r\n            var targetParts = target.split('/');\r\n            var fullTypeName = targetParts[0];\r\n            var property = targetParts[1];\r\n            _this.annotations.push({\r\n                typeName: fullTypeName,\r\n                property: property,\r\n                annotation: annot,\r\n                qualifier: qualifier,\r\n                isStatic: isStatic\r\n            });\r\n        });\r\n    };\r\n    Annotations.prototype.preProcessAnnotation = function (typeDef) {\r\n        var _this = this;\r\n        this.annotations.forEach(function (annotationInfo) {\r\n            if (annotationInfo.typeName !== typeDef.typeName)\r\n                return;\r\n            var property = annotationInfo.property;\r\n            var annotation = annotationInfo.annotation;\r\n            var metadataKey = _this.resolveAnnotationTypeAlias(annotation.term);\r\n            if (annotation.qualifier) {\r\n                metadataKey = annotation.qualifier + ':' + metadataKey;\r\n            }\r\n            if (annotationInfo.qualifier) {\r\n                metadataKey = annotationInfo.qualifier + ':' + metadataKey;\r\n            }\r\n            if (typeof _this.processedAnnotations[metadataKey] === 'function') {\r\n                _this.processedAnnotations[metadataKey](annotationInfo, typeDef);\r\n            }\r\n        });\r\n    };\r\n    Annotations.prototype.addAnnotation = function (type) {\r\n        var _this = this;\r\n        this.annotations.forEach(function (annotationInfo) {\r\n            if (type.fullName !== annotationInfo.typeName)\r\n                return;\r\n            var property = annotationInfo.property;\r\n            var annotation = annotationInfo.annotation;\r\n            var value = undefined;\r\n            var valueResolverFuncName = 'value' + annotation.annotationType;\r\n            if (valueResolverFuncName in _this && typeof _this[valueResolverFuncName] === 'function') {\r\n                value = _this[valueResolverFuncName](annotation);\r\n            }\r\n            var metadataKey = _this.resolveAnnotationTypeAlias(annotation.term);\r\n            if (annotation.qualifier) {\r\n                metadataKey = annotation.qualifier + ':' + metadataKey;\r\n            }\r\n            if (annotationInfo.qualifier) {\r\n                metadataKey = annotationInfo.qualifier + ':' + metadataKey;\r\n            }\r\n            if (typeof Reflect !== 'undefined' && typeof Reflect.defineMetadata === 'function') {\r\n                if (property) {\r\n                    Reflect.defineMetadata(metadataKey, value, annotationInfo.isStatic ? type : type.prototype, property);\r\n                }\r\n                else {\r\n                    Reflect.defineMetadata(metadataKey, value, annotationInfo.isStatic ? type : type.prototype);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Annotations.prototype.annotationsText = function () {\r\n        var _this = this;\r\n        var src = 'if (typeof Reflect !== \"undefined\" && typeof Reflect.defineMetadata === \"function\") {\\n';\r\n        this.annotations.forEach(function (annotationInfo) {\r\n            var property = annotationInfo.property;\r\n            var annotation = annotationInfo.annotation;\r\n            var value = undefined;\r\n            var valueResolverFuncName = 'value' + annotation.annotationType;\r\n            if (valueResolverFuncName in _this && typeof _this[valueResolverFuncName] === 'function') {\r\n                value = _this[valueResolverFuncName](annotation);\r\n            }\r\n            var metadataKey = _this.resolveAnnotationTypeAlias(annotation.term);\r\n            if (annotation.qualifier) {\r\n                metadataKey = annotation.qualifier + ':' + metadataKey;\r\n            }\r\n            if (annotationInfo.qualifier) {\r\n                metadataKey = annotationInfo.qualifier + ':' + metadataKey;\r\n            }\r\n            var type = 'types[\"' + annotationInfo.typeName + '\"]' + (annotationInfo.isStatic ? '' : '.prototype');\r\n            if (property) {\r\n                src += '  Reflect.defineMetadata(\"' + metadataKey + '\", ' + JSON.stringify(value) + ', ' + type + ', \"' + property + '\")\\n';\r\n            }\r\n            else {\r\n                src += '  Reflect.defineMetadata(\"' + metadataKey + '\", ' + JSON.stringify(value) + ', ' + type + ')\\n';\r\n            }\r\n        });\r\n        src += '}\\n\\n';\r\n        return src;\r\n    };\r\n    Annotations.prototype.resolveAnnotationTypeAlias = function (term) {\r\n        for (var i = 0; i < this.includes.length; i++) {\r\n            var include = this.includes[i];\r\n            if (term.indexOf(include['alias'] + '.') === 0) {\r\n                return include['namespace'] + term.substr(include['alias'].length);\r\n            }\r\n        }\r\n        return term;\r\n    };\r\n    Annotations.prototype.valueUnknown = function (a) {\r\n        return undefined;\r\n    };\r\n    Annotations.prototype.valueBinary = function (a) {\r\n        return a.binary;\r\n    };\r\n    Annotations.prototype.valueBool = function (a) {\r\n        return a.bool;\r\n    };\r\n    Annotations.prototype.valueDate = function (a) {\r\n        return a.date;\r\n    };\r\n    Annotations.prototype.valueDateTimeOffset = function (a) {\r\n        return a.dateTimeOffset;\r\n    };\r\n    Annotations.prototype.valueDecimal = function (a) {\r\n        return a.decimal;\r\n    };\r\n    Annotations.prototype.valueDuration = function (a) {\r\n        return a.duration;\r\n    };\r\n    Annotations.prototype.valueEnumMember = function (a) {\r\n        return a.enumMember;\r\n    };\r\n    Annotations.prototype.valueFloat = function (a) {\r\n        return a.float;\r\n    };\r\n    Annotations.prototype.valueGuid = function (a) {\r\n        return a.guid;\r\n    };\r\n    Annotations.prototype.valueInt = function (a) {\r\n        return a.int;\r\n    };\r\n    Annotations.prototype.valueString = function (a) {\r\n        return a.string;\r\n    };\r\n    Annotations.prototype.valueTimeOfDay = function (a) {\r\n        return a.timeOfDay;\r\n    };\r\n    Annotations.prototype.valuePropertyPath = function (a) {\r\n        return a.propertyPaths;\r\n    };\r\n    Annotations.prototype.valueNavigationPropertyPath = function (a) {\r\n        return a.navigationPropertyPaths;\r\n    };\r\n    Annotations.prototype.valueAnnotationPath = function (a) {\r\n        return a.annotationPaths;\r\n    };\r\n    Annotations.prototype.valueNull = function (a) {\r\n        return null;\r\n    };\r\n    return Annotations;\r\n}());\r\nexports.Annotations = Annotations;\r\n//# sourceMappingURL=annotations.js.map","\"use strict\";\r\nvar JayData = (function () {\r\n    function JayData() {\r\n    }\r\n    JayData.src = \"declare module $data{\\r\\n    class Geography{}\\r\\n    class GeographyLineString{}\\r\\n    class GeographyPolygon{}\\r\\n    class GeographyMultiPoint{}\\r\\n    class GeographyMultiPolygon{}\\r\\n    class GeographyMultiLineString{}\\r\\n    class GeographyCollection{}\\r\\n\\r\\n    class Geometry{}\\r\\n    class GeometryLineString{}\\r\\n    class GeometryPolygon{}\\r\\n    class GeometryMultiPoint{}\\r\\n    class GeometryMultiPolygon{}\\r\\n    class GeometryMultiLineString{}\\r\\n    class GeometryCollection{}\\r\\n    \\r\\n    const enum EntityState{\\r\\n        Detached = 0,\\r\\n        Unchanged = 10,\\r\\n        Added = 20,\\r\\n        Modified = 30,\\r\\n        Deleted = 40\\r\\n    }\\r\\n    \\r\\n    interface MemberDefinition{\\r\\n        name: string;\\r\\n        type: any;\\r\\n        dataType: any;\\r\\n        elementType: any;\\r\\n        originalType: any;\\r\\n        kind: string;\\r\\n        classMember: boolean;\\r\\n        set: (value:any) => void;\\r\\n        get: () => any;\\r\\n        value: any;\\r\\n        initialValue: any;\\r\\n        method: Function;\\r\\n        enumerable: boolean;\\r\\n        configurable: boolean;\\r\\n        key: boolean;\\r\\n        computed: boolean;\\r\\n        storeOnObject: boolean;\\r\\n        monitorChanges: boolean;\\r\\n    }\\r\\n    \\r\\n    interface Event{\\r\\n        attach(eventHandler: (sender: any, event: any) => void ): void;\\r\\n        detach(eventHandler: () => void ): void;\\r\\n        fire(e: any, sender: any): void;\\r\\n    }\\r\\n\\r\\n    class Base<T>{\\r\\n        constructor();\\r\\n        getType: () => typeof Base;\\r\\n        \\r\\n        static addProperty(name:string, getterOrType:string | Function, setterOrGetter?:Function, setter?:Function): void;\\r\\n        static addMember(name:string, definition:any, isClassMember?:boolean): void;\\r\\n        static describeField(name:string, definition:any): void;\\r\\n        \\r\\n        static hasMetadata(key:string, property?:string): boolean;\\r\\n        static getAllMetadata(property?:string): any;\\r\\n        static getMetadata(key:string, property?:string): any;\\r\\n        static setMetadata(key:string, value:any, property?:string): void;\\r\\n    }\\r\\n    \\r\\n    class Enum extends Base<Enum>{\\r\\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Enum>;\\r\\n    }\\r\\n    function createEnum(name:string, enumType:any, enumDefinition?:any): Base<Enum>;\\r\\n    \\r\\n    class Entity extends Base<Entity>{\\r\\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Entity>;\\r\\n        \\r\\n        entityState: EntityState;\\r\\n        changedProperties: MemberDefinition[];\\r\\n        \\r\\n        propertyChanging: Event;\\r\\n        propertyChanged: Event;\\r\\n        propertyValidationError: Event;\\r\\n        isValid: boolean;\\r\\n    }\\r\\n    \\r\\n    class EntitySet<Ttype extends typeof Entity, T extends Entity> extends Queryable<T>{\\r\\n        add(item: T): T;\\r\\n        add(initData: {}): T;\\r\\n        attach(item: T): void;\\r\\n        attach(item: {}): void;\\r\\n        attachOrGet(item: T): T;\\r\\n        attachOrGet(item: {}): T;\\r\\n        detach(item: T): void;\\r\\n        detach(item: {}): void;\\r\\n        remove(item: T): void;\\r\\n        remove(item: {}): void;\\r\\n        elementType: Ttype;\\r\\n    }\\r\\n    \\r\\n    class EntityContext extends Base<EntityContext>{\\r\\n        constructor(config?: any);\\r\\n        onReady(): Promise<EntityContext>;\\r\\n        saveChanges(): Promise<number>;\\r\\n        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<EntityContext>;\\r\\n    }\\r\\n\\r\\n    class Queryable<T extends Entity | Edm.Primitive>{\\r\\n        filter(predicate: (it: T) => boolean, thisArg?: any): Queryable<T>;\\r\\n        filter(predicate: string, thisArg?: any): Queryable<T>;\\r\\n        map(projection: (it: T) => any): Queryable<any>;\\r\\n        map(projection: string): Queryable<any>;\\r\\n        orderBy(predicate: (it: T) => void): Queryable<T>;\\r\\n        orderBy(predicate: string): Queryable<T>;\\r\\n        orderByDescending(predicate: (it: T) => void): Queryable<T>;\\r\\n        orderByDescending(predicate: string): Queryable<T>;\\r\\n        include(selector: string): Queryable<T>;\\r\\n        skip(amount: number): Queryable<T>;\\r\\n        take(amount: number): Queryable<T>;\\r\\n        forEach(handler: (it: T) => void): Promise<T>;\\r\\n        length(): Promise<number>;\\r\\n        toArray(): Promise<T[]>;\\r\\n        single(predicate: (it: T) => boolean, params?: any): Promise<T>;\\r\\n        single(predicate: string, params?: any): Promise<T>;\\r\\n        first(predicate?: (it: T) => boolean, params?: any): Promise<T>;\\r\\n        first(predicate?: string, params?: any): Promise<T>;\\r\\n        removeAll(): Promise<number>;\\r\\n    }\\r\\n    class ServiceAction{}\\r\\n    class ServiceFunction{}\\r\\n    \\r\\n    function implementation(name:string): typeof Base;\\r\\n}\\r\\n\\r\\ndeclare module Edm {\\r\\n    type Boolean = boolean;\\r\\n    type Binary = Uint8Array;\\r\\n    type DateTime = Date;\\r\\n    type DateTimeOffset = Date;\\r\\n    type Duration = string;\\r\\n    type TimeOfDay = string;\\r\\n    type Date = string;\\r\\n    type Time = string;\\r\\n    type Decimal = string;\\r\\n    type Single = number;\\r\\n    type Float = number;\\r\\n    type Double = number;\\r\\n    type Guid = string;\\r\\n    type Int16 = number;\\r\\n    type Int32 = number;\\r\\n    type Int64 = string;\\r\\n    type Byte = number;\\r\\n    type SByte = number;\\r\\n    type String = string;\\r\\n    type GeographyPoint = $data.Geography;\\r\\n    type GeographyLineString = $data.GeographyLineString;\\r\\n    type GeographyPolygon = $data.GeographyPolygon;\\r\\n    type GeographyMultiPoint = $data.GeographyMultiPoint;\\r\\n    type GeographyMultiPolygon = $data.GeographyMultiPolygon;\\r\\n    type GeographyMultiLineString = $data.GeographyMultiLineString;\\r\\n    type GeographyCollection = $data.GeographyCollection;\\r\\n    type GeometryPoint = $data.Geometry;\\r\\n    type GeometryLineString = $data.GeometryLineString;\\r\\n    type GeometryPolygon = $data.GeometryPolygon;\\r\\n    type GeometryMultiPoint = $data.GeometryMultiPoint;\\r\\n    type GeometryMultiPolygon = $data.GeometryMultiPolygon;\\r\\n    type GeometryMultiLineString = $data.GeometryMultiLineString;\\r\\n    type GeometryCollection = $data.GeometryCollection;\\r\\n    type Primitive =\\r\\n        Boolean | Binary | Guid | DateTime | DateTimeOffset | Duration | TimeOfDay | Date | Time |\\r\\n        Decimal | Single | Float | Double | Int16 | Int32 | Int64 | Byte | SByte | String |\\r\\n        GeographyPoint | GeographyLineString | GeographyPolygon | GeographyMultiPoint | GeographyMultiLineString | GeographyMultiPolygon | GeographyCollection |\\r\\n        GeometryPoint | GeometryLineString | GeometryPolygon | GeometryMultiPoint | GeometryMultiLineString | GeometryMultiPolygon | GeometryCollection;\\r\\n}\";\r\n    return JayData;\r\n}());\r\nexports.JayData = JayData;\r\n//# sourceMappingURL=dts.js.map","\"use strict\";\r\nvar annotations_1 = require('./annotations');\r\nvar dts_1 = require('./dts');\r\nvar containsField = function (obj, field, cb) {\r\n    // if (field in (obj || {})) {\r\n    //     cb(obj[field])\r\n    // }\r\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\r\n        cb(obj[field]);\r\n    }\r\n};\r\nvar parsebool = function (b, d) {\r\n    if (\"boolean\" === typeof b) {\r\n        return b;\r\n    }\r\n    switch (b) {\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return d;\r\n    }\r\n};\r\nvar _collectionRegex = /^Collection\\((.*)\\)$/;\r\nvar dtsTypeMapping = {\r\n    'Edm.Boolean': 'boolean',\r\n    'Edm.Binary': 'Uint8Array',\r\n    'Edm.DateTime': 'Date',\r\n    'Edm.DateTimeOffset': 'Date',\r\n    'Edm.Time': 'string',\r\n    'Edm.Duration': 'string',\r\n    'Edm.TimeOfDay': 'string',\r\n    'Edm.Date': 'string',\r\n    'Edm.Decimal': 'string',\r\n    'Edm.Single': 'number',\r\n    'Edm.Float': 'number',\r\n    'Edm.Double': 'number',\r\n    'Edm.Guid': 'string',\r\n    'Edm.Int16': 'number',\r\n    'Edm.Int32': 'number',\r\n    'Edm.Int64': 'string',\r\n    'Edm.Byte': 'number',\r\n    'Edm.SByte': 'number',\r\n    'Edm.String': 'string',\r\n    'Edm.GeographyPoint': '$data.Geography',\r\n    'Edm.GeographyLineString': '$data.GeographyLineString',\r\n    'Edm.GeographyPolygon': '$data.GeographyPolygon',\r\n    'Edm.GeographyMultiPoint': '$data.GeographyMultiPoint',\r\n    'Edm.GeographyMultiPolygon': '$data.GeographyMultiPolygon',\r\n    'Edm.GeographyMultiLineString': '$data.GeographyMultiLineString',\r\n    'Edm.GeographyCollection': '$data.GeographyCollection',\r\n    'Edm.GeometryPoint': '$data.Geometry',\r\n    'Edm.GeometryLineString': '$data.GeometryLineString',\r\n    'Edm.GeometryPolygon': '$data.GeometryPolygon',\r\n    'Edm.GeometryMultiPoint': '$data.GeometryMultiPoint',\r\n    'Edm.GeometryMultiPolygon': '$data.GeometryMultiPolygon',\r\n    'Edm.GeometryMultiLineString': '$data.GeometryMultiLineString',\r\n    'Edm.GeometryCollection': '$data.GeometryCollection'\r\n};\r\nvar Metadata = (function () {\r\n    function Metadata($data, options, metadata) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.metadata = metadata;\r\n        this.options.container = this.$data.Container; //this.options.container || $data.createContainer()\r\n        this.options.baseType = this.options.baseType || '$data.Entity';\r\n        this.options.entitySetType = this.options.entitySetType || '$data.EntitySet';\r\n        this.options.contextType = this.options.contextType || '$data.EntityContext';\r\n        this.options.collectionBaseType = this.options.collectionBaseType || 'Array';\r\n        this.annotationHandler = new annotations_1.Annotations();\r\n    }\r\n    Metadata.prototype._getMaxValue = function (maxValue) {\r\n        if (\"number\" === typeof maxValue)\r\n            return maxValue;\r\n        if (\"max\" === maxValue)\r\n            return Number.MAX_VALUE;\r\n        return parseInt(maxValue);\r\n    };\r\n    Metadata.prototype.createTypeDefinition = function (propertySchema, definition) {\r\n        var _this = this;\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.type = _this.options.collectionBaseType;\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.type = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createReturnTypeDefinition = function (propertySchema, definition) {\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.returnType = '$data.Queryable';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.returnType = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createProperty = function (entityFullName, entitySchema, propertySchema) {\r\n        var _this = this;\r\n        var self = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"maxLength\", function (v) {\r\n            definition.maxLength = _this._getMaxValue(v);\r\n        });\r\n        containsField(entitySchema, \"key\", function (keys) {\r\n            if (keys.propertyRefs.some(function (pr) { return pr.name === propertySchema.name; })) {\r\n                definition.key = true;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityPropertyAnnotations(entityFullName, propertySchema.name, v);\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createNavigationProperty = function (entityFullName, entitySchema, propertySchema) {\r\n        var _this = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"partner\", function (p) {\r\n            definition.inverseProperty = p;\r\n        });\r\n        if (!definition.inverseProperty) {\r\n            definition.inverseProperty = '$$unbound';\r\n        }\r\n        containsField(propertySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityPropertyAnnotations(entityFullName, propertySchema.name, v);\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createEntityDefinition = function (entitySchema, entityFullName) {\r\n        var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entityFullName, entitySchema));\r\n        var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entityFullName, entitySchema));\r\n        props = props.concat(navigationProps);\r\n        var result = props.reduce(function (p, c) {\r\n            p[c.name] = c.definition;\r\n            return p;\r\n        }, {});\r\n        return result;\r\n    };\r\n    Metadata.prototype.createEntityType = function (entitySchema, namespace) {\r\n        var _this = this;\r\n        var baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType);\r\n        var entityFullName = namespace + \".\" + entitySchema.name;\r\n        var definition = this.createEntityDefinition(entitySchema, entityFullName);\r\n        var staticDefinition = {};\r\n        containsField(entitySchema, \"openType\", function (v) {\r\n            if (parsebool(v, false)) {\r\n                staticDefinition.openType = { value: true };\r\n            }\r\n        });\r\n        containsField(entitySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityAnnotations(entityFullName, v);\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: entityFullName,\r\n            baseType: baseType,\r\n            params: [entityFullName, this.options.container, definition, staticDefinition],\r\n            definition: definition,\r\n            type: 'entity'\r\n        };\r\n    };\r\n    Metadata.prototype.createEnumOption = function (enumFullName, entitySchema, propertySchema, i) {\r\n        var _this = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {\r\n            name: propertySchema.name,\r\n            index: i\r\n        };\r\n        containsField(propertySchema, \"value\", function (value) {\r\n            var v = +value;\r\n            if (!isNaN(v)) {\r\n                definition.value = v;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityPropertyAnnotations(enumFullName, propertySchema.name, v, true);\r\n        });\r\n        return definition;\r\n    };\r\n    Metadata.prototype.createEnumDefinition = function (enumSchema, enumFullName) {\r\n        var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumFullName, enumSchema));\r\n        return props;\r\n    };\r\n    Metadata.prototype.createEnumType = function (enumSchema, namespace) {\r\n        var _this = this;\r\n        var self = this;\r\n        var enumFullName = namespace + \".\" + enumSchema.name;\r\n        var definition = this.createEnumDefinition(enumSchema, enumFullName);\r\n        containsField(enumSchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntityAnnotations(enumFullName, v, true);\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: enumFullName,\r\n            baseType: '$data.Enum',\r\n            params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\r\n            definition: definition,\r\n            type: 'enum'\r\n        };\r\n    };\r\n    Metadata.prototype.createEntitySetProperty = function (entitySetSchema, contextSchema) {\r\n        var _this = this;\r\n        //var c = this.options.container\r\n        var t = entitySetSchema.entityType; //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\r\n        var prop = {\r\n            name: entitySetSchema.name,\r\n            definition: {\r\n                type: this.options.entitySetType,\r\n                elementType: t\r\n            }\r\n        };\r\n        containsField(entitySetSchema, \"annotations\", function (v) {\r\n            _this.annotationHandler.processEntitySetAnnotations(t, v);\r\n        });\r\n        return prop;\r\n    };\r\n    Metadata.prototype.indexBy = function (fieldName, pick) {\r\n        return [function (p, c) { p[c[fieldName]] = c[pick]; return p; }, {}];\r\n    };\r\n    Metadata.prototype.createContextDefinition = function (contextSchema, namespace) {\r\n        var _this = this;\r\n        var props = (contextSchema.entitySets || []).map(function (es) { return _this.createEntitySetProperty(es, contextSchema); });\r\n        var result = props.reduce.apply(props, this.indexBy(\"name\", \"definition\"));\r\n        return result;\r\n    };\r\n    Metadata.prototype.createContextType = function (contextSchema, namespace) {\r\n        if (Array.isArray(contextSchema)) {\r\n            throw new Error(\"Array type is not supported here\");\r\n        }\r\n        var definition = this.createContextDefinition(contextSchema, namespace);\r\n        var baseType = this.options.contextType;\r\n        var typeName = namespace + \".\" + contextSchema.name;\r\n        var contextImportMethods = [];\r\n        contextSchema.actionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.actionImports);\r\n        contextSchema.functionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.functionImports);\r\n        return {\r\n            namespace: namespace,\r\n            typeName: typeName,\r\n            baseType: baseType,\r\n            params: [typeName, this.options.container, definition],\r\n            definition: definition,\r\n            type: 'context',\r\n            contextImportMethods: contextImportMethods\r\n        };\r\n    };\r\n    Metadata.prototype.createMethodParameter = function (parameter, definition) {\r\n        var paramDef = {\r\n            name: parameter.name\r\n        };\r\n        this.createTypeDefinition(parameter, paramDef);\r\n        definition.params.push(paramDef);\r\n    };\r\n    Metadata.prototype.applyBoundMethod = function (actionInfo, ns, typeDefinitions, type) {\r\n        var _this = this;\r\n        var definition = {\r\n            type: type,\r\n            namespace: ns,\r\n            returnType: null,\r\n            params: []\r\n        };\r\n        containsField(actionInfo, \"returnType\", function (value) {\r\n            _this.createReturnTypeDefinition(value, definition);\r\n        });\r\n        var parameters = [].concat(actionInfo.parameters);\r\n        parameters.forEach(function (p) { return _this.createMethodParameter(p, definition); });\r\n        if (parsebool(actionInfo.isBound, false)) {\r\n            var bindingParameter_1 = definition.params.shift();\r\n            if (bindingParameter_1.type === this.options.collectionBaseType) {\r\n                var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.namespace === ns && d.type === 'context'; });\r\n                filteredContextDefinitions.forEach(function (ctx) {\r\n                    for (var setName in ctx.definition) {\r\n                        var set = ctx.definition[setName];\r\n                        if (set.elementType === bindingParameter_1.elementType) {\r\n                            set.actions = set.actions || {};\r\n                            set.actions[actionInfo.name] = definition;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var filteredTypeDefinitions = typeDefinitions.filter(function (d) { return d.typeName === bindingParameter_1.type && d.type === 'entity'; });\r\n                filteredTypeDefinitions.forEach(function (t) {\r\n                    t.definition[actionInfo.name] = definition;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            delete definition.namespace;\r\n            var methodFullName_1 = ns + '.' + actionInfo.name;\r\n            var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.type === 'context'; });\r\n            filteredContextDefinitions.forEach(function (ctx) {\r\n                ctx.contextImportMethods.forEach(function (methodImportInfo) {\r\n                    if (methodImportInfo.action === methodFullName_1 || methodImportInfo.function === methodFullName_1) {\r\n                        ctx.definition[actionInfo.name] = definition;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Metadata.prototype.processMetadata = function (createdTypes) {\r\n        var _this = this;\r\n        var types = createdTypes || [];\r\n        var typeDefinitions = [];\r\n        var serviceMethods = [];\r\n        containsField(this.metadata, \"references\", function (references) {\r\n            references.forEach(function (ref) {\r\n                containsField(ref, \"includes\", function (includes) {\r\n                    includes.forEach(function (include) {\r\n                        _this.annotationHandler.addInclude(include);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        var dtsModules = {};\r\n        types.dts = '/*//////////////////////////////////////////////////////////////////////////////////////\\n' +\r\n            '//////     Autogenerated by JaySvcUtil http://JayData.org for more info        /////////\\n' +\r\n            '//////                      OData  V4  TypeScript                              /////////\\n' +\r\n            '//////////////////////////////////////////////////////////////////////////////////////*/\\n\\n';\r\n        types.dts += dts_1.JayData.src + '\\n\\n';\r\n        //types.dts += 'declare module Edm {\\n' + Object.keys(dtsTypeMapping).map(t => '    type ' + t.split('.')[1] + ' = ' + dtsTypeMapping[t] + ';').join('\\n') + '\\n}\\n\\n';\r\n        var self = this;\r\n        this.metadata.dataServices.schemas.forEach(function (schema) {\r\n            var ns = schema.namespace;\r\n            dtsModules[ns] = ['declare module ' + ns + ' {', '}'];\r\n            if (schema.enumTypes) {\r\n                var enumTypes = schema.enumTypes.map(function (ct) { return _this.createEnumType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, enumTypes);\r\n            }\r\n            if (schema.complexTypes) {\r\n                var complexTypes = schema.complexTypes.map(function (ct) { return _this.createEntityType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, complexTypes);\r\n            }\r\n            if (schema.entityTypes) {\r\n                var entityTypes = schema.entityTypes.map(function (et) { return _this.createEntityType(et, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, entityTypes);\r\n            }\r\n            if (schema.actions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.actions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceAction'); }; }));\r\n            }\r\n            if (schema.functions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.functions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceFunction'); }; }));\r\n            }\r\n            if (schema.entityContainer) {\r\n                var contexts = schema.entityContainer.map(function (ctx) { return _this.createContextType(ctx, self.options.namespace || ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, contexts);\r\n            }\r\n            //console.log('annotations', schema)\r\n            containsField(schema, 'annotations', function (annotations) {\r\n                annotations.forEach(function (annot) {\r\n                    containsField(annot, \"target\", function (target) {\r\n                        containsField(annot, \"annotations\", function (v) {\r\n                            _this.annotationHandler.processSchemaAnnotations(target, v, annot.qualifier);\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        serviceMethods.forEach(function (m) { return m(typeDefinitions); });\r\n        var contextFullName;\r\n        types.src = '(function(mod) {\\n' +\r\n            '  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports, require(\"jaydata/core\")); // CommonJS\\n' +\r\n            '  if (typeof define == \"function\" && define.amd) return define([\"exports\", \"jaydata/core\"], mod); // AMD\\n' +\r\n            '  mod($data.generatedContext || ($data.generatedContext = {}), $data); // Plain browser env\\n' +\r\n            '})(function(exports, $data) {\\n\\n' +\r\n            'var types = {};\\n\\n';\r\n        typeDefinitions = this.orderTypeDefinitions(typeDefinitions);\r\n        types.push.apply(types, typeDefinitions.map(function (d) {\r\n            _this.annotationHandler.preProcessAnnotation(d);\r\n            var dtsm = dtsModules[d.namespace];\r\n            if (!dtsm) {\r\n                dtsm = dtsModules[d.namespace] = ['declare module ' + d.namespace + ' {', '}'];\r\n            }\r\n            var dtsPart = [];\r\n            var srcPart = '';\r\n            if (d.baseType == '$data.Enum') {\r\n                dtsPart.push('    export enum ' + d.typeName.split('.').pop() + ' {');\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0) {\r\n                    Object.keys(d.params[3]).forEach(function (dp) { return dtsPart.push('        ' + d.params[3][dp].name + ','); });\r\n                }\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = $data.createEnum(\"' + d.params[0] + '\", [\\n' +\r\n                    Object.keys(d.params[3]).map(function (dp) { return '  ' + _this._createPropertyDefString(d.params[3][dp]); }).join(',\\n') +\r\n                    '\\n]);\\n\\n';\r\n            }\r\n            else {\r\n                dtsPart.push('    export class ' + d.typeName.split('.').pop() + ' extends ' + d.baseType + ' {');\r\n                if (d.baseType == self.options.contextType) {\r\n                    dtsPart.push('        onReady(): Promise<' + d.typeName.split('.').pop() + '>;');\r\n                    dtsPart.push('');\r\n                }\r\n                else {\r\n                    dtsPart.push('        constructor();');\r\n                    var ctr = '        constructor(initData: { ';\r\n                    if (d.params[2] && Object.keys(d.params[2]).length > 0) {\r\n                        ctr += Object.keys(d.params[2]).map(function (dp) { return dp + '?: ' + (d.params[2][dp].type == 'Array' ? d.params[2][dp].elementType + '[]' : d.params[2][dp].type); }).join('; ');\r\n                    }\r\n                    ctr += ' });';\r\n                    dtsPart.push(ctr);\r\n                    dtsPart.push('');\r\n                }\r\n                var typeName = d.baseType;\r\n                if (d.baseType == _this.options.contextType) {\r\n                    srcPart += 'exports.type = ';\r\n                    contextFullName = d.typeName;\r\n                }\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = ' +\r\n                    (typeName == _this.options.baseType || typeName == _this.options.contextType ? ('$data(\"' + typeName + '\")') : 'types[\"' + typeName + '\"]') +\r\n                    '.extend(\"' + d.params[0] + '\", ';\r\n                if (d.params[2] && Object.keys(d.params[2]).length > 0) {\r\n                    srcPart += '{\\n' + Object.keys(d.params[2]).map(function (dp) { return '  ' + dp + ': ' + _this._createPropertyDefString(d.params[2][dp]); }).join(',\\n') + '\\n}';\r\n                    if (d.baseType == _this.options.contextType) {\r\n                        Object.keys(d.params[2]).forEach(function (dp) { return dtsPart.push('        ' + dp + ': ' + _this._typeToTS(d.params[2][dp].type, d.params[2][dp].elementType, d.params[2][dp]) + ';'); });\r\n                    }\r\n                    else {\r\n                        Object.keys(d.params[2]).forEach(function (dp) { return dtsPart.push('        ' + dp + ': ' + _this._typeToTS(d.params[2][dp].type, d.params[2][dp].elementType, d.params[2][dp]) + ';'); });\r\n                    }\r\n                }\r\n                else\r\n                    srcPart += 'null';\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0) {\r\n                    srcPart += ', {\\n' + Object.keys(d.params[3]).map(function (dp) { return '  ' + dp + ': ' + _this._createPropertyDefString(d.params[3][dp]); }).join(',\\n') + '\\n}';\r\n                }\r\n                srcPart += ');\\n\\n';\r\n            }\r\n            types.src += srcPart;\r\n            dtsPart.push('    }');\r\n            dtsm.splice(1, 0, dtsPart.join('\\n'));\r\n            if (_this.options.debug)\r\n                console.log('Type generated:', d.params[0]);\r\n            if (_this.options.generateTypes !== false) {\r\n                var baseType = _this.options.container.resolveType(d.baseType);\r\n                var type = baseType.extend.apply(baseType, d.params);\r\n                _this.annotationHandler.addAnnotation(type);\r\n                return type;\r\n            }\r\n        }));\r\n        types.src += 'var ctxType = exports.type;\\n' +\r\n            'exports.factory = function(config){\\n' +\r\n            '  if (ctxType){\\n' +\r\n            '    var cfg = $data.typeSystem.extend({\\n' +\r\n            '      name: \"oData\",\\n' +\r\n            '      oDataServiceHost: \"' + (this.options.url && this.options.url.replace('/$metadata', '') || '') + '\",\\n' +\r\n            '      withCredentials: ' + (this.options.withCredentials || false) + ',\\n' +\r\n            '      maxDataServiceVersion: \"' + (this.options.maxDataServiceVersion || '4.0') + '\"\\n' +\r\n            '    }, config);\\n' +\r\n            '    return new ctxType(cfg);\\n' +\r\n            '  }else{\\n' +\r\n            '    return null;\\n' +\r\n            '  }\\n' +\r\n            '};\\n\\n';\r\n        if (this.options.autoCreateContext) {\r\n            var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n            types.src += 'exports[\"' + contextName + '\"] = exports.factory();\\n\\n';\r\n        }\r\n        types.src += this.annotationHandler.annotationsText();\r\n        types.src += '});';\r\n        types.dts += Object.keys(dtsModules).filter(function (m) { return dtsModules[m] && dtsModules[m].length > 2; }).map(function (m) { return dtsModules[m].join('\\n\\n'); }).join('\\n\\n');\r\n        if (contextFullName) {\r\n            var mod = ['\\n\\nexport var type: typeof ' + contextFullName + ';',\r\n                'export var factory: (config:any) => ' + contextFullName + ';'];\r\n            if (this.options.autoCreateContext) {\r\n                var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n                mod.push('export var ' + contextName + ': ' + contextFullName + ';');\r\n            }\r\n            types.dts += mod.join('\\n');\r\n        }\r\n        if (this.options.generateTypes === false) {\r\n            types.length = 0;\r\n        }\r\n        return types;\r\n    };\r\n    Metadata.prototype._createPropertyDefString = function (definition) {\r\n        if (definition.concurrencyMode) {\r\n            return JSON.stringify(definition).replace('\"concurrencyMode\":\"fixed\"}', '\"concurrencyMode\":$data.ConcurrencyMode.Fixed}');\r\n        }\r\n        else {\r\n            return JSON.stringify(definition);\r\n        }\r\n    };\r\n    Metadata.prototype._typeToTS = function (type, elementType, definition) {\r\n        var _this = this;\r\n        if (type == this.options.entitySetType) {\r\n            return '$data.EntitySet<typeof ' + elementType + ', ' + elementType + '>';\r\n        }\r\n        else if (type == '$data.Queryable') {\r\n            return '$data.Queryable<' + elementType + '>';\r\n        }\r\n        else if (type == this.options.collectionBaseType) {\r\n            return elementType + '[]';\r\n        }\r\n        else if (type == '$data.ServiceAction') {\r\n            return '{ (' + (definition.params.length > 0 ? definition.params.map(function (p) { return p.name + ': ' + _this._typeToTS(p.type, p.elementType, p); }).join(', ') : '') + '): Promise<void>; }';\r\n        }\r\n        else if (type == '$data.ServiceFunction') {\r\n            var t = this._typeToTS(definition.returnType, definition.elementType, definition);\r\n            if (t.indexOf('$data.Queryable') < 0)\r\n                t = 'Promise<' + t + '>';\r\n            return '{ (' + (definition.params.length > 0 ? definition.params.map(function (p) { return p.name + ': ' + _this._typeToTS(p.type, p.elementType, p); }).join(', ') : '') + '): ' + t + '; }';\r\n        }\r\n        else\r\n            return type;\r\n    };\r\n    Metadata.prototype.orderTypeDefinitions = function (typeDefinitions) {\r\n        var contextTypes = typeDefinitions.filter(function (t) { return t.type === 'context'; });\r\n        var ordered = [];\r\n        var dependants = [].concat(typeDefinitions.filter(function (t) { return t.type !== 'context'; }));\r\n        var addedTypes;\r\n        var baseType = this.options.baseType;\r\n        var dependantCount = Number.MAX_VALUE;\r\n        while (dependants.length) {\r\n            var dependantItems = [].concat(dependants);\r\n            dependants.length = 0;\r\n            dependantItems.forEach(function (typeDef) {\r\n                if (dependantCount === dependantItems.length ||\r\n                    typeDef.type !== \"entity\" ||\r\n                    typeDef.baseType === baseType ||\r\n                    ordered.some(function (t) { return t.typeName === typeDef.baseType; })) {\r\n                    ordered.push(typeDef);\r\n                }\r\n                else {\r\n                    dependants.push(typeDef);\r\n                }\r\n            });\r\n            dependantCount = dependantItems.length;\r\n        }\r\n        return ordered.concat(contextTypes);\r\n    };\r\n    return Metadata;\r\n}());\r\nexports.Metadata = Metadata;\r\n//# sourceMappingURL=metadata.js.map","\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar odata_v4_metadata_1 = require('odata-v4-metadata');\r\nvar metadata_1 = require('./metadata');\r\nvar _odatajs = require('jaydata-odatajs');\r\nvar extend = require('extend');\r\nexports.odatajs = _odatajs;\r\nvar MetadataHandler = (function () {\r\n    function MetadataHandler($data, options) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.prepareRequest = options.prepareRequest || function () { };\r\n        if (typeof exports.odatajs === 'undefined' || typeof exports.odatajs.oData === 'undefined') {\r\n            console.error('Not Found!:', 'odatajs is required');\r\n        }\r\n        else {\r\n            this.oData = exports.odatajs.oData;\r\n        }\r\n    }\r\n    MetadataHandler.prototype.parse = function (text) {\r\n        var _this = this;\r\n        var edmMetadata = new odata_v4_metadata_1.Edm.Edmx(this.oData.metadata.metadataParser(null, text));\r\n        var metadata = new metadata_1.Metadata(this.$data, this.options, edmMetadata);\r\n        var types = metadata.processMetadata();\r\n        var contextType = types.filter(function (t) { return t.isAssignableTo(_this.$data.EntityContext); })[0];\r\n        var factory = this._createFactoryFunc(contextType);\r\n        factory.type = contextType;\r\n        factory.src = types.src;\r\n        return factory;\r\n    };\r\n    MetadataHandler.prototype.load = function () {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var serviceUrl = self.options.url.replace('/$metadata', '');\r\n            var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata';\r\n            self.options.serivceUri = serviceUrl;\r\n            var requestData = [\r\n                {\r\n                    requestUri: metadataUrl,\r\n                    method: self.options.method || \"GET\",\r\n                    headers: self.options.headers || {}\r\n                },\r\n                function (data) {\r\n                    var edmMetadata = new odata_v4_metadata_1.Edm.Edmx(data);\r\n                    var metadata = new metadata_1.Metadata(self.$data, self.options, edmMetadata);\r\n                    var types = metadata.processMetadata();\r\n                    var contextType = types.filter(function (t) { return t.isAssignableTo(self.$data.EntityContext); })[0];\r\n                    var factory = self._createFactoryFunc(contextType);\r\n                    factory.type = contextType;\r\n                    factory.src = types.src;\r\n                    factory.dts = types.dts;\r\n                    resolve(factory);\r\n                },\r\n                reject,\r\n                self.oData.metadataHandler\r\n            ];\r\n            self._appendBasicAuth(requestData[0], self.options.user, self.options.password, self.options.withCredentials);\r\n            self.prepareRequest.call(self, requestData);\r\n            self.oData.request.apply(self.oData, requestData);\r\n        });\r\n    };\r\n    MetadataHandler.prototype._createFactoryFunc = function (ctxType) {\r\n        var _this = this;\r\n        return function (config) {\r\n            if (ctxType) {\r\n                var cfg = extend({\r\n                    name: 'oData',\r\n                    oDataServiceHost: _this.options.url.replace('/$metadata', ''),\r\n                    user: _this.options.user,\r\n                    password: _this.options.password,\r\n                    withCredentials: _this.options.withCredentials,\r\n                    maxDataServiceVersion: _this.options.maxDataServiceVersion || '4.0'\r\n                }, config);\r\n                return new ctxType(cfg);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n    };\r\n    MetadataHandler.prototype._appendBasicAuth = function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials) {\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    };\r\n    MetadataHandler.prototype.__encodeBase64 = function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n            \"QRSTUVWXYZabcdef\" +\r\n            \"ghijklmnopqrstuv\" +\r\n            \"wxyz0123456789+/\" +\r\n            \"=\";\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            }\r\n            else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            base64 = base64 +\r\n                b64array.charAt(enc1) +\r\n                b64array.charAt(enc2) +\r\n                b64array.charAt(enc3) +\r\n                b64array.charAt(enc4);\r\n        } while (i < input.length);\r\n        return base64;\r\n    };\r\n    return MetadataHandler;\r\n}());\r\nexports.MetadataHandler = MetadataHandler;\r\n//# sourceMappingURL=metadataHandler.js.map","\"use strict\";\r\nvar extend = require('extend');\r\nvar metadataHandler_1 = require('./metadataHandler');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar jaydata_promise_handler_1 = require('jaydata-promise-handler');\r\nvar metadataHandler_2 = require('./metadataHandler');\r\nexports.MetadataHandler = metadataHandler_2.MetadataHandler;\r\nexports.odatajs = metadataHandler_2.odatajs;\r\nvar ServiceParams = (function () {\r\n    function ServiceParams() {\r\n        this.config = {};\r\n    }\r\n    return ServiceParams;\r\n}());\r\nexports.ServiceParams = ServiceParams;\r\nvar DynamicMetadata = (function () {\r\n    function DynamicMetadata($data) {\r\n        this.$data = $data;\r\n    }\r\n    DynamicMetadata.prototype.service = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = this.$data && this.$data.PromiseHandler ? new this.$data.PromiseHandler() : new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        var self = this;\r\n        new metadataHandler_1.MetadataHandler(this.$data, params.config).load().then(function (factory) {\r\n            var type = factory.type;\r\n            //register to local store\r\n            var storeAlias = params.config.serviceName || params.config.storeAlias;\r\n            if (storeAlias && 'addStore' in self.$data) {\r\n                self.$data.addStore(storeAlias, factory, params.config.isDefault === undefined || params.config.isDefault);\r\n            }\r\n            _callback.success(factory, type);\r\n        }, function (err) {\r\n            _callback.error(err);\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.prototype.initService = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = this.$data && this.$data.PromiseHandler ? new this.$data.PromiseHandler() : new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        this.service(params.config.url, params.config, {\r\n            success: function (factory) {\r\n                var ctx = factory();\r\n                if (ctx) {\r\n                    return ctx.onReady().then(function (ctx) {\r\n                        ctx.factory = factory;\r\n                        ctx.type = factory.type;\r\n                        _callback.success(ctx, factory, factory.type);\r\n                    }, _callback.error);\r\n                }\r\n                return _callback.error(new jaydata_error_handler_1.Exception(\"Missing Context Type\"));\r\n            },\r\n            error: _callback.error\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.use = function ($data) {\r\n        var dynamicMetadata = new DynamicMetadata($data);\r\n        $data.service = dynamicMetadata.service;\r\n        $data.initService = dynamicMetadata.initService;\r\n    };\r\n    DynamicMetadata.getParam = function (paramValue, params) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    params.callback = paramValue;\r\n                }\r\n                else {\r\n                    params.config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                params.callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return DynamicMetadata;\r\n}());\r\nexports.DynamicMetadata = DynamicMetadata;\r\n//# sourceMappingURL=service.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Exception = (function (_super) {\r\n    __extends(Exception, _super);\r\n    function Exception(message, name, data) {\r\n        _super.call(this);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n        this.name = name || \"Exception\";\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n    Exception.prototype._getStackTrace = function () { };\r\n    return Exception;\r\n}(Error));\r\nexports.Exception = Exception;\r\nvar Guard = (function () {\r\n    function Guard() {\r\n    }\r\n    Guard.requireValue = function (name, value) {\r\n        if (typeof value === 'undefined' || value === null) {\r\n            Guard.raise(name + \" requires a value other than undefined or null\");\r\n        }\r\n    };\r\n    Guard.requireType = function (name, value, typeOrTypes) {\r\n        var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\r\n        return types.some(function (item) {\r\n            switch (typeof item) {\r\n                case \"string\":\r\n                    return typeof value === item;\r\n                case \"function\":\r\n                    return value instanceof item;\r\n                default:\r\n                    Guard.raise(\"Unknown type format : \" + typeof item + \" for: \" + name);\r\n            }\r\n        });\r\n    };\r\n    Guard.raise = function (exception) {\r\n        if (typeof exports.intellisense === 'undefined') {\r\n            if (exception instanceof Exception) {\r\n                console.error(exception.name + ':', exception.message + '\\n', exception);\r\n            }\r\n            else {\r\n                console.error(exception);\r\n            }\r\n            throw exception;\r\n        }\r\n    };\r\n    Guard.isNullOrUndefined = function (value) {\r\n        return value === undefined || value === null;\r\n    };\r\n    return Guard;\r\n}());\r\nexports.Guard = Guard;\r\n//# sourceMappingURL=errorHandler.js.map","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\nvar odatajs = {};\r\n\r\nodatajs.version = {\r\n    major: 4,\r\n    minor: 0,\r\n    build: 1\r\n};\r\n\r\n// core stuff, alway needed\r\nodatajs.utils = require('./lib/utils.js');\r\n\r\n// only neede for xml metadata\r\nodatajs.xml = require('./lib/xml.js');\r\n\r\n// only need in browser case\r\nodatajs.oData = require('./lib/odata.js');\r\n\r\nif (odatajs.utils.inBrowser()) {\r\n    //expose to browsers window object\r\n    window.odatajs = odatajs;\r\n} \r\n\r\nif(typeof module !== 'undefined'){\r\n    //expose in commonjs style\r\n    odatajs.node = \"node\";\r\n    module.exports = odatajs;\r\n}\r\n","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n /** @module odata */\r\n\r\n// Imports\r\nvar utils = require('./utils.js');\r\n\r\nvar odataUtils    = exports.utils     = require('./odata/odatautils.js');\r\nvar odataHandler  = exports.handler   = require('./odata/handler.js');\r\nvar odataMetadata = exports.metadata  = require('./odata/metadata.js');\r\nvar webNet = require('./odata/net-browser.js');\r\nvar odataNet      = exports.net       = utils.inBrowser() ? webNet : require('' + './odata/net.js');\r\nvar odataJson     = exports.json      = require('./odata/json.js');\r\n                    exports.batch     = require('./odata/batch.js');\r\n                    \r\n\r\nvar assigned = utils.assigned;\r\n\r\nvar defined = utils.defined;\r\nvar throwErrorCallback = utils.throwErrorCallback;\r\n\r\nvar invokeRequest = odataUtils.invokeRequest;\r\nvar MAX_DATA_SERVICE_VERSION = odataHandler.MAX_DATA_SERVICE_VERSION;\r\nvar prepareRequest = odataUtils.prepareRequest;\r\nvar metadataParser = odataMetadata.metadataParser;\r\n\r\n// CONTENT START\r\n\r\nvar handlers = [odataJson.jsonHandler, odataHandler.textHandler];\r\n\r\n/** Dispatches an operation to handlers.\r\n * @param {String} handlerMethod - Name of handler method to invoke.\r\n * @param {Object} requestOrResponse - request/response argument for delegated call.\r\n * @param {Object} context - context argument for delegated call.\r\n */\r\nfunction dispatchHandler(handlerMethod, requestOrResponse, context) {\r\n\r\n    var i, len;\r\n    for (i = 0, len = handlers.length; i < len && !handlers[i][handlerMethod](requestOrResponse, context); i++) {\r\n    }\r\n\r\n    if (i === len) {\r\n        throw { message: \"no handler for data\" };\r\n    }\r\n}\r\n\r\n/** Default success handler for OData.\r\n * @param data - Data to process.\r\n */\r\nexports.defaultSuccess = function (data) {\r\n\r\n    window.alert(window.JSON.stringify(data));\r\n};\r\n\r\nexports.defaultError = throwErrorCallback;\r\n\r\nexports.defaultHandler = {\r\n\r\n        /** Reads the body of the specified response by delegating to JSON handlers.\r\n        * @param response - Response object.\r\n        * @param context - Operation context.\r\n        */\r\n        read: function (response, context) {\r\n\r\n            if (response && assigned(response.body) && response.headers[\"Content-Type\"]) {\r\n                dispatchHandler(\"read\", response, context);\r\n            }\r\n        },\r\n\r\n        /** Write the body of the specified request by delegating to JSON handlers.\r\n        * @param request - Reques tobject.\r\n        * @param context - Operation context.\r\n        */\r\n        write: function (request, context) {\r\n\r\n            dispatchHandler(\"write\", request, context);\r\n        },\r\n\r\n        maxDataServiceVersion: MAX_DATA_SERVICE_VERSION,\r\n        accept: \"application/json;q=0.9, */*;q=0.1\"\r\n    };\r\n\r\nexports.defaultMetadata = []; //TODO check why is the defaultMetadata an Array? and not an Object.\r\n\r\n/** Reads data from the specified URL.\r\n * @param urlOrRequest - URL to read data from.\r\n * @param {Function} [success] - \r\n * @param {Function} [error] - \r\n * @param {Object} [handler] - \r\n * @param {Object} [httpClient] - \r\n * @param {Object} [metadata] - \r\n */\r\nexports.read = function (urlOrRequest, success, error, handler, httpClient, metadata) {\r\n\r\n    var request;\r\n    if (urlOrRequest instanceof String || typeof urlOrRequest === \"string\") {\r\n        request = { requestUri: urlOrRequest };\r\n    } else {\r\n        request = urlOrRequest;\r\n    }\r\n\r\n    return exports.request(request, success, error, handler, httpClient, metadata);\r\n};\r\n\r\n/** Sends a request containing OData payload to a server.\r\n * @param {Object} request - Object that represents the request to be sent.\r\n * @param {Function} [success] - \r\n * @param {Function} [error] - \r\n * @param {Object} [handler] - \r\n * @param {Object} [httpClient] - \r\n * @param {Object} [metadata] - \r\n */\r\nexports.request = function (request, success, error, handler, httpClient, metadata) {\r\n\r\n    success = success || exports.defaultSuccess;\r\n    error = error || exports.defaultError;\r\n    handler = handler || exports.defaultHandler;\r\n    httpClient = httpClient || odataNet.defaultHttpClient;\r\n    metadata = metadata || exports.defaultMetadata;\r\n\r\n    // Augment the request with additional defaults.\r\n    request.recognizeDates = utils.defined(request.recognizeDates, odataJson.jsonHandler.recognizeDates);\r\n    request.callbackParameterName = utils.defined(request.callbackParameterName, odataNet.defaultHttpClient.callbackParameterName);\r\n    request.formatQueryString = utils.defined(request.formatQueryString, odataNet.defaultHttpClient.formatQueryString);\r\n    request.enableJsonpCallback = utils.defined(request.enableJsonpCallback, odataNet.defaultHttpClient.enableJsonpCallback);\r\n\r\n    // Create the base context for read/write operations, also specifying complete settings.\r\n    var context = {\r\n        metadata: metadata,\r\n        recognizeDates: request.recognizeDates,\r\n        callbackParameterName: request.callbackParameterName,\r\n        formatQueryString: request.formatQueryString,\r\n        enableJsonpCallback: request.enableJsonpCallback\r\n    };\r\n\r\n    try {\r\n        odataUtils.prepareRequest(request, handler, context);\r\n        return odataUtils.invokeRequest(request, success, error, handler, httpClient, context);\r\n    } catch (err) {\r\n        // errors in success handler for sync requests are catched here and result in error handler calls. \r\n        // So here we fix this and throw that error further.\r\n        if (err.bIsSuccessHandlerError) {\r\n            throw err;\r\n        } else {\r\n            error(err);\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/** Parses the csdl metadata to ODataJS metatdata format. This method can be used when the metadata is retrieved using something other than odatajs\r\n * @param {string} csdlMetadataDocument - A string that represents the entire csdl metadata.\r\n * @returns {Object} An object that has the representation of the metadata in odatajs format.\r\n */\r\nexports.parseMetadata = function (csdlMetadataDocument) {\r\n\r\n    return metadataParser(null, csdlMetadataDocument);\r\n};\r\n\r\n// Configure the batch handler to use the default handler for the batch parts.\r\nexports.batch.batchHandler.partHandler = exports.defaultHandler;\r\nexports.metadataHandler =  odataMetadata.metadataHandler;\r\nexports.jsonHandler =  odataJson.jsonHandler;\r\n","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odata/batch */\r\n\r\nvar utils    = require('./../utils.js');\r\nvar odataUtils    = require('./odatautils.js');\r\nvar odataHandler = require('./handler.js');\r\n\r\nvar extend = utils.extend;\r\nvar isArray = utils.isArray;\r\nvar trimString = utils.trimString;\r\n\r\nvar contentType = odataHandler.contentType;\r\nvar handler = odataHandler.handler;\r\nvar isBatch = odataUtils.isBatch;\r\nvar MAX_DATA_SERVICE_VERSION = odataHandler.MAX_DATA_SERVICE_VERSION;\r\nvar normalizeHeaders = odataUtils.normalizeHeaders;\r\n//TODO var payloadTypeOf = odata.payloadTypeOf;\r\nvar prepareRequest = odataUtils.prepareRequest;\r\n\r\n\r\n// Imports\r\n\r\n// CONTENT START\r\nvar batchMediaType = \"multipart/mixed\";\r\nvar responseStatusRegex = /^HTTP\\/1\\.\\d (\\d{3}) (.*)$/i;\r\nvar responseHeaderRegex = /^([^()<>@,;:\\\\\"\\/[\\]?={} \\t]+)\\s?:\\s?(.*)/;\r\n\r\n/** Calculates a random 16 bit number and returns it in hexadecimal format.\r\n * @returns {String} A 16-bit number in hex format.\r\n */\r\nfunction hex16() {\r\n\r\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);\r\n}\r\n\r\n/** Creates a string that can be used as a multipart request boundary.\r\n * @param {String} [prefix] - \r\n * @returns {String} Boundary string of the format: <prefix><hex16>-<hex16>-<hex16>\r\n */\r\nfunction createBoundary(prefix) {\r\n\r\n    return prefix + hex16() + \"-\" + hex16() + \"-\" + hex16();\r\n}\r\n\r\n/** Gets the handler for data serialization of individual requests / responses in a batch.\r\n * @param context - Context used for data serialization.\r\n * @returns Handler object\r\n */\r\nfunction partHandler(context) {\r\n\r\n    return context.handler.partHandler;\r\n}\r\n\r\n/** Gets the current boundary used for parsing the body of a multipart response.\r\n * @param context - Context used for parsing a multipart response.\r\n * @returns {String} Boundary string.\r\n */\r\nfunction currentBoundary(context) {\r\n    var boundaries = context.boundaries;\r\n    return boundaries[boundaries.length - 1];\r\n}\r\n\r\n/** Parses a batch response.\r\n * @param handler - This handler.\r\n * @param {String} text - Batch text.\r\n * @param {Object} context - Object with parsing context.\r\n * @return An object representation of the batch.\r\n */\r\nfunction batchParser(handler, text, context) {\r\n\r\n    var boundary = context.contentType.properties[\"boundary\"];\r\n    return { __batchResponses: readBatch(text, { boundaries: [boundary], handlerContext: context }) };\r\n}\r\n\r\n/** Serializes a batch object representation into text.\r\n * @param handler - This handler.\r\n * @param {Object} data - Representation of a batch.\r\n * @param {Object} context - Object with parsing context.\r\n * @return An text representation of the batch object; undefined if not applicable.#\r\n */\r\nfunction batchSerializer(handler, data, context) {\r\n\r\n    var cType = context.contentType = context.contentType || contentType(batchMediaType);\r\n    if (cType.mediaType === batchMediaType) {\r\n        return writeBatch(data, context);\r\n    }\r\n}\r\n\r\n/** Parses a multipart/mixed response body from from the position defined by the context.\r\n * @param {String}  text - Body of the multipart/mixed response.\r\n * @param context - Context used for parsing.\r\n * @return Array of objects representing the individual responses.\r\n */\r\nfunction readBatch(text, context) {\r\n    var delimiter = \"--\" + currentBoundary(context);\r\n\r\n    // Move beyond the delimiter and read the complete batch\r\n    readTo(text, context, delimiter);\r\n\r\n    // Ignore the incoming line\r\n    readLine(text, context);\r\n\r\n    // Read the batch parts\r\n    var responses = [];\r\n    var partEnd = null;\r\n\r\n    while (partEnd !== \"--\" && context.position < text.length) {\r\n        var partHeaders = readHeaders(text, context);\r\n        var partContentType = contentType(partHeaders[\"Content-Type\"]);\r\n\r\n        var changeResponses;\r\n        if (partContentType && partContentType.mediaType === batchMediaType) {\r\n            context.boundaries.push(partContentType.properties.boundary);\r\n            try {\r\n                changeResponses = readBatch(text, context);\r\n            } catch (e) {\r\n                e.response = readResponse(text, context, delimiter);\r\n                changeResponses = [e];\r\n            }\r\n            responses.push({ __changeResponses: changeResponses });\r\n            context.boundaries.pop();\r\n            readTo(text, context, \"--\" + currentBoundary(context));\r\n        } else {\r\n            if (!partContentType || partContentType.mediaType !== \"application/http\") {\r\n                throw { message: \"invalid MIME part type \" };\r\n            }\r\n            // Skip empty line\r\n            readLine(text, context);\r\n            // Read the response\r\n            var response = readResponse(text, context, delimiter);\r\n            try {\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                    partHandler(context.handlerContext).read(response, context.handlerContext);\r\n                } else {\r\n                    // Keep track of failed responses and continue processing the batch.\r\n                    response = { message: \"HTTP request failed\", response: response };\r\n                }\r\n            } catch (e) {\r\n                response = e;\r\n            }\r\n\r\n            responses.push(response);\r\n        }\r\n\r\n        partEnd = text.substr(context.position, 2);\r\n\r\n        // Ignore the incoming line.\r\n        readLine(text, context);\r\n    }\r\n    return responses;\r\n}\r\n\r\n/** Parses the http headers in the text from the position defined by the context.\r\n * @param {String} text - Text containing an http response's headers\r\n * @param context - Context used for parsing.\r\n * @returns Object containing the headers as key value pairs.\r\n * This function doesn't support split headers and it will stop reading when it hits two consecutive line breaks.\r\n*/\r\nfunction readHeaders(text, context) {\r\n    var headers = {};\r\n    var parts;\r\n    var line;\r\n    var pos;\r\n\r\n    do {\r\n        pos = context.position;\r\n        line = readLine(text, context);\r\n        parts = responseHeaderRegex.exec(line);\r\n        if (parts !== null) {\r\n            headers[parts[1]] = parts[2];\r\n        } else {\r\n            // Whatever was found is not a header, so reset the context position.\r\n            context.position = pos;\r\n        }\r\n    } while (line && parts);\r\n\r\n    normalizeHeaders(headers);\r\n\r\n    return headers;\r\n}\r\n\r\n/** Parses an HTTP response.\r\n * @param {String} text -Text representing the http response.\r\n * @param context optional - Context used for parsing.\r\n * @param {String} delimiter -String used as delimiter of the multipart response parts.\r\n * @return Object representing the http response.\r\n */\r\nfunction readResponse(text, context, delimiter) {\r\n    // Read the status line.\r\n    var pos = context.position;\r\n    var match = responseStatusRegex.exec(readLine(text, context));\r\n\r\n    var statusCode;\r\n    var statusText;\r\n    var headers;\r\n\r\n    if (match) {\r\n        statusCode = match[1];\r\n        statusText = match[2];\r\n        headers = readHeaders(text, context);\r\n        readLine(text, context);\r\n    } else {\r\n        context.position = pos;\r\n    }\r\n\r\n    return {\r\n        statusCode: statusCode,\r\n        statusText: statusText,\r\n        headers: headers,\r\n        body: readTo(text, context, \"\\r\\n\" + delimiter)\r\n    };\r\n}\r\n\r\n/** Returns a substring from the position defined by the context up to the next line break (CRLF).\r\n * @param {String} text - Input string.\r\n * @param context - Context used for reading the input string.\r\n * @returns {String} Substring to the first ocurrence of a line break or null if none can be found. \r\n */\r\nfunction readLine(text, context) {\r\n\r\n    return readTo(text, context, \"\\r\\n\");\r\n}\r\n\r\n/** Returns a substring from the position given by the context up to value defined by the str parameter and increments the position in the context.\r\n * @param {String} text - Input string.\r\n * @param context - Context used for reading the input string.\r\n * @param {String} [str] - Substring to read up to.\r\n * @returns {String} Substring to the first ocurrence of str or the end of the input string if str is not specified. Null if the marker is not found.\r\n */\r\nfunction readTo(text, context, str) {\r\n    var start = context.position || 0;\r\n    var end = text.length;\r\n    if (str) {\r\n        end = text.indexOf(str, start);\r\n        if (end === -1) {\r\n            return null;\r\n        }\r\n        context.position = end + str.length;\r\n    } else {\r\n        context.position = end;\r\n    }\r\n\r\n    return text.substring(start, end);\r\n}\r\n\r\n/** Serializes a batch request object to a string.\r\n * @param data - Batch request object in payload representation format\r\n * @param context - Context used for the serialization\r\n * @returns {String} String representing the batch request\r\n */\r\nfunction writeBatch(data, context) {\r\n    if (!isBatch(data)) {\r\n        throw { message: \"Data is not a batch object.\" };\r\n    }\r\n\r\n    var batchBoundary = createBoundary(\"batch_\");\r\n    var batchParts = data.__batchRequests;\r\n    var batch = \"\";\r\n    var i, len;\r\n    for (i = 0, len = batchParts.length; i < len; i++) {\r\n        batch += writeBatchPartDelimiter(batchBoundary, false) +\r\n                 writeBatchPart(batchParts[i], context);\r\n    }\r\n    batch += writeBatchPartDelimiter(batchBoundary, true);\r\n\r\n    // Register the boundary with the request content type.\r\n    var contentTypeProperties = context.contentType.properties;\r\n    contentTypeProperties.boundary = batchBoundary;\r\n\r\n    return batch;\r\n}\r\n\r\n/** Creates the delimiter that indicates that start or end of an individual request.\r\n * @param {String} boundary Boundary string used to indicate the start of the request\r\n * @param {Boolean} close - Flag indicating that a close delimiter string should be generated\r\n * @returns {String} Delimiter string\r\n */\r\nfunction writeBatchPartDelimiter(boundary, close) {\r\n    var result = \"\\r\\n--\" + boundary;\r\n    if (close) {\r\n        result += \"--\";\r\n    }\r\n\r\n    return result + \"\\r\\n\";\r\n}\r\n\r\n/** Serializes a part of a batch request to a string. A part can be either a GET request or\r\n * a change set grouping several CUD (create, update, delete) requests.\r\n * @param part - Request or change set object in payload representation format\r\n * @param context - Object containing context information used for the serialization\r\n * @param {boolean} [nested] - \r\n * @returns {String} String representing the serialized part\r\n * A change set is an array of request objects and they cannot be nested inside other change sets.\r\n */\r\nfunction writeBatchPart(part, context, nested) {\r\n    \r\n\r\n    var changeSet = part.__changeRequests;\r\n    var result;\r\n    if (isArray(changeSet)) {\r\n        if (nested) {\r\n            throw { message: \"Not Supported: change set nested in other change set\" };\r\n        }\r\n\r\n        var changeSetBoundary = createBoundary(\"changeset_\");\r\n        result = \"Content-Type: \" + batchMediaType + \"; boundary=\" + changeSetBoundary + \"\\r\\n\";\r\n        var i, len;\r\n        for (i = 0, len = changeSet.length; i < len; i++) {\r\n            result += writeBatchPartDelimiter(changeSetBoundary, false) +\r\n                 writeBatchPart(changeSet[i], context, true);\r\n        }\r\n\r\n        result += writeBatchPartDelimiter(changeSetBoundary, true);\r\n    } else {\r\n        result = \"Content-Type: application/http\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n\";\r\n        var partContext = extend({}, context);\r\n        partContext.handler = handler;\r\n        partContext.request = part;\r\n        partContext.contentType = null;\r\n\r\n        prepareRequest(part, partHandler(context), partContext);\r\n        result += writeRequest(part);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Serializes a request object to a string.\r\n * @param request - Request object to serialize\r\n * @returns {String} String representing the serialized request\r\n */\r\nfunction writeRequest(request) {\r\n    var result = (request.method ? request.method : \"GET\") + \" \" + request.requestUri + \" HTTP/1.1\\r\\n\";\r\n    for (var name in request.headers) {\r\n        if (request.headers[name]) {\r\n            result = result + name + \": \" + request.headers[name] + \"\\r\\n\";\r\n        }\r\n    }\r\n\r\n    result += \"\\r\\n\";\r\n\r\n    if (request.body) {\r\n        result += request.body;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\n\r\n/** batchHandler (see {@link module:odata/batch~batchParser}) */\r\nexports.batchHandler = handler(batchParser, batchSerializer, batchMediaType, MAX_DATA_SERVICE_VERSION);\r\n\r\n/** batchSerializer (see {@link module:odata/batch~batchSerializer}) */\r\nexports.batchSerializer = batchSerializer;\r\n\r\n/** writeRequest (see {@link module:odata/batch~writeRequest}) */\r\nexports.writeRequest = writeRequest;","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odata/handler */\r\n\r\n\r\nvar utils    = require('./../utils.js');\r\nvar oDataUtils    = require('./odatautils.js');\r\n\r\n// Imports.\r\nvar assigned = utils.assigned;\r\nvar extend = utils.extend;\r\nvar trimString = utils.trimString;\r\nvar maxVersion = oDataUtils.maxVersion;\r\nvar MAX_DATA_SERVICE_VERSION = \"4.0\";\r\n\r\n/** Parses a string into an object with media type and properties.\r\n * @param {String} str - String with media type to parse.\r\n * @return null if the string is empty; an object with 'mediaType' and a 'properties' dictionary otherwise.\r\n */\r\nfunction contentType(str) {\r\n\r\n    if (!str) {\r\n        return null;\r\n    }\r\n\r\n    var contentTypeParts = str.split(\";\");\r\n    var properties = {};\r\n\r\n    var i, len;\r\n    for (i = 1, len = contentTypeParts.length; i < len; i++) {\r\n        var contentTypeParams = contentTypeParts[i].split(\"=\");\r\n        properties[trimString(contentTypeParams[0])] = contentTypeParams[1];\r\n    }\r\n\r\n    return { mediaType: trimString(contentTypeParts[0]), properties: properties };\r\n}\r\n\r\n/** Serializes an object with media type and properties dictionary into a string.\r\n * @param contentType - Object with media type and properties dictionary to serialize.\r\n * @return String representation of the media type object; undefined if contentType is null or undefined.\r\n */\r\nfunction contentTypeToString(contentType) {\r\n    if (!contentType) {\r\n        return undefined;\r\n    }\r\n\r\n    var result = contentType.mediaType;\r\n    var property;\r\n    for (property in contentType.properties) {\r\n        result += \";\" + property + \"=\" + contentType.properties[property];\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Creates an object that is going to be used as the context for the handler's parser and serializer.\r\n * @param contentType - Object with media type and properties dictionary.\r\n * @param {String} dataServiceVersion - String indicating the version of the protocol to use.\r\n * @param context - Operation context.\r\n * @param handler - Handler object that is processing a resquest or response.\r\n * @return Context object.\r\n */\r\nfunction createReadWriteContext(contentType, dataServiceVersion, context, handler) {\r\n\r\n    var rwContext = {};\r\n    extend(rwContext, context);\r\n    extend(rwContext, {\r\n        contentType: contentType,\r\n        dataServiceVersion: dataServiceVersion,\r\n        handler: handler\r\n    });\r\n\r\n    return rwContext;\r\n}\r\n\r\n/** Sets a request header's value. If the header has already a value other than undefined, null or empty string, then this method does nothing.\r\n * @param request - Request object on which the header will be set.\r\n * @param {String} name - Header name.\r\n * @param {String} value - Header value.\r\n */\r\nfunction fixRequestHeader(request, name, value) {\r\n    if (!request) {\r\n        return;\r\n    }\r\n\r\n    var headers = request.headers;\r\n    if (!headers[name]) {\r\n        headers[name] = value;\r\n    }\r\n}\r\n\r\n/** Sets the DataServiceVersion header of the request if its value is not yet defined or of a lower version.\r\n * @param request - Request object on which the header will be set.\r\n * @param {String} version - Version value.\r\n *  If the request has already a version value higher than the one supplied the this function does nothing.\r\n */\r\nfunction fixDataServiceVersionHeader(request, version) {   \r\n\r\n    if (request) {\r\n        var headers = request.headers;\r\n        var dsv = headers[\"OData-Version\"];\r\n        headers[\"OData-Version\"] = dsv ? maxVersion(dsv, version) : version;\r\n    }\r\n}\r\n\r\n/** Gets the value of a request or response header.\r\n * @param requestOrResponse - Object representing a request or a response.\r\n * @param {String} name - Name of the header to retrieve.\r\n * @returns {String} String value of the header; undefined if the header cannot be found.\r\n */\r\nfunction getRequestOrResponseHeader(requestOrResponse, name) {\r\n\r\n    var headers = requestOrResponse.headers;\r\n    return (headers && headers[name]) || undefined;\r\n}\r\n\r\n/** Gets the value of the Content-Type header from a request or response.\r\n * @param requestOrResponse - Object representing a request or a response.\r\n * @returns {Object} Object with 'mediaType' and a 'properties' dictionary; null in case that the header is not found or doesn't have a value.\r\n */\r\nfunction getContentType(requestOrResponse) {\r\n\r\n    return contentType(getRequestOrResponseHeader(requestOrResponse, \"Content-Type\"));\r\n}\r\n\r\nvar versionRE = /^\\s?(\\d+\\.\\d+);?.*$/;\r\n/** Gets the value of the DataServiceVersion header from a request or response.\r\n * @param requestOrResponse - Object representing a request or a response.\r\n * @returns {String} Data service version; undefined if the header cannot be found.\r\n */\r\nfunction getDataServiceVersion(requestOrResponse) {\r\n\r\n    var value = getRequestOrResponseHeader(requestOrResponse, \"OData-Version\");\r\n    if (value) {\r\n        var matches = versionRE.exec(value);\r\n        if (matches && matches.length) {\r\n            return matches[1];\r\n        }\r\n    }\r\n\r\n    // Fall through and return undefined.\r\n}\r\n\r\n/** Checks that a handler can process a particular mime type.\r\n * @param handler - Handler object that is processing a resquest or response.\r\n * @param cType - Object with 'mediaType' and a 'properties' dictionary.\r\n * @returns {Boolean} True if the handler can process the mime type; false otherwise.\r\n *\r\n * The following check isn't as strict because if cType.mediaType = application/; it will match an accept value of \"application/xml\";\r\n * however in practice we don't not expect to see such \"suffixed\" mimeTypes for the handlers.\r\n */\r\nfunction handlerAccepts(handler, cType) {\r\n    return handler.accept.indexOf(cType.mediaType) >= 0;\r\n}\r\n\r\n/** Invokes the parser associated with a handler for reading the payload of a HTTP response.\r\n * @param handler - Handler object that is processing the response.\r\n * @param {Function} parseCallback - Parser function that will process the response payload.\r\n * @param response - HTTP response whose payload is going to be processed.\r\n * @param context - Object used as the context for processing the response.\r\n * @returns {Boolean} True if the handler processed the response payload and the response.data property was set; false otherwise.\r\n */\r\nfunction handlerRead(handler, parseCallback, response, context) {\r\n\r\n    if (!response || !response.headers) {\r\n        return false;\r\n    }\r\n\r\n    var cType = getContentType(response);\r\n    var version = getDataServiceVersion(response) || \"\";\r\n    var body = response.body;\r\n\r\n    if (!assigned(body)) {\r\n        return false;\r\n    }\r\n\r\n    if (handlerAccepts(handler, cType)) {\r\n        var readContext = createReadWriteContext(cType, version, context, handler);\r\n        readContext.response = response;\r\n        response.data = parseCallback(handler, body, readContext);\r\n        return response.data !== undefined;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Invokes the serializer associated with a handler for generating the payload of a HTTP request.\r\n * @param handler - Handler object that is processing the request.\r\n * @param {Function} serializeCallback - Serializer function that will generate the request payload.\r\n * @param request - HTTP request whose payload is going to be generated.\r\n * @param context - Object used as the context for serializing the request.\r\n * @returns {Boolean} True if the handler serialized the request payload and the request.body property was set; false otherwise.\r\n */\r\nfunction handlerWrite(handler, serializeCallback, request, context) {\r\n    if (!request || !request.headers) {\r\n        return false;\r\n    }\r\n\r\n    var cType = getContentType(request);\r\n    var version = getDataServiceVersion(request);\r\n\r\n    if (!cType || handlerAccepts(handler, cType)) {\r\n        var writeContext = createReadWriteContext(cType, version, context, handler);\r\n        writeContext.request = request;\r\n\r\n        request.body = serializeCallback(handler, request.data, writeContext);\r\n\r\n        if (request.body !== undefined) {\r\n            fixDataServiceVersionHeader(request, writeContext.dataServiceVersion || \"4.0\");\r\n\r\n            fixRequestHeader(request, \"Content-Type\", contentTypeToString(writeContext.contentType));\r\n            fixRequestHeader(request, \"OData-MaxVersion\", handler.maxDataServiceVersion);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Creates a handler object for processing HTTP requests and responses.\r\n * @param {Function} parseCallback - Parser function that will process the response payload.\r\n * @param {Function} serializeCallback - Serializer function that will generate the request payload.\r\n * @param {String} accept - String containing a comma separated list of the mime types that this handler can work with.\r\n * @param {String} maxDataServiceVersion - String indicating the highest version of the protocol that this handler can work with.\r\n * @returns {Object} Handler object.\r\n */\r\nfunction handler(parseCallback, serializeCallback, accept, maxDataServiceVersion) {\r\n\r\n    return {\r\n        accept: accept,\r\n        maxDataServiceVersion: maxDataServiceVersion,\r\n\r\n        read: function (response, context) {\r\n            return handlerRead(this, parseCallback, response, context);\r\n        },\r\n\r\n        write: function (request, context) {\r\n            return handlerWrite(this, serializeCallback, request, context);\r\n        }\r\n    };\r\n}\r\n\r\nfunction textParse(handler, body /*, context */) {\r\n    return body;\r\n}\r\n\r\nfunction textSerialize(handler, data /*, context */) {\r\n    if (assigned(data)) {\r\n        return data.toString();\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexports.textHandler = handler(textParse, textSerialize, \"text/plain\", MAX_DATA_SERVICE_VERSION);\r\nexports.contentType = contentType;\r\nexports.contentTypeToString = contentTypeToString;\r\nexports.handler = handler;\r\nexports.createReadWriteContext = createReadWriteContext;\r\nexports.fixRequestHeader = fixRequestHeader;\r\nexports.getRequestOrResponseHeader = getRequestOrResponseHeader;\r\nexports.getContentType = getContentType;\r\nexports.getDataServiceVersion = getDataServiceVersion;\r\nexports.MAX_DATA_SERVICE_VERSION = MAX_DATA_SERVICE_VERSION;","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n/** @module odata/json */\r\n\r\n\r\n\r\nvar utils        = require('./../utils.js');\r\nvar oDataUtils   = require('./odatautils.js');\r\nvar oDataHandler = require('./handler.js');\r\n\r\nvar odataNs = \"odata\";\r\nvar odataAnnotationPrefix = odataNs + \".\";\r\nvar contextUrlAnnotation = \"@\" + odataAnnotationPrefix + \"context\";\r\n\r\nvar assigned = utils.assigned;\r\nvar defined = utils.defined;\r\nvar isArray = utils.isArray;\r\n//var isDate = utils.isDate;\r\nvar isObject = utils.isObject;\r\n//var normalizeURI = utils.normalizeURI;\r\nvar parseInt10 = utils.parseInt10;\r\nvar getFormatKind = utils.getFormatKind;\r\nvar convertByteArrayToHexString = utils.convertByteArrayToHexString;\r\n\r\n\r\nvar formatDateTimeOffset = oDataUtils.formatDateTimeOffset;\r\nvar formatDuration = oDataUtils.formatDuration;\r\nvar formatNumberWidth = oDataUtils.formatNumberWidth;\r\nvar getCanonicalTimezone = oDataUtils.getCanonicalTimezone;\r\nvar handler = oDataUtils.handler;\r\nvar isComplex = oDataUtils.isComplex;\r\nvar isPrimitive = oDataUtils.isPrimitive;\r\nvar isCollectionType = oDataUtils.isCollectionType;\r\nvar lookupComplexType = oDataUtils.lookupComplexType;\r\nvar lookupEntityType = oDataUtils.lookupEntityType;\r\nvar lookupSingleton = oDataUtils.lookupSingleton;\r\nvar lookupEntitySet = oDataUtils.lookupEntitySet;\r\nvar lookupDefaultEntityContainer = oDataUtils.lookupDefaultEntityContainer;\r\nvar lookupProperty = oDataUtils.lookupProperty;\r\nvar MAX_DATA_SERVICE_VERSION = oDataUtils.MAX_DATA_SERVICE_VERSION;\r\nvar maxVersion = oDataUtils.maxVersion;\r\n\r\nvar isPrimitiveEdmType = oDataUtils.isPrimitiveEdmType;\r\nvar isGeographyEdmType = oDataUtils.isGeographyEdmType;\r\nvar isGeometryEdmType = oDataUtils.isGeometryEdmType;\r\n\r\nvar PAYLOADTYPE_FEED = \"f\";\r\nvar PAYLOADTYPE_ENTRY = \"e\";\r\nvar PAYLOADTYPE_PROPERTY = \"p\";\r\nvar PAYLOADTYPE_COLLECTION = \"c\";\r\nvar PAYLOADTYPE_ENUMERATION_PROPERTY = \"enum\";\r\nvar PAYLOADTYPE_SVCDOC = \"s\";\r\nvar PAYLOADTYPE_ENTITY_REF_LINK = \"erl\";\r\nvar PAYLOADTYPE_ENTITY_REF_LINKS = \"erls\";\r\n\r\nvar PAYLOADTYPE_VALUE = \"v\";\r\n\r\nvar PAYLOADTYPE_DELTA = \"d\";\r\nvar DELTATYPE_FEED = \"f\";\r\nvar DELTATYPE_DELETED_ENTRY = \"de\";\r\nvar DELTATYPE_LINK = \"l\";\r\nvar DELTATYPE_DELETED_LINK = \"dl\";\r\n\r\nvar jsonMediaType = \"application/json\";\r\nvar jsonContentType = oDataHandler.contentType(jsonMediaType);\r\n\r\nvar jsonSerializableMetadata = [\"@odata.id\", \"@odata.type\"];\r\n\r\n\r\n\r\n\r\n\r\n/** Extend JSON OData payload with metadata\r\n * @param handler - This handler.\r\n * @param text - Payload text (this parser also handles pre-parsed objects).\r\n * @param {Object} context - Object with parsing context.\r\n * @return An object representation of the OData payload.\r\n */\r\nfunction jsonParser(handler, text, context) {\r\n    var recognizeDates = defined(context.recognizeDates, handler.recognizeDates);\r\n    var model = context.metadata;\r\n    var json = (typeof text === \"string\") ? JSON.parse(text) : text;\r\n    var metadataContentType;\r\n    if (assigned(context.contentType) && assigned(context.contentType.properties)) {\r\n        metadataContentType = context.contentType.properties[\"odata.metadata\"]; //TODO convert to lower before comparism\r\n    }\r\n\r\n    var payloadFormat = getFormatKind(metadataContentType, 1); // none: 0, minimal: 1, full: 2\r\n\r\n    // No errors should be throw out if we could not parse the json payload, instead we should just return the original json object.\r\n    if (payloadFormat === 0) {\r\n        return json;\r\n    }\r\n    else if (payloadFormat === 1) {\r\n        return addMinimalMetadataToJsonPayload(json, model, recognizeDates);\r\n    }\r\n    else if (payloadFormat === 2) {\r\n        // to do: using the EDM Model to get the type of each property instead of just guessing.\r\n        return addFullMetadataToJsonPayload(json, model, recognizeDates);\r\n    }\r\n    else {\r\n        return json;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// The regular expression corresponds to something like this:\r\n// /Date(123+60)/\r\n//\r\n// This first number is date ticks, the + may be a - and is optional,\r\n// with the second number indicating a timezone offset in minutes.\r\n//\r\n// On the wire, the leading and trailing forward slashes are\r\n// escaped without being required to so the chance of collisions is reduced;\r\n// however, by the time we see the objects, the characters already\r\n// look like regular forward slashes.\r\nvar jsonDateRE = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n\r\n// Some JSON implementations cannot produce the character sequence \\/\r\n// which is needed to format DateTime and DateTimeOffset into the\r\n// JSON string representation defined by the OData protocol.\r\n// See the history of this file for a candidate implementation of\r\n// a 'formatJsonDateString' function.\r\n\r\n\r\nvar jsonReplacer = function (_, value) {\r\n    /// <summary>JSON replacer function for converting a value to its JSON representation.</summary>\r\n    /// <param value type=\"Object\">Value to convert.</param>\r\n    /// <returns type=\"String\">JSON representation of the input value.</returns>\r\n    /// <remarks>\r\n    ///   This method is used during JSON serialization and invoked only by the JSON.stringify function.\r\n    ///   It should never be called directly.\r\n    /// </remarks>\r\n\r\n    if (value && value.__edmType === \"Edm.Time\") {\r\n        return formatDuration(value);\r\n    } else {\r\n        return value;\r\n    }\r\n};\r\n\r\n/** Serializes a ODataJs payload structure to the wire format which can be send to the server\r\n * @param handler - This handler.\r\n * @param data - Data to serialize.\r\n * @param {Object} context - Object with serialization context.\r\n * @returns {String} The string representation of data.\r\n */\r\nfunction jsonSerializer(handler, data, context) {\r\n\r\n    var dataServiceVersion = context.dataServiceVersion || \"4.0\";\r\n    var cType = context.contentType = context.contentType || jsonContentType;\r\n\r\n    if (cType && cType.mediaType === jsonContentType.mediaType) {\r\n        context.dataServiceVersion = maxVersion(dataServiceVersion, \"4.0\");\r\n        var newdata = formatJsonRequestPayload(data);\r\n        if (newdata) {\r\n            return JSON.stringify(newdata,jsonReplacer);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n\r\n\r\n\r\n/** Convert OData objects for serialisation in to a new data structure\r\n * @param data - Data to serialize.\r\n * @returns {String} The string representation of data.\r\n */\r\nfunction formatJsonRequestPayload(data) {\r\n    if (!data) {\r\n        return data;\r\n    }\r\n\r\n    if (isPrimitive(data)) {\r\n        return data;\r\n    }\r\n\r\n    if (isArray(data)) {\r\n        var newArrayData = [];\r\n        var i, len;\r\n        for (i = 0, len = data.length; i < len; i++) {\r\n            newArrayData[i] = formatJsonRequestPayload(data[i]);\r\n        }\r\n\r\n        return newArrayData;\r\n    }\r\n\r\n    var newdata = {};\r\n    for (var property in data) {\r\n        if (isJsonSerializableProperty(property)) {\r\n            newdata[property] = formatJsonRequestPayload(data[property]);\r\n        }\r\n    }\r\n\r\n    return newdata;\r\n}\r\n\r\n/** Determine form the attribute name if the attribute is a serializable property\r\n * @param attribute\r\n * @returns {boolean}\r\n */\r\nfunction isJsonSerializableProperty(attribute) {\r\n    if (!attribute) {\r\n        return false;\r\n    }\r\n\r\n    if (attribute.indexOf(\"@odata.\") == -1) {\r\n        return true;\r\n    }\r\n\r\n    var i, len;\r\n    for (i = 0, len = jsonSerializableMetadata.length; i < len; i++) {\r\n        var name = jsonSerializableMetadata[i];\r\n        if (attribute.indexOf(name) != -1) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Creates an object containing information for the json payload.\r\n * @param {String} kind - JSON payload kind\r\n * @param {String} type - Type name of the JSON payload.\r\n * @returns {Object} Object with kind and type fields.\r\n */\r\nfunction jsonMakePayloadInfo(kind, type) {\r\n    return { kind: kind, type: type || null };\r\n}\r\n\r\n\r\n\r\n/** Add metadata to an JSON payload complex object containing full metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addFullMetadataToJsonPayload(data, model, recognizeDates) {\r\n    var type;\r\n    if (utils.isObject(data)) {\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                if (key.indexOf('@') === -1) {\r\n                    if (utils.isArray(data[key])) {\r\n                        for (var i = 0; i < data[key].length; ++i) {\r\n                            addFullMetadataToJsonPayload(data[key][i], model, recognizeDates);\r\n                        }\r\n                    } else if (utils.isObject(data[key])) {\r\n                        if (data[key] !== null) {\r\n                            //don't step into geo.. objects\r\n                            type = data[key+'@odata.type'];\r\n                            if (!type) {\r\n                                //type unknown\r\n                                addFullMetadataToJsonPayload(data[key], model, recognizeDates);\r\n                            } else {\r\n                                type = type.substring(1);\r\n                                if  (isGeographyEdmType(type) || isGeometryEdmType(type)) {\r\n                                    // don't add type info for geo* types\r\n                                } else {\r\n                                    addFullMetadataToJsonPayload(data[key], model, recognizeDates);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        type = data[key + '@odata.type'];\r\n\r\n                        // On .Net OData library, some basic EDM type is omitted, e.g. Edm.String, Edm.Int, and etc.\r\n                        // For the full metadata payload, we need to full fill the @data.type for each property if it is missing.\r\n                        // We do this is to help the OlingoJS consumers to easily get the type of each property.\r\n                        if (!assigned(type)) {\r\n                            // Guessing the \"type\" from the type of the value is not the right way here.\r\n                            // To do: we need to get the type from metadata instead of guessing.\r\n                            var typeFromObject = typeof data[key];\r\n                            if (typeFromObject === 'string') {\r\n                                addType(data, key, 'String');\r\n                            } else if (typeFromObject === 'boolean') {\r\n                                addType(data, key, 'Boolean');\r\n                            } else if (typeFromObject === 'number') {\r\n                                if (data[key] % 1 === 0) { // has fraction\r\n                                    addType(data, key, 'Int32'); // the biggst integer\r\n                                } else {\r\n                                    addType(data, key, 'Decimal'); // the biggst float single,doulbe,decimal\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (recognizeDates) {\r\n                                convertDatesNoEdm(data, key, type.substring(1));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/** Loop through the properties of an JSON payload object, look up the type info of the property and call\r\n * the appropriate add*MetadataToJsonPayloadObject function\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} objectInfoType - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction checkProperties(data, objectInfoType, baseURI, model, recognizeDates) {\r\n    for (var name in data) {\r\n        if (name.indexOf(\"@\") === -1) {\r\n            var curType = objectInfoType;\r\n            var propertyValue = data[name];\r\n            var property = lookupProperty(curType.property,name); //TODO SK add check for parent type\r\n\r\n            while (( property === null) && (curType.baseType !== undefined)) {\r\n                curType = lookupEntityType(curType.baseType, model);\r\n                property = lookupProperty(curType.property,name);\r\n            }\r\n\r\n            if ( isArray(propertyValue)) {\r\n                //data[name+'@odata.type'] = '#' + property.type;\r\n                if (isCollectionType(property.type)) {\r\n                    addTypeColNoEdm(data,name,property.type.substring(11,property.type.length-1));\r\n                } else {\r\n                    addTypeNoEdm(data,name,property.type);\r\n                }\r\n\r\n\r\n                for ( var i = 0; i < propertyValue.length; i++) {\r\n                    addMetadataToJsonMinimalPayloadComplex(propertyValue[i], property, baseURI, model, recognizeDates);\r\n                }\r\n            } else if (isObject(propertyValue) && (propertyValue !== null)) {\r\n                addMetadataToJsonMinimalPayloadComplex(propertyValue, property, baseURI, model, recognizeDates);\r\n            } else {\r\n                //data[name+'@odata.type'] = '#' + property.type;\r\n                addTypeNoEdm(data,name,property.type);\r\n                if (recognizeDates) {\r\n                    convertDates(data, name, property.type);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/** Add metadata to an JSON payload object containing minimal metadata\r\n * @param {Object} data - Json response payload object\r\n * @param {Object} model - Object describing an OData conceptual schema\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n * @returns {Object} Object in the library's representation.\r\n */\r\nfunction addMinimalMetadataToJsonPayload(data, model, recognizeDates) {\r\n\r\n    if (!assigned(model) || isArray(model)) {\r\n        return data;\r\n    }\r\n\r\n    var baseURI = data[contextUrlAnnotation];\r\n    var payloadInfo = createPayloadInfo(data, model);\r\n\r\n    switch (payloadInfo.detectedPayloadKind) {\r\n\r\n        case PAYLOADTYPE_VALUE:\r\n            if (payloadInfo.type !== null) {\r\n                return addMetadataToJsonMinimalPayloadEntity(data, payloadInfo, baseURI, model, recognizeDates);\r\n            } else {\r\n                return addTypeNoEdm(data,'value', payloadInfo.typeName);\r\n            }\r\n\r\n        case PAYLOADTYPE_FEED:\r\n            return addMetadataToJsonMinimalPayloadFeed(data, model, payloadInfo, baseURI, recognizeDates);\r\n\r\n        case PAYLOADTYPE_ENTRY:\r\n            return addMetadataToJsonMinimalPayloadEntity(data, payloadInfo, baseURI, model, recognizeDates);\r\n\r\n        case PAYLOADTYPE_COLLECTION:\r\n            return addMetadataToJsonMinimalPayloadCollection(data, model, payloadInfo, baseURI, recognizeDates);\r\n\r\n        case PAYLOADTYPE_PROPERTY:\r\n            if (payloadInfo.type !== null) {\r\n                return addMetadataToJsonMinimalPayloadEntity(data, payloadInfo, baseURI, model, recognizeDates);\r\n            } else {\r\n                return addTypeNoEdm(data,'value', payloadInfo.typeName);\r\n            }\r\n\r\n        case PAYLOADTYPE_SVCDOC:\r\n            return data;\r\n\r\n        case PAYLOADTYPE_LINKS:\r\n            return data;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/** Add metadata to an JSON payload feed object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {Object} model - Metadata model\r\n * @param {String} feedInfo - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadFeed(data, model, feedInfo, baseURI, recognizeDates) {\r\n    var entries = [];\r\n    var items = data.value;\r\n    var i,len;\r\n    var entry;\r\n    for (i = 0, len = items.length; i < len; i++) {\r\n        var item = items[i];\r\n        if ( defined(item['@odata.type'])) { // in case of mixed feeds\r\n            var typeName = item['@odata.type'].substring(1);\r\n            var type = lookupEntityType( typeName, model);\r\n            var entryInfo = {\r\n                contentTypeOdata : feedInfo.contentTypeOdata,\r\n                detectedPayloadKind : feedInfo.detectedPayloadKind,\r\n                name : feedInfo.name,\r\n                type : type,\r\n                typeName : typeName\r\n            };\r\n\r\n            entry = addMetadataToJsonMinimalPayloadEntity(item, entryInfo, baseURI, model, recognizeDates);\r\n        } else {\r\n            entry = addMetadataToJsonMinimalPayloadEntity(item, feedInfo, baseURI, model, recognizeDates);\r\n        }\r\n\r\n        entries.push(entry);\r\n    }\r\n    data.value = entries;\r\n    return data;\r\n}\r\n\r\n\r\n/** Add metadata to an JSON payload entity object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} objectInfo - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadEntity(data, objectInfo, baseURI, model, recognizeDates) {\r\n    addType(data,'',objectInfo.typeName);\r\n\r\n    var keyType = objectInfo.type;\r\n    while ((defined(keyType)) && ( keyType.key === undefined) && (keyType.baseType !== undefined)) {\r\n        keyType = lookupEntityType(keyType.baseType, model);\r\n    }\r\n\r\n    if (keyType.key !== undefined) {\r\n        var lastIdSegment = objectInfo.name + jsonGetEntryKey(data, keyType);\r\n        data['@odata.id'] = baseURI.substring(0, baseURI.lastIndexOf(\"$metadata\")) + lastIdSegment;\r\n        data['@odata.editLink'] = lastIdSegment;\r\n    }\r\n\r\n    //var serviceURI = baseURI.substring(0, baseURI.lastIndexOf(\"$metadata\"));\r\n\r\n    checkProperties(data, objectInfo.type, baseURI, model, recognizeDates);\r\n\r\n    return data;\r\n}\r\n\r\n/** Add metadata to an JSON payload complex object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} property - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Object} model - Metadata model\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadComplex(data, property, baseURI, model, recognizeDates) {\r\n    var type = property.type;\r\n    if (isCollectionType(property.type)) {\r\n        type =property.type.substring(11,property.type.length-1);\r\n    }\r\n\r\n    addType(data,'',property.type);\r\n\r\n    var propertyType = lookupComplexType(type, model);\r\n    if (propertyType === null)  {\r\n        return; //TODO check what to do if the type is not known e.g. type #GeometryCollection\r\n    }\r\n\r\n    checkProperties(data, propertyType, baseURI, model, recognizeDates);\r\n}\r\n\r\n/** Add metadata to an JSON payload collection object containing minimal metadata\r\n * @param {Object} data - Data structure to be extended\r\n * @param {Object} model - Metadata model\r\n * @param {String} collectionInfo - Information about the data (name,type,typename,...)\r\n * @param {String} baseURI - Base Url\r\n * @param {Boolean} recognizeDates - Flag indicating whether datetime literal strings should be converted to JavaScript Date objects.\r\n */\r\nfunction addMetadataToJsonMinimalPayloadCollection(data, model, collectionInfo, baseURI, recognizeDates) {\r\n\r\n    addTypeColNoEdm(data,'', collectionInfo.typeName);\r\n\r\n    if (collectionInfo.type !== null) {\r\n        var entries = [];\r\n\r\n        var items = data.value;\r\n        var i,len;\r\n        var entry;\r\n        for (i = 0, len = items.length; i < len; i++) {\r\n            var item = items[i];\r\n            if ( defined(item['@odata.type'])) { // in case of mixed collections\r\n                var typeName = item['@odata.type'].substring(1);\r\n                var type = lookupEntityType( typeName, model);\r\n                var entryInfo = {\r\n                    contentTypeOdata : collectionInfo.contentTypeOdata,\r\n                    detectedPayloadKind : collectionInfo.detectedPayloadKind,\r\n                    name : collectionInfo.name,\r\n                    type : type,\r\n                    typeName : typeName\r\n                };\r\n\r\n                entry = addMetadataToJsonMinimalPayloadEntity(item, entryInfo, baseURI, model, recognizeDates);\r\n            } else {\r\n                entry = addMetadataToJsonMinimalPayloadEntity(item, collectionInfo, baseURI, model, recognizeDates);\r\n            }\r\n\r\n            entries.push(entry);\r\n        }\r\n        data.value = entries;\r\n    }\r\n    return data;\r\n}\r\n\r\n/** Add an OData type tag to an JSON payload object\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} name - Name of the property whose type is set\r\n * @param {String} value - Type name\r\n */\r\nfunction addType(data, name, value ) {\r\n    var fullName = name + '@odata.type';\r\n\r\n    if ( data[fullName] === undefined) {\r\n        data[fullName] = '#' + value;\r\n    }\r\n}\r\n\r\n/** Add an OData type tag to an JSON payload object collection (without \"Edm.\" namespace)\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} name - Name of the property whose type is set\r\n * @param {String} typeName - Type name\r\n */\r\nfunction addTypeColNoEdm(data, name, typeName ) {\r\n    var fullName = name + '@odata.type';\r\n\r\n    if ( data[fullName] === undefined) {\r\n        if ( typeName.substring(0,4)==='Edm.') {\r\n            data[fullName] = '#Collection('+typeName.substring(4)+ ')';\r\n        } else {\r\n            data[fullName] = '#Collection('+typeName+ ')';\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/** Add an OData type tag to an JSON payload object (without \"Edm.\" namespace)\r\n * @param {Object} data - Data structure to be extended\r\n * @param {String} name - Name of the property whose type is set\r\n * @param {String} value - Type name\r\n */\r\nfunction addTypeNoEdm(data, name, value ) {\r\n    var fullName = name + '@odata.type';\r\n\r\n    if ( data[fullName] === undefined) {\r\n        if ( value.substring(0,4)==='Edm.') {\r\n            data[fullName] = '#' + value.substring(4);\r\n        } else {\r\n            data[fullName] = '#' + value;\r\n        }\r\n    }\r\n    return data;\r\n}\r\n/** Convert the date/time format of an property from the JSON payload object (without \"Edm.\" namespace)\r\n * @param {Object} data - Data structure to be extended\r\n * @param propertyName - Name of the property to be changed\r\n * @param type - Type\r\n */\r\nfunction convertDates(data, propertyName,type) {\r\n    if (type === 'Edm.Date') {\r\n        data[propertyName] = oDataUtils.parseDate(data[propertyName], true);\r\n    } else if (type === 'Edm.DateTimeOffset') {\r\n        data[propertyName] = oDataUtils.parseDateTimeOffset(data[propertyName], true);\r\n    } else if (type === 'Edm.Duration') {\r\n        data[propertyName] = oDataUtils.parseDuration(data[propertyName], true);\r\n    } else if (type === 'Edm.Time') {\r\n        data[propertyName] = oDataUtils.parseTime(data[propertyName], true);\r\n    }\r\n}\r\n\r\n/** Convert the date/time format of an property from the JSON payload object\r\n * @param {Object} data - Data structure to be extended\r\n * @param propertyName - Name of the property to be changed\r\n * @param type - Type\r\n */\r\nfunction convertDatesNoEdm(data, propertyName,type) {\r\n    if (type === 'Date') {\r\n        data[propertyName] = oDataUtils.parseDate(data[propertyName], true);\r\n    } else if (type === 'DateTimeOffset') {\r\n        data[propertyName] = oDataUtils.parseDateTimeOffset(data[propertyName], true);\r\n    } else if (type === 'Duration') {\r\n        data[propertyName] = oDataUtils.parseDuration(data[propertyName], true);\r\n    } else if (type === 'Time') {\r\n        data[propertyName] = oDataUtils.parseTime(data[propertyName], true);\r\n    }\r\n}\r\n\r\n/** Formats a value according to Uri literal format\r\n * @param value - Value to be formatted.\r\n * @param type - Edm type of the value\r\n * @returns {string} Value after formatting\r\n */\r\nfunction formatLiteral(value, type) {\r\n\r\n    value = \"\" + formatRawLiteral(value, type);\r\n    value = encodeURIComponent(value.replace(\"'\", \"''\"));\r\n    switch ((type)) {\r\n        case \"Edm.Binary\":\r\n            return \"X'\" + value + \"'\";\r\n        case \"Edm.DateTime\":\r\n            return \"datetime\" + \"'\" + value + \"'\";\r\n        case \"Edm.DateTimeOffset\":\r\n            return \"datetimeoffset\" + \"'\" + value + \"'\";\r\n        case \"Edm.Decimal\":\r\n            return value + \"M\";\r\n        case \"Edm.Guid\":\r\n            return \"guid\" + \"'\" + value + \"'\";\r\n        case \"Edm.Int64\":\r\n            return value + \"L\";\r\n        case \"Edm.Float\":\r\n            return value + \"f\";\r\n        case \"Edm.Double\":\r\n            return value + \"D\";\r\n        case \"Edm.Geography\":\r\n            return \"geography\" + \"'\" + value + \"'\";\r\n        case \"Edm.Geometry\":\r\n            return \"geometry\" + \"'\" + value + \"'\";\r\n        case \"Edm.Time\":\r\n            return \"time\" + \"'\" + value + \"'\";\r\n        case \"Edm.String\":\r\n            return \"'\" + value + \"'\";\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\n/** convert raw byteArray to hexString if the property is an binary property\r\n * @param value - Value to be formatted.\r\n * @param type - Edm type of the value\r\n * @returns {string} Value after formatting\r\n */\r\nfunction formatRawLiteral(value, type) {\r\n    switch (type) {\r\n        case \"Edm.Binary\":\r\n            return convertByteArrayToHexString(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\n/** Formats the given minutes into (+/-)hh:mm format.\r\n * @param {Number} minutes - Number of minutes to format.\r\n * @returns {String} The minutes in (+/-)hh:mm format.\r\n */\r\nfunction minutesToOffset(minutes) {\r\n\r\n    var sign;\r\n    if (minutes < 0) {\r\n        sign = \"-\";\r\n        minutes = -minutes;\r\n    } else {\r\n        sign = \"+\";\r\n    }\r\n\r\n    var hours = Math.floor(minutes / 60);\r\n    minutes = minutes - (60 * hours);\r\n\r\n    return sign + formatNumberWidth(hours, 2) + \":\" + formatNumberWidth(minutes, 2);\r\n}\r\n\r\n/** Parses the JSON Date representation into a Date object.\r\n * @param {String} value - String value.\r\n * @returns {Date} A Date object if the value matches one; falsy otherwise.\r\n */\r\nfunction parseJsonDateString(value) {\r\n\r\n    var arr = value && jsonDateRE.exec(value);\r\n    if (arr) {\r\n        // 0 - complete results; 1 - ticks; 2 - sign; 3 - minutes\r\n        var result = new Date(parseInt10(arr[1]));\r\n        if (arr[2]) {\r\n            var mins = parseInt10(arr[3]);\r\n            if (arr[2] === \"-\") {\r\n                mins = -mins;\r\n            }\r\n\r\n            // The offset is reversed to get back the UTC date, which is\r\n            // what the API will eventually have.\r\n            var current = result.getUTCMinutes();\r\n            result.setUTCMinutes(current - mins);\r\n            result.__edmType = \"Edm.DateTimeOffset\";\r\n            result.__offset = minutesToOffset(mins);\r\n        }\r\n        if (!isNaN(result.valueOf())) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Allow undefined to be returned.\r\n}\r\n\r\n/** Creates an object containing information for the context\r\n * @param {String} fragments - Uri fragment\r\n * @param {Object} model - Object describing an OData conceptual schema\r\n * @returns {Object} type(optional)  object containing type information for entity- and complex-types ( null if a typeName is a primitive)\r\n */\r\nfunction parseContextUriFragment( fragments, model ) {\r\n    var ret = {};\r\n\r\n    if (fragments.indexOf('/') === -1 ) {\r\n        if (fragments.length === 0) {\r\n            // Capter 10.1\r\n            ret.detectedPayloadKind = PAYLOADTYPE_SVCDOC;\r\n            return ret;\r\n        } else if (fragments === 'Edm.Null') {\r\n            // Capter 10.15\r\n            ret.detectedPayloadKind = PAYLOADTYPE_VALUE;\r\n            ret.isNullProperty = true;\r\n            return ret;\r\n        } else if (fragments === 'Collection($ref)') {\r\n            // Capter 10.11\r\n            ret.detectedPayloadKind = PAYLOADTYPE_ENTITY_REF_LINKS;\r\n            return ret;\r\n        } else if (fragments === '$ref') {\r\n            // Capter 10.12\r\n            ret.detectedPayloadKind = PAYLOADTYPE_ENTITY_REF_LINK;\r\n            return ret;\r\n        } else {\r\n            //TODO check for navigation resource\r\n        }\r\n    }\r\n\r\n    ret.type = undefined;\r\n    ret.typeName = undefined;\r\n\r\n    var fragmentParts = fragments.split(\"/\");\r\n    var type;\r\n\r\n    for(var i = 0; i < fragmentParts.length; ++i) {\r\n        var fragment = fragmentParts[i];\r\n        if (ret.typeName === undefined) {\r\n            //preparation\r\n            if ( fragment.indexOf('(') !== -1 ) {\r\n                //remove the query function, cut fragment to matching '('\r\n                var index = fragment.length - 2 ;\r\n                for ( var rCount = 1; rCount > 0 && index > 0; --index) {\r\n                    if ( fragment.charAt(index)=='(') {\r\n                        rCount --;\r\n                    } else if ( fragment.charAt(index)==')') {\r\n                        rCount ++;\r\n                    }\r\n                }\r\n\r\n                if (index === 0) {\r\n                    //TODO throw error\r\n                }\r\n\r\n                //remove the projected entity from the fragment; TODO decide if we want to store the projected entity\r\n                var inPharenthesis = fragment.substring(index+2,fragment.length - 1);\r\n                fragment = fragment.substring(0,index+1);\r\n\r\n                if (utils.startsWith(fragment, 'Collection')) {\r\n                    ret.detectedPayloadKind = PAYLOADTYPE_COLLECTION;\r\n                    // Capter 10.14\r\n                    ret.typeName = inPharenthesis;\r\n\r\n                    type = lookupEntityType(ret.typeName, model);\r\n                    if ( type !== null) {\r\n                        ret.type = type;\r\n                        continue;\r\n                    }\r\n                    type = lookupComplexType(ret.typeName, model);\r\n                    if ( type !== null) {\r\n                        ret.type = type;\r\n                        continue;\r\n                    }\r\n\r\n                    ret.type = null;//in case of #Collection(Edm.String) only lastTypeName is filled\r\n                    continue;\r\n                } else {\r\n                    // projection: Capter 10.7, 10.8 and 10.9\r\n                    ret.projection = inPharenthesis;\r\n                }\r\n            }\r\n\r\n\r\n            if (jsonIsPrimitiveType(fragment)) {\r\n                ret.typeName = fragment;\r\n                ret.type = null;\r\n                ret.detectedPayloadKind = PAYLOADTYPE_VALUE;\r\n                continue;\r\n            }\r\n\r\n            var container = lookupDefaultEntityContainer(model);\r\n\r\n            //check for entity\r\n            var entitySet = lookupEntitySet(container.entitySet, fragment);\r\n            if ( entitySet !== null) {\r\n                ret.typeName = entitySet.entityType;\r\n                ret.type = lookupEntityType( ret.typeName, model);\r\n                ret.name = fragment;\r\n                ret.detectedPayloadKind = PAYLOADTYPE_FEED;\r\n                // Capter 10.2\r\n                continue;\r\n            }\r\n\r\n            //check for singleton\r\n            var singleton = lookupSingleton(container.singleton, fragment);\r\n            if ( singleton !== null) {\r\n                ret.typeName = singleton.entityType;\r\n                ret.type = lookupEntityType( ret.typeName, model);\r\n                ret.name = fragment;\r\n                ret.detectedPayloadKind =  PAYLOADTYPE_ENTRY;\r\n                // Capter 10.4\r\n                continue;\r\n            }\r\n\r\n\r\n\r\n            //TODO throw ERROR\r\n        } else {\r\n            //check for $entity\r\n            if (utils.endsWith(fragment, '$entity') && (ret.detectedPayloadKind === PAYLOADTYPE_FEED)) {\r\n                //TODO ret.name = fragment;\r\n                ret.detectedPayloadKind = PAYLOADTYPE_ENTRY;\r\n                // Capter 10.3 and 10.6\r\n                continue;\r\n            }\r\n\r\n            //check for derived types\r\n            if (fragment.indexOf('.') !== -1) {\r\n                // Capter 10.6\r\n                ret.typeName = fragment;\r\n                type = lookupEntityType(ret.typeName, model);\r\n                if ( type !== null) {\r\n                    ret.type = type;\r\n                    continue;\r\n                }\r\n                type = lookupComplexType(ret.typeName, model);\r\n                if ( type !== null) {\r\n                    ret.type = type;\r\n                    continue;\r\n                }\r\n\r\n                //TODO throw ERROR invalid type\r\n            }\r\n\r\n            //check for property value\r\n            if ( ret.detectedPayloadKind === PAYLOADTYPE_FEED || ret.detectedPayloadKind === PAYLOADTYPE_ENTRY) {\r\n                var property = lookupProperty(ret.type.property, fragment);\r\n                if (property !== null) {\r\n                    //PAYLOADTYPE_COLLECTION\r\n                    ret.typeName = property.type;\r\n\r\n\r\n                    if (utils.startsWith(property.type, 'Collection')) {\r\n                        ret.detectedPayloadKind = PAYLOADTYPE_COLLECTION;\r\n                        var tmp12 =  property.type.substring(10+1,property.type.length - 1);\r\n                        ret.typeName = tmp12;\r\n                        ret.type = lookupComplexType(tmp12, model);\r\n                        ret.detectedPayloadKind = PAYLOADTYPE_COLLECTION;\r\n                    } else {\r\n                        ret.type = lookupComplexType(property.type, model);\r\n                        ret.detectedPayloadKind = PAYLOADTYPE_PROPERTY;\r\n                    }\r\n\r\n                    ret.name = fragment;\r\n                    // Capter 10.15\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (fragment === '$delta') {\r\n                ret.deltaKind = DELTATYPE_FEED;\r\n                continue;\r\n            } else if (utils.endsWith(fragment, '/$deletedEntity')) {\r\n                ret.deltaKind = DELTATYPE_DELETED_ENTRY;\r\n                continue;\r\n            } else if (utils.endsWith(fragment, '/$link')) {\r\n                ret.deltaKind = DELTATYPE_LINK;\r\n                continue;\r\n            } else if (utils.endsWith(fragment, '/$deletedLink')) {\r\n                ret.deltaKind = DELTATYPE_DELETED_LINK;\r\n                continue;\r\n            }\r\n            //TODO throw ERROr\r\n        }\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\n\r\n/** Infers the information describing the JSON payload from its metadata annotation, structure, and data model.\r\n * @param {Object} data - Json response payload object.\r\n * @param {Object} model - Object describing an OData conceptual schema.\r\n * If the arguments passed to the function don't convey enough information about the payload to determine without doubt that the payload is a feed then it\r\n * will try to use the payload object structure instead.  If the payload looks like a feed (has value property that is an array or non-primitive values) then\r\n * the function will report its kind as PAYLOADTYPE_FEED unless the inferFeedAsComplexType flag is set to true. This flag comes from the user request\r\n * and allows the user to control how the library behaves with an ambigous JSON payload.\r\n * @return Object with kind and type fields. Null if there is no metadata annotation or the payload info cannot be obtained..\r\n */\r\nfunction createPayloadInfo(data, model) {\r\n    var metadataUri = data[contextUrlAnnotation];\r\n    if (!metadataUri || typeof metadataUri !== \"string\") {\r\n        return null;\r\n    }\r\n\r\n    var fragmentStart = metadataUri.lastIndexOf(\"#\");\r\n    if (fragmentStart === -1) {\r\n        return jsonMakePayloadInfo(PAYLOADTYPE_SVCDOC);\r\n    }\r\n\r\n    var fragment = metadataUri.substring(fragmentStart + 1);\r\n    return parseContextUriFragment(fragment,model);\r\n}\r\n/** Gets the key of an entry.\r\n * @param {Object} data - JSON entry.\r\n * @param {Object} data - EDM entity model for key loockup.\r\n * @returns {string} Entry instance key.\r\n */\r\nfunction jsonGetEntryKey(data, entityModel) {\r\n\r\n    var entityInstanceKey;\r\n    var entityKeys = entityModel.key[0].propertyRef;\r\n    var type;\r\n    entityInstanceKey = \"(\";\r\n    if (entityKeys.length == 1) {\r\n        type = lookupProperty(entityModel.property, entityKeys[0].name).type;\r\n        entityInstanceKey += formatLiteral(data[entityKeys[0].name], type);\r\n    } else {\r\n        var first = true;\r\n        for (var i = 0; i < entityKeys.length; i++) {\r\n            if (!first) {\r\n                entityInstanceKey += \",\";\r\n            } else {\r\n                first = false;\r\n            }\r\n            type = lookupProperty(entityModel.property, entityKeys[i].name).type;\r\n            entityInstanceKey += entityKeys[i].name + \"=\" + formatLiteral(data[entityKeys[i].name], type);\r\n        }\r\n    }\r\n    entityInstanceKey += \")\";\r\n    return entityInstanceKey;\r\n}\r\n/** Determines whether a type name is a primitive type in a JSON payload.\r\n * @param {String} typeName - Type name to test.\r\n * @returns {Boolean} True if the type name an EDM primitive type or an OData spatial type; false otherwise.\r\n */\r\nfunction jsonIsPrimitiveType(typeName) {\r\n    return isPrimitiveEdmType(typeName) || isGeographyEdmType(typeName) || isGeometryEdmType(typeName);\r\n}\r\n\r\n\r\nvar jsonHandler = oDataHandler.handler(jsonParser, jsonSerializer, jsonMediaType, MAX_DATA_SERVICE_VERSION);\r\njsonHandler.recognizeDates = false;\r\n\r\nexports.createPayloadInfo = createPayloadInfo;\r\nexports.jsonHandler = jsonHandler;\r\nexports.jsonParser = jsonParser;\r\nexports.jsonSerializer = jsonSerializer;\r\nexports.parseJsonDateString = parseJsonDateString;","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odata/metadata */\r\n\r\nvar utils    = require('./../utils.js');\r\nvar oDSxml    = require('./../xml.js');\r\nvar odataHandler    = require('./handler.js');\r\n\r\n\r\n\r\n// imports \r\nvar contains = utils.contains;\r\nvar normalizeURI = utils.normalizeURI;\r\nvar xmlAttributes = oDSxml.xmlAttributes;\r\nvar xmlChildElements = oDSxml.xmlChildElements;\r\nvar xmlFirstChildElement = oDSxml.xmlFirstChildElement;\r\nvar xmlInnerText = oDSxml.xmlInnerText;\r\nvar xmlLocalName = oDSxml.xmlLocalName;\r\nvar xmlNamespaceURI = oDSxml.xmlNamespaceURI;\r\nvar xmlNS = oDSxml.xmlNS;\r\nvar xmlnsNS = oDSxml.xmlnsNS;\r\nvar xmlParse = oDSxml.xmlParse;\r\n\r\nvar ado = oDSxml.http + \"docs.oasis-open.org/odata/\";      // http://docs.oasis-open.org/odata/\r\nvar adoDs = ado + \"ns\";                             // http://docs.oasis-open.org/odata/ns\r\nvar edmxNs = adoDs + \"/edmx\";                       // http://docs.oasis-open.org/odata/ns/edmx\r\nvar edmNs1 = adoDs + \"/edm\";                        // http://docs.oasis-open.org/odata/ns/edm\r\nvar odataMetaXmlNs = adoDs + \"/metadata\";           // http://docs.oasis-open.org/odata/ns/metadata\r\nvar MAX_DATA_SERVICE_VERSION = odataHandler.MAX_DATA_SERVICE_VERSION;\r\n\r\nvar xmlMediaType = \"application/xml\";\r\n\r\n/** Creates an object that describes an element in an schema.\r\n * @param {Array} attributes - List containing the names of the attributes allowed for this element.\r\n * @param {Array} elements - List containing the names of the child elements allowed for this element.\r\n * @param {Boolean} text - Flag indicating if the element's text value is of interest or not.\r\n * @param {String} ns - Namespace to which the element belongs to.\r\n * If a child element name ends with * then it is understood by the schema that that child element can appear 0 or more times.\r\n * @returns {Object} Object with attributes, elements, text, and ns fields.\r\n */\r\nfunction schemaElement(attributes, elements, text, ns) {\r\n\r\n    return {\r\n        attributes: attributes,\r\n        elements: elements,\r\n        text: text || false,\r\n        ns: ns\r\n    };\r\n}\r\n\r\n// It's assumed that all elements may have Documentation children and Annotation elements.\r\n// See http://docs.oasis-open.org/odata/odata/v4.0/cs01/part3-csdl/odata-v4.0-cs01-part3-csdl.html for a CSDL reference.\r\nvar schema = {\r\n    elements: {\r\n        Action: schemaElement(\r\n        /*attributes*/[\"Name\", \"IsBound\", \"EntitySetPath\"],\r\n        /*elements*/[\"ReturnType\", \"Parameter*\", \"Annotation*\"]\r\n        ),\r\n        ActionImport: schemaElement(\r\n        /*attributes*/[\"Name\", \"Action\", \"EntitySet\", \"Annotation*\"]\r\n        ),\r\n        Annotation: schemaElement(\r\n        /*attributes*/[\"Term\", \"Qualifier\", \"Binary\", \"Bool\", \"Date\", \"DateTimeOffset\", \"Decimal\", \"Duration\", \"EnumMember\", \"Float\", \"Guid\", \"Int\", \"String\", \"TimeOfDay\", \"AnnotationPath\", \"NavigationPropertyPath\", \"Path\", \"PropertyPath\", \"UrlRef\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n        AnnotationPath: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Annotations: schemaElement(\r\n        /*attributes*/[\"Target\", \"Qualifier\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        Apply: schemaElement(\r\n        /*attributes*/[\"Function\"],\r\n        /*elements*/[\"String*\", \"Path*\", \"LabeledElement*\", \"Annotation*\"]\r\n        ),\r\n        And: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Or: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Not: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Eq: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Ne: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Gt: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Ge: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Lt: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Le: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Binary: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Bool: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Cast: schemaElement(\r\n        /*attributes*/[\"Type\"],\r\n        /*elements*/[\"Path*\", \"Annotation*\"]\r\n        ),\r\n        Collection: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\"]\r\n        ),\r\n        ComplexType: schemaElement(\r\n        /*attributes*/[\"Name\", \"BaseType\", \"Abstract\", \"OpenType\"],\r\n        /*elements*/[\"Property*\", \"NavigationProperty*\", \"Annotation*\"]\r\n        ),\r\n        Date: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        DateTimeOffset: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Decimal: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Duration: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        EntityContainer: schemaElement(\r\n        /*attributes*/[\"Name\", \"Extends\"],\r\n        /*elements*/[\"EntitySet*\", \"Singleton*\", \"ActionImport*\", \"FunctionImport*\", \"Annotation*\"]\r\n        ),\r\n        EntitySet: schemaElement(\r\n        /*attributes*/[\"Name\", \"EntityType\", \"IncludeInServiceDocument\"],\r\n        /*elements*/[\"NavigationPropertyBinding*\", \"Annotation*\"]\r\n        ),\r\n        EntityType: schemaElement(\r\n        /*attributes*/[\"Name\", \"BaseType\", \"Abstract\", \"OpenType\", \"HasStream\"],\r\n        /*elements*/[\"Key*\", \"Property*\", \"NavigationProperty*\", \"Annotation*\"]\r\n        ),\r\n        EnumMember: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        EnumType: schemaElement(\r\n        /*attributes*/[\"Name\", \"UnderlyingType\", \"IsFlags\"],\r\n        /*elements*/[\"Member*\"]\r\n        ),\r\n        Float: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Function: schemaElement(\r\n        /*attributes*/[\"Name\", \"IsBound\", \"IsComposable\", \"EntitySetPath\"],\r\n        /*elements*/[\"ReturnType\", \"Parameter*\", \"Annotation*\"]\r\n        ),\r\n        FunctionImport: schemaElement(\r\n        /*attributes*/[\"Name\", \"Function\", \"EntitySet\", \"IncludeInServiceDocument\", \"Annotation*\"]\r\n        ),\r\n        Guid: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        If: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Path*\", \"String*\", \"Annotation*\"]\r\n        ),\r\n        Int: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        IsOf: schemaElement(\r\n        /*attributes*/[\"Type\", \"MaxLength\", \"Precision\", \"Scale\", \"Unicode\", \"SRID\", \"DefaultValue\", \"Annotation*\"],\r\n        /*elements*/[\"Path*\"]\r\n        ),\r\n        Key: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"PropertyRef*\"]\r\n        ),\r\n        LabeledElement: schemaElement(\r\n        /*attributes*/[\"Name\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n        LabeledElementReference: schemaElement(\r\n        /*attributes*/[\"Term\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\"]\r\n        ),\r\n        Member: schemaElement(\r\n        /*attributes*/[\"Name\", \"Value\"],\r\n        /*element*/[\"Annotation*\"]\r\n        ),\r\n        NavigationProperty: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"Nullable\", \"Partner\", \"ContainsTarget\"],\r\n        /*elements*/[\"ReferentialConstraint*\", \"OnDelete*\", \"Annotation*\"]\r\n        ),\r\n        NavigationPropertyBinding: schemaElement(\r\n        /*attributes*/[\"Path\", \"Target\"]\r\n        ),\r\n        NavigationPropertyPath: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Null: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        OnDelete: schemaElement(\r\n        /*attributes*/[\"Action\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        Path: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Parameter: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"SRID\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        Property: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"Unicode\", \"SRID\", \"DefaultValue\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        PropertyPath: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        PropertyRef: schemaElement(\r\n        /*attributes*/[\"Name\", \"Alias\"]\r\n        ),\r\n        PropertyValue: schemaElement(\r\n        /*attributes*/[\"Property\", \"Path\"],\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n        Record: schemaElement(\r\n        /*attributes*/null,\r\n        /*Elements*/[\"PropertyValue*\", \"Property*\", \"Annotation*\"]\r\n        ),\r\n        ReferentialConstraint: schemaElement(\r\n        /*attributes*/[\"Property\", \"ReferencedProperty\", \"Annotation*\"]\r\n        ),\r\n        ReturnType: schemaElement(\r\n        /*attributes*/[\"Type\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"SRID\"]\r\n        ),\r\n        String: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        Schema: schemaElement(\r\n        /*attributes*/[\"Namespace\", \"Alias\"],\r\n        /*elements*/[\"Action*\", \"Annotations*\", \"Annotation*\", \"ComplexType*\", \"EntityContainer\", \"EntityType*\", \"EnumType*\", \"Function*\", \"Term*\", \"TypeDefinition*\", \"Annotation*\"]\r\n        ),\r\n        Singleton: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\"],\r\n        /*elements*/[\"NavigationPropertyBinding*\", \"Annotation*\"]\r\n        ),\r\n        Term: schemaElement(\r\n        /*attributes*/[\"Name\", \"Type\", \"BaseTerm\", \"DefaultValue \", \"AppliesTo\", \"Nullable\", \"MaxLength\", \"Precision\", \"Scale\", \"SRID\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        TimeOfDay: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/null,\r\n        /*text*/true\r\n        ),\r\n        TypeDefinition: schemaElement(\r\n        /*attributes*/[\"Name\", \"UnderlyingType\", \"MaxLength\", \"Unicode\", \"Precision\", \"Scale\", \"SRID\"],\r\n        /*elements*/[\"Annotation*\"]\r\n        ),\r\n        UrlRef: schemaElement(\r\n        /*attributes*/null,\r\n        /*elements*/[\"Binary*\", \"Bool*\", \"Date*\", \"DateTimeOffset*\", \"Decimal*\", \"Duration*\", \"EnumMember*\", \"Float*\", \"Guid*\", \"Int*\", \"String*\", \"TimeOfDay*\", \"And*\", \"Or*\", \"Not*\", \"Eq*\", \"Ne*\", \"Gt*\", \"Ge*\", \"Lt*\", \"Le*\", \"AnnotationPath*\", \"Apply*\", \"Cast*\", \"Collection*\", \"If*\", \"IsOf*\", \"LabeledElement*\", \"LabeledElementReference*\", \"Null*\", \"NavigationPropertyPath*\", \"Path*\", \"PropertyPath*\", \"Record*\", \"UrlRef*\", \"Annotation*\"]\r\n        ),\r\n\r\n        // See http://msdn.microsoft.com/en-us/library/dd541238(v=prot.10) for an EDMX reference.\r\n        Edmx: schemaElement(\r\n        /*attributes*/[\"Version\"],\r\n        /*elements*/[\"DataServices\", \"Reference*\"],\r\n        /*text*/false,\r\n        /*ns*/edmxNs\r\n        ),\r\n        DataServices: schemaElement(\r\n        /*attributes*/[\"m:MaxDataServiceVersion\", \"m:DataServiceVersion\"],\r\n        /*elements*/[\"Schema*\"],\r\n        /*text*/false,\r\n        /*ns*/edmxNs\r\n        ),\r\n        Reference: schemaElement(\r\n        /*attributes*/[\"Uri\"],\r\n        /*elements*/[\"Include*\", \"IncludeAnnotations*\", \"Annotation*\"]\r\n        ),\r\n        Include: schemaElement(\r\n        /*attributes*/[\"Namespace\", \"Alias\"]\r\n        ),\r\n        IncludeAnnotations: schemaElement(\r\n        /*attributes*/[\"TermNamespace\", \"Qualifier\", \"TargetNamespace\"]\r\n        )\r\n    }\r\n};\r\n\r\n\r\n/** Converts a Pascal-case identifier into a camel-case identifier.\r\n * @param {String} text - Text to convert.\r\n * @returns {String} Converted text.\r\n * If the text starts with multiple uppercase characters, it is left as-is.\r\n */\r\nfunction scriptCase(text) {\r\n\r\n    if (!text) {\r\n        return text;\r\n    }\r\n\r\n    if (text.length > 1) {\r\n        var firstTwo = text.substr(0, 2);\r\n        if (firstTwo === firstTwo.toUpperCase()) {\r\n            return text;\r\n        }\r\n\r\n        return text.charAt(0).toLowerCase() + text.substr(1);\r\n    }\r\n\r\n    return text.charAt(0).toLowerCase();\r\n}\r\n\r\n/** Gets the schema node for the specified element.\r\n * @param {Object} parentSchema - Schema of the parent XML node of 'element'.\r\n * @param candidateName - XML element name to consider.\r\n * @returns {Object} The schema that describes the specified element; null if not found.\r\n */\r\nfunction getChildSchema(parentSchema, candidateName) {\r\n\r\n    var elements = parentSchema.elements;\r\n    if (!elements) {\r\n        return null;\r\n    }\r\n\r\n    var i, len;\r\n    for (i = 0, len = elements.length; i < len; i++) {\r\n        var elementName = elements[i];\r\n        var multipleElements = false;\r\n        if (elementName.charAt(elementName.length - 1) === \"*\") {\r\n            multipleElements = true;\r\n            elementName = elementName.substr(0, elementName.length - 1);\r\n        }\r\n\r\n        if (candidateName === elementName) {\r\n            var propertyName = scriptCase(elementName);\r\n            return { isArray: multipleElements, propertyName: propertyName };\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Checks whether the specifies namespace URI is one of the known CSDL namespace URIs.\r\n * @param {String} nsURI - Namespace URI to check.\r\n * @returns {Boolean} true if nsURI is a known CSDL namespace; false otherwise.\r\n */\r\nfunction isEdmNamespace(nsURI) {\r\n\r\n    return nsURI === edmNs1;\r\n}\r\n\r\n/** Parses a CSDL document.\r\n * @param element - DOM element to parse.\r\n * @returns {Object} An object describing the parsed element.\r\n */\r\nfunction parseConceptualModelElement(element) {\r\n\r\n    var localName = xmlLocalName(element);\r\n    var nsURI = xmlNamespaceURI(element);\r\n    var elementSchema = schema.elements[localName];\r\n    if (!elementSchema) {\r\n        return null;\r\n    }\r\n\r\n    if (elementSchema.ns) {\r\n        if (nsURI !== elementSchema.ns) {\r\n            return null;\r\n        }\r\n    } else if (!isEdmNamespace(nsURI)) {\r\n        return null;\r\n    }\r\n\r\n    var item = {};\r\n    var attributes = elementSchema.attributes || [];\r\n    xmlAttributes(element, function (attribute) {\r\n\r\n        var localName = xmlLocalName(attribute);\r\n        var nsURI = xmlNamespaceURI(attribute);\r\n        var value = attribute.value;\r\n\r\n        // Don't do anything with xmlns attributes.\r\n        if (nsURI === xmlnsNS) {\r\n            return;\r\n        }\r\n\r\n        // Currently, only m: for metadata is supported as a prefix in the internal schema table,\r\n        // un-prefixed element names imply one a CSDL element.\r\n        var schemaName = null;\r\n        if (isEdmNamespace(nsURI) || nsURI === null) {\r\n            schemaName = \"\";\r\n        } else if (nsURI === odataMetaXmlNs) {\r\n            schemaName = \"m:\";\r\n        }\r\n\r\n        if (schemaName !== null) {\r\n            schemaName += localName;\r\n\r\n            if (contains(attributes, schemaName)) {\r\n                item[scriptCase(localName)] = value;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    xmlChildElements(element, function (child) {\r\n        var localName = xmlLocalName(child);\r\n        var childSchema = getChildSchema(elementSchema, localName);\r\n        if (childSchema) {\r\n            if (childSchema.isArray) {\r\n                var arr = item[childSchema.propertyName];\r\n                if (!arr) {\r\n                    arr = [];\r\n                    item[childSchema.propertyName] = arr;\r\n                }\r\n                arr.push(parseConceptualModelElement(child));\r\n            } else {\r\n                item[childSchema.propertyName] = parseConceptualModelElement(child);\r\n            }\r\n        } \r\n    });\r\n\r\n    if (elementSchema.text) {\r\n        item.text = xmlInnerText(element);\r\n    }\r\n\r\n    return item;\r\n}\r\n\r\n/** Parses a metadata document.\r\n * @param handler - This handler.\r\n * @param {String} text - Metadata text.\r\n * @returns An object representation of the conceptual model.\r\n */\r\nfunction metadataParser(handler, text) {\r\n\r\n    var doc = xmlParse(text);\r\n    var root = xmlFirstChildElement(doc);\r\n    return parseConceptualModelElement(root) || undefined;\r\n}\r\n\r\n\r\n\r\nexports.metadataHandler = odataHandler.handler(metadataParser, null, xmlMediaType, MAX_DATA_SERVICE_VERSION);\r\n\r\nexports.schema = schema;\r\nexports.scriptCase = scriptCase;\r\nexports.getChildSchema = getChildSchema;\r\nexports.parseConceptualModelElement = parseConceptualModelElement;\r\nexports.metadataParser = metadataParser;","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n/** @module odata/net */\r\n/*for browser*/\r\n\r\n\r\nvar utils    = require('./../utils.js');\r\n// Imports.\r\n\r\nvar defined = utils.defined;\r\nvar delay = utils.delay;\r\n\r\nvar ticks = 0;\r\n\r\n/* Checks whether the specified request can be satisfied with a JSONP request.\r\n * @param request - Request object to check.\r\n * @returns {Boolean} true if the request can be satisfied; false otherwise.\r\n\r\n * Requests that 'degrade' without changing their meaning by going through JSONP\r\n * are considered usable.\r\n *\r\n * We allow data to come in a different format, as the servers SHOULD honor the Accept\r\n * request but may in practice return content with a different MIME type.\r\n */\r\nfunction canUseJSONP(request) {\r\n    \r\n    return !(request.method && request.method !== \"GET\");\r\n\r\n\r\n}\r\n\r\n/** Creates an IFRAME tag for loading the JSONP script\r\n * @param {String} url - The source URL of the script\r\n * @returns {HTMLElement} The IFRAME tag\r\n */\r\nfunction createIFrame(url) {\r\n    var iframe = window.document.createElement(\"IFRAME\");\r\n    iframe.style.display = \"none\";\r\n\r\n    var attributeEncodedUrl = url.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\");\r\n    var html = \"<html><head><script type=\\\"text/javascript\\\" src=\\\"\" + attributeEncodedUrl + \"\\\"><\\/script><\\/head><body><\\/body><\\/html>\";\r\n\r\n    var body = window.document.getElementsByTagName(\"BODY\")[0];\r\n    body.appendChild(iframe);\r\n\r\n    writeHtmlToIFrame(iframe, html);\r\n    return iframe;\r\n}\r\n\r\n/** Creates a XmlHttpRequest object.\r\n * @returns {XmlHttpRequest} XmlHttpRequest object.\r\n */\r\nfunction createXmlHttpRequest() {\r\n    if (window.XMLHttpRequest) {\r\n        return new window.XMLHttpRequest();\r\n    }\r\n    var exception;\r\n    if (window.ActiveXObject) {\r\n        try {\r\n            return new window.ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\r\n        } catch (_) {\r\n            try {\r\n                return new window.ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\r\n            } catch (e) {\r\n                exception = e;\r\n            }\r\n        }\r\n    } else {\r\n        exception = { message: \"XMLHttpRequest not supported\" };\r\n    }\r\n    throw exception;\r\n}\r\n\r\n/** Checks whether the specified URL is an absolute URL.\r\n * @param {String} url - URL to check.\r\n * @returns {Boolean} true if the url is an absolute URL; false otherwise.\r\n*/\r\nfunction isAbsoluteUrl(url) {\r\n    return url.indexOf(\"http://\") === 0 ||\r\n        url.indexOf(\"https://\") === 0 ||\r\n        url.indexOf(\"file://\") === 0;\r\n}\r\n\r\n/** Checks whether the specified URL is local to the current context.\r\n * @param {String} url - URL to check.\r\n * @returns {Boolean} true if the url is a local URL; false otherwise.\r\n */\r\nfunction isLocalUrl(url) {\r\n\r\n    if (!isAbsoluteUrl(url)) {\r\n        return true;\r\n    }\r\n\r\n    // URL-embedded username and password will not be recognized as same-origin URLs.\r\n    var location = window.location;\r\n    var locationDomain = location.protocol + \"//\" + location.host + \"/\";\r\n    return (url.indexOf(locationDomain) === 0);\r\n}\r\n\r\n/** Removes a callback used for a JSONP request.\r\n * @param {String} name - Function name to remove.\r\n * @param {Number} tick - Tick count used on the callback.\r\n */\r\nfunction removeCallback(name, tick) {\r\n    try {\r\n        delete window[name];\r\n    } catch (err) {\r\n        window[name] = undefined;\r\n        if (tick === ticks - 1) {\r\n            ticks -= 1;\r\n        }\r\n    }\r\n}\r\n\r\n/** Removes an iframe.\r\n * @param {Object} iframe - The iframe to remove.\r\n * @returns {Object} Null value to be assigned to iframe reference.\r\n */\r\nfunction removeIFrame(iframe) {\r\n    if (iframe) {\r\n        writeHtmlToIFrame(iframe, \"\");\r\n        iframe.parentNode.removeChild(iframe);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Reads response headers into array.\r\n * @param {XMLHttpRequest} xhr - HTTP request with response available.\r\n * @param {Array} headers - Target array to fill with name/value pairs.\r\n */\r\nfunction readResponseHeaders(xhr, headers) {\r\n\r\n    var responseHeaders = xhr.getAllResponseHeaders().split(/\\r?\\n/);\r\n    var i, len;\r\n    for (i = 0, len = responseHeaders.length; i < len; i++) {\r\n        if (responseHeaders[i]) {\r\n            var header = responseHeaders[i].split(\": \");\r\n            headers[header[0]] = header[1];\r\n        }\r\n    }\r\n}\r\n\r\n/** Writes HTML to an IFRAME document.\r\n * @param {HTMLElement} iframe - The IFRAME element to write to.\r\n * @param {String} html - The HTML to write.\r\n */\r\nfunction writeHtmlToIFrame(iframe, html) {\r\n    var frameDocument = (iframe.contentWindow) ? iframe.contentWindow.document : iframe.contentDocument.document;\r\n    frameDocument.open();\r\n    frameDocument.write(html);\r\n    frameDocument.close();\r\n}\r\n\r\nexports.defaultHttpClient = {\r\n    callbackParameterName: \"$callback\",\r\n\r\n    formatQueryString: \"$format=json\",\r\n\r\n    enableJsonpCallback: false,\r\n\r\n    /** Performs a network request.\r\n     * @param {Object} request - Request description\r\n     * @param {Function} success - Success callback with the response object.\r\n     * @param {Function} error - Error callback with an error object.\r\n     * @returns {Object} Object with an 'abort' method for the operation.\r\n     */\r\n    request: function createRequest() {\r\n\r\n        var that = this;\r\n\r\n\r\n        return function(request, success, error) {\r\n\r\n        var result = {};\r\n        var xhr = null;\r\n        var done = false;\r\n        var iframe;\r\n\r\n        result.abort = function () {\r\n            iframe = removeIFrame(iframe);\r\n            if (done) {\r\n                return;\r\n            }\r\n\r\n            done = true;\r\n            if (xhr) {\r\n                xhr.abort();\r\n                xhr = null;\r\n            }\r\n\r\n            error({ message: \"Request aborted\" });\r\n        };\r\n\r\n        var handleTimeout = function () {\r\n            iframe = removeIFrame(iframe);\r\n            if (!done) {\r\n                done = true;\r\n                xhr = null;\r\n                error({ message: \"Request timed out\" });\r\n            }\r\n        };\r\n\r\n        var name;\r\n        var url = request.requestUri;\r\n        var enableJsonpCallback = defined(request.enableJsonpCallback , that.enableJsonpCallback);\r\n        var callbackParameterName = defined(request.callbackParameterName, that.callbackParameterName);\r\n        var formatQueryString = defined(request.formatQueryString, that.formatQueryString);\r\n        if (!enableJsonpCallback || isLocalUrl(url)) {\r\n\r\n            xhr = createXmlHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (done || xhr === null || xhr.readyState !== 4) {\r\n                    return;\r\n                }\r\n\r\n                // Workaround for XHR behavior on IE.\r\n                var statusText = xhr.statusText;\r\n                var statusCode = xhr.status;\r\n                if (statusCode === 1223) {\r\n                    statusCode = 204;\r\n                    statusText = \"No Content\";\r\n                }\r\n\r\n                var headers = [];\r\n                readResponseHeaders(xhr, headers);\r\n\r\n                var response = { requestUri: url, statusCode: statusCode, statusText: statusText, headers: headers, body: xhr.responseText };\r\n\r\n                done = true;\r\n                xhr = null;\r\n                if (statusCode >= 200 && statusCode <= 299) {\r\n                    success(response);\r\n                } else {\r\n                    error({ message: \"HTTP request failed\", request: request, response: response });\r\n                }\r\n            };\r\n\r\n            xhr.open(request.method || \"GET\", url, true, request.user, request.password);\r\n\r\n            // Set the name/value pairs.\r\n            if (request.headers) {\r\n                for (name in request.headers) {\r\n                    xhr.setRequestHeader(name, request.headers[name]);\r\n                }\r\n            }\r\n\r\n            // Set the timeout if available.\r\n            if (request.timeoutMS) {\r\n                xhr.timeout = request.timeoutMS;\r\n                xhr.ontimeout = handleTimeout;\r\n            }\r\n            \r\n            if(typeof request.body === 'undefined'){\r\n                xhr.send();\r\n            } else {\r\n                xhr.send(request.body);\r\n            }\r\n        } else {\r\n            if (!canUseJSONP(request)) {\r\n                throw { message: \"Request is not local and cannot be done through JSONP.\" };\r\n            }\r\n\r\n            var tick = ticks;\r\n            ticks += 1;\r\n            var tickText = tick.toString();\r\n            var succeeded = false;\r\n            var timeoutId;\r\n            name = \"handleJSONP_\" + tickText;\r\n            window[name] = function (data) {\r\n                iframe = removeIFrame(iframe);\r\n                if (!done) {\r\n                    succeeded = true;\r\n                    window.clearTimeout(timeoutId);\r\n                    removeCallback(name, tick);\r\n\r\n                    // Workaround for IE8 and IE10 below where trying to access data.constructor after the IFRAME has been removed\r\n                    // throws an \"unknown exception\"\r\n                    if (window.ActiveXObject) {\r\n                        data = window.JSON.parse(window.JSON.stringify(data));\r\n                    }\r\n\r\n\r\n                    var headers;\r\n                    if (!formatQueryString || formatQueryString == \"$format=json\") {\r\n                        headers = { \"Content-Type\": \"application/json;odata.metadata=minimal\", \"OData-Version\": \"4.0\" };\r\n                    } else {\r\n                        // the formatQueryString should be in the format of \"$format=xxx\", xxx should be one of the application/json;odata.metadata=minimal(none or full)\r\n                        // set the content-type with the string xxx which stars from index 8.\r\n                        headers = { \"Content-Type\": formatQueryString.substring(8), \"OData-Version\": \"4.0\" };\r\n                    }\r\n\r\n                    // Call the success callback in the context of the parent window, instead of the IFRAME\r\n                    delay(function () {\r\n                        removeIFrame(iframe);\r\n                        success({ body: data, statusCode: 200, headers: headers });\r\n                    });\r\n                }\r\n            };\r\n\r\n            // Default to two minutes before timing out, 1000 ms * 60 * 2 = 120000.\r\n            var timeoutMS = (request.timeoutMS) ? request.timeoutMS : 120000;\r\n            timeoutId = window.setTimeout(handleTimeout, timeoutMS);\r\n\r\n            var queryStringParams = callbackParameterName + \"=parent.\" + name;\r\n            if (formatQueryString) {\r\n                queryStringParams += \"&\" + formatQueryString;\r\n            }\r\n\r\n            var qIndex = url.indexOf(\"?\");\r\n            if (qIndex === -1) {\r\n                url = url + \"?\" + queryStringParams;\r\n            } else if (qIndex === url.length - 1) {\r\n                url = url + queryStringParams;\r\n            } else {\r\n                url = url + \"&\" + queryStringParams;\r\n            }\r\n\r\n            iframe = createIFrame(url);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    }()\r\n};\r\n\r\n\r\n\r\nexports.canUseJSONP = canUseJSONP;\r\nexports.isAbsoluteUrl = isAbsoluteUrl;\r\nexports.isLocalUrl = isLocalUrl;","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n /** @module odata/utils */\r\n\r\nvar utils    = require('./../utils.js');\r\n\r\n// Imports\r\nvar assigned = utils.assigned;\r\nvar contains = utils.contains;\r\nvar find = utils.find;\r\nvar isArray = utils.isArray;\r\nvar isDate = utils.isDate;\r\nvar isObject = utils.isObject;\r\nvar parseInt10 = utils.parseInt10;\r\n\r\n\r\n/** Gets the type name of a data item value that belongs to a feed, an entry, a complex type property, or a collection property\r\n * @param {string} value - Value of the data item from which the type name is going to be retrieved.\r\n * @param {object} [metadata] - Object containing metadata about the data tiem.\r\n * @returns {string} Data item type name; null if the type name cannot be found within the value or the metadata\r\n * This function will first try to get the type name from the data item's value itself if it is an object with a __metadata property; otherwise\r\n * it will try to recover it from the metadata.  If both attempts fail, it will return null.\r\n */\r\nvar dataItemTypeName = function (value, metadata) {\r\n    var valueTypeName = ((value && value.__metadata) || {}).type;\r\n    return valueTypeName || (metadata ? metadata.type : null);\r\n};\r\n\r\nvar EDM = \"Edm.\";\r\nvar EDM_BOOLEAN = EDM + \"Boolean\";\r\nvar EDM_BYTE = EDM + \"Byte\";\r\nvar EDM_SBYTE = EDM + \"SByte\";\r\nvar EDM_INT16 = EDM + \"Int16\";\r\nvar EDM_INT32 = EDM + \"Int32\";\r\nvar EDM_INT64 = EDM + \"Int64\";\r\nvar EDM_SINGLE = EDM + \"Single\";\r\nvar EDM_DOUBLE = EDM + \"Double\";\r\nvar EDM_DECIMAL = EDM + \"Decimal\";\r\nvar EDM_STRING = EDM + \"String\";\r\n\r\nvar EDM_BINARY = EDM + \"Binary\";\r\nvar EDM_DATE = EDM + \"Date\";\r\nvar EDM_DATETIMEOFFSET = EDM + \"DateTimeOffset\";\r\nvar EDM_DURATION = EDM + \"Duration\";\r\nvar EDM_GUID = EDM + \"Guid\";\r\nvar EDM_TIMEOFDAY = EDM + \"Time\";\r\n\r\nvar GEOGRAPHY = \"Geography\";\r\nvar EDM_GEOGRAPHY = EDM + GEOGRAPHY;\r\nvar EDM_GEOGRAPHY_POINT = EDM_GEOGRAPHY + \"Point\";\r\nvar EDM_GEOGRAPHY_LINESTRING = EDM_GEOGRAPHY + \"LineString\";\r\nvar EDM_GEOGRAPHY_POLYGON = EDM_GEOGRAPHY + \"Polygon\";\r\nvar EDM_GEOGRAPHY_COLLECTION = EDM_GEOGRAPHY + \"Collection\";\r\nvar EDM_GEOGRAPHY_MULTIPOLYGON = EDM_GEOGRAPHY + \"MultiPolygon\";\r\nvar EDM_GEOGRAPHY_MULTILINESTRING = EDM_GEOGRAPHY + \"MultiLineString\";\r\nvar EDM_GEOGRAPHY_MULTIPOINT = EDM_GEOGRAPHY + \"MultiPoint\";\r\n\r\nvar GEOGRAPHY_POINT = GEOGRAPHY + \"Point\";\r\nvar GEOGRAPHY_LINESTRING = GEOGRAPHY + \"LineString\";\r\nvar GEOGRAPHY_POLYGON = GEOGRAPHY + \"Polygon\";\r\nvar GEOGRAPHY_COLLECTION = GEOGRAPHY + \"Collection\";\r\nvar GEOGRAPHY_MULTIPOLYGON = GEOGRAPHY + \"MultiPolygon\";\r\nvar GEOGRAPHY_MULTILINESTRING = GEOGRAPHY + \"MultiLineString\";\r\nvar GEOGRAPHY_MULTIPOINT = GEOGRAPHY + \"MultiPoint\";\r\n\r\nvar GEOMETRY = \"Geometry\";\r\nvar EDM_GEOMETRY = EDM + GEOMETRY;\r\nvar EDM_GEOMETRY_POINT = EDM_GEOMETRY + \"Point\";\r\nvar EDM_GEOMETRY_LINESTRING = EDM_GEOMETRY + \"LineString\";\r\nvar EDM_GEOMETRY_POLYGON = EDM_GEOMETRY + \"Polygon\";\r\nvar EDM_GEOMETRY_COLLECTION = EDM_GEOMETRY + \"Collection\";\r\nvar EDM_GEOMETRY_MULTIPOLYGON = EDM_GEOMETRY + \"MultiPolygon\";\r\nvar EDM_GEOMETRY_MULTILINESTRING = EDM_GEOMETRY + \"MultiLineString\";\r\nvar EDM_GEOMETRY_MULTIPOINT = EDM_GEOMETRY + \"MultiPoint\";\r\n\r\nvar GEOMETRY_POINT = GEOMETRY + \"Point\";\r\nvar GEOMETRY_LINESTRING = GEOMETRY + \"LineString\";\r\nvar GEOMETRY_POLYGON = GEOMETRY + \"Polygon\";\r\nvar GEOMETRY_COLLECTION = GEOMETRY + \"Collection\";\r\nvar GEOMETRY_MULTIPOLYGON = GEOMETRY + \"MultiPolygon\";\r\nvar GEOMETRY_MULTILINESTRING = GEOMETRY + \"MultiLineString\";\r\nvar GEOMETRY_MULTIPOINT = GEOMETRY + \"MultiPoint\";\r\n\r\nvar GEOJSON_POINT = \"Point\";\r\nvar GEOJSON_LINESTRING = \"LineString\";\r\nvar GEOJSON_POLYGON = \"Polygon\";\r\nvar GEOJSON_MULTIPOINT = \"MultiPoint\";\r\nvar GEOJSON_MULTILINESTRING = \"MultiLineString\";\r\nvar GEOJSON_MULTIPOLYGON = \"MultiPolygon\";\r\nvar GEOJSON_GEOMETRYCOLLECTION = \"GeometryCollection\";\r\n\r\nvar primitiveEdmTypes = [\r\n    EDM_STRING,\r\n    EDM_INT32,\r\n    EDM_INT64,\r\n    EDM_BOOLEAN,\r\n    EDM_DOUBLE,\r\n    EDM_SINGLE,\r\n    EDM_DATE,\r\n    EDM_DATETIMEOFFSET,\r\n    EDM_DURATION,\r\n    EDM_TIMEOFDAY,\r\n    EDM_DECIMAL,\r\n    EDM_GUID,\r\n    EDM_BYTE,\r\n    EDM_INT16,\r\n    EDM_SBYTE,\r\n    EDM_BINARY\r\n];\r\n\r\nvar geometryEdmTypes = [\r\n    EDM_GEOMETRY,\r\n    EDM_GEOMETRY_POINT,\r\n    EDM_GEOMETRY_LINESTRING,\r\n    EDM_GEOMETRY_POLYGON,\r\n    EDM_GEOMETRY_COLLECTION,\r\n    EDM_GEOMETRY_MULTIPOLYGON,\r\n    EDM_GEOMETRY_MULTILINESTRING,\r\n    EDM_GEOMETRY_MULTIPOINT\r\n];\r\n\r\nvar geometryTypes = [\r\n    GEOMETRY,\r\n    GEOMETRY_POINT,\r\n    GEOMETRY_LINESTRING,\r\n    GEOMETRY_POLYGON,\r\n    GEOMETRY_COLLECTION,\r\n    GEOMETRY_MULTIPOLYGON,\r\n    GEOMETRY_MULTILINESTRING,\r\n    GEOMETRY_MULTIPOINT\r\n];\r\n\r\nvar geographyEdmTypes = [\r\n    EDM_GEOGRAPHY,\r\n    EDM_GEOGRAPHY_POINT,\r\n    EDM_GEOGRAPHY_LINESTRING,\r\n    EDM_GEOGRAPHY_POLYGON,\r\n    EDM_GEOGRAPHY_COLLECTION,\r\n    EDM_GEOGRAPHY_MULTIPOLYGON,\r\n    EDM_GEOGRAPHY_MULTILINESTRING,\r\n    EDM_GEOGRAPHY_MULTIPOINT\r\n];\r\n\r\nvar geographyTypes = [\r\n    GEOGRAPHY,\r\n    GEOGRAPHY_POINT,\r\n    GEOGRAPHY_LINESTRING,\r\n    GEOGRAPHY_POLYGON,\r\n    GEOGRAPHY_COLLECTION,\r\n    GEOGRAPHY_MULTIPOLYGON,\r\n    GEOGRAPHY_MULTILINESTRING,\r\n    GEOGRAPHY_MULTIPOINT\r\n];\r\n\r\n/** Invokes a function once per schema in metadata.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @param {Function} callback - Callback function to invoke once per schema.\r\n * @returns The first truthy value to be returned from the callback; null or the last falsy value otherwise.\r\n */\r\nfunction forEachSchema(metadata, callback) {\r\n    \r\n\r\n    if (!metadata) {\r\n        return null;\r\n    }\r\n\r\n    if (isArray(metadata)) {\r\n        var i, len, result;\r\n        for (i = 0, len = metadata.length; i < len; i++) {\r\n            result = forEachSchema(metadata[i], callback);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    } else {\r\n        if (metadata.dataServices) {\r\n            return forEachSchema(metadata.dataServices.schema, callback);\r\n        }\r\n\r\n        return callback(metadata);\r\n    }\r\n}\r\n\r\n/** Formats a millisecond and a nanosecond value into a single string.\r\n * @param {Number} ms - Number of milliseconds to format.\r\n * @param {Number} ns - Number of nanoseconds to format.\r\n * @returns {String} Formatted text.\r\n * If the value is already as string it's returned as-is.\r\n */\r\nfunction formatMilliseconds(ms, ns) {\r\n\r\n    // Avoid generating milliseconds if not necessary.\r\n    if (ms === 0) {\r\n        ms = \"\";\r\n    } else {\r\n        ms = \".\" + formatNumberWidth(ms.toString(), 3);\r\n    }\r\n    if (ns > 0) {\r\n        if (ms === \"\") {\r\n            ms = \".000\";\r\n        }\r\n        ms += formatNumberWidth(ns.toString(), 4);\r\n    }\r\n    return ms;\r\n}\r\n\r\nfunction formatDateTimeOffsetJSON(value) {\r\n    return \"\\/Date(\" + value.getTime() + \")\\/\";\r\n}\r\n\r\n/** Formats a DateTime or DateTimeOffset value a string.\r\n * @param {Date} value - Value to format\r\n * @returns {String} Formatted text.\r\n * If the value is already as string it's returned as-is\r\n´*/\r\nfunction formatDateTimeOffset(value) {\r\n\r\n    if (typeof value === \"string\") {\r\n        return value;\r\n    }\r\n\r\n    var hasOffset = isDateTimeOffset(value);\r\n    var offset = getCanonicalTimezone(value.__offset);\r\n    if (hasOffset && offset !== \"Z\") {\r\n        // We're about to change the value, so make a copy.\r\n        value = new Date(value.valueOf());\r\n\r\n        var timezone = parseTimezone(offset);\r\n        var hours = value.getUTCHours() + (timezone.d * timezone.h);\r\n        var minutes = value.getUTCMinutes() + (timezone.d * timezone.m);\r\n\r\n        value.setUTCHours(hours, minutes);\r\n    } else if (!hasOffset) {\r\n        // Don't suffix a 'Z' for Edm.DateTime values.\r\n        offset = \"\";\r\n    }\r\n\r\n    var year = value.getUTCFullYear();\r\n    var month = value.getUTCMonth() + 1;\r\n    var sign = \"\";\r\n    if (year <= 0) {\r\n        year = -(year - 1);\r\n        sign = \"-\";\r\n    }\r\n\r\n    var ms = formatMilliseconds(value.getUTCMilliseconds(), value.__ns);\r\n\r\n    return sign +\r\n        formatNumberWidth(year, 4) + \"-\" +\r\n        formatNumberWidth(month, 2) + \"-\" +\r\n        formatNumberWidth(value.getUTCDate(), 2) + \"T\" +\r\n        formatNumberWidth(value.getUTCHours(), 2) + \":\" +\r\n        formatNumberWidth(value.getUTCMinutes(), 2) + \":\" +\r\n        formatNumberWidth(value.getUTCSeconds(), 2) +\r\n        ms + offset;\r\n}\r\n\r\n/** Converts a duration to a string in xsd:duration format.\r\n * @param {Object} value - Object with ms and __edmType properties.\r\n * @returns {String} String representation of the time object in xsd:duration format.\r\n */\r\nfunction formatDuration(value) {\r\n\r\n    var ms = value.ms;\r\n\r\n    var sign = \"\";\r\n    if (ms < 0) {\r\n        sign = \"-\";\r\n        ms = -ms;\r\n    }\r\n\r\n    var days = Math.floor(ms / 86400000);\r\n    ms -= 86400000 * days;\r\n    var hours = Math.floor(ms / 3600000);\r\n    ms -= 3600000 * hours;\r\n    var minutes = Math.floor(ms / 60000);\r\n    ms -= 60000 * minutes;\r\n    var seconds = Math.floor(ms / 1000);\r\n    ms -= seconds * 1000;\r\n\r\n    return sign + \"P\" +\r\n           formatNumberWidth(days, 2) + \"DT\" +\r\n           formatNumberWidth(hours, 2) + \"H\" +\r\n           formatNumberWidth(minutes, 2) + \"M\" +\r\n           formatNumberWidth(seconds, 2) +\r\n           formatMilliseconds(ms, value.ns) + \"S\";\r\n}\r\n\r\n/** Formats the specified value to the given width.\r\n * @param {Number} value - Number to format (non-negative).\r\n * @param {Number} width - Minimum width for number.\r\n * @param {Boolean} append - Flag indicating if the value is padded at the beginning (false) or at the end (true).\r\n * @returns {String} Text representation.\r\n */\r\nfunction formatNumberWidth(value, width, append) {\r\n    var result = value.toString(10);\r\n    while (result.length < width) {\r\n        if (append) {\r\n            result += \"0\";\r\n        } else {\r\n            result = \"0\" + result;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Gets the canonical timezone representation.\r\n * @param {String} timezone - Timezone representation.\r\n * @returns {String} An 'Z' string if the timezone is absent or 0; the timezone otherwise.\r\n */\r\nfunction getCanonicalTimezone(timezone) {\r\n\r\n    return (!timezone || timezone === \"Z\" || timezone === \"+00:00\" || timezone === \"-00:00\") ? \"Z\" : timezone;\r\n}\r\n\r\n/** Gets the type of a collection type name.\r\n * @param {String} typeName - Type name of the collection.\r\n * @returns {String} Type of the collection; null if the type name is not a collection type.\r\n */\r\nfunction getCollectionType(typeName) {\r\n\r\n    if (typeof typeName === \"string\") {\r\n        var end = typeName.indexOf(\")\", 10);\r\n        if (typeName.indexOf(\"Collection(\") === 0 && end > 0) {\r\n            return typeName.substring(11, end);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Sends a request containing OData payload to a server.\r\n* @param request - Object that represents the request to be sent..\r\n* @param success - Callback for a successful read operation.\r\n* @param error - Callback for handling errors.\r\n* @param handler - Handler for data serialization.\r\n* @param httpClient - HTTP client layer.\r\n* @param context - Context used for processing the request\r\n*/\r\nfunction invokeRequest(request, success, error, handler, httpClient, context) {\r\n\r\n    return httpClient.request(request, function (response) {\r\n        try {\r\n            if (response.headers) {\r\n                normalizeHeaders(response.headers);\r\n            }\r\n\r\n            if (response.data === undefined && response.statusCode !== 204) {\r\n                handler.read(response, context);\r\n            }\r\n        } catch (err) {\r\n            if (err.request === undefined) {\r\n                err.request = request;\r\n            }\r\n            if (err.response === undefined) {\r\n                err.response = response;\r\n            }\r\n            error(err);\r\n            return;\r\n        }\r\n        // errors in success handler for sync requests result in error handler calls. So here we fix this. \r\n        try {\r\n            success(response.data, response);\r\n        } catch (err) {\r\n            err.bIsSuccessHandlerError = true;\r\n            throw err;\r\n        }\r\n    }, error);\r\n}\r\n\r\n/** Tests whether a value is a batch object in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a batch object; false otherwise.\r\n */\r\nfunction isBatch(value) {\r\n\r\n    return isComplex(value) && isArray(value.__batchRequests);\r\n}\r\n\r\n// Regular expression used for testing and parsing for a collection type.\r\nvar collectionTypeRE = /Collection\\((.*)\\)/;\r\n\r\n/** Tests whether a value is a collection value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @param {String} typeName - Type name of the value. This is used to disambiguate from a collection property value.\r\n * @returns {Boolean} True is the value is a feed value; false otherwise.\r\n */\r\nfunction isCollection(value, typeName) {\r\n\r\n    var colData = value && value.results || value;\r\n    return !!colData &&\r\n        (isCollectionType(typeName)) ||\r\n        (!typeName && isArray(colData) && !isComplex(colData[0]));\r\n}\r\n\r\n/** Checks whether the specified type name is a collection type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is the name of a collection type; false otherwise.\r\n */\r\nfunction isCollectionType(typeName) {\r\n    return collectionTypeRE.test(typeName);\r\n}\r\n\r\n/** Tests whether a value is a complex type value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a complex type value; false otherwise.\r\n */\r\nfunction isComplex(value) {\r\n\r\n    return !!value &&\r\n        isObject(value) &&\r\n        !isArray(value) &&\r\n        !isDate(value);\r\n}\r\n\r\n/** Checks whether a Date object is DateTimeOffset value\r\n * @param {Date} value - Value to check\r\n * @returns {Boolean} true if the value is a DateTimeOffset, false otherwise.\r\n */\r\nfunction isDateTimeOffset(value) {\r\n    return (value.__edmType === \"Edm.DateTimeOffset\" || (!value.__edmType && value.__offset));\r\n}\r\n\r\n/** Tests whether a value is a deferred navigation property in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a deferred navigation property; false otherwise.\r\n */\r\nfunction isDeferred(value) {\r\n\r\n    if (!value && !isComplex(value)) {\r\n        return false;\r\n    }\r\n    var metadata = value.__metadata || {};\r\n    var deferred = value.__deferred || {};\r\n    return !metadata.type && !!deferred.uri;\r\n}\r\n\r\n/** Tests whether a value is an entry object in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is an entry object; false otherwise.\r\n */\r\nfunction isEntry(value) {\r\n\r\n    return isComplex(value) && value.__metadata && \"uri\" in value.__metadata;\r\n}\r\n\r\n/** Tests whether a value is a feed value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @param {String} typeName - Type name of the value. This is used to disambiguate from a collection property value.\r\n * @returns {Boolean} True is the value is a feed value; false otherwise.\r\n */\r\nfunction isFeed(value, typeName) {\r\n\r\n    var feedData = value && value.results || value;\r\n    return isArray(feedData) && (\r\n        (!isCollectionType(typeName)) &&\r\n        (isComplex(feedData[0]))\r\n    );\r\n}\r\n\r\n/** Checks whether the specified type name is a geography EDM type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is a geography EDM type; false otherwise.\r\n */\r\nfunction isGeographyEdmType(typeName) {\r\n    //check with edm\r\n    return contains(geographyEdmTypes, typeName) ||\r\n        (typeName.indexOf('.') === -1 && contains(geographyTypes, typeName));\r\n        \r\n}\r\n\r\n/** Checks whether the specified type name is a geometry EDM type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is a geometry EDM type; false otherwise.\r\n */\r\nfunction isGeometryEdmType(typeName) {\r\n    return contains(geometryEdmTypes, typeName) ||\r\n        (typeName.indexOf('.') === -1 && contains(geometryTypes, typeName));\r\n}\r\n\r\n\r\n\r\n/** Tests whether a value is a named stream value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a named stream; false otherwise.\r\n */\r\nfunction isNamedStream(value) {\r\n\r\n    if (!value && !isComplex(value)) {\r\n        return false;\r\n    }\r\n    var metadata = value.__metadata;\r\n    var mediaResource = value.__mediaresource;\r\n    return !metadata && !!mediaResource && !!mediaResource.media_src;\r\n}\r\n\r\n/** Tests whether a value is a primitive type value in the library's internal representation.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is a primitive type value.\r\n * Date objects are considered primitive types by the library.\r\n */\r\nfunction isPrimitive(value) {\r\n\r\n    return isDate(value) ||\r\n        typeof value === \"string\" ||\r\n        typeof value === \"number\" ||\r\n        typeof value === \"boolean\";\r\n}\r\n\r\n/** Checks whether the specified type name is a primitive EDM type.\r\n * @param {String} typeName - Name of type to check.\r\n * @returns {Boolean} True if the type is a primitive EDM type; false otherwise.\r\n */\r\nfunction isPrimitiveEdmType(typeName) {\r\n\r\n    return contains(primitiveEdmTypes, typeName);\r\n}\r\n\r\n/** Gets the kind of a navigation property value.\r\n * @param value - Value of the navigation property.\r\n * @param {Object} [propertyModel] - Object that describes the navigation property in an OData conceptual schema.\r\n * @returns {String} String value describing the kind of the navigation property; null if the kind cannot be determined.\r\n */\r\nfunction navigationPropertyKind(value, propertyModel) {\r\n\r\n    if (isDeferred(value)) {\r\n        return \"deferred\";\r\n    }\r\n    if (isEntry(value)) {\r\n        return \"entry\";\r\n    }\r\n    if (isFeed(value)) {\r\n        return \"feed\";\r\n    }\r\n    if (propertyModel && propertyModel.relationship) {\r\n        if (value === null || value === undefined || !isFeed(value)) {\r\n            return \"entry\";\r\n        }\r\n        return \"feed\";\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Looks up a property by name.\r\n * @param {Array} properties - Array of property objects as per EDM metadata (may be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The property object; null if not found.\r\n */\r\nfunction lookupProperty(properties, name) {\r\n\r\n    return find(properties, function (property) {\r\n        return property.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up a type object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @param {String} kind - Kind of object to look for as per EDM metadata.\r\n * @returns An type description if the name is found; null otherwise\r\n */\r\nfunction lookupInMetadata(name, metadata, kind) {\r\n\r\n    return (name) ? forEachSchema(metadata, function (schema) {\r\n        return lookupInSchema(name, schema, kind);\r\n    }) : null;\r\n}\r\n\r\n/** Looks up a entity set by name.\r\n * @param {Array} entitySets - Array of entity set objects as per EDM metadata( may be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The entity set object; null if not found.\r\n */\r\nfunction lookupEntitySet(entitySets, name) {\r\n\r\n    return find(entitySets, function (entitySet) {\r\n        return entitySet.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up a entity set by name.\r\n * @param {Array} singletons - Array of entity set objects as per EDM metadata (may be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The entity set object; null if not found.\r\n */\r\nfunction lookupSingleton(singletons, name) {\r\n\r\n    return find(singletons, function (singleton) {\r\n        return singleton.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up a complex type object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns A complex type description if the name is found; null otherwise.\r\n */\r\nfunction lookupComplexType(name, metadata) {\r\n\r\n    return lookupInMetadata(name, metadata, \"complexType\");\r\n}\r\n\r\n/** Looks up an entity type object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns An entity type description if the name is found; null otherwise.\r\n */\r\nfunction lookupEntityType(name, metadata) {\r\n\r\n    return lookupInMetadata(name, metadata, \"entityType\");\r\n}\r\n\r\n\r\n/** Looks up an\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns An entity container description if the name is found; null otherwise.\r\n */\r\nfunction lookupDefaultEntityContainer(metadata) {\r\n\r\n    return forEachSchema(metadata, function (schema) {\r\n        if (isObject(schema.entityContainer)) { \r\n            return schema.entityContainer;\r\n        }\r\n    });\r\n}\r\n\r\n/** Looks up an entity container object by name.\r\n * @param {String} name - Name, possibly null or empty.\r\n * @param metadata - Metadata store; one of edmx, schema, or an array of any of them.\r\n * @returns An entity container description if the name is found; null otherwise.\r\n */\r\nfunction lookupEntityContainer(name, metadata) {\r\n\r\n    return lookupInMetadata(name, metadata, \"entityContainer\");\r\n}\r\n\r\n/** Looks up a function import by name.\r\n * @param {Array} functionImports - Array of function import objects as per EDM metadata (May be null)\r\n * @param {String} name - Name to look for.\r\n * @returns {Object} The entity set object; null if not found.\r\n */\r\nfunction lookupFunctionImport(functionImports, name) {\r\n    return find(functionImports, function (functionImport) {\r\n        return functionImport.name === name;\r\n    });\r\n}\r\n\r\n/** Looks up the target entity type for a navigation property.\r\n * @param {Object} navigationProperty - \r\n * @param {Object} metadata - \r\n * @returns {String} The entity type name for the specified property, null if not found.\r\n */\r\nfunction lookupNavigationPropertyType(navigationProperty, metadata) {\r\n\r\n    var result = null;\r\n    if (navigationProperty) {\r\n        var rel = navigationProperty.relationship;\r\n        var association = forEachSchema(metadata, function (schema) {\r\n            // The name should be the namespace qualified name in 'ns'.'type' format.\r\n            var nameOnly = removeNamespace(schema.namespace, rel);\r\n            var associations = schema.association;\r\n            if (nameOnly && associations) {\r\n                var i, len;\r\n                for (i = 0, len = associations.length; i < len; i++) {\r\n                    if (associations[i].name === nameOnly) {\r\n                        return associations[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n\r\n        if (association) {\r\n            var end = association.end[0];\r\n            if (end.role !== navigationProperty.toRole) {\r\n                end = association.end[1];\r\n                // For metadata to be valid, end.role === navigationProperty.toRole now.\r\n            }\r\n            result = end.type;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Looks up the target entityset name for a navigation property.\r\n * @param {Object} navigationProperty - \r\n * @param {Object} sourceEntitySetName -\r\n * @param {Object} metadata -\r\n * metadata\r\n * @returns {String} The entityset name for the specified property, null if not found.\r\n */\r\nfunction lookupNavigationPropertyEntitySet(navigationProperty, sourceEntitySetName, metadata) {\r\n\r\n    if (navigationProperty) {\r\n        var rel = navigationProperty.relationship;\r\n        var associationSet = forEachSchema(metadata, function (schema) {\r\n            var containers = schema.entityContainer;\r\n            for (var i = 0; i < containers.length; i++) {\r\n                var associationSets = containers[i].associationSet;\r\n                if (associationSets) {\r\n                    for (var j = 0; j < associationSets.length; j++) {\r\n                        if (associationSets[j].association == rel) {\r\n                            return associationSets[j];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n        if (associationSet && associationSet.end[0] && associationSet.end[1]) {\r\n            return (associationSet.end[0].entitySet == sourceEntitySetName) ? associationSet.end[1].entitySet : associationSet.end[0].entitySet;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Gets the entitySet info, container name and functionImports for an entitySet\r\n * @param {Object} entitySetName -\r\n * @param {Object} metadata - \r\n * @returns {Object} The info about the entitySet.\r\n */\r\nfunction getEntitySetInfo(entitySetName, metadata) {\r\n\r\n    var info = forEachSchema(metadata, function (schema) {\r\n        var container = schema.entityContainer;\r\n        var entitySets = container.entitySet;\r\n        if (entitySets) {\r\n            for (var j = 0; j < entitySets.length; j++) {\r\n                if (entitySets[j].name == entitySetName) {\r\n                    return { entitySet: entitySets[j], containerName: container.name, functionImport: container.functionImport };\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    });\r\n\r\n    return info;\r\n}\r\n\r\n/** Given an expected namespace prefix, removes it from a full name.\r\n * @param {String} ns - Expected namespace.\r\n * @param {String} fullName - Full name in 'ns'.'name' form.\r\n * @returns {String} The local name, null if it isn't found in the expected namespace.\r\n */\r\nfunction removeNamespace(ns, fullName) {\r\n\r\n    if (fullName.indexOf(ns) === 0 && fullName.charAt(ns.length) === \".\") {\r\n        return fullName.substr(ns.length + 1);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Looks up a schema object by name.\r\n * @param {String} name - Name (assigned).\r\n * @param schema - Schema object as per EDM metadata.\r\n * @param {String} kind - Kind of object to look for as per EDM metadata.\r\n * @returns An entity type description if the name is found; null otherwise.\r\n */\r\nfunction lookupInSchema(name, schema, kind) {\r\n\r\n    if (name && schema) {\r\n        // The name should be the namespace qualified name in 'ns'.'type' format.\r\n        var nameOnly = removeNamespace(schema.namespace, name);\r\n        if (nameOnly) {\r\n            return find(schema[kind], function (item) {\r\n                return item.name === nameOnly;\r\n            });\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Compares to version strings and returns the higher one.\r\n * @param {String} left - Version string in the form \"major.minor.rev\"\r\n * @param {String} right - Version string in the form \"major.minor.rev\"\r\n * @returns {String} The higher version string.\r\n */\r\nfunction maxVersion(left, right) {\r\n\r\n    if (left === right) {\r\n        return left;\r\n    }\r\n\r\n    var leftParts = left.split(\".\");\r\n    var rightParts = right.split(\".\");\r\n\r\n    var len = (leftParts.length >= rightParts.length) ?\r\n        leftParts.length :\r\n        rightParts.length;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n        var leftVersion = leftParts[i] && parseInt10(leftParts[i]);\r\n        var rightVersion = rightParts[i] && parseInt10(rightParts[i]);\r\n        if (leftVersion > rightVersion) {\r\n            return left;\r\n        }\r\n        if (leftVersion < rightVersion) {\r\n            return right;\r\n        }\r\n    }\r\n}\r\n\r\nvar normalHeaders = {\r\n    // Headers shared by request and response\r\n    \"content-type\": \"Content-Type\",\r\n    \"content-encoding\": \"Content-Encoding\",\r\n    \"content-length\": \"Content-Length\",\r\n    \"odata-version\": \"OData-Version\",\r\n    \r\n    // Headers used by request\r\n    \"accept\": \"Accept\",\r\n    \"accept-charset\": \"Accept-Charset\",\r\n    \"if-match\": \"If-Match\",\r\n    \"if-none-match\": \"If-None-Match\",\r\n    \"odata-isolation\": \"OData-Isolation\",\r\n    \"odata-maxversion\": \"OData-MaxVersion\",\r\n    \"prefer\": \"Prefer\",\r\n    \"content-id\": \"Content-ID\",\r\n    \"content-transfer-encoding\": \"Content-Transfer-Encoding\",\r\n    \r\n    // Headers used by response\r\n    \"etag\": \"ETag\",\r\n    \"location\": \"Location\",\r\n    \"odata-entityid\": \"OData-EntityId\",\r\n    \"preference-applied\": \"Preference-Applied\",\r\n    \"retry-after\": \"Retry-After\"\r\n};\r\n\r\n/** Normalizes headers so they can be found with consistent casing.\r\n * @param {Object} headers - Dictionary of name/value pairs.\r\n */\r\nfunction normalizeHeaders(headers) {\r\n\r\n    for (var name in headers) {\r\n        var lowerName = name.toLowerCase();\r\n        var normalName = normalHeaders[lowerName];\r\n        if (normalName && name !== normalName) {\r\n            var val = headers[name];\r\n            delete headers[name];\r\n            headers[normalName] = val;\r\n        }\r\n    }\r\n}\r\n\r\n/** Parses a string into a boolean value.\r\n * @param propertyValue - Value to parse.\r\n * @returns {Boolean} true if the property value is 'true'; false otherwise.\r\n */\r\nfunction parseBool(propertyValue) {\r\n\r\n    if (typeof propertyValue === \"boolean\") {\r\n        return propertyValue;\r\n    }\r\n\r\n    return typeof propertyValue === \"string\" && propertyValue.toLowerCase() === \"true\";\r\n}\r\n\r\n\r\n// The captured indices for this expression are:\r\n// 0     - complete input\r\n// 1,2,3 - year with optional minus sign, month, day\r\n// 4,5,6 - hours, minutes, seconds\r\n// 7     - optional milliseconds\r\n// 8     - everything else (presumably offset information)\r\nvar parseDateTimeRE = /^(-?\\d{4,})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})(?::(\\d{2}))?(?:\\.(\\d+))?(.*)$/;\r\n\r\n/** Parses a string into a DateTime value.\r\n * @param {String} value - Value to parse.\r\n * @param {Boolean} withOffset - Whether offset is expected.\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {Date} The parsed value.\r\n */\r\nfunction parseDateTimeMaybeOffset(value, withOffset, nullOnError) {\r\n\r\n    // We cannot parse this in cases of failure to match or if offset information is specified.\r\n    var parts = parseDateTimeRE.exec(value);\r\n    var offset = (parts) ? getCanonicalTimezone(parts[8]) : null;\r\n\r\n    if (!parts || (!withOffset && offset !== \"Z\")) {\r\n        if (nullOnError) {\r\n            return null;\r\n        }\r\n        throw { message: \"Invalid date/time value\" };\r\n    }\r\n\r\n    // Pre-parse years, account for year '0' being invalid in dateTime.\r\n    var year = parseInt10(parts[1]);\r\n    if (year <= 0) {\r\n        year++;\r\n    }\r\n\r\n    // Pre-parse optional milliseconds, fill in default. Fail if value is too precise.\r\n    var ms = parts[7];\r\n    var ns = 0;\r\n    if (!ms) {\r\n        ms = 0;\r\n    } else {\r\n        if (ms.length > 7) {\r\n            if (nullOnError) {\r\n                return null;\r\n            }\r\n            throw { message: \"Cannot parse date/time value to given precision.\" };\r\n        }\r\n\r\n        ns = formatNumberWidth(ms.substring(3), 4, true);\r\n        ms = formatNumberWidth(ms.substring(0, 3), 3, true);\r\n\r\n        ms = parseInt10(ms);\r\n        ns = parseInt10(ns);\r\n    }\r\n\r\n    // Pre-parse other time components and offset them if necessary.\r\n    var hours = parseInt10(parts[4]);\r\n    var minutes = parseInt10(parts[5]);\r\n    var seconds = parseInt10(parts[6]) || 0;\r\n    if (offset !== \"Z\") {\r\n        // The offset is reversed to get back the UTC date, which is\r\n        // what the API will eventually have.\r\n        var timezone = parseTimezone(offset);\r\n        var direction = -(timezone.d);\r\n        hours += timezone.h * direction;\r\n        minutes += timezone.m * direction;\r\n    }\r\n\r\n    // Set the date and time separately with setFullYear, so years 0-99 aren't biased like in Date.UTC.\r\n    var result = new Date();\r\n    result.setUTCFullYear(\r\n        year,                       // Year.\r\n        parseInt10(parts[2]) - 1,   // Month (zero-based for Date.UTC and setFullYear).\r\n        parseInt10(parts[3])        // Date.\r\n        );\r\n    result.setUTCHours(hours, minutes, seconds, ms);\r\n\r\n    if (isNaN(result.valueOf())) {\r\n        if (nullOnError) {\r\n            return null;\r\n        }\r\n        throw { message: \"Invalid date/time value\" };\r\n    }\r\n\r\n    if (withOffset) {\r\n        result.__edmType = \"Edm.DateTimeOffset\";\r\n        result.__offset = offset;\r\n    }\r\n\r\n    if (ns) {\r\n        result.__ns = ns;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Parses a string into a Date object.\r\n * @param {String} propertyValue - Value to parse.\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {Date} The parsed with year, month, day set, time values are set to 0\r\n */\r\nfunction parseDate(propertyValue, nullOnError) {\r\n    var parts = propertyValue.split('-');\r\n\r\n    if (parts.length != 3 && nullOnError) {\r\n        return null;\r\n    }\r\n    return new Date(\r\n        parseInt10(parts[0]),       // Year.\r\n        parseInt10(parts[1]) - 1,   // Month (zero-based for Date.UTC and setFullYear).\r\n        parseInt10(parts[2],\r\n        0,0,0,0)        // Date.\r\n        );\r\n\r\n}\r\n\r\nvar parseTimeOfDayRE = /^(\\d+):(\\d+)(:(\\d+)(.(\\d+))?)?$/;\r\n\r\n/**Parses a time into a Date object.\r\n * @param propertyValue\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {{h: Number, m: Number, s: Number, ms: Number}}\r\n */\r\nfunction parseTimeOfDay(propertyValue, nullOnError) {\r\n    var parts = parseTimeOfDayRE.exec(propertyValue);\r\n\r\n\r\n    return {\r\n        'h' :parseInt10(parts[1]),\r\n        'm' :parseInt10(parts[2]),\r\n        's' :parseInt10(parts[4]),\r\n        'ms' :parseInt10(parts[6])\r\n     };\r\n}\r\n\r\n/** Parses a string into a DateTimeOffset value.\r\n * @param {String} propertyValue - Value to parse.\r\n * @param {Boolean} nullOnError - return null instead of throwing an exception\r\n * @returns {Date} The parsed value.\r\n * The resulting object is annotated with an __edmType property and\r\n * an __offset property reflecting the original intended offset of\r\n * the value. The time is adjusted for UTC time, as the current\r\n * timezone-aware Date APIs will only work with the local timezone.\r\n */\r\nfunction parseDateTimeOffset(propertyValue, nullOnError) {\r\n    \r\n\r\n    return parseDateTimeMaybeOffset(propertyValue, true, nullOnError);\r\n}\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, miliseconds\r\n\r\nvar parseTimeRE = /^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\nfunction isEdmDurationValue(value) {\r\n    parseTimeRE.test(value);\r\n}\r\n\r\n/** Parses a string in xsd:duration format.\r\n * @param {String} duration - Duration value.\r\n\r\n * This method will throw an exception if the input string has a year or a month component.\r\n\r\n * @returns {Object} Object representing the time\r\n */\r\nfunction parseDuration(duration) {\r\n\r\n    var parts = parseTimeRE.exec(duration);\r\n\r\n    if (parts === null) {\r\n        throw { message: \"Invalid duration value.\" };\r\n    }\r\n\r\n    var years = parts[2] || \"0\";\r\n    var months = parts[3] || \"0\";\r\n    var days = parseInt10(parts[4] || 0);\r\n    var hours = parseInt10(parts[5] || 0);\r\n    var minutes = parseInt10(parts[6] || 0);\r\n    var seconds = parseFloat(parts[7] || 0);\r\n\r\n    if (years !== \"0\" || months !== \"0\") {\r\n        throw { message: \"Unsupported duration value.\" };\r\n    }\r\n\r\n    var ms = parts[8];\r\n    var ns = 0;\r\n    if (!ms) {\r\n        ms = 0;\r\n    } else {\r\n        if (ms.length > 7) {\r\n            throw { message: \"Cannot parse duration value to given precision.\" };\r\n        }\r\n\r\n        ns = formatNumberWidth(ms.substring(3), 4, true);\r\n        ms = formatNumberWidth(ms.substring(0, 3), 3, true);\r\n\r\n        ms = parseInt10(ms);\r\n        ns = parseInt10(ns);\r\n    }\r\n\r\n    ms += seconds * 1000 + minutes * 60000 + hours * 3600000 + days * 86400000;\r\n\r\n    if (parts[1] === \"-\") {\r\n        ms = -ms;\r\n    }\r\n\r\n    var result = { ms: ms, __edmType: \"Edm.Time\" };\r\n\r\n    if (ns) {\r\n        result.ns = ns;\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Parses a timezone description in (+|-)nn:nn format.\r\n * @param {String} timezone - Timezone offset.\r\n * @returns {Object} An object with a (d)irection property of 1 for + and -1 for -, offset (h)ours and offset (m)inutes.\r\n */\r\nfunction parseTimezone(timezone) {\r\n\r\n    var direction = timezone.substring(0, 1);\r\n    direction = (direction === \"+\") ? 1 : -1;\r\n\r\n    var offsetHours = parseInt10(timezone.substring(1));\r\n    var offsetMinutes = parseInt10(timezone.substring(timezone.indexOf(\":\") + 1));\r\n    return { d: direction, h: offsetHours, m: offsetMinutes };\r\n}\r\n\r\n/** Prepares a request object so that it can be sent through the network.\r\n* @param request - Object that represents the request to be sent.\r\n* @param handler - Handler for data serialization\r\n* @param context - Context used for preparing the request\r\n*/\r\nfunction prepareRequest(request, handler, context) {\r\n\r\n    // Default to GET if no method has been specified.\r\n    if (!request.method) {\r\n        request.method = \"GET\";\r\n    }\r\n\r\n    if (!request.headers) {\r\n        request.headers = {};\r\n    } else {\r\n        normalizeHeaders(request.headers);\r\n    }\r\n\r\n    if (request.headers.Accept === undefined) {\r\n        request.headers.Accept = handler.accept;\r\n    }\r\n\r\n    if (assigned(request.data) && request.body === undefined) {\r\n        handler.write(request, context);\r\n    }\r\n\r\n    if (!assigned(request.headers[\"OData-MaxVersion\"])) {\r\n        request.headers[\"OData-MaxVersion\"] = handler.maxDataServiceVersion || \"4.0\";\r\n    }\r\n\r\n    if (request.async === undefined) {\r\n        request.async = true;\r\n    }\r\n\r\n}\r\n\r\n/** Traverses a tree of objects invoking callback for every value.\r\n * @param {Object} item - Object or array to traverse.\r\n * @param {Object} owner - Pass through each callback\r\n * @param {Function} callback - Callback function with key and value, similar to JSON.parse reviver.\r\n * @returns {Object} The object with traversed properties.\r\n Unlike the JSON reviver, this won't delete null members.\r\n*/\r\nfunction traverseInternal(item, owner, callback) {\r\n\r\n    if (item && typeof item === \"object\") {\r\n        for (var name in item) {\r\n            var value = item[name];\r\n            var result = traverseInternal(value, name, callback);\r\n            result = callback(name, result, owner);\r\n            if (result !== value) {\r\n                if (value === undefined) {\r\n                    delete item[name];\r\n                } else {\r\n                    item[name] = result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return item;\r\n}\r\n\r\n/** Traverses a tree of objects invoking callback for every value.\r\n * @param {Object} item - Object or array to traverse.\r\n * @param {Function} callback - Callback function with key and value, similar to JSON.parse reviver.\r\n * @returns {Object} The traversed object.\r\n * Unlike the JSON reviver, this won't delete null members.\r\n*/\r\nfunction traverse(item, callback) {\r\n\r\n    return callback(\"\", traverseInternal(item, \"\", callback));\r\n}\r\n\r\nexports.dataItemTypeName = dataItemTypeName;\r\nexports.EDM_BINARY = EDM_BINARY;\r\nexports.EDM_BOOLEAN = EDM_BOOLEAN;\r\nexports.EDM_BYTE = EDM_BYTE;\r\nexports.EDM_DATE = EDM_DATE;\r\nexports.EDM_DATETIMEOFFSET = EDM_DATETIMEOFFSET;\r\nexports.EDM_DURATION = EDM_DURATION;\r\nexports.EDM_DECIMAL = EDM_DECIMAL;\r\nexports.EDM_DOUBLE = EDM_DOUBLE;\r\nexports.EDM_GEOGRAPHY = EDM_GEOGRAPHY;\r\nexports.EDM_GEOGRAPHY_POINT = EDM_GEOGRAPHY_POINT;\r\nexports.EDM_GEOGRAPHY_LINESTRING = EDM_GEOGRAPHY_LINESTRING;\r\nexports.EDM_GEOGRAPHY_POLYGON = EDM_GEOGRAPHY_POLYGON;\r\nexports.EDM_GEOGRAPHY_COLLECTION = EDM_GEOGRAPHY_COLLECTION;\r\nexports.EDM_GEOGRAPHY_MULTIPOLYGON = EDM_GEOGRAPHY_MULTIPOLYGON;\r\nexports.EDM_GEOGRAPHY_MULTILINESTRING = EDM_GEOGRAPHY_MULTILINESTRING;\r\nexports.EDM_GEOGRAPHY_MULTIPOINT = EDM_GEOGRAPHY_MULTIPOINT;\r\nexports.EDM_GEOMETRY = EDM_GEOMETRY;\r\nexports.EDM_GEOMETRY_POINT = EDM_GEOMETRY_POINT;\r\nexports.EDM_GEOMETRY_LINESTRING = EDM_GEOMETRY_LINESTRING;\r\nexports.EDM_GEOMETRY_POLYGON = EDM_GEOMETRY_POLYGON;\r\nexports.EDM_GEOMETRY_COLLECTION = EDM_GEOMETRY_COLLECTION;\r\nexports.EDM_GEOMETRY_MULTIPOLYGON = EDM_GEOMETRY_MULTIPOLYGON;\r\nexports.EDM_GEOMETRY_MULTILINESTRING = EDM_GEOMETRY_MULTILINESTRING;\r\nexports.EDM_GEOMETRY_MULTIPOINT = EDM_GEOMETRY_MULTIPOINT;\r\nexports.EDM_GUID = EDM_GUID;\r\nexports.EDM_INT16 = EDM_INT16;\r\nexports.EDM_INT32 = EDM_INT32;\r\nexports.EDM_INT64 = EDM_INT64;\r\nexports.EDM_SBYTE = EDM_SBYTE;\r\nexports.EDM_SINGLE = EDM_SINGLE;\r\nexports.EDM_STRING = EDM_STRING;\r\nexports.EDM_TIMEOFDAY = EDM_TIMEOFDAY;\r\nexports.GEOJSON_POINT = GEOJSON_POINT;\r\nexports.GEOJSON_LINESTRING = GEOJSON_LINESTRING;\r\nexports.GEOJSON_POLYGON = GEOJSON_POLYGON;\r\nexports.GEOJSON_MULTIPOINT = GEOJSON_MULTIPOINT;\r\nexports.GEOJSON_MULTILINESTRING = GEOJSON_MULTILINESTRING;\r\nexports.GEOJSON_MULTIPOLYGON = GEOJSON_MULTIPOLYGON;\r\nexports.GEOJSON_GEOMETRYCOLLECTION = GEOJSON_GEOMETRYCOLLECTION;\r\nexports.forEachSchema = forEachSchema;\r\nexports.formatDateTimeOffset = formatDateTimeOffset;\r\nexports.formatDateTimeOffsetJSON = formatDateTimeOffsetJSON;\r\nexports.formatDuration = formatDuration;\r\nexports.formatNumberWidth = formatNumberWidth;\r\nexports.getCanonicalTimezone = getCanonicalTimezone;\r\nexports.getCollectionType = getCollectionType;\r\nexports.invokeRequest = invokeRequest;\r\nexports.isBatch = isBatch;\r\nexports.isCollection = isCollection;\r\nexports.isCollectionType = isCollectionType;\r\nexports.isComplex = isComplex;\r\nexports.isDateTimeOffset = isDateTimeOffset;\r\nexports.isDeferred = isDeferred;\r\nexports.isEntry = isEntry;\r\nexports.isFeed = isFeed;\r\nexports.isGeographyEdmType = isGeographyEdmType;\r\nexports.isGeometryEdmType = isGeometryEdmType;\r\nexports.isNamedStream = isNamedStream;\r\nexports.isPrimitive = isPrimitive;\r\nexports.isPrimitiveEdmType = isPrimitiveEdmType;\r\nexports.lookupComplexType = lookupComplexType;\r\nexports.lookupDefaultEntityContainer = lookupDefaultEntityContainer;\r\nexports.lookupEntityContainer = lookupEntityContainer;\r\nexports.lookupEntitySet = lookupEntitySet;\r\nexports.lookupSingleton = lookupSingleton;\r\nexports.lookupEntityType = lookupEntityType;\r\nexports.lookupFunctionImport = lookupFunctionImport;\r\nexports.lookupNavigationPropertyType = lookupNavigationPropertyType;\r\nexports.lookupNavigationPropertyEntitySet = lookupNavigationPropertyEntitySet;\r\nexports.lookupInSchema = lookupInSchema;\r\nexports.lookupProperty = lookupProperty;\r\nexports.lookupInMetadata = lookupInMetadata;\r\nexports.getEntitySetInfo = getEntitySetInfo;\r\nexports.maxVersion = maxVersion;\r\nexports.navigationPropertyKind = navigationPropertyKind;\r\nexports.normalizeHeaders = normalizeHeaders;\r\nexports.parseBool = parseBool;\r\n\r\n\r\nexports.parseDate = parseDate;\r\nexports.parseDateTimeOffset = parseDateTimeOffset;\r\nexports.parseDuration = parseDuration;\r\nexports.parseTimeOfDay = parseTimeOfDay;\r\n\r\nexports.parseInt10 = parseInt10;\r\nexports.prepareRequest = prepareRequest;\r\nexports.removeNamespace = removeNamespace;\r\nexports.traverse = traverse;\r\n\r\n\r\n","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n\r\n/** @module odatajs/utils */\r\n\r\n\r\nfunction inBrowser() {\r\n    return typeof window !== 'undefined';\r\n}\r\n\r\n/** Creates a new ActiveXObject from the given progId.\r\n * @param {String} progId - ProgId string of the desired ActiveXObject.\r\n * @returns {Object} The ActiveXObject instance. Null if ActiveX is not supported by the browser.\r\n * This function throws whatever exception might occur during the creation\r\n * of the ActiveXObject.\r\n*/\r\nvar activeXObject = function (progId) {\r\n    \r\n    if (window.ActiveXObject) {\r\n        return new window.ActiveXObject(progId);\r\n    }\r\n    return null;\r\n};\r\n\r\n/** Checks whether the specified value is different from null and undefined.\r\n * @param [value] Value to check ( may be null)\r\n * @returns {Boolean} true if the value is assigned; false otherwise.\r\n*/     \r\nfunction assigned(value) {\r\n    return value !== null && value !== undefined;\r\n}\r\n\r\n/** Checks whether the specified item is in the array.\r\n * @param {Array} [arr] Array to check in.\r\n * @param item - Item to look for.\r\n * @returns {Boolean} true if the item is contained, false otherwise.\r\n*/\r\nfunction contains(arr, item) {\r\n    var i, len;\r\n    for (i = 0, len = arr.length; i < len; i++) {\r\n        if (arr[i] === item) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/** Given two values, picks the first one that is not undefined.\r\n * @param a - First value.\r\n * @param b - Second value.\r\n * @returns a if it's a defined value; else b.\r\n */\r\nfunction defined(a, b) {\r\n    return (a !== undefined) ? a : b;\r\n}\r\n\r\n/** Delays the invocation of the specified function until execution unwinds.\r\n * @param {Function} callback - Callback function.\r\n */\r\nfunction delay(callback) {\r\n\r\n    if (arguments.length === 1) {\r\n        window.setTimeout(callback, 0);\r\n        return;\r\n    }\r\n\r\n    var args = Array.prototype.slice.call(arguments, 1);\r\n    window.setTimeout(function () {\r\n        callback.apply(this, args);\r\n    }, 0);\r\n}\r\n\r\n/** Throws an exception in case that a condition evaluates to false.\r\n * @param {Boolean} condition - Condition to evaluate.\r\n * @param {String} message - Message explaining the assertion.\r\n * @param {Object} data - Additional data to be included in the exception.\r\n */\r\nfunction djsassert(condition, message, data) {\r\n\r\n\r\n    if (!condition) {\r\n        throw { message: \"Assert fired: \" + message, data: data };\r\n    }\r\n}\r\n\r\n/** Extends the target with the specified values.\r\n * @param {Object} target - Object to add properties to.\r\n * @param {Object} values - Object with properties to add into target.\r\n * @returns {Object} The target object.\r\n*/\r\nfunction extend(target, values) {\r\n    for (var name in values) {\r\n        target[name] = values[name];\r\n    }\r\n\r\n    return target;\r\n}\r\n\r\nfunction find(arr, callback) {\r\n    /** Returns the first item in the array that makes the callback function true.\r\n     * @param {Array} [arr] Array to check in. ( may be null)\r\n     * @param {Function} callback - Callback function to invoke once per item in the array.\r\n     * @returns The first item that makes the callback return true; null otherwise or if the array is null.\r\n    */\r\n\r\n    if (arr) {\r\n        var i, len;\r\n        for (i = 0, len = arr.length; i < len; i++) {\r\n            if (callback(arr[i])) {\r\n                return arr[i];\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isArray(value) {\r\n    /** Checks whether the specified value is an array object.\r\n     * @param value - Value to check.\r\n     * @returns {Boolean} true if the value is an array object; false otherwise.\r\n     */\r\n\r\n    return Object.prototype.toString.call(value) === \"[object Array]\";\r\n}\r\n\r\n/** Checks whether the specified value is a Date object.\r\n * @param value - Value to check.\r\n * @returns {Boolean} true if the value is a Date object; false otherwise.\r\n */\r\nfunction isDate(value) {\r\n    return Object.prototype.toString.call(value) === \"[object Date]\";\r\n}\r\n\r\n/** Tests whether a value is an object.\r\n * @param value - Value to test.\r\n * @returns {Boolean} True is the value is an object; false otherwise.\r\n * Per javascript rules, null and array values are objects and will cause this function to return true.\r\n */\r\nfunction isObject(value) {\r\n    return typeof value === \"object\";\r\n}\r\n\r\n/** Parses a value in base 10.\r\n * @param {String} value - String value to parse.\r\n * @returns {Number} The parsed value, NaN if not a valid value.\r\n*/   \r\nfunction parseInt10(value) {\r\n    return parseInt(value, 10);\r\n}\r\n\r\n/** Renames a property in an object.\r\n * @param {Object} obj - Object in which the property will be renamed.\r\n * @param {String} oldName - Name of the property that will be renamed.\r\n * @param {String} newName - New name of the property.\r\n * This function will not do anything if the object doesn't own a property with the specified old name.\r\n */\r\nfunction renameProperty(obj, oldName, newName) {\r\n    if (obj.hasOwnProperty(oldName)) {\r\n        obj[newName] = obj[oldName];\r\n        delete obj[oldName];\r\n    }\r\n}\r\n\r\n/** Default error handler.\r\n * @param {Object} error - Error to handle.\r\n */\r\nfunction throwErrorCallback(error) {\r\n    throw error;\r\n}\r\n\r\n/** Removes leading and trailing whitespaces from a string.\r\n * @param {String} str String to trim\r\n * @returns {String} The string with no leading or trailing whitespace.\r\n */\r\nfunction trimString(str) {\r\n    if (str.trim) {\r\n        return str.trim();\r\n    }\r\n\r\n    return str.replace(/^\\s+|\\s+$/g, '');\r\n}\r\n\r\n/** Returns a default value in place of undefined.\r\n * @param [value] Value to check (may be null)\r\n * @param defaultValue - Value to return if value is undefined.\r\n * @returns value if it's defined; defaultValue otherwise.\r\n * This should only be used for cases where falsy values are valid;\r\n * otherwise the pattern should be 'x = (value) ? value : defaultValue;'.\r\n */\r\nfunction undefinedDefault(value, defaultValue) {\r\n    return (value !== undefined) ? value : defaultValue;\r\n}\r\n\r\n// Regular expression that splits a uri into its components:\r\n// 0 - is the matched string.\r\n// 1 - is the scheme.\r\n// 2 - is the authority.\r\n// 3 - is the path.\r\n// 4 - is the query.\r\n// 5 - is the fragment.\r\nvar uriRegEx = /^([^:\\/?#]+:)?(\\/\\/[^\\/?#]*)?([^?#:]+)?(\\?[^#]*)?(#.*)?/;\r\nvar uriPartNames = [\"scheme\", \"authority\", \"path\", \"query\", \"fragment\"];\r\n\r\n/** Gets information about the components of the specified URI.\r\n * @param {String} uri - URI to get information from.\r\n * @return  {Object} An object with an isAbsolute flag and part names (scheme, authority, etc.) if available.\r\n */\r\nfunction getURIInfo(uri) {\r\n    var result = { isAbsolute: false };\r\n\r\n    if (uri) {\r\n        var matches = uriRegEx.exec(uri);\r\n        if (matches) {\r\n            var i, len;\r\n            for (i = 0, len = uriPartNames.length; i < len; i++) {\r\n                if (matches[i + 1]) {\r\n                    result[uriPartNames[i]] = matches[i + 1];\r\n                }\r\n            }\r\n        }\r\n        if (result.scheme) {\r\n            result.isAbsolute = true;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Builds a URI string from its components.\r\n * @param {Object} uriInfo -  An object with uri parts (scheme, authority, etc.).\r\n * @returns {String} URI string.\r\n */\r\nfunction getURIFromInfo(uriInfo) {\r\n    return \"\".concat(\r\n        uriInfo.scheme || \"\",\r\n        uriInfo.authority || \"\",\r\n        uriInfo.path || \"\",\r\n        uriInfo.query || \"\",\r\n        uriInfo.fragment || \"\");\r\n}\r\n\r\n// Regular expression that splits a uri authority into its subcomponents:\r\n// 0 - is the matched string.\r\n// 1 - is the userinfo subcomponent.\r\n// 2 - is the host subcomponent.\r\n// 3 - is the port component.\r\nvar uriAuthorityRegEx = /^\\/{0,2}(?:([^@]*)@)?([^:]+)(?::{1}(\\d+))?/;\r\n\r\n// Regular expression that matches percentage enconded octects (i.e %20 or %3A);\r\nvar pctEncodingRegEx = /%[0-9A-F]{2}/ig;\r\n\r\n/** Normalizes the casing of a URI.\r\n * @param {String} uri - URI to normalize, absolute or relative.\r\n * @returns {String} The URI normalized to lower case.\r\n*/\r\nfunction normalizeURICase(uri) {\r\n    var uriInfo = getURIInfo(uri);\r\n    var scheme = uriInfo.scheme;\r\n    var authority = uriInfo.authority;\r\n\r\n    if (scheme) {\r\n        uriInfo.scheme = scheme.toLowerCase();\r\n        if (authority) {\r\n            var matches = uriAuthorityRegEx.exec(authority);\r\n            if (matches) {\r\n                uriInfo.authority = \"//\" +\r\n                (matches[1] ? matches[1] + \"@\" : \"\") +\r\n                (matches[2].toLowerCase()) +\r\n                (matches[3] ? \":\" + matches[3] : \"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    uri = getURIFromInfo(uriInfo);\r\n\r\n    return uri.replace(pctEncodingRegEx, function (str) {\r\n        return str.toLowerCase();\r\n    });\r\n}\r\n\r\n/** Normalizes a possibly relative URI with a base URI.\r\n * @param {String} uri - URI to normalize, absolute or relative\r\n * @param {String} base - Base URI to compose with (may be null)\r\n * @returns {String} The composed URI if relative; the original one if absolute.\r\n */\r\nfunction normalizeURI(uri, base) {\r\n    if (!base) {\r\n        return uri;\r\n    }\r\n\r\n    var uriInfo = getURIInfo(uri);\r\n    if (uriInfo.isAbsolute) {\r\n        return uri;\r\n    }\r\n\r\n    var baseInfo = getURIInfo(base);\r\n    var normInfo = {};\r\n    var path;\r\n\r\n    if (uriInfo.authority) {\r\n        normInfo.authority = uriInfo.authority;\r\n        path = uriInfo.path;\r\n        normInfo.query = uriInfo.query;\r\n    } else {\r\n        if (!uriInfo.path) {\r\n            path = baseInfo.path;\r\n            normInfo.query = uriInfo.query || baseInfo.query;\r\n        } else {\r\n            if (uriInfo.path.charAt(0) === '/') {\r\n                path = uriInfo.path;\r\n            } else {\r\n                path = mergeUriPathWithBase(uriInfo.path, baseInfo.path);\r\n            }\r\n            normInfo.query = uriInfo.query;\r\n        }\r\n        normInfo.authority = baseInfo.authority;\r\n    }\r\n\r\n    normInfo.path = removeDotsFromPath(path);\r\n\r\n    normInfo.scheme = baseInfo.scheme;\r\n    normInfo.fragment = uriInfo.fragment;\r\n\r\n    return getURIFromInfo(normInfo);\r\n}\r\n\r\n/** Merges the path of a relative URI and a base URI.\r\n * @param {String} uriPath - Relative URI path.\r\n * @param {String} basePath - Base URI path.\r\n * @returns {String} A string with the merged path.\r\n */\r\nfunction mergeUriPathWithBase(uriPath, basePath) {\r\n    var path = \"/\";\r\n    var end;\r\n\r\n    if (basePath) {\r\n        end = basePath.lastIndexOf(\"/\");\r\n        path = basePath.substring(0, end);\r\n\r\n        if (path.charAt(path.length - 1) !== \"/\") {\r\n            path = path + \"/\";\r\n        }\r\n    }\r\n\r\n    return path + uriPath;\r\n}\r\n\r\n/** Removes the special folders . and .. from a URI's path.\r\n * @param {string} path - URI path component.\r\n * @returns {String} Path without any . and .. folders.\r\n */\r\nfunction removeDotsFromPath(path) {\r\n    var result = \"\";\r\n    var segment = \"\";\r\n    var end;\r\n\r\n    while (path) {\r\n        if (path.indexOf(\"..\") === 0 || path.indexOf(\".\") === 0) {\r\n            path = path.replace(/^\\.\\.?\\/?/g, \"\");\r\n        } else if (path.indexOf(\"/..\") === 0) {\r\n            path = path.replace(/^\\/\\..\\/?/g, \"/\");\r\n            end = result.lastIndexOf(\"/\");\r\n            if (end === -1) {\r\n                result = \"\";\r\n            } else {\r\n                result = result.substring(0, end);\r\n            }\r\n        } else if (path.indexOf(\"/.\") === 0) {\r\n            path = path.replace(/^\\/\\.\\/?/g, \"/\");\r\n        } else {\r\n            segment = path;\r\n            end = path.indexOf(\"/\", 1);\r\n            if (end !== -1) {\r\n                segment = path.substring(0, end);\r\n            }\r\n            result = result + segment;\r\n            path = path.replace(segment, \"\");\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction convertByteArrayToHexString(str) {\r\n    var arr = [];\r\n    if (window.atob === undefined) {\r\n        arr = decodeBase64(str);\r\n    } else {\r\n        var binaryStr = window.atob(str);\r\n        for (var i = 0; i < binaryStr.length; i++) {\r\n            arr.push(binaryStr.charCodeAt(i));\r\n        }\r\n    }\r\n    var hexValue = \"\";\r\n    var hexValues = \"0123456789ABCDEF\";\r\n    for (var j = 0; j < arr.length; j++) {\r\n        var t = arr[j];\r\n        hexValue += hexValues[t >> 4];\r\n        hexValue += hexValues[t & 0x0F];\r\n    }\r\n    return hexValue;\r\n}\r\n\r\nfunction decodeBase64(str) {\r\n    var binaryString = \"\";\r\n    for (var i = 0; i < str.length; i++) {\r\n        var base65IndexValue = getBase64IndexValue(str[i]);\r\n        var binaryValue = \"\";\r\n        if (base65IndexValue !== null) {\r\n            binaryValue = base65IndexValue.toString(2);\r\n            binaryString += addBase64Padding(binaryValue);\r\n        }\r\n    }\r\n    var byteArray = [];\r\n    var numberOfBytes = parseInt(binaryString.length / 8, 10);\r\n    for (i = 0; i < numberOfBytes; i++) {\r\n        var intValue = parseInt(binaryString.substring(i * 8, (i + 1) * 8), 2);\r\n        byteArray.push(intValue);\r\n    }\r\n    return byteArray;\r\n}\r\n\r\nfunction getBase64IndexValue(character) {\r\n    var asciiCode = character.charCodeAt(0);\r\n    var asciiOfA = 65;\r\n    var differenceBetweenZanda = 6;\r\n    if (asciiCode >= 65 && asciiCode <= 90) {           // between \"A\" and \"Z\" inclusive\r\n        return asciiCode - asciiOfA;\r\n    } else if (asciiCode >= 97 && asciiCode <= 122) {   // between 'a' and 'z' inclusive\r\n        return asciiCode - asciiOfA - differenceBetweenZanda;\r\n    } else if (asciiCode >= 48 && asciiCode <= 57) {    // between '0' and '9' inclusive\r\n        return asciiCode + 4;\r\n    } else if (character == \"+\") {\r\n        return 62;\r\n    } else if (character == \"/\") {\r\n        return 63;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction addBase64Padding(binaryString) {\r\n    while (binaryString.length < 6) {\r\n        binaryString = \"0\" + binaryString;\r\n    }\r\n    return binaryString;\r\n\r\n}\r\n\r\nfunction getJsonValueArraryLength(data) {\r\n    if (data && data.value) {\r\n        return data.value.length;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction sliceJsonValueArray(data, start, end) {\r\n    if (data === undefined || data.value === undefined) {\r\n        return data;\r\n    }\r\n\r\n    if (start < 0) {\r\n        start = 0;\r\n    }\r\n\r\n    var length = getJsonValueArraryLength(data);\r\n    if (length < end) {\r\n        end = length;\r\n    }\r\n\r\n    var newdata = {};\r\n    for (var property in data) {\r\n        if (property == \"value\") {\r\n            newdata[property] = data[property].slice(start, end);\r\n        } else {\r\n            newdata[property] = data[property];\r\n        }\r\n    }\r\n\r\n    return newdata;\r\n}\r\n\r\nfunction concatJsonValueArray(data, concatData) {\r\n    if (concatData === undefined || concatData.value === undefined) {\r\n        return data;\r\n    }\r\n\r\n    if (data === undefined || Object.keys(data).length === 0) {\r\n        return concatData;\r\n    }\r\n\r\n    if (data.value === undefined) {\r\n        data.value = concatData.value;\r\n        return data;\r\n    }\r\n\r\n    data.value = data.value.concat(concatData.value);\r\n\r\n    return data;\r\n}\r\n\r\nfunction endsWith(input, search) {\r\n    return input.indexOf(search, input.length - search.length) !== -1;\r\n}\r\n\r\nfunction startsWith (input, search) {\r\n    return input.indexOf(search) === 0;\r\n}\r\n\r\nfunction getFormatKind(format, defaultFormatKind) {\r\n    var formatKind = defaultFormatKind;\r\n    if (!assigned(format)) {\r\n        return formatKind;\r\n    }\r\n\r\n    var normalizedFormat = format.toLowerCase();\r\n    switch (normalizedFormat) {\r\n        case \"none\":\r\n            formatKind = 0;\r\n            break;\r\n        case \"minimal\":\r\n            formatKind = 1;\r\n            break;\r\n        case \"full\":\r\n            formatKind = 2;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return formatKind;\r\n}\r\n\r\n\r\n    \r\n    \r\nexports.inBrowser = inBrowser;\r\nexports.activeXObject = activeXObject;\r\nexports.assigned = assigned;\r\nexports.contains = contains;\r\nexports.defined = defined;\r\nexports.delay = delay;\r\nexports.djsassert = djsassert;\r\nexports.extend = extend;\r\nexports.find = find;\r\nexports.getURIInfo = getURIInfo;\r\nexports.isArray = isArray;\r\nexports.isDate = isDate;\r\nexports.isObject = isObject;\r\nexports.normalizeURI = normalizeURI;\r\nexports.normalizeURICase = normalizeURICase;\r\nexports.parseInt10 = parseInt10;\r\nexports.renameProperty = renameProperty;\r\nexports.throwErrorCallback = throwErrorCallback;\r\nexports.trimString = trimString;\r\nexports.undefinedDefault = undefinedDefault;\r\nexports.decodeBase64 = decodeBase64;\r\nexports.convertByteArrayToHexString = convertByteArrayToHexString;\r\nexports.getJsonValueArraryLength = getJsonValueArraryLength;\r\nexports.sliceJsonValueArray = sliceJsonValueArray;\r\nexports.concatJsonValueArray = concatJsonValueArray;\r\nexports.startsWith = startsWith;\r\nexports.endsWith = endsWith;\r\nexports.getFormatKind = getFormatKind;","/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n'use strict';\r\n \r\n\r\n/** @module odatajs/xml */\r\n\r\nvar utils    = require('./utils.js');\r\n\r\nvar activeXObject = utils.activeXObject;\r\nvar djsassert = utils.djsassert;\r\nvar extend = utils.extend;\r\nvar isArray = utils.isArray;\r\nvar normalizeURI = utils.normalizeURI;\r\n\r\n// URI prefixes to generate smaller code.\r\nvar http = \"http://\";\r\nvar w3org = http + \"www.w3.org/\";               // http://www.w3.org/\r\n\r\nvar xhtmlNS = w3org + \"1999/xhtml\";             // http://www.w3.org/1999/xhtml\r\nvar xmlnsNS = w3org + \"2000/xmlns/\";            // http://www.w3.org/2000/xmlns/\r\nvar xmlNS = w3org + \"XML/1998/namespace\";       // http://www.w3.org/XML/1998/namespace\r\n\r\nvar mozillaParserErroNS = http + \"www.mozilla.org/newlayout/xml/parsererror.xml\";\r\n\r\n/** Checks whether the specified string has leading or trailing spaces.\r\n * @param {String} text - String to check.\r\n * @returns {Boolean} true if text has any leading or trailing whitespace; false otherwise.\r\n */\r\nfunction hasLeadingOrTrailingWhitespace(text) {\r\n    var re = /(^\\s)|(\\s$)/;\r\n    return re.test(text);\r\n}\r\n\r\n/** Determines whether the specified text is empty or whitespace.\r\n * @param {String} text - Value to inspect.\r\n * @returns {Boolean} true if the text value is empty or all whitespace; false otherwise.\r\n */\r\nfunction isWhitespace(text) {\r\n\r\n\r\n    var ws = /^\\s*$/;\r\n    return text === null || ws.test(text);\r\n}\r\n\r\n/** Determines whether the specified element has xml:space='preserve' applied.\r\n * @param domElement - Element to inspect.\r\n * @returns {Boolean} Whether xml:space='preserve' is in effect.\r\n */\r\nfunction isWhitespacePreserveContext(domElement) {\r\n\r\n\r\n    while (domElement !== null && domElement.nodeType === 1) {\r\n        var val = xmlAttributeValue(domElement, \"space\", xmlNS);\r\n        if (val === \"preserve\") {\r\n            return true;\r\n        } else if (val === \"default\") {\r\n            break;\r\n        } else {\r\n            domElement = domElement.parentNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Determines whether the attribute is a XML namespace declaration.\r\n * @param domAttribute - Element to inspect.\r\n * @return {Boolean} True if the attribute is a namespace declaration (its name is 'xmlns' or starts with 'xmlns:'; false otherwise.\r\n */\r\nfunction isXmlNSDeclaration(domAttribute) {\r\n    var nodeName = domAttribute.nodeName;\r\n    return nodeName == \"xmlns\" || nodeName.indexOf(\"xmlns:\") === 0;\r\n}\r\n\r\n/** Safely set as property in an object by invoking obj.setProperty.\r\n * @param obj - Object that exposes a setProperty method.\r\n * @param {String} name - Property name\r\n * @param value - Property value.\r\n */\r\nfunction safeSetProperty(obj, name, value) {\r\n\r\n\r\n    try {\r\n        obj.setProperty(name, value);\r\n    } catch (_) { }\r\n}\r\n\r\n/** Creates an configures new MSXML 3.0 ActiveX object.\r\n * @returns {Object} New MSXML 3.0 ActiveX object.\r\n * This function throws any exception that occurs during the creation\r\n * of the MSXML 3.0 ActiveX object.\r\n */\r\nfunction msXmlDom3() {\r\n    var msxml3 = activeXObject(\"Msxml2.DOMDocument.3.0\");\r\n    if (msxml3) {\r\n        safeSetProperty(msxml3, \"ProhibitDTD\", true);\r\n        safeSetProperty(msxml3, \"MaxElementDepth\", 256);\r\n        safeSetProperty(msxml3, \"AllowDocumentFunction\", false);\r\n        safeSetProperty(msxml3, \"AllowXsltScript\", false);\r\n    }\r\n    return msxml3;\r\n}\r\n\r\n/** Creates an configures new MSXML 6.0 or MSXML 3.0 ActiveX object.\r\n * @returns {Object} New MSXML 3.0 ActiveX object.\r\n * This function will try to create a new MSXML 6.0 ActiveX object. If it fails then\r\n * it will fallback to create a new MSXML 3.0 ActiveX object. Any exception that\r\n * happens during the creation of the MSXML 6.0 will be handled by the function while\r\n * the ones that happend during the creation of the MSXML 3.0 will be thrown.\r\n */\r\nfunction msXmlDom() {\r\n    try {\r\n        var msxml = activeXObject(\"Msxml2.DOMDocument.6.0\");\r\n        if (msxml) {\r\n            msxml.async = true;\r\n        }\r\n        return msxml;\r\n    } catch (_) {\r\n        return msXmlDom3();\r\n    }\r\n}\r\n\r\n/** Parses an XML string using the MSXML DOM.\r\n * @returns {Object} New MSXML DOMDocument node representing the parsed XML string.\r\n * This function throws any exception that occurs during the creation\r\n * of the MSXML ActiveX object.  It also will throw an exception\r\n * in case of a parsing error.\r\n */\r\nfunction msXmlParse(text) {\r\n    var dom = msXmlDom();\r\n    if (!dom) {\r\n        return null;\r\n    }\r\n\r\n    dom.loadXML(text);\r\n    var parseError = dom.parseError;\r\n    if (parseError.errorCode !== 0) {\r\n        xmlThrowParserError(parseError.reason, parseError.srcText, text);\r\n    }\r\n    return dom;\r\n}\r\n\r\n/** Throws a new exception containing XML parsing error information.\r\n * @param exceptionOrReason - String indicating the reason of the parsing failure or Object detailing the parsing error.\r\n * @param {String} srcText -     String indicating the part of the XML string that caused the parsing error.\r\n * @param {String} errorXmlText - XML string for wich the parsing failed.\r\n */\r\nfunction xmlThrowParserError(exceptionOrReason, srcText, errorXmlText) {\r\n\r\n    if (typeof exceptionOrReason === \"string\") {\r\n        exceptionOrReason = { message: exceptionOrReason };\r\n    }\r\n    throw extend(exceptionOrReason, { srcText: srcText || \"\", errorXmlText: errorXmlText || \"\" });\r\n}\r\n\r\n/** Returns an XML DOM document from the specified text.\r\n * @param {String} text - Document text.\r\n * @returns XML DOM document.\r\n * This function will throw an exception in case of a parse error\r\n */\r\nfunction xmlParse(text) {\r\n    var domParser = undefined;\r\n    if (utils.inBrowser()) {\r\n        domParser = window.DOMParser && new window.DOMParser();\r\n    } else {\r\n        domParser = new (require('xmldom').DOMParser)();\r\n    }\r\n    var dom;\r\n\r\n    if (!domParser) {\r\n        dom = msXmlParse(text);\r\n        if (!dom) {\r\n            xmlThrowParserError(\"XML DOM parser not supported\");\r\n        }\r\n        return dom;\r\n    }\r\n\r\n    try {\r\n        dom = domParser.parseFromString(text, \"text/xml\");\r\n    } catch (e) {\r\n        xmlThrowParserError(e, \"\", text);\r\n    }\r\n\r\n    var element = dom.documentElement;\r\n    var nsURI = element.namespaceURI;\r\n    var localName = xmlLocalName(element);\r\n\r\n    // Firefox reports errors by returing the DOM for an xml document describing the problem.\r\n    if (localName === \"parsererror\" && nsURI === mozillaParserErroNS) {\r\n        var srcTextElement = xmlFirstChildElement(element, mozillaParserErroNS, \"sourcetext\");\r\n        var srcText = srcTextElement ? xmlNodeValue(srcTextElement) : \"\";\r\n        xmlThrowParserError(xmlInnerText(element) || \"\", srcText, text);\r\n    }\r\n\r\n    // Chrome (and maybe other webkit based browsers) report errors by injecting a header with an error message.\r\n    // The error may be localized, so instead we simply check for a header as the\r\n    // top element or descendant child of the document.\r\n    if (localName === \"h3\" && nsURI === xhtmlNS || xmlFirstDescendantElement(element, xhtmlNS, \"h3\")) {\r\n        var reason = \"\";\r\n        var siblings = [];\r\n        var cursor = element.firstChild;\r\n        while (cursor) {\r\n            if (cursor.nodeType === 1) {\r\n                reason += xmlInnerText(cursor) || \"\";\r\n            }\r\n            siblings.push(cursor.nextSibling);\r\n            cursor = cursor.firstChild || siblings.shift();\r\n        }\r\n        reason += xmlInnerText(element) || \"\";\r\n        xmlThrowParserError(reason, \"\", text);\r\n    }\r\n\r\n    return dom;\r\n}\r\n\r\n/** Builds a XML qualified name string in the form of \"prefix:name\".\r\n * @param {String} prefix - Prefix string (may be null)\r\n * @param {String} name - Name string to qualify with the prefix.\r\n * @returns {String} Qualified name.\r\n */\r\nfunction xmlQualifiedName(prefix, name) {\r\n    return prefix ? prefix + \":\" + name : name;\r\n}\r\n\r\n/** Appends a text node into the specified DOM element node.\r\n * @param domNode - DOM node for the element.\r\n * @param {String} textNode - Text to append as a child of element.\r\n*/\r\nfunction xmlAppendText(domNode, textNode) {\r\n    if (hasLeadingOrTrailingWhitespace(textNode.data)) {\r\n        var attr = xmlAttributeNode(domNode, xmlNS, \"space\");\r\n        if (!attr) {\r\n            attr = xmlNewAttribute(domNode.ownerDocument, xmlNS, xmlQualifiedName(\"xml\", \"space\"));\r\n            xmlAppendChild(domNode, attr);\r\n        }\r\n        attr.value = \"preserve\";\r\n    }\r\n    domNode.appendChild(textNode);\r\n    return domNode;\r\n}\r\n\r\n/** Iterates through the XML element's attributes and invokes the callback function for each one.\r\n * @param element - Wrapped element to iterate over.\r\n * @param {Function} onAttributeCallback - Callback function to invoke with wrapped attribute nodes.\r\n*/\r\nfunction xmlAttributes(element, onAttributeCallback) {\r\n    var attributes = element.attributes;\r\n    var i, len;\r\n    for (i = 0, len = attributes.length; i < len; i++) {\r\n        onAttributeCallback(attributes.item(i));\r\n    }\r\n}\r\n\r\n/** Returns the value of a DOM element's attribute.\r\n * @param domNode - DOM node for the owning element.\r\n * @param {String} localName - Local name of the attribute.\r\n * @param {String} nsURI - Namespace URI of the attribute.\r\n * @returns {String} - The attribute value, null if not found (may be null)\r\n */\r\nfunction xmlAttributeValue(domNode, localName, nsURI) {\r\n\r\n    var attribute = xmlAttributeNode(domNode, localName, nsURI);\r\n    return attribute ? xmlNodeValue(attribute) : null;\r\n}\r\n\r\n/** Gets an attribute node from a DOM element.\r\n * @param domNode - DOM node for the owning element.\r\n * @param {String} localName - Local name of the attribute.\r\n * @param {String} nsURI - Namespace URI of the attribute.\r\n * @returns The attribute node, null if not found.\r\n */\r\nfunction xmlAttributeNode(domNode, localName, nsURI) {\r\n\r\n    var attributes = domNode.attributes;\r\n    if (attributes.getNamedItemNS) {\r\n        return attributes.getNamedItemNS(nsURI || null, localName);\r\n    }\r\n\r\n    return attributes.getQualifiedItem(localName, nsURI) || null;\r\n}\r\n\r\n/** Gets the value of the xml:base attribute on the specified element.\r\n * @param domNode - Element to get xml:base attribute value from.\r\n * @param [baseURI] - Base URI used to normalize the value of the xml:base attribute ( may be null)\r\n * @returns {String} Value of the xml:base attribute if found; the baseURI or null otherwise.\r\n */\r\nfunction xmlBaseURI(domNode, baseURI) {\r\n\r\n    var base = xmlAttributeNode(domNode, \"base\", xmlNS);\r\n    return (base ? normalizeURI(base.value, baseURI) : baseURI) || null;\r\n}\r\n\r\n\r\n/** Iterates through the XML element's child DOM elements and invokes the callback function for each one.\r\n * @param domNode - DOM Node containing the DOM elements to iterate over.\r\n * @param {Function} onElementCallback - Callback function to invoke for each child DOM element.\r\n*/\r\nfunction xmlChildElements(domNode, onElementCallback) {\r\n\r\n    xmlTraverse(domNode, /*recursive*/false, function (child) {\r\n        if (child.nodeType === 1) {\r\n            onElementCallback(child);\r\n        }\r\n        // continue traversing.\r\n        return true;\r\n    });\r\n}\r\n\r\n/** Gets the descendant element under root that corresponds to the specified path and namespace URI.\r\n * @param root - DOM element node from which to get the descendant element.\r\n * @param {String} namespaceURI - The namespace URI of the element to match.\r\n * @param {String} path - Path to the desired descendant element.\r\n * @return The element specified by path and namespace URI.\r\n * All the elements in the path are matched against namespaceURI.\r\n * The function will stop searching on the first element that doesn't match the namespace and the path.\r\n */\r\nfunction xmlFindElementByPath(root, namespaceURI, path) {\r\n    var parts = path.split(\"/\");\r\n    var i, len;\r\n    for (i = 0, len = parts.length; i < len; i++) {\r\n        root = root && xmlFirstChildElement(root, namespaceURI, parts[i]);\r\n    }\r\n    return root || null;\r\n}\r\n\r\n/** Gets the DOM element or DOM attribute node under root that corresponds to the specified path and namespace URI.\r\n * @param root - DOM element node from which to get the descendant node.\r\n * @param {String} namespaceURI - The namespace URI of the node to match.\r\n * @param {String} path - Path to the desired descendant node.\r\n * @return The node specified by path and namespace URI.\r\n\r\n* This function will traverse the path and match each node associated to a path segement against the namespace URI.\r\n* The traversal stops when the whole path has been exahusted or a node that doesn't belogong the specified namespace is encountered.\r\n* The last segment of the path may be decorated with a starting @ character to indicate that the desired node is a DOM attribute.\r\n*/\r\nfunction xmlFindNodeByPath(root, namespaceURI, path) {\r\n    \r\n\r\n    var lastSegmentStart = path.lastIndexOf(\"/\");\r\n    var nodePath = path.substring(lastSegmentStart + 1);\r\n    var parentPath = path.substring(0, lastSegmentStart);\r\n\r\n    var node = parentPath ? xmlFindElementByPath(root, namespaceURI, parentPath) : root;\r\n    if (node) {\r\n        if (nodePath.charAt(0) === \"@\") {\r\n            return xmlAttributeNode(node, nodePath.substring(1), namespaceURI);\r\n        }\r\n        return xmlFirstChildElement(node, namespaceURI, nodePath);\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Returns the first child DOM element under the specified DOM node that matches the specified namespace URI and local name.\r\n * @param domNode - DOM node from which the child DOM element is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @return The node's first child DOM element that matches the specified namespace URI and local name; null otherwise.\r\n */\r\nfunction xmlFirstChildElement(domNode, namespaceURI, localName) {\r\n\r\n    return xmlFirstElementMaybeRecursive(domNode, namespaceURI, localName, /*recursive*/false);\r\n}\r\n\r\n/** Returns the first descendant DOM element under the specified DOM node that matches the specified namespace URI and local name.\r\n * @param domNode - DOM node from which the descendant DOM element is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @return The node's first descendant DOM element that matches the specified namespace URI and local name; null otherwise.\r\n*/\r\nfunction xmlFirstDescendantElement(domNode, namespaceURI, localName) {\r\n    if (domNode.getElementsByTagNameNS) {\r\n        var result = domNode.getElementsByTagNameNS(namespaceURI, localName);\r\n        return result.length > 0 ? result[0] : null;\r\n    }\r\n    return xmlFirstElementMaybeRecursive(domNode, namespaceURI, localName, /*recursive*/true);\r\n}\r\n\r\n/** Returns the first descendant DOM element under the specified DOM node that matches the specified namespace URI and local name.\r\n * @param domNode - DOM node from which the descendant DOM element is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @param {Boolean} recursive \r\n * - True if the search should include all the descendants of the DOM node.  \r\n * - False if the search should be scoped only to the direct children of the DOM node.\r\n * @return The node's first descendant DOM element that matches the specified namespace URI and local name; null otherwise.\r\n */\r\nfunction xmlFirstElementMaybeRecursive(domNode, namespaceURI, localName, recursive) {\r\n\r\n    var firstElement = null;\r\n    xmlTraverse(domNode, recursive, function (child) {\r\n        if (child.nodeType === 1) {\r\n            var isExpectedNamespace = !namespaceURI || xmlNamespaceURI(child) === namespaceURI;\r\n            var isExpectedNodeName = !localName || xmlLocalName(child) === localName;\r\n\r\n            if (isExpectedNamespace && isExpectedNodeName) {\r\n                firstElement = child;\r\n            }\r\n        }\r\n        return firstElement === null;\r\n    });\r\n    return firstElement;\r\n}\r\n\r\n/** Gets the concatenated value of all immediate child text and CDATA nodes for the specified element.\r\n * @param xmlElement - Element to get values for.\r\n * @returns {String} Text for all direct children.\r\n */\r\nfunction xmlInnerText(xmlElement) {\r\n\r\n    var result = null;\r\n    var root = (xmlElement.nodeType === 9 && xmlElement.documentElement) ? xmlElement.documentElement : xmlElement;\r\n    var whitespaceAlreadyRemoved = root.ownerDocument.preserveWhiteSpace === false;\r\n    var whitespacePreserveContext;\r\n\r\n    xmlTraverse(root, false, function (child) {\r\n        if (child.nodeType === 3 || child.nodeType === 4) {\r\n            // isElementContentWhitespace indicates that this is 'ignorable whitespace',\r\n            // but it's not defined by all browsers, and does not honor xml:space='preserve'\r\n            // in some implementations.\r\n            //\r\n            // If we can't tell either way, we walk up the tree to figure out whether\r\n            // xml:space is set to preserve; otherwise we discard pure-whitespace.\r\n            //\r\n            // For example <a>  <b>1</b></a>. The space between <a> and <b> is usually 'ignorable'.\r\n            var text = xmlNodeValue(child);\r\n            var shouldInclude = whitespaceAlreadyRemoved || !isWhitespace(text);\r\n            if (!shouldInclude) {\r\n                // Walk up the tree to figure out whether we are in xml:space='preserve' context\r\n                // for the cursor (needs to happen only once).\r\n                if (whitespacePreserveContext === undefined) {\r\n                    whitespacePreserveContext = isWhitespacePreserveContext(root);\r\n                }\r\n\r\n                shouldInclude = whitespacePreserveContext;\r\n            }\r\n\r\n            if (shouldInclude) {\r\n                if (!result) {\r\n                    result = text;\r\n                } else {\r\n                    result += text;\r\n                }\r\n            }\r\n        }\r\n        // Continue traversing?\r\n        return true;\r\n    });\r\n    return result;\r\n}\r\n\r\n/** Returns the localName of a XML node.\r\n * @param domNode - DOM node to get the value from.\r\n * @returns {String} localName of domNode.\r\n */\r\nfunction xmlLocalName(domNode) {\r\n\r\n    return domNode.localName || domNode.baseName;\r\n}\r\n\r\n/** Returns the namespace URI of a XML node.\r\n * @param domNode - DOM node to get the value from.\r\n * @returns {String} Namespace URI of domNode.\r\n */\r\nfunction xmlNamespaceURI(domNode) {\r\n\r\n    return domNode.namespaceURI || null;\r\n}\r\n\r\n/** Returns the value or the inner text of a XML node.\r\n * @param domNode - DOM node to get the value from.\r\n * @return Value of the domNode or the inner text if domNode represents a DOM element node.\r\n */\r\nfunction xmlNodeValue(domNode) {\r\n    \r\n    if (domNode.nodeType === 1) {\r\n        return xmlInnerText(domNode);\r\n    }\r\n    return domNode.nodeValue;\r\n}\r\n\r\n/** Walks through the descendants of the domNode and invokes a callback for each node.\r\n * @param domNode - DOM node whose descendants are going to be traversed.\r\n * @param {Boolean} recursive\r\n * - True if the traversal should include all the descenants of the DOM node.\r\n * - False if the traversal should be scoped only to the direct children of the DOM node.\r\n * @param {Boolean} onChildCallback - Called for each child\r\n * @returns {String} Namespace URI of node.\r\n */\r\nfunction xmlTraverse(domNode, recursive, onChildCallback) {\r\n\r\n    var subtrees = [];\r\n    var child = domNode.firstChild;\r\n    var proceed = true;\r\n    while (child && proceed) {\r\n        proceed = onChildCallback(child);\r\n        if (proceed) {\r\n            if (recursive && child.firstChild) {\r\n                subtrees.push(child.firstChild);\r\n            }\r\n            child = child.nextSibling || subtrees.shift();\r\n        }\r\n    }\r\n}\r\n\r\n/** Returns the next sibling DOM element of the specified DOM node.\r\n * @param domNode - DOM node from which the next sibling is going to be retrieved.\r\n * @param {String} [namespaceURI] - \r\n * @param {String} [localName] - \r\n * @return The node's next sibling DOM element, null if there is none.\r\n */\r\nfunction xmlSiblingElement(domNode, namespaceURI, localName) {\r\n\r\n    var sibling = domNode.nextSibling;\r\n    while (sibling) {\r\n        if (sibling.nodeType === 1) {\r\n            var isExpectedNamespace = !namespaceURI || xmlNamespaceURI(sibling) === namespaceURI;\r\n            var isExpectedNodeName = !localName || xmlLocalName(sibling) === localName;\r\n\r\n            if (isExpectedNamespace && isExpectedNodeName) {\r\n                return sibling;\r\n            }\r\n        }\r\n        sibling = sibling.nextSibling;\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Creates a new empty DOM document node.\r\n * @return New DOM document node.\r\n *\r\n * This function will first try to create a native DOM document using\r\n * the browsers createDocument function.  If the browser doesn't\r\n * support this but supports ActiveXObject, then an attempt to create\r\n * an MSXML 6.0 DOM will be made. If this attempt fails too, then an attempt\r\n * for creating an MXSML 3.0 DOM will be made.  If this last attemp fails or\r\n * the browser doesn't support ActiveXObject then an exception will be thrown.\r\n */\r\nfunction xmlDom() {\r\n    var implementation = window.document.implementation;\r\n    return (implementation && implementation.createDocument) ?\r\n       implementation.createDocument(null, null, null) :\r\n       msXmlDom();\r\n}\r\n\r\n/** Appends a collection of child nodes or string values to a parent DOM node.\r\n * @param parent - DOM node to which the children will be appended.\r\n * @param {Array} children - Array containing DOM nodes or string values that will be appended to the parent.\r\n * @return The parent with the appended children or string values.\r\n *  If a value in the children collection is a string, then a new DOM text node is going to be created\r\n *  for it and then appended to the parent.\r\n */\r\nfunction xmlAppendChildren(parent, children) {\r\n    if (!isArray(children)) {\r\n        return xmlAppendChild(parent, children);\r\n    }\r\n\r\n    var i, len;\r\n    for (i = 0, len = children.length; i < len; i++) {\r\n        children[i] && xmlAppendChild(parent, children[i]);\r\n    }\r\n    return parent;\r\n}\r\n\r\n/** Appends a child node or a string value to a parent DOM node.\r\n * @param parent - DOM node to which the child will be appended.\r\n * @param child - Child DOM node or string value to append to the parent.\r\n * @return The parent with the appended child or string value.\r\n * If child is a string value, then a new DOM text node is going to be created\r\n * for it and then appended to the parent.\r\n */\r\nfunction xmlAppendChild(parent, child) {\r\n\r\n    djsassert(parent !== child, \"xmlAppendChild() - parent and child are one and the same!\");\r\n    if (child) {\r\n        if (typeof child === \"string\") {\r\n            return xmlAppendText(parent, xmlNewText(parent.ownerDocument, child));\r\n        }\r\n        if (child.nodeType === 2) {\r\n            parent.setAttributeNodeNS ? parent.setAttributeNodeNS(child) : parent.setAttributeNode(child);\r\n        } else {\r\n            parent.appendChild(child);\r\n        }\r\n    }\r\n    return parent;\r\n}\r\n\r\n/** Creates a new DOM attribute node.\r\n * @param dom - DOM document used to create the attribute.\r\n * @param {String} namespaceURI - Namespace URI.\r\n * @param {String} qualifiedName - Qualified OData name\r\n * @param {String} value - Value of the new attribute\r\n * @return DOM attribute node for the namespace declaration.\r\n */\r\nfunction xmlNewAttribute(dom, namespaceURI, qualifiedName, value) {\r\n\r\n    var attribute =\r\n        dom.createAttributeNS && dom.createAttributeNS(namespaceURI, qualifiedName) ||\r\n        dom.createNode(2, qualifiedName, namespaceURI || undefined);\r\n\r\n    attribute.value = value || \"\";\r\n    return attribute;\r\n}\r\n\r\n/** Creates a new DOM element node.\r\n * @param dom - DOM document used to create the DOM element.\r\n * @param {String} namespaceURI - Namespace URI of the new DOM element.\r\n * @param {String} qualifiedName - Qualified name in the form of \"prefix:name\" of the new DOM element.\r\n * @param {Array} [children] Collection of child DOM nodes or string values that are going to be appended to the new DOM element.\r\n * @return New DOM element.\r\n * If a value in the children collection is a string, then a new DOM text node is going to be created\r\n * for it and then appended to the new DOM element.\r\n */\r\nfunction xmlNewElement(dom, namespaceURI, qualifiedName, children) {\r\n    var element =\r\n        dom.createElementNS && dom.createElementNS(nampespaceURI, qualifiedName) ||\r\n        dom.createNode(1, qualifiedName, nampespaceURI || undefined);\r\n\r\n    return xmlAppendChildren(element, children || []);\r\n}\r\n\r\n/** Creates a namespace declaration attribute.\r\n * @param dom - DOM document used to create the attribute.\r\n * @param {String} namespaceURI - Namespace URI.\r\n * @param {String} prefix - Namespace prefix.\r\n * @return DOM attribute node for the namespace declaration.\r\n */\r\nfunction xmlNewNSDeclaration(dom, namespaceURI, prefix) {\r\n    return xmlNewAttribute(dom, xmlnsNS, xmlQualifiedName(\"xmlns\", prefix), namespaceURI);\r\n}\r\n\r\n/** Creates a new DOM document fragment node for the specified xml text.\r\n * @param dom - DOM document from which the fragment node is going to be created.\r\n * @param {String} text XML text to be represented by the XmlFragment.\r\n * @return New DOM document fragment object.\r\n */\r\nfunction xmlNewFragment(dom, text) {\r\n\r\n    var value = \"<c>\" + text + \"</c>\";\r\n    var tempDom = xmlParse(value);\r\n    var tempRoot = tempDom.documentElement;\r\n    var imported = (\"importNode\" in dom) ? dom.importNode(tempRoot, true) : tempRoot;\r\n    var fragment = dom.createDocumentFragment();\r\n\r\n    var importedChild = imported.firstChild;\r\n    while (importedChild) {\r\n        fragment.appendChild(importedChild);\r\n        importedChild = importedChild.nextSibling;\r\n    }\r\n    return fragment;\r\n}\r\n\r\n/** Creates new DOM text node.\r\n * @param dom - DOM document used to create the text node.\r\n * @param {String} text - Text value for the DOM text node.\r\n * @return DOM text node.\r\n */ \r\nfunction xmlNewText(dom, text) {\r\n    return dom.createTextNode(text);\r\n}\r\n\r\n/** Creates a new DOM element or DOM attribute node as specified by path and appends it to the DOM tree pointed by root.\r\n * @param dom - DOM document used to create the new node.\r\n * @param root - DOM element node used as root of the subtree on which the new nodes are going to be created.\r\n * @param {String} namespaceURI - Namespace URI of the new DOM element or attribute.\r\n * @param {String} prefix - Prefix used to qualify the name of the new DOM element or attribute.\r\n * @param {String} path - Path string describing the location of the new DOM element or attribute from the root element.\r\n * @return DOM element or attribute node for the last segment of the path.\r\n\r\n * This function will traverse the path and will create a new DOM element with the specified namespace URI and prefix\r\n * for each segment that doesn't have a matching element under root.\r\n * The last segment of the path may be decorated with a starting @ character. In this case a new DOM attribute node\r\n * will be created.\r\n */\r\nfunction xmlNewNodeByPath(dom, root, namespaceURI, prefix, path) {\r\n    var name = \"\";\r\n    var parts = path.split(\"/\");\r\n    var xmlFindNode = xmlFirstChildElement;\r\n    var xmlNewNode = xmlNewElement;\r\n    var xmlNode = root;\r\n\r\n    var i, len;\r\n    for (i = 0, len = parts.length; i < len; i++) {\r\n        name = parts[i];\r\n        if (name.charAt(0) === \"@\") {\r\n            name = name.substring(1);\r\n            xmlFindNode = xmlAttributeNode;\r\n            xmlNewNode = xmlNewAttribute;\r\n        }\r\n\r\n        var childNode = xmlFindNode(xmlNode, namespaceURI, name);\r\n        if (!childNode) {\r\n            childNode = xmlNewNode(dom, namespaceURI, xmlQualifiedName(prefix, name));\r\n            xmlAppendChild(xmlNode, childNode);\r\n        }\r\n        xmlNode = childNode;\r\n    }\r\n    return xmlNode;\r\n}\r\n\r\n/** Returns the text representation of the document to which the specified node belongs.\r\n * @param domNode - Wrapped element in the document to serialize.\r\n * @returns {String} Serialized document.\r\n*/\r\nfunction xmlSerialize(domNode) {\r\n    var xmlSerializer = window.XMLSerializer;\r\n    if (xmlSerializer) {\r\n        var serializer = new xmlSerializer();\r\n        return serializer.serializeToString(domNode);\r\n    }\r\n\r\n    if (domNode.xml) {\r\n        return domNode.xml;\r\n    }\r\n\r\n    throw { message: \"XML serialization unsupported\" };\r\n}\r\n\r\n/** Returns the XML representation of the all the descendants of the node.\r\n * @param domNode - Node to serialize.\r\n * @returns {String} The XML representation of all the descendants of the node.\r\n */\r\nfunction xmlSerializeDescendants(domNode) {\r\n    var children = domNode.childNodes;\r\n    var i, len = children.length;\r\n    if (len === 0) {\r\n        return \"\";\r\n    }\r\n\r\n    // Some implementations of the XMLSerializer don't deal very well with fragments that\r\n    // don't have a DOMElement as their first child. The work around is to wrap all the\r\n    // nodes in a dummy root node named \"c\", serialize it and then just extract the text between\r\n    // the <c> and the </c> substrings.\r\n\r\n    var dom = domNode.ownerDocument;\r\n    var fragment = dom.createDocumentFragment();\r\n    var fragmentRoot = dom.createElement(\"c\");\r\n\r\n    fragment.appendChild(fragmentRoot);\r\n    // Move the children to the fragment tree.\r\n    for (i = 0; i < len; i++) {\r\n        fragmentRoot.appendChild(children[i]);\r\n    }\r\n\r\n    var xml = xmlSerialize(fragment);\r\n    xml = xml.substr(3, xml.length - 7);\r\n\r\n    // Move the children back to the original dom tree.\r\n    for (i = 0; i < len; i++) {\r\n        domNode.appendChild(fragmentRoot.childNodes[i]);\r\n    }\r\n\r\n    return xml;\r\n}\r\n\r\n/** Returns the XML representation of the node and all its descendants.\r\n * @param domNode - Node to serialize\r\n * @returns {String} The XML representation of the node and all its descendants.\r\n */\r\nfunction xmlSerializeNode(domNode) {\r\n\r\n    var xml = domNode.xml;\r\n    if (xml !== undefined) {\r\n        return xml;\r\n    }\r\n\r\n    if (window.XMLSerializer) {\r\n        var serializer = new window.XMLSerializer();\r\n        return serializer.serializeToString(domNode);\r\n    }\r\n\r\n    throw { message: \"XML serialization unsupported\" };\r\n}\r\n\r\nexports.http = http;\r\nexports.w3org = w3org;\r\nexports.xmlNS = xmlNS;\r\nexports.xmlnsNS = xmlnsNS;\r\n\r\nexports.hasLeadingOrTrailingWhitespace = hasLeadingOrTrailingWhitespace;\r\nexports.isXmlNSDeclaration = isXmlNSDeclaration;\r\nexports.xmlAppendChild = xmlAppendChild;\r\nexports.xmlAppendChildren = xmlAppendChildren;\r\nexports.xmlAttributeNode = xmlAttributeNode;\r\nexports.xmlAttributes = xmlAttributes;\r\nexports.xmlAttributeValue = xmlAttributeValue;\r\nexports.xmlBaseURI = xmlBaseURI;\r\nexports.xmlChildElements = xmlChildElements;\r\nexports.xmlFindElementByPath = xmlFindElementByPath;\r\nexports.xmlFindNodeByPath = xmlFindNodeByPath;\r\nexports.xmlFirstChildElement = xmlFirstChildElement;\r\nexports.xmlFirstDescendantElement = xmlFirstDescendantElement;\r\nexports.xmlInnerText = xmlInnerText;\r\nexports.xmlLocalName = xmlLocalName;\r\nexports.xmlNamespaceURI = xmlNamespaceURI;\r\nexports.xmlNodeValue = xmlNodeValue;\r\nexports.xmlDom = xmlDom;\r\nexports.xmlNewAttribute = xmlNewAttribute;\r\nexports.xmlNewElement = xmlNewElement;\r\nexports.xmlNewFragment = xmlNewFragment;\r\nexports.xmlNewNodeByPath = xmlNewNodeByPath;\r\nexports.xmlNewNSDeclaration = xmlNewNSDeclaration;\r\nexports.xmlNewText = xmlNewText;\r\nexports.xmlParse = xmlParse;\r\nexports.xmlQualifiedName = xmlQualifiedName;\r\nexports.xmlSerialize = xmlSerialize;\r\nexports.xmlSerializeDescendants = xmlSerializeDescendants;\r\nexports.xmlSiblingElement = xmlSiblingElement;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar promiseHandlerBase_1 = require('./promiseHandlerBase');\r\nvar PromiseHandler = (function (_super) {\r\n    __extends(PromiseHandler, _super);\r\n    function PromiseHandler() {\r\n        _super.call(this);\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.resolve = resolve;\r\n            self.reject = reject;\r\n        });\r\n        this.deferred = {\r\n            resolve: function () { self.resolve.apply(promise, arguments); },\r\n            reject: function () { self.reject.apply(promise, arguments); },\r\n            promise: promise\r\n        };\r\n    }\r\n    PromiseHandler.prototype.createCallback = function (callback) {\r\n        var settings = promiseHandlerBase_1.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var self = this;\r\n        var result = new promiseHandlerBase_1.CallbackSettings();\r\n        result = extend(result, {\r\n            success: function () {\r\n                settings.success.apply(self.deferred, arguments);\r\n                self.resolve.apply(self.deferred, arguments);\r\n            },\r\n            error: function () {\r\n                Array.prototype.push.call(arguments, self.deferred);\r\n                settings.error.apply(self.deferred, arguments);\r\n            },\r\n            notify: function () {\r\n                settings.notify.apply(self.deferred, arguments);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    PromiseHandler.prototype.getPromise = function () {\r\n        return this.deferred.promise;\r\n    };\r\n    PromiseHandler.compatibilityMode = function () {\r\n        Promise.prototype['fail'] = function (onReject) {\r\n            return this.then(null, function (reason) {\r\n                onReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n        Promise.prototype['always'] = function (onResolveOrReject) {\r\n            return this.then(onResolveOrReject, function (reason) {\r\n                onResolveOrReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n    };\r\n    PromiseHandler.use = function ($data) {\r\n        $data.PromiseHandler = typeof Promise == 'function' ? PromiseHandler : promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.PromiseHandlerBase = promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.Promise = promiseHandlerBase_1.PromiseNotImplemented;\r\n    };\r\n    return PromiseHandler;\r\n}(promiseHandlerBase_1.PromiseHandlerBase));\r\nexports.PromiseHandler = PromiseHandler;\r\n//# sourceMappingURL=promise.js.map","\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar CallbackSettings = (function () {\r\n    function CallbackSettings() {\r\n    }\r\n    return CallbackSettings;\r\n}());\r\nexports.CallbackSettings = CallbackSettings;\r\nvar PromiseNotImplemented = (function () {\r\n    function PromiseNotImplemented() {\r\n    }\r\n    PromiseNotImplemented.prototype.always = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.always', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.done = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.done', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.fail = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.fail', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isRejected = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isRejected', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isResolved = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isResolved', 'Not implemented!')); };\r\n    //notify() { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); }\r\n    //notifyWith() { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.pipe = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.pipe', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.progress = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.progress', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.promise = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.promise', 'Not implemented!')); };\r\n    //reject() { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); }\r\n    //rejectWith() { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); }\r\n    //resolve() { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); }\r\n    //resolveWith() { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.state = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.state', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.then = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.then', 'Not implemented!')); };\r\n    return PromiseNotImplemented;\r\n}());\r\nexports.PromiseNotImplemented = PromiseNotImplemented;\r\nvar PromiseHandlerBase = (function () {\r\n    function PromiseHandlerBase() {\r\n    }\r\n    PromiseHandlerBase.defaultSuccessCallback = function () { };\r\n    PromiseHandlerBase.defaultNotifyCallback = function () { };\r\n    PromiseHandlerBase.defaultErrorCallback = function () {\r\n        if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n            (console.error || console.log).call(console, arguments[0]);\r\n            arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n        }\r\n        else {\r\n            if (arguments[0] instanceof Error) {\r\n                console.error(arguments[0]);\r\n            }\r\n            else {\r\n                console.error(\"DefaultError:\", \"DEFAULT ERROR CALLBACK!\", arguments);\r\n            }\r\n        }\r\n    };\r\n    PromiseHandlerBase.createCallbackSettings = function (callback, defaultSettings) {\r\n        var settings = defaultSettings || {\r\n            success: PromiseHandlerBase.defaultSuccessCallback,\r\n            error: PromiseHandlerBase.defaultErrorCallback,\r\n            notify: PromiseHandlerBase.defaultNotifyCallback\r\n        };\r\n        var result = new CallbackSettings();\r\n        if (callback == null || callback == undefined) {\r\n            result = settings;\r\n        }\r\n        else if (typeof callback == 'function') {\r\n            result = extend(settings, {\r\n                success: callback\r\n            });\r\n        }\r\n        else {\r\n            result = extend(settings, callback);\r\n        }\r\n        var wrapCode = function (fn) {\r\n            var t = this;\r\n            function r() {\r\n                fn.apply(t, arguments);\r\n                fn = function () { };\r\n            }\r\n            return r;\r\n        };\r\n        if (typeof result.error === 'function')\r\n            result.error = wrapCode(result.error);\r\n        return result;\r\n    };\r\n    PromiseHandlerBase.prototype.createCallback = function (callback) {\r\n        return PromiseHandlerBase.createCallbackSettings(callback);\r\n    };\r\n    PromiseHandlerBase.prototype.getPromise = function () {\r\n        return new PromiseNotImplemented();\r\n    };\r\n    return PromiseHandlerBase;\r\n}());\r\nexports.PromiseHandlerBase = PromiseHandlerBase;\r\n//# sourceMappingURL=promiseHandlerBase.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = require('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    }());\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var primitiveAnnotationValue = function (sourceField) { return new metacode.AttributeFunctionChain(function (d, i) {\r\n        if (d['collection'] && d['collection'][0] && Array.isArray(d['collection'][0][sourceField]) && !d[sourceField]) {\r\n            return d['collection'][0][sourceField].map(function (x) { return x.text; });\r\n        }\r\n        var props = d[sourceField];\r\n        if (Array.isArray(props)) {\r\n            return props.filter(function (x) { return 'text' in x; }).map(function (x) { return x.text; })[0];\r\n        }\r\n        else {\r\n            return props;\r\n        }\r\n    }); };\r\n    var annotationTypeSelector = function (source) {\r\n        for (var i in Edm.AnnotationTypes) {\r\n            if (i in source || (source['collection'] && source['collection'][0] && i in source['collection'][0])) {\r\n                return Edm.AnnotationTypes[i];\r\n            }\r\n        }\r\n        return Annotation;\r\n    };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                if (parser) {\r\n                    var v = parser.invoke(definition, _this);\r\n                    _this[membername] = v;\r\n                }\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    }());\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Property.prototype, \"annotations\", void 0);\r\n        return Property;\r\n    }(EdmItemBase));\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"annotations\", void 0);\r\n        return NavigationProperty;\r\n    }(EdmItemBase));\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    }(EdmItemBase));\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    }(EdmItemBase));\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    }(EdmItemBase));\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"annotations\", void 0);\r\n        return EntityType;\r\n    }(EdmItemBase));\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"annotations\", void 0);\r\n        return ComplexType;\r\n    }(EdmItemBase));\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Parameter.prototype, \"annotations\", void 0);\r\n        return Parameter;\r\n    }(EdmItemBase));\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ReturnType.prototype, \"annotations\", void 0);\r\n        return ReturnType;\r\n    }(EdmItemBase));\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    }(EdmItemBase));\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"annotations\", void 0);\r\n        return Action;\r\n    }(Invokable));\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"annotations\", void 0);\r\n        return Function;\r\n    }(Invokable));\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Member.prototype, \"annotations\", void 0);\r\n        return Member;\r\n    }(EdmItemBase));\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"annotations\", void 0);\r\n        return EnumType;\r\n    }(EdmItemBase));\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntitySet.prototype, \"annotations\", void 0);\r\n        return EntitySet;\r\n    }(EdmItemBase));\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    }(EdmItemBase));\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    }(EdmItemBase));\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    }(EdmItemBase));\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotations\", function (prop, i) { return new Edm.Annotations(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"annotations\", void 0);\r\n        return Schema;\r\n    }(EdmItemBase));\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    }(EdmItemBase));\r\n    Edm.DataServices = DataServices;\r\n    var Reference = (function (_super) {\r\n        __extends(Reference, _super);\r\n        function Reference() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Reference.prototype, \"uri\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"include\", function (prop, i) { return new ReferenceInclude(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Reference.prototype, \"includes\", void 0);\r\n        return Reference;\r\n    }(EdmItemBase));\r\n    Edm.Reference = Reference;\r\n    var ReferenceInclude = (function (_super) {\r\n        __extends(ReferenceInclude, _super);\r\n        function ReferenceInclude() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReferenceInclude.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReferenceInclude.prototype, \"alias\", void 0);\r\n        return ReferenceInclude;\r\n    }(EdmItemBase));\r\n    Edm.ReferenceInclude = ReferenceInclude;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', DataServices)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"reference\", function (prop, i) { return new Reference(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"references\", void 0);\r\n        return Edmx;\r\n    }(EdmItemBase));\r\n    Edm.Edmx = Edmx;\r\n    var Annotations = (function (_super) {\r\n        __extends(Annotations, _super);\r\n        function Annotations() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Annotations.prototype, \"target\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotations.prototype, \"qualifier\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"annotation\", function (prop, i) { return new (annotationTypeSelector(prop))(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Annotations.prototype, \"annotations\", void 0);\r\n        return Annotations;\r\n    }(EdmItemBase));\r\n    Edm.Annotations = Annotations;\r\n    var Annotation = (function (_super) {\r\n        __extends(Annotation, _super);\r\n        function Annotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Unknown\";\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotation.prototype, \"term\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotation.prototype, \"qualifier\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Annotation.prototype, \"path\", void 0);\r\n        return Annotation;\r\n    }(EdmItemBase));\r\n    Edm.Annotation = Annotation;\r\n    var BinaryAnnotation = (function (_super) {\r\n        __extends(BinaryAnnotation, _super);\r\n        function BinaryAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Binary\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"binary\")), \r\n            __metadata('design:type', Object)\r\n        ], BinaryAnnotation.prototype, \"binary\", void 0);\r\n        return BinaryAnnotation;\r\n    }(Annotation));\r\n    Edm.BinaryAnnotation = BinaryAnnotation;\r\n    var BoolAnnotation = (function (_super) {\r\n        __extends(BoolAnnotation, _super);\r\n        function BoolAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Bool\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"bool\")), \r\n            __metadata('design:type', Object)\r\n        ], BoolAnnotation.prototype, \"bool\", void 0);\r\n        return BoolAnnotation;\r\n    }(Annotation));\r\n    Edm.BoolAnnotation = BoolAnnotation;\r\n    var DateAnnotation = (function (_super) {\r\n        __extends(DateAnnotation, _super);\r\n        function DateAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Date\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"date\")), \r\n            __metadata('design:type', Object)\r\n        ], DateAnnotation.prototype, \"date\", void 0);\r\n        return DateAnnotation;\r\n    }(Annotation));\r\n    Edm.DateAnnotation = DateAnnotation;\r\n    var DateTimeOffsetAnnotation = (function (_super) {\r\n        __extends(DateTimeOffsetAnnotation, _super);\r\n        function DateTimeOffsetAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"DateTimeOffset\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"dateTimeOffset\")), \r\n            __metadata('design:type', Object)\r\n        ], DateTimeOffsetAnnotation.prototype, \"dateTimeOffset\", void 0);\r\n        return DateTimeOffsetAnnotation;\r\n    }(Annotation));\r\n    Edm.DateTimeOffsetAnnotation = DateTimeOffsetAnnotation;\r\n    var DecimalAnnotation = (function (_super) {\r\n        __extends(DecimalAnnotation, _super);\r\n        function DecimalAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Decimal\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"decimal\")), \r\n            __metadata('design:type', Object)\r\n        ], DecimalAnnotation.prototype, \"decimal\", void 0);\r\n        return DecimalAnnotation;\r\n    }(Annotation));\r\n    Edm.DecimalAnnotation = DecimalAnnotation;\r\n    var DurationAnnotation = (function (_super) {\r\n        __extends(DurationAnnotation, _super);\r\n        function DurationAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Duration\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"duration\")), \r\n            __metadata('design:type', Object)\r\n        ], DurationAnnotation.prototype, \"duration\", void 0);\r\n        return DurationAnnotation;\r\n    }(Annotation));\r\n    Edm.DurationAnnotation = DurationAnnotation;\r\n    var EnumMemberAnnotation = (function (_super) {\r\n        __extends(EnumMemberAnnotation, _super);\r\n        function EnumMemberAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"EnumMember\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"enumMember\")), \r\n            __metadata('design:type', Object)\r\n        ], EnumMemberAnnotation.prototype, \"enumMember\", void 0);\r\n        return EnumMemberAnnotation;\r\n    }(Annotation));\r\n    Edm.EnumMemberAnnotation = EnumMemberAnnotation;\r\n    var FloatAnnotation = (function (_super) {\r\n        __extends(FloatAnnotation, _super);\r\n        function FloatAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Float\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"float\")), \r\n            __metadata('design:type', Object)\r\n        ], FloatAnnotation.prototype, \"float\", void 0);\r\n        return FloatAnnotation;\r\n    }(Annotation));\r\n    Edm.FloatAnnotation = FloatAnnotation;\r\n    var GuidAnnotation = (function (_super) {\r\n        __extends(GuidAnnotation, _super);\r\n        function GuidAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Guid\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"guid\")), \r\n            __metadata('design:type', Object)\r\n        ], GuidAnnotation.prototype, \"guid\", void 0);\r\n        return GuidAnnotation;\r\n    }(Annotation));\r\n    Edm.GuidAnnotation = GuidAnnotation;\r\n    var IntAnnotation = (function (_super) {\r\n        __extends(IntAnnotation, _super);\r\n        function IntAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Int\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"int\")), \r\n            __metadata('design:type', Object)\r\n        ], IntAnnotation.prototype, \"int\", void 0);\r\n        return IntAnnotation;\r\n    }(Annotation));\r\n    Edm.IntAnnotation = IntAnnotation;\r\n    var StringAnnotation = (function (_super) {\r\n        __extends(StringAnnotation, _super);\r\n        function StringAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"String\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"string\")), \r\n            __metadata('design:type', Object)\r\n        ], StringAnnotation.prototype, \"string\", void 0);\r\n        return StringAnnotation;\r\n    }(Annotation));\r\n    Edm.StringAnnotation = StringAnnotation;\r\n    var TimeOfDayAnnotation = (function (_super) {\r\n        __extends(TimeOfDayAnnotation, _super);\r\n        function TimeOfDayAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"TimeOfDay\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"timeOfDay\")), \r\n            __metadata('design:type', Object)\r\n        ], TimeOfDayAnnotation.prototype, \"timeOfDay\", void 0);\r\n        return TimeOfDayAnnotation;\r\n    }(Annotation));\r\n    Edm.TimeOfDayAnnotation = TimeOfDayAnnotation;\r\n    var PropertyPathAnnotation = (function (_super) {\r\n        __extends(PropertyPathAnnotation, _super);\r\n        function PropertyPathAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"PropertyPath\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"propertyPath\")), \r\n            __metadata('design:type', Object)\r\n        ], PropertyPathAnnotation.prototype, \"propertyPaths\", void 0);\r\n        return PropertyPathAnnotation;\r\n    }(Annotation));\r\n    Edm.PropertyPathAnnotation = PropertyPathAnnotation;\r\n    var NavigationPropertyPathAnnotation = (function (_super) {\r\n        __extends(NavigationPropertyPathAnnotation, _super);\r\n        function NavigationPropertyPathAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"NavigationPropertyPath\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"propertyPath\")), \r\n            __metadata('design:type', Object)\r\n        ], NavigationPropertyPathAnnotation.prototype, \"navigationPropertyPaths\", void 0);\r\n        return NavigationPropertyPathAnnotation;\r\n    }(Annotation));\r\n    Edm.NavigationPropertyPathAnnotation = NavigationPropertyPathAnnotation;\r\n    var AnnotationPathAnnotation = (function (_super) {\r\n        __extends(AnnotationPathAnnotation, _super);\r\n        function AnnotationPathAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"AnnotationPath\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"annotationPath\")), \r\n            __metadata('design:type', Object)\r\n        ], AnnotationPathAnnotation.prototype, \"annotationPaths\", void 0);\r\n        return AnnotationPathAnnotation;\r\n    }(Annotation));\r\n    Edm.AnnotationPathAnnotation = AnnotationPathAnnotation;\r\n    var NullAnnotation = (function (_super) {\r\n        __extends(NullAnnotation, _super);\r\n        function NullAnnotation() {\r\n            _super.apply(this, arguments);\r\n            this.annotationType = \"Null\";\r\n        }\r\n        __decorate([\r\n            parseAs(primitiveAnnotationValue(\"null\")), \r\n            __metadata('design:type', Array)\r\n        ], NullAnnotation.prototype, \"null\", void 0);\r\n        return NullAnnotation;\r\n    }(Annotation));\r\n    Edm.NullAnnotation = NullAnnotation;\r\n    Edm.AnnotationTypes = {\r\n        binary: BinaryAnnotation,\r\n        bool: BoolAnnotation,\r\n        date: DateAnnotation,\r\n        dateTimeOffset: DateTimeOffsetAnnotation,\r\n        decimal: DecimalAnnotation,\r\n        duration: DurationAnnotation,\r\n        enumMember: EnumMemberAnnotation,\r\n        float: FloatAnnotation,\r\n        guid: GuidAnnotation,\r\n        int: IntAnnotation,\r\n        string: StringAnnotation,\r\n        timeOfDay: TimeOfDayAnnotation,\r\n        propertyPath: PropertyPathAnnotation,\r\n        navigationPropertyPath: NavigationPropertyPathAnnotation,\r\n        annotationPath: AnnotationPathAnnotation,\r\n        null: NullAnnotation\r\n    };\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n//# sourceMappingURL=edm.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar definitionPropName = 'definition';\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var def = target[definitionPropName] = target[definitionPropName] || {};\r\n        var md = (def.members || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        def.members = md;\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            target[definitionPropName][_this.attributeName] = target[definitionPropName][_this.attributeName] || {};\r\n            target[definitionPropName][_this.attributeName][key] = decoratorValue;\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.getMembers = function (target) {\r\n        return target[definitionPropName].members;\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return ((target[definitionPropName] || {})[attributeName] || {})[memberName];\r\n    };\r\n    return MemberAttribute;\r\n}());\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n}());\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n}(MemberAttribute));\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n//# sourceMappingURL=metacode.js.map","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","function DOMParser(options){\r\n\tthis.options = options ||{locator:{}};\r\n\t\r\n}\r\nDOMParser.prototype.parseFromString = function(source,mimeType){\t\r\n\tvar options = this.options;\r\n\tvar sax =  new XMLReader();\r\n\tvar domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler\r\n\tvar errorHandler = options.errorHandler;\r\n\tvar locator = options.locator;\r\n\tvar defaultNSMap = options.xmlns||{};\r\n\tvar entityMap = {'lt':'<','gt':'>','amp':'&','quot':'\"','apos':\"'\"}\r\n\tif(locator){\r\n\t\tdomBuilder.setDocumentLocator(locator)\r\n\t}\r\n\t\r\n\tsax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);\r\n\tsax.domBuilder = options.domBuilder || domBuilder;\r\n\tif(/\\/x?html?$/.test(mimeType)){\r\n\t\tentityMap.nbsp = '\\xa0';\r\n\t\tentityMap.copy = '\\xa9';\r\n\t\tdefaultNSMap['']= 'http://www.w3.org/1999/xhtml';\r\n\t}\r\n\tdefaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';\r\n\tif(source){\r\n\t\tsax.parse(source,defaultNSMap,entityMap);\r\n\t}else{\r\n\t\tsax.errorHandler.error(\"invalid document source\");\r\n\t}\r\n\treturn domBuilder.document;\r\n}\r\nfunction buildErrorHandler(errorImpl,domBuilder,locator){\r\n\tif(!errorImpl){\r\n\t\tif(domBuilder instanceof DOMHandler){\r\n\t\t\treturn domBuilder;\r\n\t\t}\r\n\t\terrorImpl = domBuilder ;\r\n\t}\r\n\tvar errorHandler = {}\r\n\tvar isCallback = errorImpl instanceof Function;\r\n\tlocator = locator||{}\r\n\tfunction build(key){\r\n\t\tvar fn = errorImpl[key];\r\n\t\tif(!fn && isCallback){\r\n\t\t\tfn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;\r\n\t\t}\r\n\t\terrorHandler[key] = fn && function(msg){\r\n\t\t\tfn('[xmldom '+key+']\\t'+msg+_locator(locator));\r\n\t\t}||function(){};\r\n\t}\r\n\tbuild('warning');\r\n\tbuild('error');\r\n\tbuild('fatalError');\r\n\treturn errorHandler;\r\n}\r\n\r\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\r\n/**\r\n * +ContentHandler+ErrorHandler\r\n * +LexicalHandler+EntityResolver2\r\n * -DeclHandler-DTDHandler \r\n * \r\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n */\r\nfunction DOMHandler() {\r\n    this.cdata = false;\r\n}\r\nfunction position(locator,node){\r\n\tnode.lineNumber = locator.lineNumber;\r\n\tnode.columnNumber = locator.columnNumber;\r\n}\r\n/**\r\n * @see org.xml.sax.ContentHandler#startDocument\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n */ \r\nDOMHandler.prototype = {\r\n\tstartDocument : function() {\r\n    \tthis.document = new DOMImplementation().createDocument(null, null, null);\r\n    \tif (this.locator) {\r\n        \tthis.document.documentURI = this.locator.systemId;\r\n    \t}\r\n\t},\r\n\tstartElement:function(namespaceURI, localName, qName, attrs) {\r\n\t\tvar doc = this.document;\r\n\t    var el = doc.createElementNS(namespaceURI, qName||localName);\r\n\t    var len = attrs.length;\r\n\t    appendElement(this, el);\r\n\t    this.currentElement = el;\r\n\t    \r\n\t\tthis.locator && position(this.locator,el)\r\n\t    for (var i = 0 ; i < len; i++) {\r\n\t        var namespaceURI = attrs.getURI(i);\r\n\t        var value = attrs.getValue(i);\r\n\t        var qName = attrs.getQName(i);\r\n\t\t\tvar attr = doc.createAttributeNS(namespaceURI, qName);\r\n\t\t\tif( attr.getOffset){\r\n\t\t\t\tposition(attr.getOffset(1),attr)\r\n\t\t\t}\r\n\t\t\tattr.value = attr.nodeValue = value;\r\n\t\t\tel.setAttributeNode(attr)\r\n\t    }\r\n\t},\r\n\tendElement:function(namespaceURI, localName, qName) {\r\n\t\tvar current = this.currentElement\r\n\t    var tagName = current.tagName;\r\n\t    this.currentElement = current.parentNode;\r\n\t},\r\n\tstartPrefixMapping:function(prefix, uri) {\r\n\t},\r\n\tendPrefixMapping:function(prefix) {\r\n\t},\r\n\tprocessingInstruction:function(target, data) {\r\n\t    var ins = this.document.createProcessingInstruction(target, data);\r\n\t    this.locator && position(this.locator,ins)\r\n\t    appendElement(this, ins);\r\n\t},\r\n\tignorableWhitespace:function(ch, start, length) {\r\n\t},\r\n\tcharacters:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t\t//console.log(chars)\r\n\t\tif(this.currentElement && chars){\r\n\t\t\tif (this.cdata) {\r\n\t\t\t\tvar charNode = this.document.createCDATASection(chars);\r\n\t\t\t\tthis.currentElement.appendChild(charNode);\r\n\t\t\t} else {\r\n\t\t\t\tvar charNode = this.document.createTextNode(chars);\r\n\t\t\t\tthis.currentElement.appendChild(charNode);\r\n\t\t\t}\r\n\t\t\tthis.locator && position(this.locator,charNode)\r\n\t\t}\r\n\t},\r\n\tskippedEntity:function(name) {\r\n\t},\r\n\tendDocument:function() {\r\n\t\tthis.document.normalize();\r\n\t},\r\n\tsetDocumentLocator:function (locator) {\r\n\t    if(this.locator = locator){// && !('lineNumber' in locator)){\r\n\t    \tlocator.lineNumber = 0;\r\n\t    }\r\n\t},\r\n\t//LexicalHandler\r\n\tcomment:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t    var comm = this.document.createComment(chars);\r\n\t    this.locator && position(this.locator,comm)\r\n\t    appendElement(this, comm);\r\n\t},\r\n\t\r\n\tstartCDATA:function() {\r\n\t    //used in characters() methods\r\n\t    this.cdata = true;\r\n\t},\r\n\tendCDATA:function() {\r\n\t    this.cdata = false;\r\n\t},\r\n\t\r\n\tstartDTD:function(name, publicId, systemId) {\r\n\t\tvar impl = this.document.implementation;\r\n\t    if (impl && impl.createDocumentType) {\r\n\t        var dt = impl.createDocumentType(name, publicId, systemId);\r\n\t        this.locator && position(this.locator,dt)\r\n\t        appendElement(this, dt);\r\n\t    }\r\n\t},\r\n\t/**\r\n\t * @see org.xml.sax.ErrorHandler\r\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n\t */\r\n\twarning:function(error) {\r\n\t\tconsole.warn('[xmldom warning]\\t'+error,_locator(this.locator));\r\n\t},\r\n\terror:function(error) {\r\n\t\tconsole.error('[xmldom error]\\t'+error,_locator(this.locator));\r\n\t},\r\n\tfatalError:function(error) {\r\n\t\tconsole.error('[xmldom fatalError]\\t'+error,_locator(this.locator));\r\n\t    throw error;\r\n\t}\r\n}\r\nfunction _locator(l){\r\n\tif(l){\r\n\t\treturn '\\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'\r\n\t}\r\n}\r\nfunction _toString(chars,start,length){\r\n\tif(typeof chars == 'string'){\r\n\t\treturn chars.substr(start,length)\r\n\t}else{//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\r\n\t\tif(chars.length >= start+length || start){\r\n\t\t\treturn new java.lang.String(chars,start,length)+'';\r\n\t\t}\r\n\t\treturn chars;\r\n\t}\r\n}\r\n\r\n/*\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n * used method of org.xml.sax.ext.LexicalHandler:\r\n *  #comment(chars, start, length)\r\n *  #startCDATA()\r\n *  #endCDATA()\r\n *  #startDTD(name, publicId, systemId)\r\n *\r\n *\r\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n *  #endDTD()\r\n *  #startEntity(name)\r\n *  #endEntity(name)\r\n *\r\n *\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n * IGNORED method of org.xml.sax.ext.DeclHandler\r\n * \t#attributeDecl(eName, aName, type, mode, value)\r\n *  #elementDecl(name, model)\r\n *  #externalEntityDecl(name, publicId, systemId)\r\n *  #internalEntityDecl(name, value)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n * IGNORED method of org.xml.sax.EntityResolver2\r\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n *  #resolveEntity(publicId, systemId)\r\n *  #getExternalSubset(name, baseURI)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n * IGNORED method of org.xml.sax.DTDHandler\r\n *  #notationDecl(name, publicId, systemId) {};\r\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n */\r\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){\r\n\tDOMHandler.prototype[key] = function(){return null}\r\n})\r\n\r\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\r\nfunction appendElement (hander,node) {\r\n    if (!hander.currentElement) {\r\n        hander.document.appendChild(node);\r\n    } else {\r\n        hander.currentElement.appendChild(node);\r\n    }\r\n}//appendChild and setAttributeNS are preformance key\r\n\r\nif(typeof require == 'function'){\r\n\tvar XMLReader = require('./sax').XMLReader;\r\n\tvar DOMImplementation = exports.DOMImplementation = require('./dom').DOMImplementation;\r\n\texports.XMLSerializer = require('./dom').XMLSerializer ;\r\n\texports.DOMParser = DOMParser;\r\n}\r\n","/*\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n */\n\nfunction copy(src,dest){\n\tfor(var p in src){\n\t\tdest[p] = src[p];\n\t}\n}\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */\nfunction _extends(Class,Super){\n\tvar pt = Class.prototype;\n\tif(Object.create){\n\t\tvar ppt = Object.create(Super.prototype)\n\t\tpt.__proto__ = ppt;\n\t}\n\tif(!(pt instanceof Super)){\n\t\tfunction t(){};\n\t\tt.prototype = Super.prototype;\n\t\tt = new t();\n\t\tcopy(pt,t);\n\t\tClass.prototype = pt = t;\n\t}\n\tif(pt.constructor != Class){\n\t\tif(typeof Class != 'function'){\n\t\t\tconsole.error(\"unknow Class:\"+Class)\n\t\t}\n\t\tpt.constructor = Class\n\t}\n}\nvar htmlns = 'http://www.w3.org/1999/xhtml' ;\n// Node Types\nvar NodeType = {}\nvar ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;\nvar ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;\nvar TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;\nvar CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;\nvar ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;\nvar ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;\nvar DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;\nvar DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;\nvar DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;\nvar NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;\n\n// ExceptionCode\nvar ExceptionCode = {}\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]=\"Index size error\"),1);\nvar DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]=\"DOMString size error\"),2);\nvar HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]=\"Hierarchy request error\"),3);\nvar WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]=\"Wrong document\"),4);\nvar INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]=\"Invalid character\"),5);\nvar NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]=\"No data allowed\"),6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]=\"No modification allowed\"),7);\nvar NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]=\"Not found\"),8);\nvar NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]=\"Not supported\"),9);\nvar INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]=\"Attribute in use\"),10);\n//level2\nvar INVALID_STATE_ERR        \t= ExceptionCode.INVALID_STATE_ERR        \t= ((ExceptionMessage[11]=\"Invalid state\"),11);\nvar SYNTAX_ERR               \t= ExceptionCode.SYNTAX_ERR               \t= ((ExceptionMessage[12]=\"Syntax error\"),12);\nvar INVALID_MODIFICATION_ERR \t= ExceptionCode.INVALID_MODIFICATION_ERR \t= ((ExceptionMessage[13]=\"Invalid modification\"),13);\nvar NAMESPACE_ERR            \t= ExceptionCode.NAMESPACE_ERR           \t= ((ExceptionMessage[14]=\"Invalid namespace\"),14);\nvar INVALID_ACCESS_ERR       \t= ExceptionCode.INVALID_ACCESS_ERR      \t= ((ExceptionMessage[15]=\"Invalid access\"),15);\n\n\nfunction DOMException(code, message) {\n\tif(message instanceof Error){\n\t\tvar error = message;\n\t}else{\n\t\terror = this;\n\t\tError.call(this, ExceptionMessage[code]);\n\t\tthis.message = ExceptionMessage[code];\n\t\tif(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n\t}\n\terror.code = code;\n\tif(message) this.message = this.message + \": \" + message;\n\treturn error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode,DOMException)\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */\nfunction NodeList() {\n};\nNodeList.prototype = {\n\t/**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */\n\tlength:0, \n\t/**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long \n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index. \n\t */\n\titem: function(index) {\n\t\treturn this[index] || null;\n\t},\n\ttoString:function(){\n\t\tfor(var buf = [], i = 0;i<this.length;i++){\n\t\t\tserializeToString(this[i],buf);\n\t\t}\n\t\treturn buf.join('');\n\t}\n};\nfunction LiveNodeList(node,refresh){\n\tthis._node = node;\n\tthis._refresh = refresh\n\t_updateLiveList(this);\n}\nfunction _updateLiveList(list){\n\tvar inc = list._node._inc || list._node.ownerDocument._inc;\n\tif(list._inc != inc){\n\t\tvar ls = list._refresh(list._node);\n\t\t//console.log(ls.length)\n\t\t__set__(list,'length',ls.length);\n\t\tcopy(ls,list);\n\t\tlist._inc = inc;\n\t}\n}\nLiveNodeList.prototype.item = function(i){\n\t_updateLiveList(this);\n\treturn this[i];\n}\n\n_extends(LiveNodeList,NodeList);\n/**\n * \n * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities \n */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list,node){\n\tvar i = list.length;\n\twhile(i--){\n\t\tif(list[i] === node){return i}\n\t}\n}\n\nfunction _addNamedNode(el,list,newAttr,oldAttr){\n\tif(oldAttr){\n\t\tlist[_findNodeIndex(list,oldAttr)] = newAttr;\n\t}else{\n\t\tlist[list.length++] = newAttr;\n\t}\n\tif(el){\n\t\tnewAttr.ownerElement = el;\n\t\tvar doc = el.ownerDocument;\n\t\tif(doc){\n\t\t\toldAttr && _onRemoveAttribute(doc,el,oldAttr);\n\t\t\t_onAddAttribute(doc,el,newAttr);\n\t\t}\n\t}\n}\nfunction _removeNamedNode(el,list,attr){\n\tvar i = _findNodeIndex(list,attr);\n\tif(i>=0){\n\t\tvar lastIndex = list.length-1\n\t\twhile(i<lastIndex){\n\t\t\tlist[i] = list[++i]\n\t\t}\n\t\tlist.length = lastIndex;\n\t\tif(el){\n\t\t\tvar doc = el.ownerDocument;\n\t\t\tif(doc){\n\t\t\t\t_onRemoveAttribute(doc,el,attr);\n\t\t\t\tattr.ownerElement = null;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tthrow DOMException(NOT_FOUND_ERR,new Error())\n\t}\n}\nNamedNodeMap.prototype = {\n\tlength:0,\n\titem:NodeList.prototype.item,\n\tgetNamedItem: function(key) {\n//\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n//\t\t\treturn null;\n//\t\t}\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar attr = this[i];\n\t\t\tif(attr.nodeName == key){\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t},\n\tsetNamedItem: function(attr) {\n\t\tvar el = attr.ownerElement;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\tvar oldAttr = this.getNamedItem(attr.nodeName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\t/* returns Node */\n\tsetNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n\t\tvar el = attr.ownerElement, oldAttr;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\toldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\n\t/* returns Node */\n\tremoveNamedItem: function(key) {\n\t\tvar attr = this.getNamedItem(key);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t\t\n\t\t\n\t},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\t\n\t//for level2\n\tremoveNamedItemNS:function(namespaceURI,localName){\n\t\tvar attr = this.getNamedItemNS(namespaceURI,localName);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t},\n\tgetNamedItemNS: function(namespaceURI, localName) {\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar node = this[i];\n\t\t\tif(node.localName == localName && node.namespaceURI == namespaceURI){\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n};\n/**\n * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490\n */\nfunction DOMImplementation(/* Object */ features) {\n\tthis._features = {};\n\tif (features) {\n\t\tfor (var feature in features) {\n\t\t\t this._features = features[feature];\n\t\t}\n\t}\n};\n\nDOMImplementation.prototype = {\n\thasFeature: function(/* string */ feature, /* string */ version) {\n\t\tvar versions = this._features[feature.toLowerCase()];\n\t\tif (versions && (!version || version in versions)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR\n\t\tvar doc = new Document();\n\t\tdoc.implementation = this;\n\t\tdoc.childNodes = new NodeList();\n\t\tdoc.doctype = doctype;\n\t\tif(doctype){\n\t\t\tdoc.appendChild(doctype);\n\t\t}\n\t\tif(qualifiedName){\n\t\t\tvar root = doc.createElementNS(namespaceURI,qualifiedName);\n\t\t\tdoc.appendChild(root);\n\t\t}\n\t\treturn doc;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR\n\t\tvar node = new DocumentType();\n\t\tnode.name = qualifiedName;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.publicId = publicId;\n\t\tnode.systemId = systemId;\n\t\t// Introduced in DOM Level 2:\n\t\t//readonly attribute DOMString        internalSubset;\n\t\t\n\t\t//TODO:..\n\t\t//  readonly attribute NamedNodeMap     entities;\n\t\t//  readonly attribute NamedNodeMap     notations;\n\t\treturn node;\n\t}\n};\n\n\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */\n\nfunction Node() {\n};\n\nNode.prototype = {\n\tfirstChild : null,\n\tlastChild : null,\n\tpreviousSibling : null,\n\tnextSibling : null,\n\tattributes : null,\n\tparentNode : null,\n\tchildNodes : null,\n\townerDocument : null,\n\tnodeValue : null,\n\tnamespaceURI : null,\n\tprefix : null,\n\tlocalName : null,\n\t// Modified in DOM Level 2:\n\tinsertBefore:function(newChild, refChild){//raises \n\t\treturn _insertBefore(this,newChild,refChild);\n\t},\n\treplaceChild:function(newChild, oldChild){//raises \n\t\tthis.insertBefore(newChild,oldChild);\n\t\tif(oldChild){\n\t\t\tthis.removeChild(oldChild);\n\t\t}\n\t},\n\tremoveChild:function(oldChild){\n\t\treturn _removeChild(this,oldChild);\n\t},\n\tappendChild:function(newChild){\n\t\treturn this.insertBefore(newChild,null);\n\t},\n\thasChildNodes:function(){\n\t\treturn this.firstChild != null;\n\t},\n\tcloneNode:function(deep){\n\t\treturn cloneNode(this.ownerDocument||this,this,deep);\n\t},\n\t// Modified in DOM Level 2:\n\tnormalize:function(){\n\t\tvar child = this.firstChild;\n\t\twhile(child){\n\t\t\tvar next = child.nextSibling;\n\t\t\tif(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){\n\t\t\t\tthis.removeChild(next);\n\t\t\t\tchild.appendData(next.data);\n\t\t\t}else{\n\t\t\t\tchild.normalize();\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t}\n\t},\n  \t// Introduced in DOM Level 2:\n\tisSupported:function(feature, version){\n\t\treturn this.ownerDocument.implementation.hasFeature(feature,version);\n\t},\n    // Introduced in DOM Level 2:\n    hasAttributes:function(){\n    \treturn this.attributes.length>0;\n    },\n    lookupPrefix:function(namespaceURI){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tfor(var n in map){\n    \t\t\t\tif(map[n] == namespaceURI){\n    \t\t\t\t\treturn n;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == 2?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI:function(prefix){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tif(prefix in map){\n    \t\t\t\treturn map[prefix] ;\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == 2?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace:function(namespaceURI){\n    \tvar prefix = this.lookupPrefix(namespaceURI);\n    \treturn prefix == null;\n    }\n};\n\n\nfunction _xmlEncoder(c){\n\treturn c == '<' && '&lt;' ||\n         c == '>' && '&gt;' ||\n         c == '&' && '&amp;' ||\n         c == '\"' && '&quot;' ||\n         '&#'+c.charCodeAt()+';'\n}\n\n\ncopy(NodeType,Node);\ncopy(NodeType,Node.prototype);\n\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */\nfunction _visitNode(node,callback){\n\tif(callback(node)){\n\t\treturn true;\n\t}\n\tif(node = node.firstChild){\n\t\tdo{\n\t\t\tif(_visitNode(node,callback)){return true}\n        }while(node=node.nextSibling)\n    }\n}\n\n\n\nfunction Document(){\n}\nfunction _onAddAttribute(doc,el,newAttr){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tel._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value\n\t}\n}\nfunction _onRemoveAttribute(doc,el,newAttr,remove){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tdelete el._nsMap[newAttr.prefix?newAttr.localName:'']\n\t}\n}\nfunction _onUpdateChild(doc,el,newChild){\n\tif(doc && doc._inc){\n\t\tdoc._inc++;\n\t\t//update childNodes\n\t\tvar cs = el.childNodes;\n\t\tif(newChild){\n\t\t\tcs[cs.length++] = newChild;\n\t\t}else{\n\t\t\t//console.log(1)\n\t\t\tvar child = el.firstChild;\n\t\t\tvar i = 0;\n\t\t\twhile(child){\n\t\t\t\tcs[i++] = child;\n\t\t\t\tchild =child.nextSibling;\n\t\t\t}\n\t\t\tcs.length = i;\n\t\t}\n\t}\n}\n\n/**\n * attributes;\n * children;\n * \n * writeable properties:\n * nodeValue,Attr:value,CharacterData:data\n * prefix\n */\nfunction _removeChild(parentNode,child){\n\tvar previous = child.previousSibling;\n\tvar next = child.nextSibling;\n\tif(previous){\n\t\tprevious.nextSibling = next;\n\t}else{\n\t\tparentNode.firstChild = next\n\t}\n\tif(next){\n\t\tnext.previousSibling = previous;\n\t}else{\n\t\tparentNode.lastChild = previous;\n\t}\n\t_onUpdateChild(parentNode.ownerDocument,parentNode);\n\treturn child;\n}\n/**\n * preformance key(refChild == null)\n */\nfunction _insertBefore(parentNode,newChild,nextChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tcp.removeChild(newChild);//remove and update\n\t}\n\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\tvar newFirst = newChild.firstChild;\n\t\tif (newFirst == null) {\n\t\t\treturn newChild;\n\t\t}\n\t\tvar newLast = newChild.lastChild;\n\t}else{\n\t\tnewFirst = newLast = newChild;\n\t}\n\tvar pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;\n\n\tnewFirst.previousSibling = pre;\n\tnewLast.nextSibling = nextChild;\n\t\n\t\n\tif(pre){\n\t\tpre.nextSibling = newFirst;\n\t}else{\n\t\tparentNode.firstChild = newFirst;\n\t}\n\tif(nextChild == null){\n\t\tparentNode.lastChild = newLast;\n\t}else{\n\t\tnextChild.previousSibling = newLast;\n\t}\n\tdo{\n\t\tnewFirst.parentNode = parentNode;\n\t}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))\n\t_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);\n\t//console.log(parentNode.lastChild.nextSibling == null)\n\tif (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n\t\tnewChild.firstChild = newChild.lastChild = null;\n\t}\n\treturn newChild;\n}\nfunction _appendSingleChild(parentNode,newChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tvar pre = parentNode.lastChild;\n\t\tcp.removeChild(newChild);//remove and update\n\t\tvar pre = parentNode.lastChild;\n\t}\n\tvar pre = parentNode.lastChild;\n\tnewChild.parentNode = parentNode;\n\tnewChild.previousSibling = pre;\n\tnewChild.nextSibling = null;\n\tif(pre){\n\t\tpre.nextSibling = newChild;\n\t}else{\n\t\tparentNode.firstChild = newChild;\n\t}\n\tparentNode.lastChild = newChild;\n\t_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);\n\treturn newChild;\n\t//console.log(\"__aa\",parentNode.lastChild.nextSibling == null)\n}\nDocument.prototype = {\n\t//implementation : null,\n\tnodeName :  '#document',\n\tnodeType :  DOCUMENT_NODE,\n\tdoctype :  null,\n\tdocumentElement :  null,\n\t_inc : 1,\n\t\n\tinsertBefore :  function(newChild, refChild){//raises \n\t\tif(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){\n\t\t\tvar child = newChild.firstChild;\n\t\t\twhile(child){\n\t\t\t\tvar next = child.nextSibling;\n\t\t\t\tthis.insertBefore(child,refChild);\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t\treturn newChild;\n\t\t}\n\t\tif(this.documentElement == null && newChild.nodeType == 1){\n\t\t\tthis.documentElement = newChild;\n\t\t}\n\t\t\n\t\treturn _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;\n\t},\n\tremoveChild :  function(oldChild){\n\t\tif(this.documentElement == oldChild){\n\t\t\tthis.documentElement = null;\n\t\t}\n\t\treturn _removeChild(this,oldChild);\n\t},\n\t// Introduced in DOM Level 2:\n\timportNode : function(importedNode,deep){\n\t\treturn importNode(this,importedNode,deep);\n\t},\n\t// Introduced in DOM Level 2:\n\tgetElementById :\tfunction(id){\n\t\tvar rtv = null;\n\t\t_visitNode(this.documentElement,function(node){\n\t\t\tif(node.nodeType == 1){\n\t\t\t\tif(node.getAttribute('id') == id){\n\t\t\t\t\trtv = node;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn rtv;\n\t},\n\t\n\t//document factory method:\n\tcreateElement :\tfunction(tagName){\n\t\tvar node = new Element();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = tagName;\n\t\tnode.tagName = tagName;\n\t\tnode.childNodes = new NodeList();\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\tcreateDocumentFragment :\tfunction(){\n\t\tvar node = new DocumentFragment();\n\t\tnode.ownerDocument = this;\n\t\tnode.childNodes = new NodeList();\n\t\treturn node;\n\t},\n\tcreateTextNode :\tfunction(data){\n\t\tvar node = new Text();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateComment :\tfunction(data){\n\t\tvar node = new Comment();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateCDATASection :\tfunction(data){\n\t\tvar node = new CDATASection();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateProcessingInstruction :\tfunction(target,data){\n\t\tvar node = new ProcessingInstruction();\n\t\tnode.ownerDocument = this;\n\t\tnode.tagName = node.target = target;\n\t\tnode.nodeValue= node.data = data;\n\t\treturn node;\n\t},\n\tcreateAttribute :\tfunction(name){\n\t\tvar node = new Attr();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.name = name;\n\t\tnode.nodeName\t= name;\n\t\tnode.localName = name;\n\t\tnode.specified = true;\n\t\treturn node;\n\t},\n\tcreateEntityReference :\tfunction(name){\n\t\tvar node = new EntityReference();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.nodeName\t= name;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateElementNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Element();\n\t\tvar pl = qualifiedName.split(':');\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tnode.childNodes = new NodeList();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.tagName = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateAttributeNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Attr();\n\t\tvar pl = qualifiedName.split(':');\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.name = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tnode.specified = true;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\treturn node;\n\t}\n};\n_extends(Document,Node);\n\n\nfunction Element() {\n\tthis._nsMap = {};\n};\nElement.prototype = {\n\tnodeType : ELEMENT_NODE,\n\thasAttribute : function(name){\n\t\treturn this.getAttributeNode(name)!=null;\n\t},\n\tgetAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name);\n\t\treturn attr && attr.value || '';\n\t},\n\tgetAttributeNode : function(name){\n\t\treturn this.attributes.getNamedItem(name);\n\t},\n\tsetAttribute : function(name, value){\n\t\tvar attr = this.ownerDocument.createAttribute(name);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tremoveAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name)\n\t\tattr && this.removeAttributeNode(attr);\n\t},\n\t\n\t//four real opeartion method\n\tappendChild:function(newChild){\n\t\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\t\treturn this.insertBefore(newChild,null);\n\t\t}else{\n\t\t\treturn _appendSingleChild(this,newChild);\n\t\t}\n\t},\n\tsetAttributeNode : function(newAttr){\n\t\treturn this.attributes.setNamedItem(newAttr);\n\t},\n\tsetAttributeNodeNS : function(newAttr){\n\t\treturn this.attributes.setNamedItemNS(newAttr);\n\t},\n\tremoveAttributeNode : function(oldAttr){\n\t\treturn this.attributes.removeNamedItem(oldAttr.nodeName);\n\t},\n\t//get real attribute name,and remove it by removeAttributeNode\n\tremoveAttributeNS : function(namespaceURI, localName){\n\t\tvar old = this.getAttributeNodeNS(namespaceURI, localName);\n\t\told && this.removeAttributeNode(old);\n\t},\n\t\n\thasAttributeNS : function(namespaceURI, localName){\n\t\treturn this.getAttributeNodeNS(namespaceURI, localName)!=null;\n\t},\n\tgetAttributeNS : function(namespaceURI, localName){\n\t\tvar attr = this.getAttributeNodeNS(namespaceURI, localName);\n\t\treturn attr && attr.value || '';\n\t},\n\tsetAttributeNS : function(namespaceURI, qualifiedName, value){\n\t\tvar attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tgetAttributeNodeNS : function(namespaceURI, localName){\n\t\treturn this.attributes.getNamedItemNS(namespaceURI, localName);\n\t},\n\t\n\tgetElementsByTagName : function(tagName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t});\n\t},\n\tgetElementsByTagNameNS : function(namespaceURI, localName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t});\n\t}\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element,Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr,Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n\tdata : '',\n\tsubstringData : function(offset, count) {\n\t\treturn this.data.substring(offset, offset+count);\n\t},\n\tappendData: function(text) {\n\t\ttext = this.data+text;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t},\n\tinsertData: function(offset,text) {\n\t\tthis.replaceData(offset,0,text);\n\t\n\t},\n\tappendChild:function(newChild){\n\t\t//if(!(newChild instanceof CharacterData)){\n\t\t\tthrow new Error(ExceptionMessage[3])\n\t\t//}\n\t\treturn Node.prototype.appendChild.apply(this,arguments)\n\t},\n\tdeleteData: function(offset, count) {\n\t\tthis.replaceData(offset,count,\"\");\n\t},\n\treplaceData: function(offset, count, text) {\n\t\tvar start = this.data.substring(0,offset);\n\t\tvar end = this.data.substring(offset+count);\n\t\ttext = start + text + end;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t}\n}\n_extends(CharacterData,Node);\nfunction Text() {\n};\nText.prototype = {\n\tnodeName : \"#text\",\n\tnodeType : TEXT_NODE,\n\tsplitText : function(offset) {\n\t\tvar text = this.data;\n\t\tvar newText = text.substring(offset);\n\t\ttext = text.substring(0, offset);\n\t\tthis.data = this.nodeValue = text;\n\t\tthis.length = text.length;\n\t\tvar newNode = this.ownerDocument.createTextNode(newText);\n\t\tif(this.parentNode){\n\t\t\tthis.parentNode.insertBefore(newNode, this.nextSibling);\n\t\t}\n\t\treturn newNode;\n\t}\n}\n_extends(Text,CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n\tnodeName : \"#comment\",\n\tnodeType : COMMENT_NODE\n}\n_extends(Comment,CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n\tnodeName : \"#cdata-section\",\n\tnodeType : CDATA_SECTION_NODE\n}\n_extends(CDATASection,CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType,Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation,Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity,Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference,Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName =\t\"#document-fragment\";\nDocumentFragment.prototype.nodeType =\tDOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment,Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction,Node);\nfunction XMLSerializer(){}\nXMLSerializer.prototype.serializeToString = function(node,attributeSorter){\n\treturn node.toString(attributeSorter);\n}\nNode.prototype.toString =function(attributeSorter){\n\tvar buf = [];\n\tserializeToString(this,buf,attributeSorter);\n\treturn buf.join('');\n}\nfunction serializeToString(node,buf,attributeSorter,isHTML){\n\tswitch(node.nodeType){\n\tcase ELEMENT_NODE:\n\t\tvar attrs = node.attributes;\n\t\tvar len = attrs.length;\n\t\tvar child = node.firstChild;\n\t\tvar nodeName = node.tagName;\n\t\tisHTML =  (htmlns === node.namespaceURI) ||isHTML \n\t\tbuf.push('<',nodeName);\n\t\tif(attributeSorter){\n\t\t\tbuf.sort.apply(attrs, attributeSorter);\n\t\t}\n\t\tfor(var i=0;i<len;i++){\n\t\t\tserializeToString(attrs.item(i),buf,attributeSorter,isHTML);\n\t\t}\n\t\tif(child || isHTML && !/^(?:meta|link|img|br|hr|input|button)$/i.test(nodeName)){\n\t\t\tbuf.push('>');\n\t\t\t//if is cdata child node\n\t\t\tif(isHTML && /^script$/i.test(nodeName)){\n\t\t\t\tif(child){\n\t\t\t\t\tbuf.push(child.data);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\twhile(child){\n\t\t\t\t\tserializeToString(child,buf,attributeSorter,isHTML);\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf.push('</',nodeName,'>');\n\t\t}else{\n\t\t\tbuf.push('/>');\n\t\t}\n\t\treturn;\n\tcase DOCUMENT_NODE:\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tserializeToString(child,buf,attributeSorter,isHTML);\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t\treturn;\n\tcase ATTRIBUTE_NODE:\n\t\treturn buf.push(' ',node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');\n\tcase TEXT_NODE:\n\t\treturn buf.push(node.data.replace(/[<&]/g,_xmlEncoder));\n\tcase CDATA_SECTION_NODE:\n\t\treturn buf.push( '<![CDATA[',node.data,']]>');\n\tcase COMMENT_NODE:\n\t\treturn buf.push( \"<!--\",node.data,\"-->\");\n\tcase DOCUMENT_TYPE_NODE:\n\t\tvar pubid = node.publicId;\n\t\tvar sysid = node.systemId;\n\t\tbuf.push('<!DOCTYPE ',node.name);\n\t\tif(pubid){\n\t\t\tbuf.push(' PUBLIC \"',pubid);\n\t\t\tif (sysid && sysid!='.') {\n\t\t\t\tbuf.push( '\" \"',sysid);\n\t\t\t}\n\t\t\tbuf.push('\">');\n\t\t}else if(sysid && sysid!='.'){\n\t\t\tbuf.push(' SYSTEM \"',sysid,'\">');\n\t\t}else{\n\t\t\tvar sub = node.internalSubset;\n\t\t\tif(sub){\n\t\t\t\tbuf.push(\" [\",sub,\"]\");\n\t\t\t}\n\t\t\tbuf.push(\">\");\n\t\t}\n\t\treturn;\n\tcase PROCESSING_INSTRUCTION_NODE:\n\t\treturn buf.push( \"<?\",node.target,\" \",node.data,\"?>\");\n\tcase ENTITY_REFERENCE_NODE:\n\t\treturn buf.push( '&',node.nodeName,';');\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE:\n\tdefault:\n\t\tbuf.push('??',node.nodeName);\n\t}\n}\nfunction importNode(doc,node,deep){\n\tvar node2;\n\tswitch (node.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tnode2 = node.cloneNode(false);\n\t\tnode2.ownerDocument = doc;\n\t\t//var attrs = node2.attributes;\n\t\t//var len = attrs.length;\n\t\t//for(var i=0;i<len;i++){\n\t\t\t//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n\t\t//}\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tbreak;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t\tbreak;\n\t//case ENTITY_REFERENCE_NODE:\n\t//case PROCESSING_INSTRUCTION_NODE:\n\t////case TEXT_NODE:\n\t//case CDATA_SECTION_NODE:\n\t//case COMMENT_NODE:\n\t//\tdeep = false;\n\t//\tbreak;\n\t//case DOCUMENT_NODE:\n\t//case DOCUMENT_TYPE_NODE:\n\t//cannot be imported.\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE：\n\t//can not hit in level3\n\t//default:throw e;\n\t}\n\tif(!node2){\n\t\tnode2 = node.cloneNode(false);//false\n\t}\n\tnode2.ownerDocument = doc;\n\tnode2.parentNode = null;\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(importNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc,node,deep){\n\tvar node2 = new node.constructor();\n\tfor(var n in node){\n\t\tvar v = node[n];\n\t\tif(typeof v != 'object' ){\n\t\t\tif(v != node2[n]){\n\t\t\t\tnode2[n] = v;\n\t\t\t}\n\t\t}\n\t}\n\tif(node.childNodes){\n\t\tnode2.childNodes = new NodeList();\n\t}\n\tnode2.ownerDocument = doc;\n\tswitch (node2.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tvar attrs\t= node.attributes;\n\t\tvar attrs2\t= node2.attributes = new NamedNodeMap();\n\t\tvar len = attrs.length\n\t\tattrs2._ownerElement = node2;\n\t\tfor(var i=0;i<len;i++){\n\t\t\tnode2.setAttributeNode(cloneNode(doc,attrs.item(i),true));\n\t\t}\n\t\tbreak;;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t}\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(cloneNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n\nfunction __set__(object,key,value){\n\tobject[key] = value\n}\n//do dynamic\ntry{\n\tif(Object.defineProperty){\n\t\tObject.defineProperty(LiveNodeList.prototype,'length',{\n\t\t\tget:function(){\n\t\t\t\t_updateLiveList(this);\n\t\t\t\treturn this.$$length;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(Node.prototype,'textContent',{\n\t\t\tget:function(){\n\t\t\t\treturn getTextContent(this);\n\t\t\t},\n\t\t\tset:function(data){\n\t\t\t\tswitch(this.nodeType){\n\t\t\t\tcase 1:\n\t\t\t\tcase 11:\n\t\t\t\t\twhile(this.firstChild){\n\t\t\t\t\t\tthis.removeChild(this.firstChild);\n\t\t\t\t\t}\n\t\t\t\t\tif(data || String(data)){\n\t\t\t\t\t\tthis.appendChild(this.ownerDocument.createTextNode(data));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//TODO:\n\t\t\t\t\tthis.data = data;\n\t\t\t\t\tthis.value = value;\n\t\t\t\t\tthis.nodeValue = data;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\n\t\tfunction getTextContent(node){\n\t\t\tswitch(node.nodeType){\n\t\t\tcase 1:\n\t\t\tcase 11:\n\t\t\t\tvar buf = [];\n\t\t\t\tnode = node.firstChild;\n\t\t\t\twhile(node){\n\t\t\t\t\tif(node.nodeType!==7 && node.nodeType !==8){\n\t\t\t\t\t\tbuf.push(getTextContent(node));\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t}\n\t\t\t\treturn buf.join('');\n\t\t\tdefault:\n\t\t\t\treturn node.nodeValue;\n\t\t\t}\n\t\t}\n\t\t__set__ = function(object,key,value){\n\t\t\t//console.log(value)\n\t\t\tobject['$$'+key] = value\n\t\t}\n\t}\n}catch(e){//ie8\n}\n\nif(typeof require == 'function'){\n\texports.DOMImplementation = DOMImplementation;\n\texports.XMLSerializer = XMLSerializer;\n}\n","//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\r\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\r\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\r\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]///\\u10000-\\uEFFFF\r\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\u00B7\\u0300-\\u036F\\\\u203F-\\u2040]\");\r\nvar tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\\:'+nameStartChar.source+nameChar.source+'*)?$');\r\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\r\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\r\n\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_V\r\n//S_ATTR_S,\tS_E,\tS_S,\tS_C\r\nvar S_TAG = 0;//tag name offerring\r\nvar S_ATTR = 1;//attr name offerring \r\nvar S_ATTR_S=2;//attr name end and space offer\r\nvar S_EQ = 3;//=space?\r\nvar S_V = 4;//attr value(no quot value only)\r\nvar S_E = 5;//attr value end and no space(quot end)\r\nvar S_S = 6;//(attr value end || tag end ) && (space offer)\r\nvar S_C = 7;//closed el<el />\r\n\r\nfunction XMLReader(){\r\n\t\r\n}\r\n\r\nXMLReader.prototype = {\r\n\tparse:function(source,defaultNSMap,entityMap){\r\n\t\tvar domBuilder = this.domBuilder;\r\n\t\tdomBuilder.startDocument();\r\n\t\t_copy(defaultNSMap ,defaultNSMap = {})\r\n\t\tparse(source,defaultNSMap,entityMap,\r\n\t\t\t\tdomBuilder,this.errorHandler);\r\n\t\tdomBuilder.endDocument();\r\n\t}\r\n}\r\nfunction parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){\r\n  function fixedFromCharCode(code) {\r\n\t\t// String.prototype.fromCharCode does not supports\r\n\t\t// > 2 bytes unicode chars directly\r\n\t\tif (code > 0xffff) {\r\n\t\t\tcode -= 0x10000;\r\n\t\t\tvar surrogate1 = 0xd800 + (code >> 10)\r\n\t\t\t\t, surrogate2 = 0xdc00 + (code & 0x3ff);\r\n\r\n\t\t\treturn String.fromCharCode(surrogate1, surrogate2);\r\n\t\t} else {\r\n\t\t\treturn String.fromCharCode(code);\r\n\t\t}\r\n\t}\r\n\tfunction entityReplacer(a){\r\n\t\tvar k = a.slice(1,-1);\r\n\t\tif(k in entityMap){\r\n\t\t\treturn entityMap[k]; \r\n\t\t}else if(k.charAt(0) === '#'){\r\n\t\t\treturn fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))\r\n\t\t}else{\r\n\t\t\terrorHandler.error('entity not found:'+a);\r\n\t\t\treturn a;\r\n\t\t}\r\n\t}\r\n\tfunction appendText(end){//has some bugs\r\n\t\tif(end>start){\r\n\t\t\tvar xt = source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\tlocator&&position(start);\r\n\t\t\tdomBuilder.characters(xt,0,end-start);\r\n\t\t\tstart = end\r\n\t\t}\r\n\t}\r\n\tfunction position(p,m){\r\n\t\twhile(p>=lineEnd && (m = linePattern.exec(source))){\r\n\t\t\tlineStart = m.index;\r\n\t\t\tlineEnd = lineStart + m[0].length;\r\n\t\t\tlocator.lineNumber++;\r\n\t\t\t//console.log('line++:',locator,startPos,endPos)\r\n\t\t}\r\n\t\tlocator.columnNumber = p-lineStart+1;\r\n\t}\r\n\tvar lineStart = 0;\r\n\tvar lineEnd = 0;\r\n\tvar linePattern = /.+(?:\\r\\n?|\\n)|.*$/g\r\n\tvar locator = domBuilder.locator;\r\n\t\r\n\tvar parseStack = [{currentNSMap:defaultNSMapCopy}]\r\n\tvar closeMap = {};\r\n\tvar start = 0;\r\n\twhile(true){\r\n\t\ttry{\r\n\t\t\tvar tagStart = source.indexOf('<',start);\r\n\t\t\tif(tagStart<0){\r\n\t\t\t\tif(!source.substr(start).match(/^\\s*$/)){\r\n\t\t\t\t\tvar doc = domBuilder.document;\r\n\t    \t\t\tvar text = doc.createTextNode(source.substr(start));\r\n\t    \t\t\tdoc.appendChild(text);\r\n\t    \t\t\tdomBuilder.currentElement = text;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(tagStart>start){\r\n\t\t\t\tappendText(tagStart);\r\n\t\t\t}\r\n\t\t\tswitch(source.charAt(tagStart+1)){\r\n\t\t\tcase '/':\r\n\t\t\t\tvar end = source.indexOf('>',tagStart+3);\r\n\t\t\t\tvar tagName = source.substring(tagStart+2,end);\r\n\t\t\t\tvar config = parseStack.pop();\r\n\t\t\t\tvar localNSMap = config.localNSMap;\r\n\t\t        if(config.tagName != tagName){\r\n\t\t            errorHandler.fatalError(\"end tag name: \"+tagName+' is not match the current start tagName:'+config.tagName );\r\n\t\t        }\r\n\t\t\t\tdomBuilder.endElement(config.uri,config.localName,tagName);\r\n\t\t\t\tif(localNSMap){\r\n\t\t\t\t\tfor(var prefix in localNSMap){\r\n\t\t\t\t\t\tdomBuilder.endPrefixMapping(prefix) ;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tend++;\r\n\t\t\t\tbreak;\r\n\t\t\t\t// end elment\r\n\t\t\tcase '?':// <?...?>\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseInstruction(source,tagStart,domBuilder);\r\n\t\t\t\tbreak;\r\n\t\t\tcase '!':// <!doctype,<![CDATA,<!--\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseDCC(source,tagStart,domBuilder,errorHandler);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\t\r\n\t\t\t\tvar el = new ElementAttributes();\r\n\t\t\t\t\r\n\t\t\t\t//elStartEnd\r\n\t\t\t\tvar end = parseElementStartPart(source,tagStart,el,entityReplacer,errorHandler);\r\n\t\t\t\tvar len = el.length;\r\n\t\t\t\t\r\n\t\t\t\tif(locator){\r\n\t\t\t\t\tif(len){\r\n\t\t\t\t\t\t//attribute position fixed\r\n\t\t\t\t\t\tfor(var i = 0;i<len;i++){\r\n\t\t\t\t\t\t\tvar a = el[i];\r\n\t\t\t\t\t\t\tposition(a.offset);\r\n\t\t\t\t\t\t\ta.offset = copyLocator(locator,{});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tposition(end);\r\n\t\t\t\t}\r\n\t\t\t\tif(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){\r\n\t\t\t\t\tel.closed = true;\r\n\t\t\t\t\tif(!entityMap.nbsp){\r\n\t\t\t\t\t\terrorHandler.warning('unclosed xml attribute');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tappendElement(el,domBuilder,parseStack);\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){\r\n\t\t\t\t\tend = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tend++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}catch(e){\r\n\t\t\terrorHandler.error('element parse error: '+e);\r\n\t\t\tend = -1;\r\n\t\t}\r\n\t\tif(end>start){\r\n\t\t\tstart = end;\r\n\t\t}else{\r\n\t\t\t//TODO: 这里有可能sax回退，有位置错误风险\r\n\t\t\tappendText(Math.max(tagStart,start)+1);\r\n\t\t}\r\n\t}\r\n}\r\nfunction copyLocator(f,t){\r\n\tt.lineNumber = f.lineNumber;\r\n\tt.columnNumber = f.columnNumber;\r\n\treturn t;\r\n}\r\n\r\n/**\r\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n */\r\nfunction parseElementStartPart(source,start,el,entityReplacer,errorHandler){\r\n\tvar attrName;\r\n\tvar value;\r\n\tvar p = ++start;\r\n\tvar s = S_TAG;//status\r\n\twhile(true){\r\n\t\tvar c = source.charAt(p);\r\n\t\tswitch(c){\r\n\t\tcase '=':\r\n\t\t\tif(s === S_ATTR){//attrName\r\n\t\t\t\tattrName = source.slice(start,p);\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else if(s === S_ATTR_S){\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: equal must after attrName or space after attrName\r\n\t\t\t\tthrow new Error('attribute equal must after attrName');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '\\'':\r\n\t\tcase '\"':\r\n\t\t\tif(s === S_EQ){//equal\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\tp = source.indexOf(c,start)\r\n\t\t\t\tif(p>0){\r\n\t\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\tel.add(attrName,value,start-1);\r\n\t\t\t\t\ts = S_E;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//fatalError: no end quot match\r\n\t\t\t\t\tthrow new Error('attribute value no end \\''+c+'\\' match');\r\n\t\t\t\t}\r\n\t\t\t}else if(s == S_V){\r\n\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t//console.log(attrName,value,start,p)\r\n\t\t\t\tel.add(attrName,value,start);\r\n\t\t\t\t//console.dir(el)\r\n\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+')!!');\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\ts = S_E\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: no equal before\r\n\t\t\t\tthrow new Error('attribute value must after \"=\"');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '/':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_E:\r\n\t\t\tcase S_S:\r\n\t\t\tcase S_C:\r\n\t\t\t\ts = S_C;\r\n\t\t\t\tel.closed = true;\r\n\t\t\tcase S_V:\r\n\t\t\tcase S_ATTR:\r\n\t\t\tcase S_ATTR_S:\r\n\t\t\t\tbreak;\r\n\t\t\t//case S_EQ:\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"attribute invalid close char('/')\")\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase ''://end document\r\n\t\t\t//throw new Error('unexpected end of input')\r\n\t\t\terrorHandler.error('unexpected end of input');\r\n\t\tcase '>':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_E:\r\n\t\t\tcase S_S:\r\n\t\t\tcase S_C:\r\n\t\t\t\tbreak;//normal\r\n\t\t\tcase S_V://Compatible state\r\n\t\t\tcase S_ATTR:\r\n\t\t\t\tvalue = source.slice(start,p);\r\n\t\t\t\tif(value.slice(-1) === '/'){\r\n\t\t\t\t\tel.closed  = true;\r\n\t\t\t\t\tvalue = value.slice(0,-1)\r\n\t\t\t\t}\r\n\t\t\tcase S_ATTR_S:\r\n\t\t\t\tif(s === S_ATTR_S){\r\n\t\t\t\t\tvalue = attrName;\r\n\t\t\t\t}\r\n\t\t\t\tif(s == S_V){\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)\r\n\t\t\t\t}else{\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')\r\n\t\t\t\t\tel.add(value,value,start)\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase S_EQ:\r\n\t\t\t\tthrow new Error('attribute value missed!!');\r\n\t\t\t}\r\n//\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\r\n\t\t\treturn p;\r\n\t\t/*xml space '\\x20' | #x9 | #xD | #xA; */\r\n\t\tcase '\\u0080':\r\n\t\t\tc = ' ';\r\n\t\tdefault:\r\n\t\t\tif(c<= ' '){//space\r\n\t\t\t\tswitch(s){\r\n\t\t\t\tcase S_TAG:\r\n\t\t\t\t\tel.setTagName(source.slice(start,p));//tagName\r\n\t\t\t\t\ts = S_S;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR:\r\n\t\t\t\t\tattrName = source.slice(start,p)\r\n\t\t\t\t\ts = S_ATTR_S;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_V:\r\n\t\t\t\t\tvar value = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value,start)\r\n\t\t\t\tcase S_E:\r\n\t\t\t\t\ts = S_S;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case S_S:\r\n\t\t\t\t//case S_EQ:\r\n\t\t\t\t//case S_ATTR_S:\r\n\t\t\t\t//\tvoid();break;\r\n\t\t\t\t//case S_C:\r\n\t\t\t\t\t//ignore warning\r\n\t\t\t\t}\r\n\t\t\t}else{//not space\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_V\r\n//S_ATTR_S,\tS_E,\tS_S,\tS_C\r\n\t\t\t\tswitch(s){\r\n\t\t\t\t//case S_TAG:void();break;\r\n\t\t\t\t//case S_ATTR:void();break;\r\n\t\t\t\t//case S_V:void();break;\r\n\t\t\t\tcase S_ATTR_S:\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead!!')\r\n\t\t\t\t\tel.add(attrName,attrName,start);\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_E:\r\n\t\t\t\t\terrorHandler.warning('attribute space is required\"'+attrName+'\"!!')\r\n\t\t\t\tcase S_S:\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_EQ:\r\n\t\t\t\t\ts = S_V;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_C:\r\n\t\t\t\t\tthrow new Error(\"elements closed character '/' and '>' must be connected to\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tp++;\r\n\t}\r\n}\r\n/**\r\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n */\r\nfunction appendElement(el,domBuilder,parseStack){\r\n\tvar tagName = el.tagName;\r\n\tvar localNSMap = null;\r\n\tvar currentNSMap = parseStack[parseStack.length-1].currentNSMap;\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\tvar a = el[i];\r\n\t\tvar qName = a.qName;\r\n\t\tvar value = a.value;\r\n\t\tvar nsp = qName.indexOf(':');\r\n\t\tif(nsp>0){\r\n\t\t\tvar prefix = a.prefix = qName.slice(0,nsp);\r\n\t\t\tvar localName = qName.slice(nsp+1);\r\n\t\t\tvar nsPrefix = prefix === 'xmlns' && localName\r\n\t\t}else{\r\n\t\t\tlocalName = qName;\r\n\t\t\tprefix = null\r\n\t\t\tnsPrefix = qName === 'xmlns' && ''\r\n\t\t}\r\n\t\t//can not set prefix,because prefix !== ''\r\n\t\ta.localName = localName ;\r\n\t\t//prefix == null for no ns prefix attribute \r\n\t\tif(nsPrefix !== false){//hack!!\r\n\t\t\tif(localNSMap == null){\r\n\t\t\t\tlocalNSMap = {}\r\n\t\t\t\t//console.log(currentNSMap,0)\r\n\t\t\t\t_copy(currentNSMap,currentNSMap={})\r\n\t\t\t\t//console.log(currentNSMap,1)\r\n\t\t\t}\r\n\t\t\tcurrentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\r\n\t\t\ta.uri = 'http://www.w3.org/2000/xmlns/'\r\n\t\t\tdomBuilder.startPrefixMapping(nsPrefix, value) \r\n\t\t}\r\n\t}\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\ta = el[i];\r\n\t\tvar prefix = a.prefix;\r\n\t\tif(prefix){//no prefix attribute has no namespace\r\n\t\t\tif(prefix === 'xml'){\r\n\t\t\t\ta.uri = 'http://www.w3.org/XML/1998/namespace';\r\n\t\t\t}if(prefix !== 'xmlns'){\r\n\t\t\t\ta.uri = currentNSMap[prefix]\r\n\t\t\t\t\r\n\t\t\t\t//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar nsp = tagName.indexOf(':');\r\n\tif(nsp>0){\r\n\t\tprefix = el.prefix = tagName.slice(0,nsp);\r\n\t\tlocalName = el.localName = tagName.slice(nsp+1);\r\n\t}else{\r\n\t\tprefix = null;//important!!\r\n\t\tlocalName = el.localName = tagName;\r\n\t}\r\n\t//no prefix element has default namespace\r\n\tvar ns = el.uri = currentNSMap[prefix || ''];\r\n\tdomBuilder.startElement(ns,localName,tagName,el);\r\n\t//endPrefixMapping and startPrefixMapping have not any help for dom builder\r\n\t//localNSMap = null\r\n\tif(el.closed){\r\n\t\tdomBuilder.endElement(ns,localName,tagName);\r\n\t\tif(localNSMap){\r\n\t\t\tfor(prefix in localNSMap){\r\n\t\t\t\tdomBuilder.endPrefixMapping(prefix) \r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tel.currentNSMap = currentNSMap;\r\n\t\tel.localNSMap = localNSMap;\r\n\t\tparseStack.push(el);\r\n\t}\r\n}\r\nfunction parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){\r\n\tif(/^(?:script|textarea)$/i.test(tagName)){\r\n\t\tvar elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);\r\n\t\tvar text = source.substring(elStartEnd+1,elEndStart);\r\n\t\tif(/[&<]/.test(text)){\r\n\t\t\tif(/^script$/i.test(tagName)){\r\n\t\t\t\t//if(!/\\]\\]>/.test(text)){\r\n\t\t\t\t\t//lexHandler.startCDATA();\r\n\t\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\t\t//lexHandler.endCDATA();\r\n\t\t\t\t\treturn elEndStart;\r\n\t\t\t\t//}\r\n\t\t\t}//}else{//text area\r\n\t\t\t\ttext = text.replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\treturn elEndStart;\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\treturn elStartEnd+1;\r\n}\r\nfunction fixSelfClosed(source,elStartEnd,tagName,closeMap){\r\n\t//if(tagName in closeMap){\r\n\tvar pos = closeMap[tagName];\r\n\tif(pos == null){\r\n\t\t//console.log(tagName)\r\n\t\tpos = closeMap[tagName] = source.lastIndexOf('</'+tagName+'>')\r\n\t}\r\n\treturn pos<elStartEnd;\r\n\t//} \r\n}\r\nfunction _copy(source,target){\r\n\tfor(var n in source){target[n] = source[n]}\r\n}\r\nfunction parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'\r\n\tvar next= source.charAt(start+2)\r\n\tswitch(next){\r\n\tcase '-':\r\n\t\tif(source.charAt(start + 3) === '-'){\r\n\t\t\tvar end = source.indexOf('-->',start+4);\r\n\t\t\t//append comment source.substring(4,end)//<!--\r\n\t\t\tif(end>start){\r\n\t\t\t\tdomBuilder.comment(source,start+4,end-start-4);\r\n\t\t\t\treturn end+3;\r\n\t\t\t}else{\r\n\t\t\t\terrorHandler.error(\"Unclosed comment\");\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\tdefault:\r\n\t\tif(source.substr(start+3,6) == 'CDATA['){\r\n\t\t\tvar end = source.indexOf(']]>',start+9);\r\n\t\t\tdomBuilder.startCDATA();\r\n\t\t\tdomBuilder.characters(source,start+9,end-start-9);\r\n\t\t\tdomBuilder.endCDATA() \r\n\t\t\treturn end+3;\r\n\t\t}\r\n\t\t//<!DOCTYPE\r\n\t\t//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) \r\n\t\tvar matchs = split(source,start);\r\n\t\tvar len = matchs.length;\r\n\t\tif(len>1 && /!doctype/i.test(matchs[0][0])){\r\n\t\t\tvar name = matchs[1][0];\r\n\t\t\tvar pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]\r\n\t\t\tvar sysid = len>4 && matchs[4][0];\r\n\t\t\tvar lastMatch = matchs[len-1]\r\n\t\t\tdomBuilder.startDTD(name,pubid && pubid.replace(/^(['\"])(.*?)\\1$/,'$2'),\r\n\t\t\t\t\tsysid && sysid.replace(/^(['\"])(.*?)\\1$/,'$2'));\r\n\t\t\tdomBuilder.endDTD();\r\n\t\t\t\r\n\t\t\treturn lastMatch.index+lastMatch[0].length\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n\r\n\r\nfunction parseInstruction(source,start,domBuilder){\r\n\tvar end = source.indexOf('?>',start);\r\n\tif(end){\r\n\t\tvar match = source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\r\n\t\tif(match){\r\n\t\t\tvar len = match[0].length;\r\n\t\t\tdomBuilder.processingInstruction(match[1], match[2]) ;\r\n\t\t\treturn end+2;\r\n\t\t}else{//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * @param source\r\n */\r\nfunction ElementAttributes(source){\r\n\t\r\n}\r\nElementAttributes.prototype = {\r\n\tsetTagName:function(tagName){\r\n\t\tif(!tagNamePattern.test(tagName)){\r\n\t\t\tthrow new Error('invalid tagName:'+tagName)\r\n\t\t}\r\n\t\tthis.tagName = tagName\r\n\t},\r\n\tadd:function(qName,value,offset){\r\n\t\tif(!tagNamePattern.test(qName)){\r\n\t\t\tthrow new Error('invalid attribute:'+qName)\r\n\t\t}\r\n\t\tthis[this.length++] = {qName:qName,value:value,offset:offset}\r\n\t},\r\n\tlength:0,\r\n\tgetLocalName:function(i){return this[i].localName},\r\n\tgetOffset:function(i){return this[i].offset},\r\n\tgetQName:function(i){return this[i].qName},\r\n\tgetURI:function(i){return this[i].uri},\r\n\tgetValue:function(i){return this[i].value}\r\n//\t,getIndex:function(uri, localName)){\r\n//\t\tif(localName){\r\n//\t\t\t\r\n//\t\t}else{\r\n//\t\t\tvar qName = uri\r\n//\t\t}\r\n//\t},\r\n//\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\r\n//\tgetType:function(uri,localName){}\r\n//\tgetType:function(i){},\r\n}\r\n\r\n\r\n\r\n\r\nfunction _set_proto_(thiz,parent){\r\n\tthiz.__proto__ = parent;\r\n\treturn thiz;\r\n}\r\nif(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){\r\n\t_set_proto_ = function(thiz,parent){\r\n\t\tfunction p(){};\r\n\t\tp.prototype = parent;\r\n\t\tp = new p();\r\n\t\tfor(parent in thiz){\r\n\t\t\tp[parent] = thiz[parent];\r\n\t\t}\r\n\t\treturn p;\r\n\t}\r\n}\r\n\r\nfunction split(source,start){\r\n\tvar match;\r\n\tvar buf = [];\r\n\tvar reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\r\n\treg.lastIndex = start;\r\n\treg.exec(source);//skip <\r\n\twhile(match = reg.exec(source)){\r\n\t\tbuf.push(match);\r\n\t\tif(match[1])return buf;\r\n\t}\r\n}\r\n\r\nif(typeof require == 'function'){\r\n\texports.XMLReader = XMLReader;\r\n}\r\n\r\n","module.exports={\n  \"name\": \"jaydata\",\n  \"version\": \"1.5.10\",\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\n  \"keywords\": [\n    \"HTML5 data management\",\n    \"JavaScript\",\n    \"JavaScript Language Query\",\n    \"JSLQ\",\n    \"OData\",\n    \"SQLite\",\n    \"WebSQL\",\n    \"IndexedDB\",\n    \"YQL\",\n    \"Facebook\",\n    \"cross-platform\",\n    \"iPhone\",\n    \"Android\"\n  ],\n  \"homepage\": \"http://jaydata.org\",\n  \"author\": {\n    \"name\": \"JayData\",\n    \"url\": \"http://jaydata.org\"\n  },\n  \"dependencies\": {\n    \"acorn\": \"^3.3.0\",\n    \"atob\": \"^2.0.0\",\n    \"btoa\": \"^1.1.2\",\n    \"dot\": \"^1.0.3\",\n    \"jaydata-dynamic-metadata\": \"^0.1.16\",\n    \"jaydata-error-handler\": \"^0.0.1\",\n    \"jaydata-odatajs\": \"^4.0.1\",\n    \"jaydata-promise-handler\": \"^0.0.1\",\n    \"odata-v4-metadata\": \"^0.1.3\",\n    \"xmldom\": \"^0.1.19\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Dániel József\"\n    },\n    {\n      \"name\": \"Hajnalka Battancs\"\n    },\n    {\n      \"name\": \"János Roden\"\n    },\n    {\n      \"name\": \"László Horváth\"\n    },\n    {\n      \"name\": \"Péter Zentai\"\n    },\n    {\n      \"name\": \"Péter Nochta\"\n    },\n    {\n      \"name\": \"Róbert Bónay\"\n    },\n    {\n      \"name\": \"Szabolcs Czinege\"\n    },\n    {\n      \"name\": \"Viktor Borza\"\n    },\n    {\n      \"name\": \"Viktor Lázár\"\n    },\n    {\n      \"name\": \"Zoltán Gyebrovszki\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\n  },\n  \"engines\": {\n    \"node\": \">=0.6.0\"\n  },\n  \"license\": \"(MIT OR GPL-2.0)\",\n  \"devDependencies\": {\n    \"babel\": \"^6.1.18\",\n    \"babel-eslint\": \"^5.0.0-beta4\",\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\n    \"babel-preset-es2015\": \"^6.1.18\",\n    \"babel-register\": \"^6.2.0\",\n    \"babelify\": \"^7.2.0\",\n    \"browserify\": \"^12.0.1\",\n    \"browserify-derequire\": \"^0.9.4\",\n    \"browserify-shim\": \"^3.8.11\",\n    \"chai\": \"^3.4.1\",\n    \"del\": \"^2.2.0\",\n    \"google-closure-compiler\": \"^20151015.0.0\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-babel\": \"^6.1.1\",\n    \"gulp-browserify\": \"^0.5.1\",\n    \"gulp-change\": \"^1.0.0\",\n    \"gulp-closure-compiler\": \"^0.3.1\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-derequire\": \"^2.1.0\",\n    \"gulp-eslint\": \"^1.1.1\",\n    \"gulp-footer\": \"^1.0.5\",\n    \"gulp-header\": \"^1.7.1\",\n    \"gulp-nightwatch\": \"^0.2.6\",\n    \"gulp-nuget-pack\": \"0.0.6\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-replace\": \"^0.5.4\",\n    \"gulp-sourcemaps\": \"^1.6.0\",\n    \"gulp-uglify\": \"^1.5.1\",\n    \"gulp-vinyl-zip\": \"^1.1.2\",\n    \"gulp-webserver\": \"^0.9.1\",\n    \"istanbul\": \"^0.4.1\",\n    \"jaguarjs-jsdoc\": \"0.0.1\",\n    \"jsdoc\": \"^3.4.0\",\n    \"minimist\": \"^1.2.0\",\n    \"nightwatch\": \"^0.8.8\",\n    \"npm\": \"^3.5.2\",\n    \"selenium-standalone\": \"^4.7.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"^1.1.0\",\n    \"yargs\": \"^3.31.0\"\n  },\n  \"browserify-shim\": {\n    \"atob\": \"global:atob\",\n    \"btoa\": \"global:btoa\",\n    \"jquery\": \"global:jQuery\",\n    \"angular\": \"global:angular\",\n    \"Handlebars\": \"global:Handlebars\",\n    \"kendo\": \"global:kendo\",\n    \"ko\": \"global:ko\",\n    \"q\": \"global:Q\",\n    \"Ext\": \"global:Ext\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha --compilers js:babel-register test/unit-tests/\",\n    \"stest\": \"mocha --compilers js:babel-register\"\n  }\n}\n","import $data from '../TypeSystem/index.js';\r\nimport { DynamicMetadata, odatajs } from 'jaydata-dynamic-metadata';\r\n\r\n$data.DynamicMetadata = DynamicMetadata;\r\nvar dynamicMetadata = new DynamicMetadata($data);\r\n$data.service = dynamicMetadata.service.bind(dynamicMetadata);\r\n$data.initService = dynamicMetadata.initService.bind(dynamicMetadata);\r\n$data.odatajs = odatajs;\r\n\r\nexport default $data\r\n","import $data from './initializeJayData.js';\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport { StringFunctions } from './Extensions.js'\r\n\r\n\r\nvar Container = new ContainerCtor()\r\n\r\nexport var ContainerInstance = Container\r\n\r\nexport function ContainerCtor(parentContainer) {\r\n    var parent = parentContainer;\r\n    if (parent) {\r\n      parent.addChildContainer(this);\r\n    }\r\n\r\n    var classNames = {};\r\n    var consolidatedClassNames = [];\r\n    var classTypes = [];\r\n\r\n    this.classNames = classNames;\r\n    this.consolidatedClassNames = consolidatedClassNames;\r\n    this.classTypes = classTypes;\r\n\r\n    var mappedTo = [];\r\n    this.mappedTo = mappedTo;\r\n\r\n    var self = this;\r\n\r\n    this[\"holder\"] = null;\r\n\r\n    var IoC = function(type, parameters) {\r\n      var t = self.resolveType(type);\r\n      var inst = Object.create(t.prototype);\r\n      t.apply(inst, parameters);\r\n      return inst;\r\n    };\r\n\r\n    var pendingResolutions = {};\r\n    this.pendingResolutions = pendingResolutions;\r\n\r\n    function addPendingResolution(name, onResolved) {\r\n      pendingResolutions[name] = pendingResolutions[name] || [];\r\n      pendingResolutions[name].push(onResolved);\r\n    }\r\n\r\n    this.addChildContainer = function(container) {\r\n      //children.push(container);\r\n    }\r\n\r\n    this.createInstance = function(type, parameters) {\r\n      return IoC(type, parameters);\r\n    };\r\n\r\n    this.mapType = function(aliasTypeOrName, realTypeOrName) {\r\n        Guard.requireValue(\"aliasType\", aliasTypeOrName);\r\n        Guard.requireValue(\"realType\", realTypeOrName);\r\n        var aliasT = this.getType(aliasTypeOrName);\r\n        var realT = this.getType(realTypeOrName);\r\n        var aliasPos = classTypes.indexOf(aliasT);\r\n        var realPos = classTypes.indexOf(realT);\r\n        mappedTo[aliasPos] = realPos;\r\n      },\r\n\r\n      //this.resolve = function (type, parameters) {\r\n      //    var classFunction = this.resolveType(type, parameters);\r\n      //    return new classFunction(parameters);\r\n      //};\r\n\r\n\r\n\r\n      this.isPrimitiveType = function(type) {\r\n        var t = this.resolveType(type);\r\n\r\n        switch (true) {\r\n          case t === Number:\r\n          case t === String:\r\n          case t === Date:\r\n          case t === Boolean:\r\n          case t === Array:\r\n          case t === Object:\r\n\r\n          case t === $data.Number:\r\n          case t === $data.Integer:\r\n          case t === $data.Date:\r\n          case t === $data.String:\r\n          case t === $data.Boolean:\r\n          case t === $data.Array:\r\n          case t === $data.Object:\r\n          case t === $data.Guid:\r\n\r\n          case t === $data.Byte:\r\n          case t === $data.SByte:\r\n          case t === $data.Decimal:\r\n          case t === $data.Float:\r\n          case t === $data.Int16:\r\n          case t === $data.Int32:\r\n          case t === $data.Int64:\r\n          case t === $data.DateTimeOffset:\r\n          case t === $data.Time:\r\n          case t === $data.Day:\r\n          case t === $data.Duration:\r\n\r\n          case t === $data.SimpleBase:\r\n          case t === $data.Geospatial:\r\n          case t === $data.GeographyBase:\r\n          case t === $data.GeographyPoint:\r\n          case t === $data.GeographyLineString:\r\n          case t === $data.GeographyPolygon:\r\n          case t === $data.GeographyMultiPoint:\r\n          case t === $data.GeographyMultiLineString:\r\n          case t === $data.GeographyMultiPolygon:\r\n          case t === $data.GeographyCollection:\r\n          case t === $data.GeometryBase:\r\n          case t === $data.GeometryPoint:\r\n          case t === $data.GeometryLineString:\r\n          case t === $data.GeometryPolygon:\r\n          case t === $data.GeometryMultiPoint:\r\n          case t === $data.GeometryMultiLineString:\r\n          case t === $data.GeometryMultiPolygon:\r\n          case t === $data.GeometryCollection:\r\n\r\n            return true;\r\n          default:\r\n            return false;\r\n        }\r\n      };\r\n\r\n\r\n    this.resolveName = function(type) {\r\n      var t = this.resolveType(type);\r\n      var tPos = classTypes.indexOf(t);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.resolveType = function(typeOrName, onResolved) {\r\n      var t = typeOrName;\r\n      t = this.getType(t, onResolved ? true : false, onResolved);\r\n      var posT = classTypes.indexOf(t);\r\n      return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\r\n    };\r\n\r\n\r\n\r\n    this.getType = function(typeOrName, doNotThrow, onResolved) {\r\n      Guard.requireValue(\"typeOrName\", typeOrName);\r\n      if (typeof typeOrName === 'function') {\r\n        return typeOrName;\r\n      };\r\n\r\n      if (!(typeOrName in classNames)) {\r\n        if (parent) {\r\n          var tp = parent.getType(typeOrName, true);\r\n          if (tp) return tp;\r\n        }\r\n        if (onResolved) {\r\n          addPendingResolution(typeOrName, onResolved);\r\n          return;\r\n        } else if (doNotThrow) {\r\n          return undefined;\r\n        } else {\r\n          Guard.raise(new Exception(\"Unable to resolve type:\" + typeOrName));\r\n        }\r\n      };\r\n      var result = classTypes[classNames[typeOrName]];\r\n      if (onResolved) {\r\n        onResolved(result);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    this.getName = function(typeOrName) {\r\n      var t = this.getType(typeOrName);\r\n      var tPos = classTypes.indexOf(t);\r\n      if (tPos == -1)\r\n        Guard.raise(\"unknown type to request name for: \" + typeOrName);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.getTypes = function() {\r\n      var keys = Object.keys(classNames);\r\n      var ret = [];\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var className = keys[i];\r\n        ret.push({\r\n          name: className,\r\n          type: classTypes[classNames[className]],\r\n          toString: function() {\r\n            return this.name;\r\n          }\r\n        });\r\n      }\r\n      return ret;\r\n    };\r\n\r\n    //this.getTypeName( in type);\r\n    //this.resolveType()\r\n    //this.inferTypeFromValue = function (value) {\r\n\r\n    this.getTypeName = function(value) {\r\n      //TODO refactor\r\n      switch (typeof value) {\r\n        case 'object':\r\n          if (value == null) return '$data.Object';\r\n          if (value instanceof Array) return '$data.Array';\r\n          if (value.getType) return value.getType().fullName;\r\n          if (value instanceof Date) return '$data.Date';\r\n          if (value instanceof $data.Guid) return '$data.Guid';\r\n          if (value instanceof $data.DateTimeOffset) return '$data.DateTimeOffset';\r\n          if (value instanceof $data.GeographyPoint) return '$data.GeographyPoint';\r\n          if (value instanceof $data.GeographyLineString) return '$data.GeographyLineString';\r\n          if (value instanceof $data.GeographyPolygon) return '$data.GeographyPolygon';\r\n          if (value instanceof $data.GeographyMultiPoint) return '$data.GeographyMultiPoint';\r\n          if (value instanceof $data.GeographyMultiLineString) return '$data.GeographyMultiLineString';\r\n          if (value instanceof $data.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\r\n          if (value instanceof $data.GeographyCollection) return '$data.GeographyCollection';\r\n          if (value instanceof $data.GeographyBase) return '$data.GeographyBase';\r\n          if (value instanceof $data.GeometryPoint) return '$data.GeometryPoint';\r\n          if (value instanceof $data.GeometryLineString) return '$data.GeometryLineString';\r\n          if (value instanceof $data.GeometryPolygon) return '$data.GeometryPolygon';\r\n          if (value instanceof $data.GeometryMultiPoint) return '$data.GeometryMultiPoint';\r\n          if (value instanceof $data.GeometryMultiLineString) return '$data.GeometryMultiLineString';\r\n          if (value instanceof $data.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\r\n          if (value instanceof $data.GeometryCollection) return '$data.GeometryCollection';\r\n          if (value instanceof $data.GeometryBase) return '$data.GeometryBase';\r\n          if (value instanceof $data.Geospatial) return '$data.Geospatial';\r\n          if (value instanceof $data.SimpleBase) return '$data.SimpleBase';\r\n          if (typeof value.toHexString === 'function') return '$data.ObjectID';\r\n          //if(value instanceof \"number\") return\r\n        default:\r\n          return typeof value;\r\n      }\r\n    };\r\n\r\n    this.isTypeRegistered = function(typeOrName) {\r\n      if (typeof typeOrName === 'function') {\r\n        return classTypes.indexOf(typeOrName) > -1;\r\n      } else {\r\n        return typeOrName in classNames;\r\n      }\r\n    };\r\n\r\n    this.unregisterType = function(type) {\r\n      Guard.raise(\"Unimplemented\");\r\n    };\r\n\r\n\r\n\r\n    this.getDefault = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      switch (t) {\r\n        case $data.Number:\r\n          return 0.0;\r\n        case $data.Float:\r\n          return 0.0;\r\n        case $data.Decimal:\r\n          return '0.0';\r\n        case $data.Integer:\r\n          return 0;\r\n        case $data.Int16:\r\n          return 0;\r\n        case $data.Int32:\r\n          return 0;\r\n        case $data.Int64:\r\n          return '0';\r\n        case $data.Byte:\r\n          return 0;\r\n        case $data.SByte:\r\n          return 0;\r\n        case $data.String:\r\n          return null;\r\n        case $data.Boolean:\r\n          return false;\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    //name array ['', '', '']\r\n    this.getIndex = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      return classTypes.indexOf(t);\r\n    }\r\n\r\n    this.resolveByIndex = function(index) {\r\n      return classTypes[index];\r\n    }\r\n\r\n    this.registerType = function(nameOrNamesArray, type, factoryFunc) {\r\n      ///<signature>\r\n      ///<summary>Registers a type and optionally a lifetimeManager with a name\r\n      ///that can be used to later resolve the type or create new instances</summary>\r\n      ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\r\n      ///<param name=\"type\" type=\"Function\">The type to register</param>\r\n      ///<param name=\"instanceManager\" type=\"Function\"></param>\r\n      ///</signature>\r\n      ///<signature>\r\n      ///<summary>Registers a new type that </summary>\r\n      ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\r\n      ///<param name=\"actualType\" type=\"Function\">The type to register</param>\r\n      ///</signature>\r\n\r\n\r\n      ///TODO remove\r\n      /*if (typeof typeNameOrAlias === 'string') {\r\n          if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n              Guard.raise(\"Type already registered. Remove first\");\r\n          }\r\n      }*/\r\n\r\n      if (!nameOrNamesArray) {\r\n        return;\r\n      }\r\n\r\n      //todo add ('number', 'number')\r\n      if (typeof type === \"string\") {\r\n        type = self.resolveType(type);\r\n      }\r\n\r\n      var namesArray = [];\r\n      if (typeof nameOrNamesArray === 'string') {\r\n        var tmp = [];\r\n        tmp.push(nameOrNamesArray);\r\n        namesArray = tmp;\r\n      } else {\r\n        namesArray = nameOrNamesArray;\r\n      }\r\n\r\n      for (var i = 0; i < namesArray.length; i++) {\r\n        var parts = namesArray[i].split('.');\r\n        var item = {};\r\n        item.shortName = parts[parts.length - 1];\r\n        item.fullName = namesArray[i];\r\n        namesArray[i] = item;\r\n      }\r\n\r\n      //if (type.\r\n\r\n\r\n      var creatorFnc = function() {\r\n        return IoC(type, arguments);\r\n      };\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        intellisense.annotate(creatorFnc, type);\r\n      }\r\n\r\n      for (var i = 0, l = namesArray.length; i < l; i++) {\r\n        var item = namesArray[i];\r\n        if (!((\"create\" + item.shortName) in self)) {\r\n          if (typeof factoryFunc === 'function') {\r\n            self[\"create\" + item.shortName] = factoryFunc;\r\n          } else {\r\n            self[\"create\" + item.shortName] = creatorFnc;\r\n          }\r\n        }\r\n\r\n        var typePos = classTypes.indexOf(type);\r\n        if (typePos == -1) {\r\n          //new type\r\n          typePos = classTypes.push(type) - 1;\r\n          var fn = item.fullName;\r\n          consolidatedClassNames[typePos] = item.fullName;\r\n        };\r\n\r\n        classNames[item.fullName] = typePos;\r\n\r\n        var pending = pendingResolutions[item.fullName] || [];\r\n        if (pending.length > 0) {\r\n          pending.forEach(function(t) {\r\n            t(type);\r\n          });\r\n          pendingResolutions[item.fullName] = [];\r\n        }\r\n      }\r\n      if (parent) {\r\n        parent.registerType.apply(parent, arguments);\r\n      }\r\n      if (!type.name) {\r\n        try{ type.name = namesArray[0].shortName; }catch(err){ }\r\n      }\r\n    };\r\n\r\n\r\n    var _converters = {\r\n      from: {},\r\n      to: {}\r\n    };\r\n    this.converters = _converters;\r\n\r\n    this.convertTo = function(value, tType, eType /*if Array*/ , options) {\r\n      Guard.requireValue(\"typeOrName\", tType);\r\n\r\n      if (Guard.isNullOrUndefined(value))\r\n        return value;\r\n\r\n      var sourceTypeName = Container.getTypeName(value);\r\n      var sourceType = Container.resolveType(sourceTypeName);\r\n      var sourceTypeName = Container.resolveName(sourceType);\r\n      var targetType = Container.resolveType(tType);\r\n      var targetTypeName = Container.resolveName(targetType);\r\n\r\n      var result;\r\n      try {\r\n        if (typeof targetType['from' + sourceTypeName] === 'function') {\r\n          // target from\r\n          result = targetType['from' + sourceTypeName].apply(targetType, arguments);\r\n\r\n        } else if (typeof sourceType['to' + targetTypeName] === 'function') {\r\n          // source to\r\n          result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\r\n          // target from source\r\n          result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\r\n\r\n        } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\r\n          // source to target\r\n          result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\r\n\r\n        } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\r\n          result = value;\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\r\n          // target from anything\r\n          result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\r\n\r\n        } else {\r\n          throw \"converter not found\";\r\n        }\r\n      } catch (e) {\r\n        Guard.raise(new Exception(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\r\n      }\r\n\r\n      if (targetType === $data.Array && eType && Array.isArray(result)) {\r\n        for (var i = 0; i < result.length; i++) {\r\n          result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n    this.registerConverter = function(target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\r\n      //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\r\n      //registerConverter($data.Guid, $data.String, fn, fn);\r\n\r\n      var targetName = Container.resolveName(target);\r\n      if (Container.isTypeRegistered(sourceOrToConverters)) {\r\n        //isSource\r\n        _converters.to[targetName] = _converters.to[targetName] || {};\r\n        _converters.from[targetName] = _converters.from[targetName] || {};\r\n\r\n        var sourceName = Container.resolveName(sourceOrToConverters);\r\n\r\n        if (toConverterOrFromConverters)\r\n          _converters.to[targetName][sourceName] = toConverterOrFromConverters;\r\n        if (fromConverter)\r\n          _converters.from[targetName][sourceName] = fromConverter;\r\n\r\n      } else {\r\n        // converterGroup\r\n\r\n        //fromConverters\r\n        if (_converters.to[targetName]) {\r\n          _converters.to[targetName] = $data.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\r\n        } else {\r\n          _converters.to[targetName] = sourceOrToConverters;\r\n        }\r\n\r\n        //toConverters\r\n        if (_converters.from[targetName]) {\r\n          _converters.from[targetName] = $data.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\r\n        } else {\r\n          _converters.from[targetName] = toConverterOrFromConverters;\r\n        }\r\n      }\r\n    };\r\n\r\n    this.createOrGetNamespace = function(parts, root) {\r\n      for (var i = 0; i < parts.length; i++) {\r\n        var part = parts[i];\r\n        if (!root[part]) {\r\n          var ns = {};\r\n          ns.__namespace = true;\r\n          root[part] = ns;\r\n        }\r\n        root = root[part];\r\n      }\r\n      return root;\r\n    };\r\n  }\r\n","export var StringFunctions = {\r\n    startsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) === 0;\r\n    },\r\n    endsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.slice(-str.length) === str;\r\n    },\r\n    contains: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) >= 0;\r\n    }\r\n};\r\n","(function ObjectMethodsForPreHTML5Browsers() {\r\n\r\n\tif (!Object.getOwnPropertyNames){\r\n\t\tObject.getOwnPropertyNames = function(o){\r\n\t\t\tvar names = [];\r\n\r\n\t\t\tfor (var i in o){\r\n\t\t\t\tif (o.hasOwnProperty(i)) names.push(i);\r\n\t\t\t}\r\n\r\n\t\t\treturn names;\r\n\t\t};\r\n\t}\r\n\r\n    if (!Object.create) {\r\n        Object.create = function (o) {\r\n            if (arguments.length > 1) {\r\n                Guard.raise(new Error('Object.create implementation only accepts the first parameter.'));\r\n            }\r\n            function F() { }\r\n            F.prototype = o;\r\n            return new F();\r\n        };\r\n    }\r\n\r\n    if (!Object.keys) {\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\r\n        dontEnums = ['toString',\r\n                    'toLocaleString',\r\n                    'valueOf',\r\n                    'hasOwnProperty',\r\n                    'isPrototypeOf',\r\n                    'propertyIsEnumerable',\r\n                    'constructor'],\r\n        dontEnumsLength = dontEnums.length;\r\n\r\n        Object.keys = function (obj) {\r\n\r\n            ///Refactor to Assert.IsObjectOrFunction\r\n            if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) Guard.raise(new TypeError('Object.keys called on non-object'));\r\n\r\n            var result = [];\r\n\r\n            for (var prop in obj) {\r\n                if (hasOwnProperty.call(obj, prop)) {\r\n                    result.push(prop);\r\n                }\r\n            }\r\n\r\n            if (hasDontEnumBug) {\r\n                for (var i = 0; i < dontEnumsLength; i++) {\r\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\r\n                        result.push(dontEnums[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n    }\r\n\r\n    if (!Object.defineProperty) {\r\n        Object.defineProperty = function (obj, propName, propDef) {\r\n            obj[propName] = propDef.value || {};\r\n        };\r\n    }\r\n\r\n    if (!Object.defineProperties) {\r\n        Object.defineProperties = function (obj, defines) {\r\n            for (var i in defines) {\r\n                if(defines.hasOwnProperty(i))\r\n                    obj[i] = defines[i].value || {};\r\n            }\r\n        };\r\n    }\r\n\r\n    if (!Array.prototype.forEach) {\r\n        Array.prototype.forEach = function (handler, thisArg) {\r\n            for (var i = 0, l = this.length; i < l; i++) {\r\n                if (thisArg) { handler.call(thisArg, this[i], i, this); }\r\n                else { handler(this[i], i, this); };\r\n            };\r\n        };\r\n    };\r\n\r\n    if (!Array.prototype.filter) {\r\n        Array.prototype.filter = function (handler, thisArg) {\r\n            var result = [];\r\n            for (var i = 0, l = this.length; i < l; i++) {\r\n                var r = thisArg ?\r\n                    handler.call(thisArg, this[i], i, this) :\r\n                    handler(this[i], i, this);\r\n                if (r === true) {\r\n                    result.push(this[i]);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    if (!Array.prototype.map) {\r\n        Array.prototype.map = function (handler, thisArg) {\r\n            var result = [];\r\n            for (var i = 0, l = this.length; i < l; i++) {\r\n                var r = thisArg ?\r\n                    handler.call(thisArg, this[i], i, this) :\r\n                    handler(this[i], i, this);\r\n                result.push(r);\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    if (!Array.prototype.some) {\r\n        Array.prototype.some = function (handler, thisArg) {\r\n            for (var i = 0, l = this.length; i < l; i++) {\r\n                var r = thisArg ?\r\n                    handler.call(thisArg, this[i], i, this) :\r\n                    handler(this[i], i, this);\r\n                if (r) { return true; }\r\n\r\n            }\r\n            return false;\r\n        };\r\n    }\r\n\r\n    if (!Array.prototype.indexOf) {\r\n        Array.prototype.indexOf = function (item, from) {\r\n            for (var i = 0, l = this.length; i < l; i++) {\r\n                if (this[i] === item) {\r\n                    return i;\r\n                };\r\n            };\r\n            return -1;\r\n        };\r\n    }\r\n\r\n    if (!String.prototype.trimLeft) {\r\n        String.prototype.trimLeft = function () {\r\n            return this.replace(/^\\s+/, \"\");\r\n        }\r\n    }\r\n\r\n    if (!String.prototype.trimRight) {\r\n        String.prototype.trimRight = function () {\r\n            return this.replace(/\\s+$/, \"\");\r\n        }\r\n    }\r\n\r\n    if (!Function.prototype.bind) {\r\n        Function.prototype.bind = function (oThis) {\r\n            if (typeof this !== \"function\") {\r\n                // closest thing possible to the ECMAScript 5 internal IsCallable function\r\n                throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\r\n            }\r\n\r\n            var aArgs = Array.prototype.slice.call(arguments, 1),\r\n                fToBind = this,\r\n                fNOP = function () { },\r\n                fBound = function () {\r\n                    return fToBind.apply(this instanceof fNOP && oThis\r\n                                           ? this\r\n                                           : oThis,\r\n                                         aArgs.concat(Array.prototype.slice.call(arguments)));\r\n                };\r\n\r\n            fNOP.prototype = this.prototype;\r\n            fBound.prototype = new fNOP();\r\n\r\n            return fBound;\r\n        };\r\n    }\r\n    \r\n    if (typeof Uint8Array == 'undefined'){\r\n        Uint8Array = function(v){\r\n            if (v instanceof Uint8Array) return v;\r\n            var self = this;\r\n            var buffer = Array.isArray(v) ? v : new Array(v);\r\n            this.length = buffer.length;\r\n            this.byteLength = this.length;\r\n            this.byteOffset = 0;\r\n            this.buffer = { byteLength: self.length };\r\n            var getter = function(index){\r\n                return buffer[index];\r\n            };\r\n            var setter = function(index, value){\r\n                buffer[index] = (value | 0) & 0xff;\r\n            };\r\n            var makeAccessor = function(i){\r\n                buffer[i] = buffer[i] || 0;\r\n                Object.defineProperty(self, i, {\r\n                    enumerable: true,\r\n                    configurable: false,\r\n                    get: function(){\r\n                        if (isNaN(+i) || ((i | 0) < 0 || (i | 0) >= self.length)){\r\n                            try{\r\n                                if (typeof document != 'undefined') document.createTextNode(\"\").splitText(1);\r\n                                return new RangeError(\"INDEX_SIZE_ERR\");\r\n                            }catch(e){\r\n                                return e;\r\n                            }\r\n                        }\r\n                        return getter(i);\r\n                    },\r\n                    set: function(v){\r\n                        if (isNaN(+i) || ((i | 0) < 0 || (i | 0) >= self.length)){\r\n                            try{\r\n                                if (typeof document != 'undefined') document.createTextNode(\"\").splitText(1);\r\n                                return new RangeError(\"INDEX_SIZE_ERR\");\r\n                            }catch(e){\r\n                                return e;\r\n                            }\r\n                        }\r\n                        setter(i | 0, v);\r\n                    }\r\n                });\r\n            };\r\n            for (var i = 0; i < self.length; i++){\r\n                makeAccessor(i);\r\n            }\r\n        };\r\n    }\r\n\r\n})();\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.Logger', $data.TraceBase, null, {\r\n    log: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.log.apply(console, arguments);\r\n    },\r\n    warn: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.warn.apply(console, arguments);\r\n    },\r\n    error: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.error.apply(console, arguments);\r\n    },\r\n\r\n    getDateFormat: function () {\r\n        var date = new Date();\r\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.TraceBase', null, null, {\r\n    log: function () { },\r\n    warn: function () { },\r\n    error: function () { }\r\n});\r\n\r\n$data.Trace = new $data.TraceBase();\r\n\r\nexport default $data\r\n","import $data from './initializeJayData.js';\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport { StringFunctions } from './Extensions.js'\r\nimport {ContainerInstance, ContainerCtor} from './Container.js'\r\n\r\nimport {} from './PreHtml5Compatible.js'\r\n\r\n$data.StringFunctions = StringFunctions\r\n\r\nvar _modelHolder = null;\r\n$data.setModelContainer = function(modelHolder){\r\n  _modelHolder = modelHolder;\r\n};\r\n$data.getModelContainer = function(){\r\n  return _modelHolder;\r\n};\r\n\r\n$data.defaults = $data.defaults || {}\r\n$data.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\r\n$data.defaults.openTypeDefaultType = '$data.Object';\r\n$data.defaults.openTypeDefaultValue = function() { return {}; };\r\n\r\n$data.__global = process.browser ? window : global\r\n$data.setGlobal = function(obj){\r\n  $data.__global = obj;\r\n};\r\n\r\n(function init($data) {\r\n\r\n  function il(msg) {\r\n    if (typeof intellisense !== 'undefined') {\r\n      if (!intellisense.i) {\r\n        intellisense.i = 0;\r\n      }\r\n      intellisense.i = intellisense.i + 1;\r\n      intellisense.logMessage(msg + \":\" + intellisense.i);\r\n    }\r\n  }\r\n\r\n  function MemberDefinition(memberDefinitionData, definedClass) {\r\n\r\n    ///<field name=\"name\" type=\"String\">*</field>\r\n    ///<field name=\"dataType\" type=\"Object\">*</field>\r\n    ///<field name=\"elementType\" type=\"Object\"></field>\r\n    ///<field name=\"kind\" type=\"String\" />\r\n    ///<field name=\"classMember\" type=\"Boolean\" />\r\n    ///<field name=\"set\" type=\"Function\" />\r\n    ///<field name=\"get\" type=\"Function\" />\r\n    ///<field name=\"value\" type=\"Object\" />\r\n    ///<field name=\"initialValue\" type=\"Object\" />\r\n    ///<field name=\"method\" type=\"Function\" />\r\n    ///<field name=\"enumerable\" type=\"Boolean\" />\r\n    ///<field name=\"configurable\" type=\"Boolean\" />\r\n    ///<field name=\"key\" type=\"Boolean\" />\r\n    ///<field name=\"computed\" type=\"Boolean\" />\r\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\r\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\r\n\r\n    this.kind = MemberTypes.property;\r\n    //this.definedBy = definedClass;\r\n    Object.defineProperty(this, 'definedBy', {\r\n      value: definedClass,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false\r\n    });\r\n    if (memberDefinitionData) {\r\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\r\n        this.method = memberDefinitionData;\r\n        this.kind = MemberTypes.method;\r\n      } else {\r\n        this.enumerable = true;\r\n        this.configurable = true;\r\n        if (typeof memberDefinitionData === \"number\") {\r\n          this.value = memberDefinitionData;\r\n          this.type = $data.Number;\r\n          this.dataType = $data.Number;\r\n        } else if (typeof memberDefinitionData === \"string\") {\r\n          this.value = memberDefinitionData;\r\n          this.dataType = $data.String;\r\n          this.type = $data.String;\r\n        } else {\r\n          for (var item in memberDefinitionData) {\r\n            if (memberDefinitionData.hasOwnProperty(item)) {\r\n              this[item] = memberDefinitionData[item];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (this.type !== undefined) {\r\n        this.dataType = this.dataType || this.type;\r\n      } else {\r\n        this.type = this.dataType;\r\n      }\r\n\r\n      this.originalType = this.type;\r\n      if (this.elementType !== undefined) {\r\n        this.originalElementType = this.elementType;\r\n      }\r\n    }\r\n  }\r\n  MemberDefinition.prototype.createPropertyDescriptor = function(classFunction, value) {\r\n    ///<returns type=\"Object\" />\r\n    var pd = this;\r\n    var result = {\r\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\r\n      configurable: this.configurable == undefined ? true : this.configurable\r\n    };\r\n    if (this.set && this.get) {\r\n      result.set = this.set;\r\n      result.get = this.get;\r\n    } else if (\"value\" in this || value) {\r\n      result.value = value || this.value;\r\n      //TODO\r\n      //result.writable = this.writable;\r\n      result.writable = true;\r\n    } else {\r\n      result.set = function(value) {\r\n        this.storeProperty(pd, value);\r\n      };\r\n      result.get = function() {\r\n        return this.retrieveProperty(pd);\r\n      };\r\n    }\r\n    return result;\r\n  };\r\n  MemberDefinition.prototype.createStorePropertyDescriptor = function(value) {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: pd.configurable,\r\n      value: value\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createGetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(callback, tran) {\r\n        return this.getProperty(pd, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createSetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(value, callback, tran) {\r\n        return this.setProperty(pd, value, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.translateDefinition = function(memDef, name, classFunction) {\r\n    var holder = classFunction;\r\n    var memberDefinition;\r\n\r\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\r\n      holder = Container.resolveType(memDef.type);\r\n      if (typeof holder.translateDefinition === 'function') {\r\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\r\n        memberDefinition.name = memberDefinition.name || name;\r\n      } else {\r\n        holder = classFunction;\r\n      }\r\n    }\r\n\r\n\r\n    if (!(memberDefinition instanceof MemberDefinition)) {\r\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\r\n      memberDefinition.name = name;\r\n    }\r\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\r\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\r\n\r\n\r\n    var t = memberDefinition.type;\r\n    var et = memberDefinition.elementType;\r\n\r\n    function addChildThunk(referencedType) {\r\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\r\n        classFunction.childResolverThunks.push(function() {\r\n          if (referencedType.resolveForwardDeclarations) {\r\n            referencedType.resolveForwardDeclarations();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    addChildThunk(t);\r\n    addChildThunk(et);\r\n\r\n    if (\"string\" === typeof t) {\r\n      if (\"@\" === t[0]) {\r\n        memberDefinition.type = t.substr(1);\r\n        memberDefinition.dataType = t.substr(1);\r\n      } else {\r\n        //forward declared types get this callback when type is registered\r\n        classFunction.resolverThunks.push(function() {\r\n          var rt = classFunction.container.resolveType(t);\r\n          addChildThunk(rt);\r\n          memberDefinition.type = rt;\r\n          memberDefinition.dataType = rt;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (et) {\r\n      if (\"string\" === typeof et) {\r\n        if (\"@\" === et[0]) {\r\n          memberDefinition.elementType = et.substr(1);\r\n        } else {\r\n          //forward declared types get this callback when type is registered\r\n          classFunction.resolverThunks.push(function() {\r\n            var rt = classFunction.container.resolveType(et);\r\n            addChildThunk(rt);\r\n            memberDefinition.elementType = rt;\r\n          });\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    //if (!classFunction)\r\n\r\n    classFunction.resolveForwardDeclarations = function() {\r\n      classFunction.resolveForwardDeclarations = function() {};\r\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\r\n      this.resolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.resolverThunks = [];\r\n      this.childResolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.childResolverThunks = [];\r\n    }\r\n\r\n    return memberDefinition;\r\n  };\r\n\r\n  MemberDefinition.prototype.toJSON = function() {\r\n    var property = {};\r\n    for (var name in this) {\r\n      if (name !== 'defineBy' && name !== 'storageModel') {\r\n        if ((name === 'type' || name === 'dataType') && (this[name] && typeof this[name] === 'function')) {\r\n          try {\r\n            property[name] = Container.resolveName(this[name]);\r\n          } catch (e) {\r\n            property[name] = this[name];\r\n          }\r\n        } else {\r\n          property[name] = this[name];\r\n        }\r\n      }\r\n    }\r\n    return property;\r\n  }\r\n\r\n  $data.MemberDefinition = MemberDefinition;\r\n\r\n  var memberDefinitionPrefix = '$';\r\n\r\n  function MemberDefinitionCollection() {};\r\n  MemberDefinitionCollection.prototype = {\r\n    clearCache: function() {\r\n      this.arrayCache = undefined;\r\n      this.pubMapPropsCache = undefined;\r\n      this.keyPropsCache = undefined;\r\n      this.propByTypeCache = undefined;\r\n      this.pubMapMethodsCache = undefined;\r\n      this.pubMapPropNamesCache = undefined;\r\n    },\r\n    asArray: function() {\r\n      if (!this.arrayCache) {\r\n        this.arrayCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0)\r\n            this.arrayCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.arrayCache;\r\n    },\r\n    getPublicMappedProperties: function() {\r\n      if (!this.pubMapPropsCache) {\r\n        this.pubMapPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\r\n    },\r\n    getPublicMappedPropertyNames: function() {\r\n      if (!this.pubMapPropNamesCache) {\r\n        this.pubMapPropNamesCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropNamesCache.push(this[i].name);\r\n        }\r\n      }\r\n      return this.pubMapPropNamesCache;\r\n    },\r\n    getKeyProperties: function() {\r\n      if (!this.keyPropsCache) {\r\n        this.keyPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key)\r\n            this.keyPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.keyPropsCache;\r\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\r\n    },\r\n    getPublicMappedMethods: function() {\r\n      if (!this.pubMapMethodsCache) {\r\n        this.pubMapMethodsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/ )\r\n            this.pubMapMethodsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapMethodsCache;\r\n    },\r\n    getPropertyByType: function(type) {\r\n      if (!this.propByTypeCache) {\r\n        this.propByTypeCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type)\r\n            this.propByTypeCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.propByTypeCache;\r\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\r\n    },\r\n    getMember: function(name) {\r\n      return this[memberDefinitionPrefix + name];\r\n    },\r\n    setMember: function(value) {\r\n      this[memberDefinitionPrefix + value.name] = value;\r\n    }\r\n  };\r\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\r\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\r\n\r\n  function ClassEngineBase() {\r\n    this.classNames = {};\r\n  }\r\n\r\n  function MemberTypes() {\r\n    ///<field name=\"method\" type=\"string\" />\r\n    ///<field name=\"property\" type=\"string\" />\r\n    ///<field name=\"field\" type=\"string\" />\r\n    ///<field name=\"complexProperty\" type=\"string\" />\r\n  }\r\n  MemberTypes.__enum = true;\r\n\r\n  MemberTypes.method = \"method\";\r\n  MemberTypes.property = \"property\";\r\n  MemberTypes.navProperty = \"navProperty\";\r\n  MemberTypes.complexProperty = \"complexProperty\";\r\n  MemberTypes.field = \"field\";\r\n\r\n  $data.MemberTypes = MemberTypes;\r\n\r\n  //function classToJSON() {\r\n  //    var ret = {};\r\n  //    for (var i in this) {\r\n  //        if (this.hasOwnProperty(i)) {\r\n  //            ret[i] = this[i];\r\n  //        }\r\n  //    }\r\n  //    return ret;\r\n  //}\r\n  //$data.Base.toJSON = classToJSON;\r\n\r\n  ClassEngineBase.prototype = {\r\n\r\n    //getClass: function (classReference) {\r\n    //},\r\n\r\n    //getProperties: function (classFunction) {\r\n    //    return classFunction.propertyDefinitions;\r\n    //},\r\n\r\n    define: function(className, baseClass, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      return this.defineEx(className, [{\r\n        type: baseClass\r\n      }], container, instanceDefinition, classDefinition);\r\n    },\r\n    defineEx: function(className, baseClasses, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [\r\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\r\n      ///                         { type: $data.Mixin1, },\r\n      ///                         { type: $data.Mixin2, },\r\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\r\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\r\n      ///                     ], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      container = container || $data.Container;\r\n\r\n      if (baseClasses.length == 0) {\r\n        baseClasses.push({\r\n          type: $data.Base\r\n        });\r\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\r\n        baseClasses[0].type = $data.Base;\r\n      }\r\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\r\n        if (typeof baseClasses[i] === 'function')\r\n          baseClasses[i] = {\r\n            type: baseClasses[i]\r\n          };\r\n      }\r\n\r\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\r\n\r\n      var classNameParts = className.split('.');\r\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\r\n\r\n      $data.models = $data.models || {}\r\n      var root = container === $data.Container ? $data.models : container;\r\n      root = $data.Container.createOrGetNamespace(classNameParts, root)\r\n\r\n      var classFunction = null;\r\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\r\n      classFunction.fullName = className;\r\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\r\n      //classFunction.name = shortClassName;\r\n      classFunction.container = container;\r\n      classFunction.container.registerType(className, classFunction);\r\n\r\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\r\n\r\n\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        if (instanceDefinition && instanceDefinition.constructor) {\r\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\r\n        }\r\n      }\r\n\r\n      root[shortClassName] = this.classNames[className] = classFunction;\r\n\r\n      if(classNameParts[0] == '$data') {\r\n        var _classNameParts = [].concat(classNameParts)\r\n        _classNameParts.shift()\r\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data)\r\n        _root[shortClassName] = classFunction\r\n      }\r\n      if(_modelHolder && container == $data.Container){\r\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder)\r\n        innerNS[shortClassName] = classFunction\r\n      }\r\n\r\n      //classFunction.toJSON = classToJSON;\r\n      var baseCount = classFunction.baseTypes.length;\r\n      for (var i = 0; i < baseCount; i++) {\r\n        var b = classFunction.baseTypes[i];\r\n        if (\"inheritedTypeProcessor\" in b) {\r\n          b.inheritedTypeProcessor(classFunction);\r\n        }\r\n      }\r\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\r\n      //classFunction.constructor = instanceDefinition.constructor;\r\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\r\n      return classFunction;\r\n    },\r\n    classFunctionBuilder: function(name, base, classDefinition, instanceDefinition) {\r\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\r\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' +\r\n        body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\r\n    },\r\n    bodyBuilder: function(bases, classDefinition, instanceDefinition) {\r\n      var mixin = '';\r\n      var body = '';\r\n      var propagation = '';\r\n\r\n      for (var i = 0, l = bases.length; i < l; i++) {\r\n        var base = bases[i];\r\n        var index = i;\r\n        if (index == 0) { //ctor func\r\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\r\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\r\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\r\n          }\r\n        } else {\r\n          if (base && base.type && base.propagateTo) {\r\n            //propagation\r\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' +\r\n              index + '].params, this); \\n';\r\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' +\r\n              '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\r\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\r\n            //mixin\r\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\r\n          }\r\n        }\r\n      }\r\n      if (instanceDefinition && instanceDefinition.constructor != Object)\r\n        body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\r\n\r\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\r\n    },\r\n\r\n    buildType: function(classFunction, baseClasses, instanceDefinition, classDefinition) {\r\n      var baseClass = baseClasses[0].type;\r\n      classFunction.inheritsFrom = baseClass;\r\n      baseClass.inheritedTo = baseClass.inheritedTo || [];\r\n      baseClass.inheritedTo.push(classFunction);\r\n\r\n      if (baseClass) {\r\n        classFunction.prototype = Object.create(baseClass.prototype);\r\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\r\n        classFunction.memberDefinitions.clearCache();\r\n\r\n        var staticDefs = baseClass.staticDefinitions;\r\n        if (staticDefs) {\r\n          staticDefs = staticDefs.asArray();\r\n          if (staticDefs) {\r\n            for (var i = 0; i < staticDefs.length; i++) {\r\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n            }\r\n          }\r\n        }\r\n        classFunction.baseTypes = (baseClass.baseTypes || []).slice();\r\n        for (var i = 0; i < baseClasses.length; i++) {\r\n          classFunction.baseTypes.push(baseClasses[i].type);\r\n        }\r\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\r\n        if (!classFunction.isAssignableTo) {\r\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\r\n            value: function(type) {\r\n              return this === type || this.baseTypes.indexOf(type) >= 0;\r\n            },\r\n            writable: false,\r\n            enumerable: false,\r\n            configurable: false\r\n          });\r\n        }\r\n      }\r\n\r\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\r\n      if (classDefinition) {\r\n        if(openTypeDefinition) delete classDefinition.openType;\r\n        this.buildStaticMembers(classFunction, classDefinition);\r\n\r\n        if (classDefinition.constructor)\r\n          classFunction.classConstructor = classDefinition.constructor;\r\n      }\r\n\r\n      if (instanceDefinition) {\r\n\r\n        //build open type member\r\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\r\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\r\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\r\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\r\n          if (typeof classFunction.openType == \"string\") {\r\n            openTypePropertyName = classFunction.openType;\r\n          }\r\n\r\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\r\n          if(definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\r\n            Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n          }\r\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\r\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\r\n            if(memberType !== openTypeDefaultType){\r\n              Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n            }\r\n          }\r\n          if(!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]){\r\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : (function() { return {}; });\r\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue:  defaultValue };\r\n          }\r\n        }\r\n\r\n        this.buildInstanceMembers(classFunction, instanceDefinition);\r\n      }\r\n\r\n      var mixins = [].concat(baseClasses);\r\n      mixins.shift();\r\n      if (Object.keys(mixins).length > 0)\r\n        this.buildInstanceMixins(classFunction, mixins);\r\n\r\n      classFunction.__class = true;\r\n\r\n      classFunction.prototype.constructor = classFunction;\r\n\r\n      Object.defineProperty(classFunction.prototype, \"getType\", {\r\n        value: function() {\r\n          return classFunction;\r\n        },\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false\r\n      });\r\n    },\r\n\r\n    addMethod: function(holder, name, method, propagation) {\r\n      if (!propagation || (typeof intellisense !== 'undefined')) {\r\n        holder[name] = method;\r\n      } else {\r\n        holder[name] = function() {\r\n          return method.apply(this[propagation], arguments);\r\n        };\r\n      }\r\n    },\r\n\r\n    addProperty: function(holder, name, propertyDescriptor, propagation) {\r\n\r\n      //holder[name] = {};\r\n\r\n      if (propagation) {\r\n        propertyDescriptor.configurable = true;\r\n        if (propertyDescriptor.get) {\r\n          var origGet = propertyDescriptor.get;\r\n          propertyDescriptor.get = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            return origGet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n        if (propertyDescriptor.set) {\r\n          var origSet = propertyDescriptor.set;\r\n          propertyDescriptor.set = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            origSet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n      }\r\n\r\n      Object.defineProperty(holder, name, propertyDescriptor);\r\n    },\r\n\r\n    addField: function(holder, name, field) {\r\n      Guard.raise(\"not implemented\");\r\n    },\r\n\r\n    buildMethod: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\r\n      \r\n      for(var meta in memberDefinition){\r\n          if(typeof Reflect !== 'undefined' && Reflect.defineMetadata && typeof memberDefinition[meta] !== 'undefined' && memberDefinition.hasOwnProperty(meta)){\r\n              Reflect.defineMetadata('definition:' + meta, memberDefinition[meta], holder, memberDefinition.name)\r\n          }\r\n      }\r\n      \r\n    },\r\n\r\n    buildProperty: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\r\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\r\n      \r\n      for(var meta in memberDefinition){\r\n          if(typeof Reflect !== 'undefined' && Reflect.defineMetadata && typeof memberDefinition[meta] !== 'undefined' && memberDefinition.hasOwnProperty(meta)){\r\n              Reflect.defineMetadata('definition:' + meta, memberDefinition[meta], holder, memberDefinition.name)\r\n          }\r\n      }\r\n\r\n      //if lazyload TODO\r\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true &&\r\n        !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\r\n        var pdGetMethod = memberDefinition.createGetMethod();\r\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\r\n\r\n        var pdSetMethod = memberDefinition.createSetMethod();\r\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\r\n      }\r\n    },\r\n\r\n\r\n    buildMember: function(classFunction, memberDefinition, propagation, memberCollectionName) {\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\r\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\r\n      classFunction[memberCollectionName].setMember(memberDefinition);\r\n\r\n      switch (memberDefinition.kind) {\r\n        case MemberTypes.method:\r\n          this.buildMethod(classFunction, memberDefinition, propagation);\r\n          break;\r\n        case MemberTypes.navProperty:\r\n        case MemberTypes.complexProperty:\r\n        case MemberTypes.property:\r\n          this.buildProperty(classFunction, memberDefinition, propagation);\r\n          break;\r\n        default:\r\n          Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\r\n      }\r\n    },\r\n\r\n    buildStaticMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          memberDefinition.classMember = true;\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    buildInstanceMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    copyMembers: function(sourceType, targetType) {\r\n      ///<param name=\"sourceType\" type=\"Function\" />\r\n      ///<param name=\"targetType\" type=\"Function\" />\r\n      function il(msg) {\r\n        if (typeof intellisense === 'undefined') {\r\n          return;\r\n        }\r\n        intellisense.logMessage(msg);\r\n      }\r\n\r\n      Object.keys(sourceType.prototype).forEach(function(item, i, src) {\r\n        if (item !== 'constructor' && item !== 'toString') {\r\n          il(\"copying item:\" + item);\r\n          targetType.prototype[item] = sourceType[item];\r\n        }\r\n      });\r\n    },\r\n\r\n    buildInstanceMixins: function(classFunction, mixinList) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"mixinList\" type=\"Array\"></param>\r\n\r\n      classFunction.mixins = classFunction.mixins || [];\r\n      classFunction.propagations = classFunction.propagations || [];\r\n\r\n      for (var i = 0; i < mixinList.length; i++) {\r\n        var item = mixinList[i];\r\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\r\n        if (item.propagateTo) {\r\n          this.buildInstancePropagation(classFunction, item);\r\n          classFunction.propagations.push(item);\r\n          classFunction.propagations[item.type.name] = true;\r\n        } else {\r\n          this.buildInstanceMixin(classFunction, item);\r\n          classFunction.mixins.push(item);\r\n          classFunction.mixins[item.type.name] = true;\r\n        }\r\n      };\r\n    },\r\n    buildInstanceMixin: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i]);\r\n        }\r\n      }\r\n\r\n      if (typeObj.type.staticDefinitions) {\r\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\r\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\r\n          var itemName = staticDefs[i].name;\r\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n          }\r\n        }\r\n      }\r\n    },\r\n    buildInstancePropagation: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\r\n        }\r\n      }\r\n    }\r\n\r\n  };\r\n  var Class\r\n  $data.Class = Class = new ClassEngineBase();\r\n\r\n\r\n  $data.ContainerClass = ContainerCtor;\r\n\r\n  var c;\r\n  $data.Container = c = ContainerInstance\r\n\r\n  $data.createContainer = function() {\r\n    return new ContainerCtor($data.Container);\r\n  }\r\n\r\n  var storeProperty = function(memberDefinition, value) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    if (!this[backingFieldName]) {\r\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\r\n    } else {\r\n      this[backingFieldName] = value;\r\n    }\r\n  };\r\n  var retrieveProperty = function(memberDefinition) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    return this[backingFieldName];\r\n  };\r\n\r\n\r\n  $data.Class.define('$data.Base', function Base() {}, null, {\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    setProperty: function(memberDefinition, value, callback) {\r\n      this[memberDefinition.name] = value;\r\n      callback();\r\n    },\r\n    getProperty: function(memberDefinition, callback) {\r\n      callback.apply(this, [this[memberDefinition.name]]);\r\n    }\r\n  }, {\r\n    create: function() {\r\n      return Container.createInstance(this, arguments);\r\n    },\r\n    extend: function(name, container, instanceDefinition, classDefinition) {\r\n      if (container && !(container instanceof ContainerCtor)) {\r\n        classDefinition = instanceDefinition;\r\n        instanceDefinition = container;\r\n        container = undefined;\r\n      }\r\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\r\n    },\r\n    getMemberDefinition: function(name) {\r\n      return this.memberDefinitions.getMember(name);\r\n    },\r\n    addProperty: function(name, getterOrType, setterOrGetter, setter) {\r\n      var _getter = getterOrType;\r\n      var _setter = setterOrGetter;\r\n      var _type;\r\n      if (typeof _getter === 'string') {\r\n        _type = getterOrType;\r\n        _getter = setterOrGetter;\r\n        _setter = setter;\r\n      }\r\n\r\n      var propDef = {\r\n        notMapped: true,\r\n        storeOnObject: true,\r\n        get: typeof _getter === 'function' ? _getter : function() {},\r\n        set: typeof _setter === 'function' ? _setter : function() {},\r\n        type: _type\r\n      };\r\n\r\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\r\n      $data.Class.buildMember(this, memberDefinition);\r\n\r\n      this.memberDefinitions.clearCache();\r\n\r\n      return this;\r\n    },\r\n    addMember: function(name, definition, isClassMember) {\r\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\r\n\r\n      if (isClassMember) {\r\n        memberDefinition.classMember = true;\r\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\r\n        this.staticDefinitions.clearCache();\r\n      } else {\r\n        $data.Class.buildMember(this, memberDefinition);\r\n        this.memberDefinitions.clearCache();\r\n      }\r\n      return this;\r\n    },\r\n    describeField: function(name, definition) {\r\n      var memDef = this.memberDefinitions.getMember(name);\r\n      if (!memDef) {\r\n        this.addMember(name, definition);\r\n      } else {\r\n        Guard.raise(new Exception(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\r\n      }\r\n      return this;\r\n    },\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    'from$data.Object': function(value) {\r\n      return value;\r\n    },\r\n    \r\n    hasMetadata: function(key, property){\r\n        return typeof Reflect !== 'undefined' && Reflect.hasMetadata && Reflect.hasMetadata(key, this.prototype, property)\r\n    },\r\n    getAllMetadata: function(property){\r\n        var result = {};\r\n        if(typeof Reflect !== 'undefined' && Reflect.getMetadataKeys && Reflect.getMetadata){\r\n            var keys = Reflect.getMetadataKeys(this.prototype, property);\r\n            keys.forEach(key => {\r\n                result[key] = Reflect.getMetadata(key, this.prototype, property)\r\n            })\r\n        }\r\n        \r\n        return result;\r\n    },\r\n    getMetadata: function(key, property) {\r\n        return typeof Reflect !== 'undefined' && Reflect.getMetadata ? Reflect.getMetadata(key, this.prototype, property) : undefined\r\n    },\r\n    setMetadata: function(key, value, property) {\r\n        return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.defineMetadata(key, value, this.prototype, property)\r\n    }\r\n  });\r\n\r\n\r\n  //override after typeSystem initialized\r\n\r\n\r\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\r\n    constructor: function(paramIndex) {\r\n      ///<param name=\"paramIndex\" type=\"integer\" />\r\n      this.paramIndex = paramIndex;\r\n    },\r\n    paramIndex: {}\r\n  });\r\n  /*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n      constructor: function (typeName) {\r\n          ///<param name=\"paramIndex\" type=\"integer\">\r\n          this.typeName = typeName;\r\n      },\r\n      typeName: {}\r\n  });*/\r\n\r\n  //var e = new Entity();\r\n\r\n\r\n  /*$data.Interface = Class.define(\"Interface\", null, null, {\r\n      constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n  },\r\n  {\r\n      define: function (name, definition) {\r\n          var result = Class.define(name, $data.Interface, null, null, definition);\r\n          delete result.__class;\r\n          result.__interface = true;\r\n          return result;\r\n      }\r\n  });\r\n\r\n\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n      propertyChanged: { dataType: $data.Event }\r\n  }, {\r\n      createFromInstance: function(instance) {\r\n          var propNames = instance.getClass().memberDefinitions.f\r\n      }\r\n  });*/\r\n\r\n\r\n\r\n})($data);\r\n\r\n$data.defaultErrorCallback = function() {\r\n  //console.log('DEFAULT ERROR CALLBACK:');\r\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\r\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n    (console.error || console.log).call(console, arguments[0]);\r\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n  } else {\r\n    if (arguments[0] instanceof Error) {\r\n      Guard.raise(arguments[0]);\r\n    } else {\r\n      Guard.raise(new Exception(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\r\n    }\r\n  }\r\n};\r\n$data.defaultSuccessCallback = function() { /*console.log('DEFAULT SUCCES CALLBACK');*/ };\r\n$data.defaultNotifyCallback = function() { /*console.log('DEFAULT NOTIFY CALLBACK');*/ };\r\n\r\n$data.typeSystem = {\r\n  __namespace: true,\r\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\r\n  //mix: function (type, mixin) {\r\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\r\n  //    type.mixins = type.mixins || [];\r\n  //    type.mixins.push(mixin);\r\n  //    return type;\r\n  //},\r\n  extend: function(target) {\r\n    /// <summary>\r\n    /// Extends an object with properties of additional parameters.\r\n    /// </summary>\r\n    /// <signature>\r\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\r\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\r\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\r\n    /// </signature>\r\n    /// <returns></returns>\r\n    if (typeof target !== 'object' && typeof target !== 'function')\r\n      Guard.raise('Target must be object or function');\r\n\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var obj = arguments[i];\r\n      if (obj === null || typeof obj === 'undefined')\r\n        continue;\r\n      for (var key in obj) {\r\n        target[key] = obj[key];\r\n      }\r\n    }\r\n    return target;\r\n  },\r\n  createCallbackSetting: function(callBack, defaultSetting) {\r\n    var setting = {\r\n      success: $data.defaultSuccessCallback,\r\n      error: $data.defaultErrorCallback,\r\n      notify: $data.defaultNotifyCallback\r\n    };\r\n\r\n    if (defaultSetting != undefined && defaultSetting != null) {\r\n      setting = defaultSetting;\r\n    }\r\n\r\n    var result;\r\n    if (callBack == null || callBack == undefined) {\r\n      result = setting;\r\n\r\n    } else if (typeof callBack == 'function') {\r\n      result = this.extend(setting, {\r\n        success: callBack\r\n      });\r\n\r\n    } else {\r\n      result = this.extend(setting, callBack);\r\n    }\r\n\r\n    function wrapCode(fn) {\r\n      var t = this;\r\n\r\n      function r() {\r\n        fn.apply(t, arguments);\r\n        fn = function() {}\r\n      }\r\n      return r;\r\n    }\r\n\r\n    if (typeof result.error === 'function')\r\n      result.error = wrapCode(result.error);\r\n\r\n    return result;\r\n  },\r\n  createCtorParams: function(source, indexes, thisObj) {\r\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\r\n    ///<param name=\"indexes\" type=\"Array\" />\r\n    ///<param name=\"thisObj\" type=\"Object\" />\r\n    if (indexes) {\r\n      var paramArray = [];\r\n      for (var i = 0, l = indexes.length; i < l; i++) {\r\n        var item = i;\r\n        if (indexes[item] instanceof $data.Class.ConstructorParameter)\r\n          paramArray.push(source[indexes[item].paramIndex]);\r\n        else if (typeof indexes[item] === \"function\")\r\n          paramArray.push(indexes[item].apply(thisObj));\r\n        else\r\n          paramArray.push(indexes[item]);\r\n      }\r\n      return paramArray;\r\n    }\r\n    return source;\r\n  },\r\n  writePropertyValues: function(obj) {\r\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\r\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(\r\n        function(md) {\r\n          return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\r\n        }\r\n      ));\r\n    }\r\n  },\r\n  writeProperties: function(obj, members) {\r\n    var defines = {};\r\n    for (var i = 0, l = members.length; i < l; i++) {\r\n      var memDef = members[i];\r\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\r\n    }\r\n\r\n    Object.defineProperties(obj, defines);\r\n\r\n  },\r\n  writeProperty: function(obj, member, value) {\r\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\r\n    if (memDef) {\r\n      var propDef = memDef.createPropertyDescriptor(null, value);\r\n      //////OPTIMIZATION\r\n      Object.defineProperty(obj, memDef.name, propDef);\r\n    }\r\n  }\r\n};\r\n\r\n$data.debug = function() {\r\n  (console.debug || console.log).apply(console, arguments);\r\n};\r\n\r\n$data.debugWith = function() {\r\n  var cArgs = arguments;\r\n  return function(r) {\r\n    (console.debug || console.log).apply(console, cArgs);\r\n    if ((typeof Error !== 'undefined' && r instanceof Error) ||\r\n      (typeof Exception !== 'undefined' && r instanceof Exception)) {\r\n      (console.error || console.log).apply(console, arguments);\r\n    } else {\r\n      (console.debug || console.log).apply(console, arguments);\r\n    }\r\n  }\r\n};\r\n\r\n$data.fdebug = {\r\n  success: $data.debugWith('success'),\r\n  error: $data.debugWith('error')\r\n};\r\n\r\n\r\nexport var $C = function() {\r\n  $data.Class.define.apply($data.Class, arguments);\r\n}\r\nexport var Container = $data.Container\r\nexport var MemberDefinition = $data.MemberDefinition\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport btoa from 'btoa'\r\n\r\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\r\n$data.Blob = function Blob(){};\r\n\r\n$data.Blob.createFromHexString = function(value){\r\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]){\r\n        Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Blob', value));\r\n    }else{\r\n        //if (value.length & 1) value = '0' + value;\r\n        var arr = new (bufferOrArray)(value.length >> 1);\r\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\r\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n};\r\n\r\n$data.Blob.toString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += String.fromCharCode(value[i]);\r\n    }\r\n\r\n    return s;\r\n};\r\n\r\n$data.Blob.toBase64 = function(value){\r\n    if (!value || !value.length) return null;\r\n    return btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Blob.toArray = function(src){\r\n    if (!src || !src.length) return null;\r\n    var arr = new Array(src.length);\r\n    for (var i = 0; i < src.length; i++){\r\n        arr[i] = src[i];\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\r\n\r\n$data.Blob.toHexString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += ('00' + value[i].toString(16)).slice(-2);\r\n    }\r\n\r\n    return s.toUpperCase();\r\n};\r\n\r\n$data.Blob.toDataURL = function(value){\r\n    if (!value || !value.length) return null;\r\n    return 'data:application/octet-stream;base64,' + btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], $data.Blob);\r\n$data.Container.registerConverter('$data.Blob',{\r\n    '$data.String': function (value){\r\n        if (value && value.length){\r\n            var blob = new (bufferOrArray)(value.length);\r\n            for (var i = 0; i < value.length; i++){\r\n                blob[i] = value.charCodeAt(i);\r\n            }\r\n\r\n            return blob;\r\n        }else return null;\r\n    },\r\n    '$data.Array': function(value){\r\n        return new (bufferOrArray)(value);\r\n    },\r\n    '$data.Number': function(value){\r\n        return new (bufferOrArray)($data.packIEEE754(value, 11, 52).reverse());\r\n    },\r\n    '$data.Boolean': function(value){\r\n        return new (bufferOrArray)([value | 0]);\r\n    },\r\n    'default': function(value){\r\n        if (typeof Blob !== 'undefined' && value instanceof Blob){\r\n            var req = new XMLHttpRequest();\r\n            req.open('GET', URL.createObjectURL(value), false);\r\n            req.send(null);\r\n            return $data.Container.convertTo(req.response, $data.Blob);\r\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\r\n            return new (bufferOrArray)(new Uint8Array(value));\r\n        }else if (value instanceof Uint8Array){\r\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\r\n            //else\r\n            return value;\r\n        }else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n            return value;\r\n        }else*/ if (value.buffer){\r\n            return new (bufferOrArray)(value);\r\n        }else if (typeof value == 'object' && value instanceof Object){\r\n            var arr = [];\r\n            for (var i in value){\r\n                arr[i] = value[i];\r\n            }\r\n            if (!arr.length) throw 0;\r\n            return new (bufferOrArray)(arr);\r\n        }\r\n        throw 0;\r\n    }\r\n}, {\r\n    '$data.String': function(value){\r\n        return $data.Blob.toString(value);\r\n    },\r\n    '$data.Array': function(value){\r\n        return $data.Blob.toArray(value);\r\n    }\r\n});\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Container.registerConverter('$data.Boolean', {\r\n    '$data.String': function(value){\r\n        if (value.toLowerCase() == 'true') return true;\r\n        if (value.toLowerCase() == 'false') return false;\r\n\r\n        return !!value;\r\n    },\r\n    'default': function(value){\r\n        return !!value;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Integer', {\r\n    'default': function (value) {\r\n        if (value === Number.POSITIVE_INFINITY ||\r\n            value === Number.NEGATIVE_INFINITY ||\r\n            value === Number.MAX_VALUE ||\r\n            value === Number.MIN_VALUE) {\r\n            return value;\r\n        }\r\n\r\n        var r = parseInt(+value, 10);\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int32', {\r\n    'default': function (value) {\r\n        return value | 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Number', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Byte', {\r\n    'default': function(value){\r\n        return (value | 0) & 0xff;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Date', {\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.DateTimeOffset', {\r\n    '$data.Date': function(value){\r\n        return value;\r\n    },\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var time = '';\r\n        time += ('00' + matches[1]).slice(-2);\r\n        time += ':' + ('00' + matches[2]).slice(-2);\r\n        if (matches[4]) {\r\n            time += ':' + ('00' + matches[4]).slice(-2);\r\n        } else {\r\n            time += ':00';\r\n        }\r\n        if (matches[6])\r\n            time += '.' + (matches[6] + '000').slice(0, 3);\r\n\r\n        return time;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Time', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var metrics = [1000, 60, 60];\r\n            var result = [0, 0, 0, value | 0];\r\n\r\n            for (var i = 0; i < metrics.length; i++) {\r\n                result[metrics.length - (i + 1)] = (result[metrics.length - i] / metrics[i]) | 0;\r\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\r\n            }\r\n\r\n            var time = '';\r\n            for (var i = 0; i < result.length; i++) {\r\n                if (i < result.length - 1) {\r\n                    time += ('00' + result[i]).slice(-2);\r\n                    if (i < result.length - 2) time += ':';\r\n                } else {\r\n                    time += '.' + ('000' + result[i]).slice(-3);\r\n                }\r\n            }\r\n\r\n            return parseFromString(time);\r\n        },\r\n        '$data.Date': function (value) {\r\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\r\n            var ms = value.getMilliseconds()\r\n            if (ms) {\r\n                val += '.' + ms;\r\n            }\r\n\r\n            return parseFromString(val);\r\n        }\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var date = matches[1];\r\n        date += ('0000' + matches[2]).slice(-4);\r\n        date += '-' + ('00' + matches[3]).slice(-2);\r\n        date += '-' + ('00' + matches[4]).slice(-2);\r\n        return date;\r\n    }\r\n    function parseFromDate(value){\r\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\r\n        return parseFromString(val);\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Day', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var t = 1000*60*60*24;\r\n            var day = value * t;\r\n            if(isNaN(day)) throw 0;\r\n            \r\n            return parseFromDate(new Date(day));\r\n        },\r\n        '$data.Date': parseFromDate\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        return value;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Duration', {\r\n        '$data.String': parseFromString\r\n    });\r\n})();\r\n$data.Container.registerConverter('$data.Decimal', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        return value.toString();\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.packIEEE754 = function(v, ebits, fbits){\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str, bytes;\r\n\r\n    // Compute sign, exponent, fraction\r\n    if (v !== v){\r\n        // NaN\r\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\r\n        e = (1 << bias) - 1; f = Math.pow(2, fbits - 1); s = 0;\r\n    }else if (v === Infinity || v === -Infinity){\r\n        e = (1 << bias) - 1; f = 0; s = (v < 0) ? 1 : 0;\r\n    }else if (v === 0){\r\n        e = 0; f = 0; s = (1 / v === -Infinity) ? 1 : 0;\r\n    }else{\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n\r\n        if (v >= Math.pow(2, 1 - bias)){\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }else{\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) { bits.push(f % 2 ? 1 : 0); f = Math.floor(f / 2); }\r\n    for (i = ebits; i; i -= 1) { bits.push(e % 2 ? 1 : 0); e = Math.floor(e / 2); }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Bits to bytes\r\n    bytes = [];\r\n    while (str.length){\r\n        bytes.push(parseInt(str.substring(0, 8), 2));\r\n        str = str.substring(8);\r\n    }\r\n\r\n    return bytes;\r\n};\r\n\r\n$data.unpackIEEE754 = function(bytes, ebits, fbits){\r\n    // Bytes to bits\r\n    var bits = [], i, j, b, str, bias, s, e, f;\r\n\r\n    for (i = bytes.length; i; i -= 1){\r\n        b = bytes[i - 1];\r\n        for (j = 8; j; j -= 1){\r\n            bits.push(b % 2 ? 1 : 0); b = b >> 1;\r\n        }\r\n    }\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Unpack sign, exponent, fraction\r\n    bias = (1 << (ebits - 1)) - 1;\r\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\r\n    e = parseInt(str.substring(1, 1 + ebits), 2);\r\n    f = parseInt(str.substring(1 + ebits), 2);\r\n\r\n    // Produce number\r\n    if (e === (1 << ebits) - 1){\r\n        return f !== 0 ? NaN : s * Infinity;\r\n    }else if (e > 0){\r\n        // Normalized\r\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\r\n    }else if (f !== 0){\r\n        // Denormalized\r\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\r\n    }else{\r\n        return s < 0 ? -0 : 0;\r\n    }\r\n};\r\n\r\n$data.IEEE754 = function(v, e, f){\r\n    return $data.unpackIEEE754($data.packIEEE754(v, e, f), e, f);\r\n};\r\n\r\n$data.Container.registerConverter('$data.Float', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return $data.IEEE754(r, 8, 23);\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int16', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xffff;\r\n        if (r >= 0x8000) return r - 0x10000;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int64', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        var r = value.toString();\r\n        if (r.indexOf('.') > 0) return r.split('.')[0];\r\n        if (r.indexOf('.') == 0) throw 0;\r\n        return r;\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        if (value.indexOf('.') > 0) return value.split('.')[0];\r\n        if (value.indexOf('.') == 0) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.SByte', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xff;\r\n        if (r >= 0x80) return r - 0x100;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.String', {\r\n    '$data.Date': function(value){\r\n        return value.toISOString();\r\n    },\r\n    '$data.ObjectID': function(value){\r\n        return btoa(value.toString());\r\n    },\r\n    'default': function(value){\r\n        if (typeof value === 'object') return JSON.stringify(value);\r\n        return value.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Object', {\r\n    '$data.String': function(value){\r\n        return JSON.parse(value);\r\n    },\r\n    '$data.Function': function(){\r\n        throw 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Array', {\r\n    '$data.String': function(value){\r\n        var r = JSON.parse(value);\r\n        if (!Array.isArray(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.ObjectID', {\r\n    '$data.ObjectID': function(value){\r\n        try{\r\n            return btoa(value.toString());\r\n        }catch(e){\r\n            return value;\r\n        }\r\n    },\r\n    '$data.String': function(id){\r\n        return id;\r\n    }\r\n});\r\n\r\n$data.Container.proxyConverter = function(v){ return v; };\r\n$data.Container.defaultConverter = function(type){ return function(v){ return $data.Container.convertTo(v, type); }; };\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n(function ($data) {\r\n\r\n    function Edm_Boolean() { };\r\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\r\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\r\n\r\n    function Edm_Binary() { };\r\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\r\n    $data.Container.mapType(Edm_Binary, $data.Blob);\r\n\r\n    function Edm_DateTime() { };\r\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\r\n    $data.Container.mapType(Edm_DateTime, $data.Date);\r\n\r\n    function Edm_DateTimeOffset() { };\r\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\r\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\r\n\r\n    function Edm_Time() { };\r\n    $data.Container.registerType('Edm.Time', Edm_Time);\r\n    $data.Container.mapType(Edm_Time, $data.Time);\r\n\r\n    function Edm_TimeOfDay() { };\r\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\r\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\r\n    \r\n    function Edm_Date() { };\r\n    $data.Container.registerType('Edm.Date', Edm_Date);\r\n    $data.Container.mapType(Edm_Date, $data.Day);\r\n\r\n    function Edm_Duration() { }    ;\r\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\r\n    $data.Container.mapType(Edm_Duration, $data.Duration);\r\n\r\n    function Edm_Decimal() { };\r\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\r\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\r\n\r\n    function Edm_Float() { };\r\n    $data.Container.registerType('Edm.Float', Edm_Float);\r\n    $data.Container.mapType(Edm_Float, $data.Float);\r\n\r\n    function Edm_Single() { };\r\n    $data.Container.registerType('Edm.Single', Edm_Single);\r\n    $data.Container.mapType(Edm_Single, $data.Float);\r\n\r\n    function Edm_Double() { };\r\n    $data.Container.registerType('Edm.Double', Edm_Double);\r\n    $data.Container.mapType(Edm_Double, $data.Number);\r\n\r\n    function Edm_Guid() { };\r\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\r\n    $data.Container.mapType(Edm_Guid, $data.Guid);\r\n\r\n    function Edm_Int16() { };\r\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\r\n    $data.Container.mapType(Edm_Int16, $data.Int16);\r\n\r\n    function Edm_Int32() { };\r\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\r\n    $data.Container.mapType(Edm_Int32, $data.Integer);\r\n\r\n    function Edm_Int64() { };\r\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\r\n    $data.Container.mapType(Edm_Int64, $data.Int64);\r\n\r\n    function Edm_Byte() { };\r\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\r\n    $data.Container.mapType(Edm_Byte, $data.Byte);\r\n\r\n    function Edm_SByte() { };\r\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\r\n    $data.Container.mapType(Edm_SByte, $data.SByte);\r\n\r\n    function Edm_String() { };\r\n    $data.Container.registerType('Edm.String', Edm_String);\r\n    $data.Container.mapType(Edm_String, $data.String);\r\n\r\n    function Edm_GeographyPoint() { };\r\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\r\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\r\n\r\n    function Edm_GeographyLineString() { };\r\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\r\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\r\n\r\n    function Edm_GeographyPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\r\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\r\n\r\n    function Edm_GeographyMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\r\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\r\n\r\n    function Edm_GeographyMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\r\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\r\n\r\n    function Edm_GeographyMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\r\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\r\n\r\n    function Edm_GeographyCollection() { };\r\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\r\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\r\n\r\n    function Edm_GeometryPoint() { };\r\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\r\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\r\n\r\n    function Edm_GeometryLineString() { };\r\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\r\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\r\n\r\n    function Edm_GeometryPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\r\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\r\n\r\n    function Edm_GeometryMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\r\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\r\n\r\n    function Edm_GeometryMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\r\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\r\n\r\n    function Edm_GeometryMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\r\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\r\n\r\n    function Edm_GeometryCollection() { };\r\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\r\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\r\n\r\n    $data.oDataEdmMapping = {\r\n        '$data.Byte': 'Edm.Byte',\r\n        '$data.SByte': 'Edm.SByte',\r\n        '$data.Decimal': 'Edm.Decimal',\r\n        '$data.Float': 'Edm.Float',\r\n        '$data.Int16': 'Edm.Int16',\r\n        '$data.Int64': 'Edm.Int64',\r\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\r\n        '$data.Time': 'Edm.TimeOfDay',\r\n        '$data.Day': 'Edm.Date',\r\n        '$data.Duration': 'Edm.Duration',\r\n        '$data.Boolean': 'Edm.Boolean',\r\n        '$data.Blob': 'Edm.Binary',\r\n        '$data.Date': 'Edm.DateTime',\r\n        '$data.Number': 'Edm.Double',\r\n        '$data.Integer': 'Edm.Int32',\r\n        '$data.Int32': 'Edm.Int32',\r\n        '$data.String': 'Edm.String',\r\n        '$data.ObjectID': 'Edm.String',\r\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\r\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\r\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\r\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\r\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\r\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\r\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\r\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\r\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\r\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\r\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\r\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\r\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\r\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\r\n        '$data.Guid': 'Edm.Guid'\r\n    };\r\n\r\n})($data);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\n\r\n/* $data.GeographyBase */\r\n$data.GeographyBase = function GeographyBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeographyBase.defaultCrs;\r\n    $data.GeographyBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeographyBase.disableSRID = false;\r\n$data.GeographyBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:4326'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeographyBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if(lparenIdx >= 0){\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeographyBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeographyBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeographyBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geography'\";\r\n        function getSRID(g){\r\n            if(!$data.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeographyBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeographyBase);\r\n\r\n    $data.GeographyBase.registered = $data.GeographyBase.registered || {};\r\n    $data.GeographyBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeographyBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeographyBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeographyBase', $data.GeographyBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeographyBase'], $data.GeographyBase);\r\n\r\n/* $data.GeographyPoint */\r\n$data.GeographyPoint = function GeographyPoint(lon, lat) {\r\n    if (lon && typeof lon === 'object' && Array.isArray(lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: lon });\r\n    } else if (lon && typeof lon === 'object' && ('longitude' in lon || 'latitude' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\r\n    } else if (lon && typeof lon === 'object' && ('lng' in lon || 'lat' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\r\n    } else if (lon && typeof lon === 'object') {\r\n        $data.GeographyBase.call(this, lon);\r\n    } else {\r\n        $data.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\r\n    }\r\n};\r\n$data.GeographyPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeographyPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeographyPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Point', $data.GeographyPoint);\r\nObject.defineProperty($data.GeographyPoint.prototype, 'longitude', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeographyPoint.prototype, 'latitude', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], $data.GeographyPoint);\r\n$data.Geography = $data.GeographyPoint;\r\n\r\n/* $data.GeographyLineString */\r\n$data.GeographyLineString = function GeographyLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('LineString', $data.GeographyLineString);\r\n$data.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], $data.GeographyLineString);\r\n\r\n/* $data.GeographyPolygon */\r\n$data.GeographyPolygon = function GeographyPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeographyPoint ? data.topLeft : new $data.GeographyPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeographyPoint ? data.bottomRight : new $data.GeographyPoint(data.bottomRight);\r\n            tr = new $data.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeographyPoint ? data.topRight : new $data.GeographyPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeographyPoint ? data.bottomLeft : new $data.GeographyPoint(data.bottomLeft);\r\n            tl = new $data.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeographyBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeographyPolygon(data);\r\n};\r\n$data.GeographyPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Polygon', $data.GeographyPolygon);\r\n$data.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], $data.GeographyPolygon);\r\n\r\n/* $data.GeographyMultiPoint */\r\n$data.GeographyMultiPoint = function GeographyMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPoint', $data.GeographyMultiPoint);\r\n$data.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], $data.GeographyMultiPoint);\r\n\r\n/* $data.GeographyMultiLineString */\r\n$data.GeographyMultiLineString = function GeographyMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiLineString', $data.GeographyMultiLineString);\r\n$data.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], $data.GeographyMultiLineString);\r\n\r\n/* $data.GeographyMultiPolygon */\r\n$data.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPolygon', $data.GeographyMultiPolygon);\r\n$data.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], $data.GeographyMultiPolygon);\r\n\r\n/* $data.GeographyCollection */\r\n$data.GeographyCollection = function GeographyCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeographyBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyCollection.validMembers = ['geometries'];\r\n$data.GeographyBase.registerType('GeometryCollection', $data.GeographyCollection);\r\n$data.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], $data.GeographyCollection);\r\n\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeographyPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeographyCollection(value) : value;\r\n});\r\n\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\n\r\n/* $data.Geometry */\r\n$data.GeometryBase = function GeometryBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeometryBase.defaultCrs;\r\n    $data.GeometryBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeometryBase.disableSRID = false;\r\n$data.GeometryBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:0'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeometryBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if (lparenIdx >= 0) {\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeometryBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeometryBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeometryBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geometry'\";\r\n        function getSRID(g){\r\n            if(!$data.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeometryBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeometryBase);\r\n\r\n    $data.GeometryBase.registered = $data.GeometryBase.registered || {};\r\n    $data.GeometryBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeometryBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeometryBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeometryBase', $data.GeometryBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeometryBase'], $data.GeometryBase);\r\n\r\n/* $data.GeometryPoint */\r\n$data.GeometryPoint = function GeometryPoint(x, y) {\r\n    var param = x;\r\n    if (param && typeof param === 'object' && Array.isArray(param)) {\r\n        $data.GeometryBase.call(this, { coordinates: param });\r\n    } else if (param && typeof param === 'object' && ('x' in param || 'y' in param)) {\r\n        $data.GeometryBase.call(this, { coordinates: [param.x, param.y] });\r\n    } else if (param && typeof param === 'object') {\r\n        $data.GeometryBase.call(this, param);\r\n    } else {\r\n        $data.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\r\n    }\r\n};\r\n$data.GeometryPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeometryPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeometryPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Point', $data.GeometryPoint);\r\nObject.defineProperty($data.GeometryPoint.prototype, 'x', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeometryPoint.prototype, 'y', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], $data.GeometryPoint);\r\n\r\n/* $data.GeometryLineString */\r\n$data.GeometryLineString = function GeometryLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('LineString', $data.GeometryLineString);\r\n$data.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], $data.GeometryLineString);\r\n\r\n/* $data.GeometryPolygon */\r\n$data.GeometryPolygon = function GeometryPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeometryPoint ? data.topLeft : new $data.GeometryPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeometryPoint ? data.bottomRight : new $data.GeometryPoint(data.bottomRight);\r\n            tr = new $data.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeometryPoint ? data.topRight : new $data.GeometryPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeometryPoint ? data.bottomLeft : new $data.GeometryPoint(data.bottomLeft);\r\n            tl = new $data.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeometryBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeometryPolygon(data);\r\n};\r\n$data.GeometryPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Polygon', $data.GeometryPolygon);\r\n$data.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], $data.GeometryPolygon);\r\n\r\n/* $data.GeometryMultiPoint */\r\n$data.GeometryMultiPoint = function GeometryMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPoint', $data.GeometryMultiPoint);\r\n$data.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], $data.GeometryMultiPoint);\r\n\r\n/* $data.GeometryMultiLineString */\r\n$data.GeometryMultiLineString = function GeometryMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiLineString', $data.GeometryMultiLineString);\r\n$data.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], $data.GeometryMultiLineString);\r\n\r\n/* $data.GeometryMultiPolygon */\r\n$data.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPolygon', $data.GeometryMultiPolygon);\r\n$data.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], $data.GeometryMultiPolygon);\r\n\r\n/* $data.GeometryCollection */\r\n$data.GeometryCollection = function GeometryCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeometryBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryCollection.validMembers = ['geometries'];\r\n$data.GeometryBase.registerType('GeometryCollection', $data.GeometryCollection);\r\n$data.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], $data.GeometryCollection);\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeometryPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeometryCollection(value) : value;\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Geospatial = function Geospatial() {\r\n    this.type = this.constructor.type;\r\n    if (Array.isArray(this.constructor.validMembers)) {\r\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n            var name = this.constructor.validMembers[i];\r\n            this[name] = undefined;\r\n        }\r\n    }\r\n\r\n    $data.SimpleBase.apply(this, arguments);\r\n    this.type = this.constructor.type || 'Unknown';\r\n};\r\n$data.SimpleBase.registerType('Geospatial', $data.Geospatial);\r\n$data.Container.registerType(['$data.Geospatial', 'Geospatial'], $data.Geospatial);\r\n\r\n$data.point = function (arg) {\r\n    if (arg && arg.crs) {\r\n        if (arg.crs.properties && arg.crs.properties.name === $data.GeometryBase.defaultCrs.properties.name) {\r\n            return new $data.GeometryPoint(arg);\r\n        } else {\r\n            return new $data.GeographyPoint(arg);\r\n        }\r\n    } else if(arg) {\r\n        if ('x' in arg && 'y' in arg) {\r\n            return new $data.GeometryPoint(arg.x, arg.y);\r\n        } else if ('longitude' in arg && 'latitude' in arg) {\r\n            return new $data.GeographyPoint(arg.longitude, arg.latitude);\r\n        } else if ('lng' in arg && 'lat' in arg) {\r\n            return new $data.GeographyPoint(arg.lng, arg.lat);\r\n        }\r\n    }\r\n};\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\n\n$data.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || (typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value))) {\r\n        this.value = value || '00000000-0000-0000-0000-000000000000';\r\n    } else {\r\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\r\n    }\n};\n$data.Container.registerType(['$data.Guid', 'Guid', 'guid'], $data.Guid);\n$data.Container.registerConverter('$data.Guid', {\r\n    '$data.String': function (value) {\r\n        return value ? $data.parseGuid(value).toString() : value;\r\n    },\r\n    '$data.Guid': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n}, {\r\n    '$data.String': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n});\n\n\n$data.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n$data.Guid.NewGuid = function () {\n    return $data.createGuid();\n};\n\n$data.parseGuid = function (guid) {\n    return new $data.Guid(guid);\n};\n\n(function () {\r\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n\r\n    Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\r\n\r\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n\r\n    $data.createGuid = function (guidString) {\r\n        if (guidString) {\r\n            return new $data.Guid(guidString);\r\n        };\r\n\r\n        var len;\r\n        var chars = CHARS, uuid = [], i;\r\n        var radix = chars.length;\r\n\r\n        if (len) {\r\n            // Compact form\r\n            for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];\r\n        } else {\r\n            // rfc4122, version 4 form\r\n            var r;\r\n\r\n            // rfc4122 requires these characters\r\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n            uuid[14] = '4';\r\n\r\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n            // per rfc4122, sec. 4.1.5\r\n            for (i = 0; i < 36; i++) {\r\n                if (!uuid[i]) {\r\n                    r = 0 | Math.random() * 16;\r\n                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n                }\r\n            }\r\n        }\r\n\r\n        return $data.parseGuid(uuid.join(''));\r\n    };\r\n})();\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n/* $data.SimpleBase */\r\n$data.SimpleBase = function SimpleBase(data) {\r\n    if (typeof data === 'object' && data) {\r\n        if (Array.isArray(this.constructor.validMembers)) {\r\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n                var name = this.constructor.validMembers[i];\r\n\r\n                if (data[name] !== undefined) {\r\n                    this[name] = data[name];\r\n                }\r\n            }\r\n\r\n        } else {\r\n            delete data.type;\r\n            $data.typeSystem.extend(this, data);\r\n        }\r\n    }\r\n}\r\n$data.SimpleBase.registerType = function (name, type, base) {\r\n    base = base || $data.SimpleBase;\r\n\r\n    type.type = name;\r\n    type.prototype = Object.create(base.prototype);\r\n    type.prototype.constructor = type;\r\n}\r\n$data.Container.registerType(['$data.SimpleBase', 'SimpleBase'], $data.SimpleBase);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Number = typeof Number !== 'undefined' ? Number : function JayNumber() { };\r\n$data.Date = typeof Date !== 'undefined' ? Date : function JayDate() { };\r\n$data.String = typeof String !== 'undefined' ? String : function JayString() { };\r\n$data.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() { };\r\n$data.Array = typeof Array !== 'undefined' ? Array : function JayArray() { };\r\n$data.Object = typeof Object !== 'undefined' ? Object : function JayObject() { };\r\n$data.Function = Function;\r\n\r\n$data.Byte = function JayByte() { };\r\n$data.SByte = function JaySByte() { };\r\n$data.Decimal = function JayDecimal() { };\r\n$data.Float = $data.Single = function JayFloat() { };\r\n$data.Integer = function JayInteger() { };\r\n$data.Int16 = function JayInt16(v) { };\r\n$data.Int32 = function JayInt32() { };\r\n$data.Int64 = function JayInt64(v) { };\r\n$data.ObjectID = typeof $data.mongoDBDriver !== 'undefined' && typeof $data.mongoDBDriver.ObjectID !== 'undefined' ? $data.mongoDBDriver.ObjectID : function JayObjectID() { };\r\n$data.Time = function JayTime() { };\r\n$data.Day = function JayDay() { };\r\n$data.Duration = function JayDuration() { };\r\n$data.DateTimeOffset = function JayDateTimeOffset(val) {\r\n    this.value = val;\r\n};\r\n$data.DateTimeOffset.prototype.toJSON = function () {\r\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\r\n};\r\n\r\n$data.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], $data.Number);\r\n$data.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], $data.Integer);\r\n$data.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], $data.Int32);\r\n$data.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], $data.Byte);\r\n$data.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], $data.SByte);\r\n$data.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], $data.Decimal);\r\n$data.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], $data.Float);\r\n$data.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], $data.Int16);\r\n$data.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], $data.Int64);\r\n$data.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], $data.String);\r\n$data.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], $data.Array, function () {\r\n    return $data.Array.apply(undefined, arguments);\r\n});\r\n$data.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], $data.Date);\r\n$data.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], $data.Time);\r\n$data.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], $data.Day);\r\n$data.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], $data.Duration);\r\n$data.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], $data.DateTimeOffset);\r\n$data.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], $data.Boolean);\r\n$data.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], $data.Object);\r\n$data.Container.registerType([\"$data.Function\", \"Function\", \"function\"], $data.Function);\r\n$data.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], $data.ObjectID);\r\n\r\nexport default $data\r\n","import $data, { $C as _$C, Container as _container } from './TypeSystem.js';\r\nimport Types from './Types/Types.js';\r\nimport Trace from './Trace/Trace.js';\r\nimport Logger from './Trace/Logger.js';\r\nimport SimpleBase from './Types/SimpleBase.js';\r\nimport Geospatial from './Types/Geospatial.js';\r\nimport Geography from './Types/Geography.js';\r\nimport Geometry from './Types/Geometry.js';\r\nimport Guid from './Types/Guid.js';\r\nimport Blob from './Types/Blob.js';\r\nimport EdmTypes from './Types/EdmTypes.js';\r\nimport Converter from './Types/Converter.js';\r\n\r\nimport { Guard as _guard, Exception as _exception } from 'jaydata-error-handler';\r\n\r\nimport { PromiseHandler } from 'jaydata-promise-handler';\r\nPromiseHandler.use($data);\r\n\r\nexport var Guard = _guard;\r\n$data.Guard = _guard;\r\n\r\nexport var Exception = _exception;\r\n$data.Exception = _exception;\r\n\r\nexport var $C = _$C;\r\n$data.$C = _$C;\r\n\r\nexport var Container = _container;\r\nexport default $data;\r\n","import $data from './initializeJayDataClient.js';\r\nimport * as acorn from 'acorn';\r\nimport * as pkg from '../../package.json';\r\n\r\nif (typeof console === 'undefined') {\r\n  console = {\r\n    warn: function() {},\r\n    error: function() {},\r\n    log: function() {},\r\n    dir: function() {},\r\n    time: function() {},\r\n    timeEnd: function() {}\r\n  };\r\n}\r\n\r\nif (!console.warn) console.warn = function() {};\r\nif (!console.error) console.error = function() {};\r\n\r\n(function($data) {\r\n  ///<summary>\r\n  /// Collection of JayData services\r\n  ///</summary>\r\n  $data.__namespace = true;\r\n  $data.version = \"JayData \" + pkg.version;\r\n  $data.versionNumber = pkg.version;\r\n  $data.root = {};\r\n  $data.Acorn = acorn;\r\n\r\n})($data);\r\nexport default $data\r\n  // Do not remove this block, it is used by jsdoc\r\n  /**\r\n      @name $data.Base\r\n      @class base class\r\n  */\r\n","export default function _data_handler() {\r\n  //console.log(\"@@@@\", this);\r\n  if (this instanceof _data_handler) {\r\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\r\n    return new type(arguments[1]);\r\n  } else {\r\n    return _data_handler[\"implementation\"].apply(this, arguments)\r\n  }\r\n};\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Access', null, null, {}, {\r\n    isAuthorized: function(access, user, sets, callback){\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        //clbWrapper.error('Authorization failed', 'Access authorization');\r\n        clbWrapper.success(true);\r\n\r\n        return pHandlerResult;\r\n\r\n        /*var error;\r\n\r\n        if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n\r\n        if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n\r\n        if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n\r\n        var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n\r\n        var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n\r\n        var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n\r\n            if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n\r\n                if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        callbackFn();\r\n\r\n        return pHandlerResult;*/\r\n    },\r\n    getAccessBitmaskFromPermission: function(p){\r\n        var access = $data.Access.None;\r\n\r\n        if (p.Create) access |= $data.Access.Create;\r\n        if (p.Read) access |= $data.Access.Read;\r\n        if (p.Update) access |= $data.Access.Update;\r\n        if (p.Delete) access |= $data.Access.Delete;\r\n        if (p.DeleteBatch) access |= $data.Access.DeleteBatch;\r\n        if (p.Execute) access |= $data.Access.Execute;\r\n\r\n        return access;\r\n    },\r\n    None: { value: 0 },\r\n    Create: { value: 1 },\r\n    Read: { value: 2 },\r\n    Update: { value: 4 },\r\n    Delete: { value: 8 },\r\n    DeleteBatch: { value: 16 },\r\n    Execute: { value: 32 }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.ajax = $data.ajax || function () {\r\n    var cfg = arguments[arguments.length - 1];\r\n    var clb = $data.PromiseHandlerBase.createCallbackSettings(cfg);\r\n    clb.error(\"Not implemented\");\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof Ext !== 'undefined' && typeof Ext.Ajax) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        Ext.Ajax.request(options);\r\n    };\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        $data.typeSystem.extend(options, {\r\n            dataType: 'json',\r\n            headers: {}\r\n        });\r\n        var dataTypes = {\r\n            'json': {\r\n                accept: 'application/json, text/javascript',\r\n                convert: JSON.parse\r\n            },\r\n            'text': {\r\n                accept: 'text/plain',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'html': {\r\n                accept: 'text/html',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'xml': {\r\n                accept: 'application/xml, text/xml',\r\n                convert: function (e) {\r\n                    // TODO?\r\n                    return e;\r\n                }\r\n            }\r\n        }\r\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\r\n\r\n        options.headers.Accept = dataTypeContext.accept;\r\n\r\n        var successClb = options.success || $data.defaultSuccessCallback;\r\n        var errorClb = options.error || $data.defaultErrorCallback;\r\n        var progressClb = options.progress;\r\n\r\n        var success = function (r) {\r\n            var result = dataTypeContext.convert(r.responseText);\r\n            successClb(result);\r\n        }\r\n        var error = function (r) {\r\n            var error = dataTypeContext.convert(r.responseText);\r\n            errorClb(error);\r\n        }\r\n        var progress = progressClb;\r\n\r\n        WinJS.xhr(options)\r\n        .done(success, error, progress);\r\n    }\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\r\n    $data.ajax = $data.ajax || jQuery.ajax;\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.Anonymous\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        $data.ajax(cfg);\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n         Guard.raise(\"Pure class\");\r\n    },\r\n    Logout: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Username: '',\r\n            Password: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (callbacks && typeof callbacks.pending == \"function\")\r\n            callbacks.pending();\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        var origBeforeSend = cfg.beforeSend;\r\n        cfg.beforeSend = function (xhr) {\r\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\r\n\r\n            if(typeof origBeforeSend == \"function\")\r\n                origBeforeSend(xhr);\r\n        };\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    __encodeBase64: function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.FacebookAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Url_code: '',\r\n            type_code: '',\r\n            scope: '',\r\n            Url_token: '',\r\n            type_token: '',\r\n            access_token: '',\r\n            app_id: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (this.Authenticated) {\r\n            return;\r\n        }\r\n\r\n        var provider = this;\r\n        provider.configuration.stateCallbacks = callbacks || {};\r\n\r\n        $data.ajax({\r\n            url: this.configuration.Url_code,\r\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\")\r\n                    provider.configuration.stateCallbacks.pending(data);\r\n                provider._processRequestToken(data);\r\n                provider.Authenticated = true;\r\n            },\r\n            error: function () {\r\n                if (typeof provider.configuration.stateCallbacks.error == \"function\")\r\n                    provider.configuration.stateCallbacks.error(arguments);\r\n            }\r\n        });\r\n    },\r\n    Logout: function () {\r\n        this.Authenticated = false;\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        if (cfg.url.indexOf('access_token=') === -1) {\r\n            if (cfg.url && this.Authenticated) {\r\n                var andChar = '?';\r\n                if (cfg.url.indexOf(andChar) > 0)\r\n                    andChar = '&';\r\n\r\n                if (this.configuration.access_token)\r\n                    cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\r\n            }\r\n        }\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    _processRequestToken: function (verification_data) {\r\n        var provider = this;\r\n\r\n        $data.ajax({\r\n            url: provider.configuration.Url_token,\r\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function(result) {\r\n                provider.configuration.access_token = result.access_token;\r\n                if (typeof provider.configuration.stateCallbacks.success == \"function\")\r\n                    provider.configuration.stateCallbacks.success(result);\r\n            },\r\n            error: function(obj) {\r\n                var data = eval('(' + obj.responseText + ')');\r\n                if (data.error) {\r\n                    if (data.error.message == \"authorization_pending\") {\r\n                        setTimeout(function() {\r\n                            provider._processRequestToken(verification_data);\r\n                        }, 2000);\r\n                    } else if (\"authorization_declined\") {\r\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\")\r\n                            provider.configuration.stateCallbacks.abort(arguments);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\nvar EventSubscriber = $data.Class.define(\"EventSubscriber\", null, null, {\r\n    constructor: function (handler, state, thisArg) {\r\n        /// <param name=\"handler\" type=\"Function\">\r\n        ///     <summary>event handler</summary>\r\n        ///     <signature>\r\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\r\n        ///         <param name=\"eventData\" type=\"EventData\" />\r\n        ///         <param name=\"state\" type=\"Object\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\r\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\r\n        ///\r\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\r\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\r\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\r\n        this.handler = handler;\r\n        this.state = state;\r\n        this.thisArg = thisArg;\r\n    },\r\n    handler: {},\r\n    state: {},\r\n    thisArg: {}\r\n});\r\n\r\n$data.Event = $data.Class.define(\"$data.Event\", null, null, {\r\n    constructor: function (name, sender) {\r\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\r\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\r\n        var subscriberList = null;\r\n        var parentObject = sender;\r\n\r\n        function detachHandler(list, handler) {\r\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\r\n            ///<param name=\"handler\" type=\"Function\" />\r\n            list.forEach(function (item, index) {\r\n                if (item.handler == handler) {\r\n                    list.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.attach = function (handler, state, thisArg) {\r\n            ///<param name=\"handler\" type=\"Function\">\r\n            ///<signature>\r\n            ///<param name=\"sender\" type=\"Object\" />\r\n            ///<param name=\"eventData\" type=\"Object\" />\r\n            ///<param name=\"state\" type=\"Object\" />\r\n            ///</signature>\r\n            ///</param>\r\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\r\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\r\n            if (!subscriberList) {\r\n                subscriberList = [];\r\n            }\r\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\r\n        };\r\n        this.detach = function (handler) {\r\n            detachHandler(subscriberList, handler);\r\n        };\r\n        this.fire = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\r\n                    } catch(ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.fireCancelAble = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            var isValid = true;\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\r\n                    } catch (ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n            return isValid;\r\n        };\r\n    }\r\n});\r\n\r\n\r\nvar EventData = $data.Class.define(\"EventData\", null, null, {\r\n    eventName: {}\r\n});\r\n\r\nvar PropertyChangeEventData = $data.Class.define(\"PropertyChangeEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {}\r\n});\r\n\r\nvar PropertyValidationEventData = $data.Class.define(\"PropertyValidationEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue, errors) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n        this.errors = errors;\r\n        this.cancel = false;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {},\r\n    errors: {},\r\n    cancel: {}\r\n});\r\n\r\n\r\n\r\n$data.Entity = $data.Class.define(\"$data.Entity\", null, null, {\r\n    constructor: function (initData, newInstanceOptions) {\r\n        /// <description>\r\n        ///     This class provide a light weight, object-relational interface between\r\n        ///     your javascript code and database.\r\n        /// </description>\r\n        ///\r\n        /// <signature>\r\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\r\n        ///     <example>\r\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\r\n        ///         $news.context.Categories.add(category);\r\n        ///     </example>\r\n        /// </signature>\r\n        ///\r\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\r\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\r\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\r\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\r\n        /// <field name=\"entityState\" type=\"Integer\"></field>\r\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\r\n\r\n        this.initData = {};\r\n        var thisType = this.getType();\r\n        if (thisType.__copyPropertiesToInstance) {\r\n            $data.typeSystem.writePropertyValues(this);\r\n        }\r\n\r\n        var ctx = null;\r\n        this.context = ctx;\r\n        if (\"setDefaultValues\" in thisType) {\r\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\r\n                if (!initData || Object.keys(initData).length < 1) {\r\n                    initData = thisType.setDefaultValues(initData);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (typeof initData === \"object\") {\r\n            var typeMemDefs = thisType.memberDefinitions;\r\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\r\n\r\n            for (var i in initData) {\r\n                if (memDefNames.indexOf(i) > -1) {\r\n                    var memberDef = typeMemDefs.getMember(i);\r\n                    var type = Container.resolveType(memberDef.type);\r\n                    var value = initData[i];\r\n\r\n                    if (memberDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                        this.initData[i] = value;\r\n                    } else {\r\n                        if (newInstanceOptions && newInstanceOptions.converters) {\r\n                            var converter = newInstanceOptions.converters[Container.resolveName(type)];\r\n                            if (converter)\r\n                                value = converter(value);\r\n                        }\r\n\r\n                        this.initData[i] = Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\r\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\r\n        }\r\n\r\n        this.changedProperties = undefined;\r\n        this.entityState = undefined;\r\n\r\n\r\n        if (thisType.inheritsFrom != $data.Entity){\r\n            this[\"@odata.type\"] = '#' + thisType.fullName;\r\n        }\r\n    },\r\n    toString: function () {\r\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\r\n        /// <returns type=\"String\"/>\r\n\r\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\"\r\n    },\r\n    toJSON: function () {\r\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\r\n        /// <returns type=\"Object\">JSON representation</returns>\r\n\r\n        var result = {};\r\n        var self = this;\r\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            if (self[memDef.name] instanceof Date && memDef.type && Container.resolveType(memDef.type) === $data.DateTimeOffset) {\r\n                result[memDef.name] = new $data.DateTimeOffset(self[memDef.name]);\r\n            } else {\r\n                result[memDef.name] = self[memDef.name];\r\n            }\r\n        });\r\n        return result;\r\n    },\r\n    equals: function (entity) {\r\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\r\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\r\n\r\n        if (entity.getType() !== this.getType()) {\r\n            return false;\r\n        }\r\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\r\n        for (var i = 0; i < entityPk.length; i++) {\r\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    propertyChanging: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanging)\r\n                this._propertyChanging = new $data.Event('propertyChanging', this);\r\n\r\n            return this._propertyChanging;\r\n        },\r\n        set: function (value) { this._propertyChanging = value; }\r\n    },\r\n\r\n    propertyChanged: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanged)\r\n                this._propertyChanged = new $data.Event('propertyChanged', this);\r\n\r\n            return this._propertyChanged;\r\n        },\r\n        set: function (value) { this._propertyChanged = value; }\r\n    },\r\n\r\n    propertyValidationError: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyValidationError)\r\n                this._propertyValidationError = new $data.Event('propertyValidationError', this);\r\n\r\n            return this._propertyValidationError;\r\n        },\r\n        set: function (value) { this._propertyValidationError = value; }\r\n    },\r\n\r\n    // protected\r\n    storeProperty: function (memberDefinition, value) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n\r\n        if (memberDefinition.concurrencyMode !== $data.ConcurrencyMode.Fixed) {\r\n            value = Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\r\n        }\r\n\r\n        var eventData = null;\r\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\r\n            var origValue = this[memberDefinition.name];\r\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\r\n            if (this._propertyChanging)\r\n                this.propertyChanging.fire(eventData);\r\n        }\r\n\r\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\r\n            var errors = $data.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\r\n            if (errors.length > 0) {\r\n                var origValue = this[memberDefinition.name];\r\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\r\n\r\n                if (this._propertyValidationError)\r\n                    this.propertyValidationError.fire(errorEventData);\r\n                if (\"instancePropertyValidationError\" in this.constructor)\r\n                    this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\r\n\r\n                if (errorEventData.cancel == true)\r\n                    return;\r\n            }\r\n        }\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            this[backingFieldName] = value;\r\n        } else {\r\n            this.initData[memberDefinition.name] = value;\r\n        }\r\n        this.isValidated = false;\r\n\r\n        if (memberDefinition.monitorChanges != false && this.entityState == $data.EntityState.Unchanged)\r\n            this.entityState = $data.EntityState.Modified;\r\n\r\n        this._setPropertyChanged(memberDefinition);\r\n\r\n        if (memberDefinition.monitorChanges != false) {\r\n            //if (!this.changedProperties) {\r\n            //    this.changedProperties = [];\r\n            //}\r\n\r\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n            //    this.changedProperties.push(memberDefinition);\r\n\r\n            if (this._propertyChanged)\r\n                this.propertyChanged.fire(eventData);\r\n\r\n            //TODO mixin framework\r\n            if (\"instancePropertyChanged\" in this.constructor) {\r\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\r\n            }\r\n        }\r\n    },\r\n    _setPropertyChanged: function (memberDefinition) {\r\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\r\n            if (!this.changedProperties) {\r\n                this.changedProperties = [];\r\n            }\r\n\r\n            if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n                this.changedProperties.push(memberDefinition);\r\n        }\r\n    },\r\n\r\n    // protected\r\n    retrieveProperty: function (memberDefinition) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            return this[backingFieldName];\r\n        } else {\r\n            return this.initData[memberDefinition.name];\r\n        }\r\n    },\r\n\r\n    // protected\r\n    getProperty: function (memberDefinition, callback, tran) {\r\n        /// <summary>Retrieve value of member</summary>\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"callback\" type=\"Function\">\r\n        ///     <signature>\r\n        ///         <param name=\"value\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\r\n\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        if (this[memberDefinition.name] != undefined) {\r\n            if (tran instanceof $data.Transaction)\r\n                callback.success(this[memberDefinition.name], tran);\r\n            else\r\n                callback.success(this[memberDefinition.name]);\r\n            return;\r\n        }\r\n\r\n        var context = this.context;\r\n        if (!this.context) {\r\n            try {\r\n                var that = this;\r\n                var storeToken = this.storeToken || this.getType().storeToken;\r\n                if (storeToken && typeof storeToken.factory === 'function') {\r\n                    var ctx = storeToken.factory();\r\n                    return ctx.onReady().then(function (context) {\r\n                        return context.loadItemProperty(that, memberDefinition, callback);\r\n                    });\r\n                }\r\n            } catch (e) { }\r\n\r\n            Guard.raise(new Exception('Entity not in context', 'Invalid operation'));\r\n        } else {\r\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\r\n        }\r\n    },\r\n    // protected\r\n    setProperty: function (memberDefinition, value, callback, tran) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n        /// <param name=\"callback\" type=\"Function\">done</param>\r\n        this[memberDefinition.name] = value;\r\n\r\n        //callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        callback.success(this[memberDefinition.name]);\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    isValid: function () {\r\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\r\n        /// <returns type=\"Boolean\" />\r\n\r\n        if (!this.isValidated) {\r\n            this.ValidationErrors = $data.Validation.Entity.ValidateEntity(this);\r\n            this.isValidated = true;\r\n        }\r\n        return this.ValidationErrors.length == 0;\r\n    },\r\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\r\n    ValidationErrors: {\r\n        dataType: Array,\r\n        elementType: $data.Validation.ValidationError,\r\n        storeOnObject: true,\r\n        monitorChanges: true,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    resetChanges: function () {\r\n        /// <summary>reset changes</summary>\r\n\r\n        delete this._changedProperties;\r\n    },\r\n\r\n    changedProperties: {\r\n        dataType: Array,\r\n        elementType: MemberDefinition,\r\n        storeOnObject: true,\r\n        monitorChanges: false,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\r\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\r\n    //,\r\n\r\n    //onReady: function (callback) {\r\n    //    this.__onReadyList = this.__onReadyList || [];\r\n    //    this.__onReadyList.push(callback);\r\n    //},\r\n\r\n    remove: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRemove' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRemove.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    save: function () {\r\n        if ($data.ItemStore && 'EntityInstanceSave' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceSave.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    refresh: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRefresh' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRefresh.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\r\n\r\n    getFieldUrl: function (field) {\r\n        if (this.context) {\r\n            return this.context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\r\n            var context = this.getType().storeToken.factory();\r\n            return context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken){\r\n            try {\r\n                var ctx = $data.ItemStore._getContextPromise('default', this.getType());\r\n                if (ctx instanceof $data.EntityContext) {\r\n                    return ctx.getFieldUrl(this, field);\r\n                }\r\n            } catch (e) {\r\n            }\r\n        }\r\n        return '#';\r\n    }\r\n},\r\n{\r\n    //create get_[property] and set_[property] functions for properties\r\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\r\n    //copy public properties to current instance\r\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\r\n\r\n    inheritedTypeProcessor: function (type) {\r\n        if ($data.ItemStore && 'EntityInheritedTypeProcessor' in $data.ItemStore)\r\n            $data.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\r\n\r\n        //default value setter method factory\r\n        type.defaultValues = {};\r\n\r\n        type.memberDefinitions.asArray().forEach(function (pd) {\r\n            if (pd.hasOwnProperty(\"defaultValue\")) {\r\n                type.defaultValues[pd.name] = pd.defaultValue;\r\n            }\r\n        });\r\n\r\n        if (Object.keys(type.defaultValues).length > 0) {\r\n            type.setDefaultValues = function (initData, instance) {\r\n                initData = initData || {};\r\n                var dv = type.defaultValues;\r\n                for (var n in dv) {\r\n                    if (!(n in initData)) {\r\n                        var value = dv[n];\r\n                        if (\"function\" === typeof value) {\r\n                            initData[n] = dv[n](n, instance);\r\n                        } else {\r\n                            initData[n] = dv[n];\r\n                        }\r\n                    }\r\n                }\r\n                return initData;\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //Type Events\r\n    addEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            this[delegateName] = new $data.Event(eventName, this);\r\n        }\r\n        this[delegateName].attach(fn);\r\n    },\r\n    removeEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].detach(fn);\r\n    },\r\n    raiseEvent: function(eventName, data) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].fire(data);\r\n    },\r\n\r\n    getFieldNames: function () {\r\n        return this.memberDefinitions.getPublicMappedPropertyNames();\r\n    },\r\n\r\n    'from$data.Object': function (value, type, t, options) {\r\n        if (!Guard.isNullOrUndefined(value)) {\r\n            var newInstanceOptions;\r\n            if (options && options.converters) {\r\n                newInstanceOptions = {\r\n                    converters: options.converters\r\n                }\r\n            }\r\n\r\n            return new this(value, newInstanceOptions);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n\r\n$data.define = function (name, container, definition) {\r\n    if (container && !(container instanceof $data.ContainerClass)) {\r\n        definition = container;\r\n        container = undefined;\r\n    }\r\n    if (!definition) {\r\n        throw new Error(\"json object type is not supported yet\");\r\n    }\r\n    var _def = {};\r\n    var hasKey = false;\r\n    var keyFields = [];\r\n    Object.keys(definition).forEach(function (fieldName) {\r\n        var propDef = definition[fieldName];\r\n        if (typeof propDef === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\r\n\r\n            _def[fieldName] = propDef;\r\n            if (propDef.key) {\r\n                keyFields.push(propDef);\r\n            }\r\n\r\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\r\n                propDef.notMapped = true;\r\n                propDef.storeOnObject = true;\r\n            }\r\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\r\n                propDef.set = function () { };\r\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\r\n                propDef.get = function () { };\r\n            }\r\n\r\n        } else {\r\n            _def[fieldName] = { type: propDef };\r\n        }\r\n    });\r\n\r\n    if (keyFields.length < 1) {\r\n        var keyProp;\r\n        switch (true) {\r\n            case \"id\" in _def:\r\n                keyProp = \"id\";\r\n                break;\r\n            case \"Id\" in _def:\r\n                keyProp = \"Id\"\r\n                break;\r\n            case \"ID\" in _def:\r\n                keyProp = \"ID\"\r\n                break;\r\n        }\r\n        if (keyProp) {\r\n            _def[keyProp].key = true;\r\n            var propTypeName = $data.Container.resolveName(_def[keyProp].type);\r\n            _def[keyProp].computed = true;\r\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\r\n            //}\r\n        } else {\r\n            _def.Id = { type: \"int\", key: true, computed: true }\r\n        }\r\n    }\r\n\r\n\r\n    var entityType = $data.Entity.extend(name, container, _def);\r\n    return entityType;\r\n}\r\n$data.$data = $data.implementation = function (name) {\r\n    return Container.resolveType(name);\r\n};\r\n\r\nexport var Event = $data.Event\r\nexport var Entity = $data.Entity\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\r\n    defaultMode: 'Default',\r\n    AllChanged: function (data) {\r\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            data._setPropertyChanged(memDefs[i]);\r\n        }\r\n        data.entityState = $data.EntityState.Modified;\r\n    },\r\n    KeepChanges: function (data) {\r\n        if (data.changedProperties && data.changedProperties.length > 0) {\r\n            data.entityState = $data.EntityState.Modified;\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n        }\r\n    },\r\n    Default: function (data) {\r\n        data.entityState = $data.EntityState.Unchanged;\r\n        data.changedProperties = undefined;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n(function () {\r\n\r\n    $data.defaults = $data.defaults || {};\r\n    $data.defaults.defaultDatabaseName = 'JayDataDefault';\r\n    $data.defaults.enableRelatedEntityReadMethods = true;\r\n    $data.defaults.relatedEntityReadMethodPrefix = 'get';\r\n    $data.defaults.relatedEntityProxyPrefix = '$relatedProxy';\r\n\r\n})();\r\n\r\n\r\n$data.Class.define('$data.StorageModel', null, null, {\r\n    constructor: function () {\r\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\r\n        this.ComplexTypes = [];\r\n        this.Enums = [];\r\n        this.Associations = [];\r\n    },\r\n    LogicalType: {},\r\n    LogicalTypeName: {},\r\n    PhysicalType: {},\r\n    PhysicalTypeName: {},\r\n    EventHandlers: {},\r\n    TableName: {},\r\n    TableOptions: { value: undefined },\r\n    ComplexTypes: {},\r\n    Enums: {},\r\n    Associations: {},\r\n    ContextType: {},\r\n    Roles: {}\r\n}, null);\r\n$data.Class.define('$data.Association', null, null, {\r\n    constructor: function (initParam) {\r\n        if (initParam) {\r\n            this.From = initParam.From;\r\n            this.FromType = initParam.FromType;\r\n            this.FromMultiplicity = initParam.FromMultiplicity;\r\n            this.FromPropertyName = initParam.FromPropertyName;\r\n            this.To = initParam.To;\r\n            this.ToType = initParam.ToType;\r\n            this.ToMultiplicity = initParam.ToMultiplicity;\r\n            this.ToPropertyName = initParam.ToPropertyName;\r\n        }\r\n    },\r\n    From: {},\r\n    FromType: {},\r\n    FromMultiplicity: {},\r\n    FromPropertyName: {},\r\n    To: {},\r\n    ToType: {},\r\n    ToMultiplicity: {},\r\n    ToPropertyName: {},\r\n    ReferentialConstraint: {}\r\n}, null);\r\n$data.Class.define('$data.ComplexType', $data.Association, null, {}, null);\r\n\r\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\r\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\r\n$data.Class.define('$data.EntityContext', null, null,\r\n{\r\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\r\n    constructor: function (storageProviderCfg) {\r\n        if ($data.ItemStore && 'ContextRegister' in $data.ItemStore)\r\n            $data.ItemStore.ContextRegister.apply(this, arguments);\r\n\r\n        if (storageProviderCfg.queryCache)\r\n            this.queryCache = storageProviderCfg.queryCache;\r\n\r\n        if (\"string\" === typeof storageProviderCfg) {\r\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\r\n                storageProviderCfg = {\r\n                    name: \"oData\",\r\n                    oDataServiceHost: storageProviderCfg\r\n                }\r\n            } else {\r\n                storageProviderCfg = {\r\n                    name: \"local\",\r\n                    databaseName: storageProviderCfg\r\n                }\r\n            }\r\n        }\r\n\r\n        if (\"provider\" in storageProviderCfg) {\r\n            storageProviderCfg.name = storageProviderCfg.provider;\r\n        }\r\n\r\n        //Initialize properties\r\n        this.lazyLoad = false;\r\n        this.trackChanges = false;\r\n        this._entitySetReferences = {};\r\n        this._storageModel = [];\r\n\r\n        var ctx = this;\r\n        ctx._isOK = false;\r\n\r\n        var origSuccessInitProvider = this._successInitProvider;\r\n        this._successInitProvider = function (errorOrContext) {\r\n            if (errorOrContext instanceof $data.EntityContext) {\r\n                origSuccessInitProvider(ctx);\r\n            } else {\r\n                origSuccessInitProvider(ctx, errorOrContext);\r\n            }\r\n        }\r\n\r\n        this._storageModel.getStorageModel = function (typeName) {\r\n            var name = Container.resolveName(typeName);\r\n            return ctx._storageModel[name];\r\n        };\r\n        if (typeof storageProviderCfg.name === 'string') {\r\n            var tmp = storageProviderCfg.name;\r\n            storageProviderCfg.name = [tmp];\r\n        }\r\n        var i = 0, providerType;\r\n        var providerList = [].concat(storageProviderCfg.name);\r\n        var callBack = $data.PromiseHandlerBase.createCallbackSettings({ success: this._successInitProvider, error: this._successInitProvider });\r\n\r\n        this._initStorageModelSync();\r\n        this._initStorageModelNavigationProperties();\r\n        ctx._initializeEntitySets(ctx.getType());\r\n\r\n        $data.StorageProviderLoader.load(providerList, {\r\n            success: function (providerType) {\r\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\r\n                ctx.storageProvider.setContext(ctx);\r\n                ctx.stateManager = new $data.EntityStateManager(ctx);\r\n\r\n                var contextType = ctx.getType();\r\n                if (providerType.name in contextType._storageModelCache) {\r\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\r\n                } else {\r\n                    $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\r\n                    ctx._initializeStorageModel();\r\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\r\n                }\r\n                $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\r\n\r\n                //ctx._initializeEntitySets(contextType);\r\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\r\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\r\n\r\n                //ctx._isOK = false;\r\n                ctx._initializeStore(callBack);\r\n            },\r\n            error: function () {\r\n                callBack.error('Provider fallback failed!');\r\n            }\r\n        });\r\n\r\n\r\n\r\n        this.addEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                this[delegateName] = new $data.Event(eventName, this);\r\n            }\r\n            this[delegateName].attach(fn);\r\n        };\r\n\r\n        this.removeEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].detach(fn);\r\n        };\r\n\r\n        this.raiseEvent = function (eventName, data) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].fire(data);\r\n        };\r\n\r\n\r\n        this.ready = this.onReady({\r\n            success: $data.defaultSuccessCallback,\r\n            error: function () {\r\n                if ($data.PromiseHandler !== $data.PromiseHandlerBase) {\r\n                    $data.defaultErrorCallback.apply(this, arguments);\r\n                } else {\r\n                    $data.Trace.error(arguments);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    beginTransaction: function () {\r\n        var tables = null;\r\n        var callBack = null;\r\n        var isWrite = false;\r\n\r\n        function readParam(value) {\r\n            if (Guard.isNullOrUndefined(value)) return;\r\n\r\n            if (typeof value === 'boolean') {\r\n                isWrite = value;\r\n            } else if (Array.isArray(value)) {\r\n                tables = value;\r\n            } else {\r\n                callBack = value;\r\n            }\r\n        }\r\n\r\n        readParam(arguments[0]);\r\n        readParam(arguments[1]);\r\n        readParam(arguments[2]);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        callBack = pHandler.createCallback(callBack);\r\n\r\n        //callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        this.storageProvider._beginTran(tables, isWrite, callBack);\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    _isReturnTransaction: function (transaction) {\r\n        return transaction instanceof $data.Base || transaction === 'returnTransaction';\r\n    },\r\n    _applyTransaction: function (scope, cb, args, transaction, isReturnTransaction) {\r\n        if (isReturnTransaction === true) {\r\n            if (transaction instanceof $data.Transaction) {\r\n                Array.prototype.push.call(args, transaction);\r\n                cb.apply(scope, args);\r\n            } else {\r\n                this.beginTransaction(function (tran) {\r\n                    Array.prototype.push.call(args, tran);\r\n                    cb.apply(scope, args);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            cb.apply(scope, args);\r\n        }\r\n    },\r\n\r\n    getDataType: function (dataType) {\r\n        // Obsolate\r\n        if (typeof dataType == \"string\") {\r\n            var memDef_dataType = this[dataType];\r\n            if (memDef_dataType === undefined || memDef_dataType === null) { memDef_dataType = eval(dataType); }\r\n            return memDef_dataType;\r\n        }\r\n        return dataType;\r\n    },\r\n    _initializeEntitySets: function (ctor) {\r\n\r\n        for (var i = 0, l = this._storageModel.length; i < l; i++){\r\n            var storageModel = this._storageModel[i];\r\n            if (storageModel.BaseType) continue;\r\n            this[storageModel.ItemName] = new $data.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\r\n            var sm = this[storageModel.ItemName];\r\n            sm.name = storageModel.ItemName;\r\n            sm.tableName = storageModel.TableName;\r\n            sm.tableOptions = storageModel.TableOptions;\r\n            sm.eventHandlers = storageModel.EventHandlers;\r\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\r\n\r\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\r\n\r\n        }\r\n\r\n    },\r\n    _initializeStore: function (callBack) {\r\n        if (this.storageProvider) {\r\n            this.storageProvider.initializeStore(callBack);\r\n        }\r\n    },\r\n    _createNavPropStorageModel: function(logicalType){\r\n        var ctx = this;\r\n        logicalType.memberDefinitions.getPublicMappedProperties().filter(function(it){ return it.inverseProperty; }).forEach(function(memDef){\r\n            var item = Container.resolveType(memDef.elementType || memDef.dataType);\r\n            if (!ctx._storageModel.filter(function(it){ return it.LogicalType == item; })[0]){\r\n                var storageModel = new $data.StorageModel();\r\n                storageModel.TableName = memDef.name;\r\n                storageModel.TableOptions = item.tableOptions;\r\n                storageModel.ItemName = item.name;\r\n                storageModel.LogicalType = item;\r\n                storageModel.LogicalTypeName = item.name;\r\n                storageModel.PhysicalTypeName = $data.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\r\n                storageModel.ContextType = ctx.getType();\r\n\r\n                ctx._storageModel.push(storageModel);\r\n                var name = Container.resolveName(item);\r\n                ctx._storageModel[name] = storageModel;\r\n\r\n                ctx._createNavPropStorageModel(storageModel.LogicalType);\r\n            }\r\n        });\r\n    },\r\n    _initStorageModelNavigationProperties: function _initStorageModelNavigationProperties(){\r\n        for (var i = 0; i < this._storageModel.length; i++) {\r\n            var storageModel = this._storageModel[i];\r\n            this._createNavPropStorageModel(storageModel.LogicalType);\r\n        }\r\n    },\r\n    _initStorageModelSync: function() {\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n\r\n        for (var i = 0; i < _memDefArray.length; i++) {\r\n            var item = _memDefArray[i];\r\n            if ('dataType' in item) {\r\n                var itemResolvedDataType = Container.resolveType(item.dataType);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    var storageModel = new $data.StorageModel();\r\n                    storageModel.TableName = item.tableName || item.name;\r\n                    storageModel.TableOptions = item.tableOptions;\r\n                    storageModel.ItemName = item.name;\r\n                    storageModel.LogicalType = elementType;\r\n                    storageModel.LogicalTypeName = elementType.name;\r\n                    storageModel.PhysicalTypeName = $data.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\r\n                    storageModel.ContextType = this.getType();\r\n                    storageModel.Roles = item.roles;\r\n\t\t    if (item.indices) {\r\n                        storageModel.indices = item.indices;\r\n                    }\r\n                    if (item.beforeCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\r\n                    }\r\n                    if (item.beforeRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\r\n                    }\r\n                    if (item.beforeUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\r\n                    }\r\n                    if (item.beforeDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\r\n                    }\r\n                    if (item.afterCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\r\n                    }\r\n                    if (item.afterRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterRead = item.afterRead;\r\n                    }\r\n                    if (item.afterUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\r\n                    }\r\n                    if (item.afterDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\r\n                    }\r\n                    this._storageModel.push(storageModel);\r\n                    var name = Container.resolveName(elementType);\r\n                    this._storageModel[name] = storageModel;\r\n\r\n                    if (elementType.inheritedTo){\r\n                        var ctx = this;\r\n                        elementType.inheritedTo.forEach(function(type){\r\n                            var storageModel = new $data.StorageModel();\r\n                            storageModel.TableName = item.tableName || item.name;\r\n                            storageModel.TableOptions = item.tableOptions;\r\n                            storageModel.ItemName = item.name;\r\n                            storageModel.LogicalType = type;\r\n                            storageModel.LogicalTypeName = type.name;\r\n                            storageModel.PhysicalTypeName = $data.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\r\n                            storageModel.ContextType = ctx.getType();\r\n                            storageModel.BaseType = elementType;\r\n\r\n                            ctx._storageModel.push(storageModel);\r\n                            var name = Container.resolveName(type);\r\n                            ctx._storageModel[name] = storageModel;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    _inheritanceMemberDefinitions: function(type, memdefs){\r\n        var self = this;\r\n        if (type.inheritedTo){\r\n            type.inheritedTo.forEach(function(it){\r\n                memdefs = self._inheritanceMemberDefinitions(it, memdefs.concat(it.memberDefinitions.getPublicMappedProperties()));\r\n            });\r\n        }\r\n        return memdefs;\r\n    },\r\n    _buildDbInstanceDefinition: function(storageModel, dbEntityInstanceDefinition){\r\n        storageModel.Associations = storageModel.Associations || [];\r\n        storageModel.ComplexTypes = storageModel.ComplexTypes || [];\r\n        storageModel.Enums = storageModel.Enums || [];\r\n        var memberDefinitions = this._inheritanceMemberDefinitions(storageModel.LogicalType, storageModel.LogicalType.memberDefinitions.getPublicMappedProperties());\r\n        for (var j = 0; j < memberDefinitions.length; j++) {\r\n            var memDef = memberDefinitions[j];\r\n            ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\r\n\r\n            var memDefResolvedDataType = Container.resolveType(memDef.dataType);\r\n\r\n            if ((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1 || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum)) && Guard.isNullOrUndefined(memDef.inverseProperty)) {\r\n                //copy member definition\r\n                var t = JSON.parse(JSON.stringify(memDef));\r\n                //change datatype to resolved type\r\n                t.dataType = memDefResolvedDataType;\r\n                dbEntityInstanceDefinition[memDef.name] = t;\r\n\r\n                if (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum)) {\r\n                    this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\r\n\r\n            if ((memDefResolvedDataType === $data.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet)) && memDef.inverseProperty && memDef.inverseProperty !== '$$unbound') {\r\n                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n            } else {\r\n                if (memDef.inverseProperty) {\r\n                    if (memDef.inverseProperty === '$$unbound') {\r\n                        //member definition is navigation but not back reference\r\n                        if (memDefResolvedDataType === $data.Array) {\r\n                            this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                        } else {\r\n                            this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                        }\r\n                    } else {\r\n                        //member definition is navigation property one..one or one..many case\r\n                        var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\r\n                        if (fields) {\r\n                            if (fields.elementType) {\r\n                                //member definition is one..many connection\r\n                                var referealResolvedType = Container.resolveType(fields.elementType);\r\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            } else {\r\n                                //member definition is one..one connection\r\n                                this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            }\r\n                        } else {\r\n                            if (typeof intellisense === 'undefined') {\r\n                                Guard.raise(new Exception('Inverse property not valid'));\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    //member definition is a complex type\r\n                    this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _initializeStorageModel: function _initializeStorageModel() {\r\n\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n        if (typeof intellisense !== 'undefined') return;\r\n\r\n        for (var i = 0; i < this._storageModel.length; i++) {\r\n            var storageModel = this._storageModel[i];\r\n\r\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\r\n            var dbEntityInstanceDefinition = {};\r\n            this._buildDbInstanceDefinition(storageModel, dbEntityInstanceDefinition);\r\n            \r\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\r\n            var dbEntityClassDefinition = {};\r\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\r\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\r\n\r\n            //create physical type\r\n            //TODO\r\n            storageModel.PhysicalType = $data.Class.define(storageModel.PhysicalTypeName, $data.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\r\n        }\r\n    },\r\n    _initializeActions: function (es, ctor, esDef) {\r\n        if (esDef && esDef.actions) {\r\n            var actionKeys = Object.keys(esDef.actions);\r\n            for (var i = 0; i < actionKeys.length; i++) {\r\n                var actionName = actionKeys[i];\r\n                var action = esDef.actions[actionName];\r\n                if (typeof action === 'function') {\r\n                    es[actionName] = action;\r\n                } else {\r\n                    var actionDef = $data.MemberDefinition.translateDefinition(action, actionName, ctor);\r\n                    if (actionDef instanceof $data.MemberDefinition && actionDef.kind === $data.MemberTypes.method) {\r\n                        es[actionName] = actionDef.method;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _buildDbType_navigationPropertyComplite: function (memDef, memDefResolvedDataType, storageModel) {\r\n        if (!memDef.inverseProperty) {\r\n            var refMemDefs = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                var refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === Container.resolveType(storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            } else {\r\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if (m.elementType && ((m.inverseProperty == memDef.name) && (Container.resolveType(m.elementType) === storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                        else if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === storageModel.LogicalType))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            }\r\n            if (refMemDefs) {\r\n                if (refMemDefs.length > 1) {\r\n                    if (typeof intellisense !== 'undefined') {\r\n                        Guard.raise(new Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + Container.resolveName(storageModel.LogicalType)));\r\n                    }\r\n                }\r\n                var refMemDef = refMemDefs.pop();\r\n                if (refMemDef) {\r\n                    memDef.inverseProperty = refMemDef.name;\r\n                }\r\n            }\r\n        } else {\r\n            var refStorageModel = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n\r\n            } else {\r\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n            }\r\n\r\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n            if (p) {\r\n                if (p.inverseProperty) {\r\n                    if (p.inverseProperty != memDef.name) {\r\n                        if (typeof intellisense === 'undefined') {\r\n                            Guard.raise(new Exception('Inverse property mismatch'));\r\n                        }\r\n                    }\r\n                } else {\r\n                    p.inverseProperty = memDef.name;\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    _buildDbType_generateConvertToFunction: function (storageModel) { return function (instance) { return instance; }; },\r\n    _buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) { return; },\r\n    _buildDbType_modifyClassDefinition: function (classDefinition, storageModel) { return; },\r\n    _buildDbType_addComplexTypePropertyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, $data.MemberTypes.complexProperty);\r\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\r\n        storageModel.ComplexTypes[memDef.name] = complexType;\r\n        storageModel.ComplexTypes.push(complexType);\r\n    },\r\n    _buildDbType_Collection_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.elementType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\r\n        var association = this._addAssociationElement(memDef.definedBy, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\r\n        var association = this._addAssociationElement(memDef.definedBy, associationType, memDef.name, refereedType, \"0..1\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneOneDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n        if (!refereedMemberDefinition.required && !memDef.required) { if (typeof intellisense === 'undefined') { if (typeof intellisense === 'undefined') { Guard.raise(new Exception('In one to one connection, one side must required!', 'One to One connection', memDef)); } } }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n\r\n        var association = this._addAssociationElement(memDef.definedBy,\r\n                                                 memDef.required ? \"0..1\" : \"1\",\r\n                                                 memDef.name,\r\n                                                 refereedStorageModel.LogicalType,\r\n                                                 memDef.required ? \"1\" : \"0..1\",\r\n                                                 memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _addNavigationPropertyDefinition: function (definition, member, associationName, kind) {\r\n        var t = JSON.parse(JSON.stringify(member));\r\n        t.dataType = $data.EntitySet;\r\n        t.notMapped = true;\r\n        t.kind = kind ? kind : $data.MemberTypes.navProperty;\r\n        t.association = associationName;\r\n        definition[member.name] = t;\r\n    },\r\n    _addAssociationElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.Association({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _createComplexElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.ComplexType({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _build_EnumDefinition: function (dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\r\n        storageModel.Enums.push(memDefResolvedDataType);\r\n\r\n        var typeName = Container.resolveName(memDefResolvedDataType);\r\n        var converterGroups = this.storageProvider.fieldConverter;\r\n\r\n        var createEnumConverter = function(converterGroup){\r\n            converterGroup[typeName] = function(value){\r\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\r\n            }\r\n        }\r\n\r\n        for (var i in converterGroups) {\r\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\r\n                createEnumConverter(converterGroups[i]);\r\n                if ($data.SqLiteFieldMapping) $data.SqLiteFieldMapping[typeName] = 'INTEGER';\r\n            }\r\n        }\r\n    },\r\n\r\n    _successInitProvider: function (context, error) {\r\n        if (context instanceof $data.EntityContext && context._isOK !== undefined) {\r\n            if (!error) {\r\n                context._isOK = true;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].success(context);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            } else {\r\n                context._isOK = error;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].error(error);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\r\n    onReady: function (fn) {\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///\r\n        ///     </summary>\r\n        ///     <param name=\"successCallback\" type=\"Function\">\r\n        ///         <summary>Success callback</summary>\r\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\r\n        ///     </param>\r\n        ///     <returns type=\"\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\r\n        ///     </summary>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        var pHandler = new $data.PromiseHandler();\r\n        var callBack = pHandler.createCallback(fn);\r\n        if (this._isOK === true) {\r\n            callBack.success(this);\r\n        } else if (this._isOK !== false) {\r\n            callBack.error(this._isOK);\r\n        } else {\r\n            this.onReadyFunction = this.onReadyFunction || [];\r\n            this.onReadyFunction.push(callBack);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    ready: { type: $data.Promise },\r\n    getEntitySetFromElementType: function (elementType) {\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"String\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        var result = this._entitySetReferences[elementType];\r\n        if (!result) {\r\n            try {\r\n                result = this._entitySetReferences[eval(elementType).name];\r\n            } catch (ex) { }\r\n        }\r\n        if (!result && elementType.isAssignableTo && elementType.isAssignableTo($data.Entity)){\r\n            if (!this._storageModel[elementType.name]){\r\n                var storageModel = new $data.StorageModel();\r\n                storageModel.TableName = elementType.name;\r\n                storageModel.ItemName = elementType.name;\r\n                storageModel.LogicalType = elementType;\r\n                storageModel.LogicalTypeName = elementType.name;\r\n\r\n                var dbEntityInstanceDefinition = {};\r\n                this._buildDbInstanceDefinition(storageModel, dbEntityInstanceDefinition);\r\n\r\n                var dbEntityClassDefinition = {};\r\n                dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\r\n\r\n                storageModel.PhysicalTypeName = $data.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\r\n                storageModel.PhysicalType = $data.Class.define(storageModel.PhysicalTypeName, $data.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\r\n                storageModel.ContextType = this.getType();\r\n\r\n                this._storageModel.push(storageModel);\r\n                var name = Container.resolveName(elementType);\r\n                this._storageModel[name] = storageModel;\r\n            }\r\n\r\n            result = this._entitySetReferences[elementType.name] = new $data.EntitySet(elementType, this, elementType.name);\r\n            result.tableName = storageModel.TableName;\r\n        }\r\n        \r\n        //console.log(Object.keys(this._entitySetReferences), Object.keys(this._storageModel), elementType.name);\r\n        return result;\r\n    },\r\n    executeQuery: function (queryable, callBack, transaction) {\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        query.transaction = transaction instanceof $data.Transaction ? transaction : undefined;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        var that = this;\r\n        var clbWrapper = {};\r\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\r\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\r\n\r\n        var sets = query.getEntitySets();\r\n\r\n        var authorizedFn = function () {\r\n            var ex = true;\r\n            var wait = false;\r\n            var ctx = that;\r\n\r\n            var readyFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                if (ex) {\r\n                    if (query.transaction) {\r\n                        if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                            $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                        } else {\r\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                        }\r\n                    } else {\r\n                        ctx.beginTransaction(function (tran) {\r\n                            query.transaction = tran;\r\n                            if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                                $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                            } else {\r\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    query.rawDataList = [];\r\n                    query.result = [];\r\n                    clbWrapper.success(query);\r\n                }\r\n            };\r\n\r\n            var i = 0;\r\n            var callbackFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                var es = sets[i];\r\n                if (es.beforeRead) {\r\n                    i++;\r\n                    var r = es.beforeRead.call(this, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, (i < sets.length && ex) ? callbackFn : readyFn, sets, query);\r\n                    } else {\r\n                        if (r === false) ex = false;\r\n\r\n                        if (i < sets.length && ex) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            };\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ? $data.Access.DeleteBatch : $data.Access.Read, this.user, sets, {\r\n                success: authorizedFn,\r\n                error: clbWrapper.error\r\n            });\r\n        } else authorizedFn();\r\n    },\r\n    executeQuerySuccess: function (that, returnTransaction, callBack) {\r\n        return function (query) {\r\n            if ($data.QueryCache && $data.QueryCache.isCacheable(that, query)) {\r\n                $data.QueryCache.addToCache(that, query);\r\n            }\r\n\r\n            query.buildResultSet(that);\r\n\r\n            if ($data.ItemStore && 'QueryResultModifier' in $data.ItemStore)\r\n                $data.ItemStore.QueryResultModifier.call(that, query);\r\n\r\n            var successResult;\r\n\r\n            if (query.expression.nodeType === $data.Expressions.ExpressionType.Single ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Find ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Count ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Some ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Every) {\r\n                if (query.result.length !== 1) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else if (query.expression.nodeType === $data.Expressions.ExpressionType.First) {\r\n                if (query.result.length === 0) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else {\r\n                if (typeof query.__count === 'number' && query.result)\r\n                    query.result.totalCount = query.__count;\r\n\r\n                that.storageProvider._buildContinuationFunction(that, query);\r\n\r\n                successResult = query.result;\r\n            }\r\n\r\n            var readyFn = function () {\r\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\r\n\r\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\r\n            };\r\n\r\n            var i = 0;\r\n            var sets = query.getEntitySets();\r\n\r\n            var callbackFn = function () {\r\n                var es = sets[i];\r\n                if (es.afterRead) {\r\n                    i++;\r\n                    var r = es.afterRead.call(this, successResult, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\r\n                    } else {\r\n                        if (i < sets.length) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            }\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n    },\r\n    executeQueryError: function (that, returnTransaction, callBack) {\r\n        return function () {\r\n            if (returnTransaction)\r\n                callBack.error.apply(this, arguments);\r\n            else\r\n                callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n        };\r\n    },\r\n\r\n\r\n    batchExecuteQuery: function (queryableOptions, callBack, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(callBack);\r\n\r\n        var self = this;\r\n        var methodOperationMappings = {\r\n            count: 'length',\r\n            length: 'length',\r\n            forEach: 'forEach',\r\n            toArray: 'toArray',\r\n            single: 'single',\r\n            some: 'some',\r\n            every: 'every',\r\n            first: 'first',\r\n            removeAll: 'batchDelete'\r\n        };\r\n        var methodFrameMappings = {\r\n            count: 'CountExpression',\r\n            length: 'CountExpression',\r\n            forEach: 'ForEachExpression',\r\n            toArray: 'ToArrayExpression',\r\n            single: 'SingleExpression',\r\n            some: 'SomeExpression',\r\n            every: 'EveryExpression',\r\n            first: 'FirstExpression',\r\n            removeAll: 'BatchDeleteExpression'\r\n        };\r\n\r\n\r\n        var returnFunc = function () {\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        if (typeof queryableOptions.length != \"number\") {\r\n            cbWrapper.error(new Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\r\n            return returnFunc();\r\n        }\r\n\r\n        var qOptions = [];\r\n        for (var i = 0; i < queryableOptions.length; i++) {\r\n            var queryOption = {};\r\n            if (queryableOptions[i] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i];\r\n                queryOption.method = 'toArray';\r\n            } else if (queryableOptions[i].queryable instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i].queryable;\r\n                queryOption.method = queryableOptions[i].method || 'toArray';\r\n            } else if (queryableOptions[i][0] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i][0];\r\n                queryOption.method = queryableOptions[i][1] || 'toArray';\r\n            } else {\r\n                cbWrapper.error(new Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            if (queryOption.queryable.entityContext !== self) {\r\n                cbWrapper.error(new Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\r\n            qOptions.push(queryOption);\r\n        }\r\n\r\n\r\n        var executableQueries = [];\r\n        for (var i = 0; i < qOptions.length; i++) {\r\n            var queryOption = qOptions[i];\r\n\r\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\r\n            if (frameExpressionName && $data.Expressions[frameExpressionName] && $data.Expressions[frameExpressionName].isAssignableTo($data.Expressions.FrameOperator)) {\r\n\r\n                var queryExpression = Container['create' + frameExpressionName](queryOption.queryable.expression);\r\n                var preparator = Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\r\n\r\n                try {\r\n                    var expression = preparator.Visit(queryExpression);\r\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                    var queryable = Container.createQueryable(queryOption.queryable, expression);\r\n                    executableQueries.push(queryable);\r\n                } catch (e) {\r\n                    cbWrapper.error(e);\r\n                    return returnFunc();\r\n                }\r\n            } else {\r\n                cbWrapper.error(new Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n        }\r\n\r\n        var queryResults = [];\r\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\r\n            //wrap queries\r\n            var batchExecuteQueryExpression = Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\r\n                return new $data.Query(queryable.expression, queryable.defaultType, self);\r\n            }));\r\n\r\n            var batchExecuteQuery = Container.createQueryable(self, batchExecuteQueryExpression);\r\n            self.executeQuery(batchExecuteQuery, {\r\n                success: function (results) {\r\n                    var batchResult = [];\r\n                    var hasError = false;\r\n                    var errorValue = null;\r\n                    for (var i = 0; i < results.length && !hasError; i++) {\r\n                        var query = results[i];\r\n                        self.executeQuerySuccess(self, returnTransaction, {\r\n                            success: function (result) {\r\n                                batchResult.push(result);\r\n                            },\r\n                            error: function (err) {\r\n                                hasError = true;\r\n                                errorValue = err;\r\n                            }\r\n                        })(query);\r\n                    }\r\n                    if (!hasError) {\r\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\r\n                    } else {\r\n                        cbWrapper.error(errorValue);\r\n                    }\r\n\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction);\r\n        } else {\r\n            var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n            var readIterator = function (queries, index, iteratorCallback, itTransaction) {\r\n                var query = queries[index];\r\n                if (!query) {\r\n                    return iteratorCallback.success(itTransaction);\r\n                }\r\n\r\n                self.executeQuery(executableQueries[index], {\r\n                    success: function (result, tr) {\r\n                        queryResults.push(result);\r\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\r\n                    },\r\n                    error: iteratorCallback.error\r\n                }, itTransaction);\r\n            }\r\n\r\n            readIterator(executableQueries, 0, {\r\n                success: function (lastTran) {\r\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction)\r\n        }\r\n        return returnFunc();\r\n    },\r\n\r\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\r\n    saveChanges: function (callback, transaction) {\r\n        if ($data.QueryCache) {\r\n            $data.QueryCache.reset(this);\r\n        }\r\n\r\n        var changedEntities = [];\r\n        var trackedEntities = this.stateManager.trackedEntities;\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        var skipItems = [];\r\n        while (trackedEntities.length > 0) {\r\n            var additionalEntities = [];\r\n            //trackedEntities.forEach(function (entityCachedItem) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entityCachedItem = trackedEntities[i];\r\n\r\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\r\n                if (entityCachedItem.data.entityState == $data.EntityState.Unchanged) {\r\n                    entityCachedItem.skipSave = true;\r\n                    skipItems.push(entityCachedItem.data);\r\n                } else {\r\n                    if (entityCachedItem.data.entityState == $data.EntityState.Modified) {\r\n                        if (entityCachedItem.data.changedProperties) {\r\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\r\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\r\n                                if (pMemDef.kind == $data.MemberTypes.navProperty) {\r\n                                    var a = sModel.Associations[pMemDef.association];\r\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\r\n                                    return ((multiplicity == '*0..1') || (multiplicity == '0..11'))\r\n                                }\r\n                                return true;\r\n                            });\r\n                            if (!changeStoredProperty) {\r\n                                entityCachedItem.skipSave = true;\r\n                                skipItems.push(entityCachedItem.data);\r\n                            }\r\n                        } else {\r\n                            entityCachedItem.skipSave = true;\r\n                            skipItems.push(entityCachedItem.data);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //type before events with items\r\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\r\n\r\n                var navigationProperties = [];\r\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\r\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\r\n                    var p = smPhyMemDefs[ism];\r\n                    if (p.kind == $data.MemberTypes.navProperty)\r\n                        navigationProperties.push(p);\r\n                }\r\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\r\n                //navigationProperties.forEach(function (navProp) {\r\n                for (var j = 0; j < navigationProperties.length; j++) {\r\n                    var navProp = navigationProperties[j];\r\n\r\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\r\n                    var name = navProp.name; //eg.: \"Profile\"\r\n                    var navPropertyName = association.ToPropertyName; //eg.: User\r\n\r\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\r\n                    //connectedDataList.forEach(function (data) {\r\n                    for (var k = 0; k < connectedDataList.length; k++) {\r\n                        var data = connectedDataList[k];\r\n\r\n                        if (data) {\r\n                            var value = data[navPropertyName];\r\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\r\n                            if (association.FromMultiplicity === '$$unbound') {\r\n                                if (data instanceof $data.Array) {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    //data.forEach(function (dataItem) {\r\n                                    for (var l = 0; l < data.length; l++) {\r\n                                        var dataItem = data[l];\r\n\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                    }\r\n                                    //}, this);\r\n                                } else {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                        entityCachedItem.dependentOn.push(data);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                switch (associationType) {\r\n                                    case \"*0..1\": //Array\r\n                                        if (value) {\r\n                                            if (value instanceof Array) {\r\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\r\n                                                    value.push(entityCachedItem.data);\r\n                                                    data.initData[navPropertyName] = value;\r\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                                }\r\n                                            } else {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Item must be array or subtype of array\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                    default: //Item\r\n                                        if (value) {\r\n                                            if (value !== entityCachedItem.data) {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Integrity check error! Item assigned to another entity!\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                }\r\n                                switch (associationType) {\r\n                                    case \"*0..1\":\r\n                                    case \"0..11\":\r\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                            if (!data.entityState) {\r\n                                //if (data.storeToken === this.storeToken) {\r\n                                //    data.entityState = $data.EntityState.Modified;\r\n                                //} else {\r\n                                //    data.entityState = $data.EntityState.Added;\r\n                                //}\r\n                                this.discoverDependentItemEntityState(data);\r\n                            }\r\n                            if (additionalEntities.indexOf(data) == -1) {\r\n                                additionalEntities.push(data);\r\n                            }\r\n                        }\r\n                    }\r\n                    //}, this);\r\n                }\r\n                //}, this);\r\n            }\r\n            //}, this);\r\n\r\n            //trackedEntities.forEach(function (entity) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entity = trackedEntities[i];\r\n\r\n                if (entity.skipSave !== true) { changedEntities.push(entity); }\r\n            }\r\n            //});\r\n\r\n            trackedEntities = [];\r\n            //additionalEntities.forEach(function (item) {\r\n            for (var i = 0; i < additionalEntities.length; i++) {\r\n                var item = additionalEntities[i];\r\n\r\n                if (!skipItems.some(function (entity) { return entity == item; })) {\r\n                    if (!changedEntities.some(function (entity) { return entity.data == item; })) {\r\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\r\n                    }\r\n                }\r\n            }\r\n            //}, this);\r\n        }\r\n\r\n\r\n        //changedEntities.forEach(function (d) {\r\n        for (var j = 0; j < changedEntities.length; j++) {\r\n            var d = changedEntities[j];\r\n\r\n            if (d.dependentOn) {\r\n                var temp = [];\r\n                for (var i = 0; i < d.dependentOn.length; i++) {\r\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\r\n                        temp.push(d.dependentOn[i]);\r\n                    } else {\r\n                        d.additionalDependentOn = d.additionalDependentOn || [];\r\n                        d.additionalDependentOn.push(d.dependentOn[i]);\r\n                    }\r\n                }\r\n                d.dependentOn = temp;\r\n            }\r\n        }\r\n        //});\r\n        skipItems = null;\r\n        var ctx = this;\r\n        if (changedEntities.length == 0) {\r\n            this.stateManager.trackedEntities.length = 0;\r\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\r\n            return pHandlerResult;\r\n        }\r\n\r\n        //validate entities\r\n        var errors = [];\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (entity.data.entityState === $data.EntityState.Added) {\r\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\r\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\r\n\r\n                    var memDefType = Container.resolveType(memDef.type);\r\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\r\n                        switch (memDefType) {\r\n                            case $data.String:\r\n                            case $data.Number:\r\n                            case $data.Float:\r\n                            case $data.Decimal:\r\n                            case $data.Integer:\r\n                            case $data.Int16:\r\n                            case $data.Int32:\r\n                            case $data.Int64:\r\n                            case $data.Byte:\r\n                            case $data.SByte:\r\n                            case $data.Date:\r\n                            case $data.Boolean:\r\n                                entity.data[memDef.name] = Container.getDefault(memDef.dataType);\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                //}, this);\r\n            }\r\n            if ((entity.data.entityState === $data.EntityState.Added || entity.data.entityState === $data.EntityState.Modified)\r\n                && !entity.data.isValid()) {\r\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\r\n            }\r\n        }\r\n        //});\r\n        if (errors.length > 0) {\r\n            clbWrapper.error(errors);\r\n            return pHandlerResult;\r\n        }\r\n\r\n        var access = $data.Access.None;\r\n\r\n        var eventData = {};\r\n        var sets = [];\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var it = changedEntities[i];\r\n            var n = it.entitySet.elementType.name;\r\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\r\n            var es = this._entitySetReferences[n];\r\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || (this.user && this.checkPermission)) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (it.data.entityState) {\r\n                    case $data.EntityState.Added:\r\n                        access |= $data.Access.Create;\r\n                        if (es.beforeCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        access |= $data.Access.Update;\r\n                        if (es.beforeUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        access |= $data.Access.Delete;\r\n                        if (es.beforeDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(it);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        var readyFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n            }\r\n\r\n            if (changedEntities.length) {\r\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\r\n\r\n                var innerCallback = {\r\n                    success: function (tran) {\r\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\r\n                    },\r\n                    error: function () {\r\n                        //TODO remove trans from args;\r\n                        if (returnTransaction)\r\n                            clbWrapper.error.apply(this, arguments);\r\n                        else\r\n                            clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n                    }\r\n                };\r\n\r\n                if (transaction instanceof $data.Transaction){\r\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\r\n                } else {\r\n                    ctx.beginTransaction(true, function (tran) {\r\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\r\n                    });\r\n                }\r\n            } else if (cancelEvent) {\r\n                clbWrapper.error(new Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\r\n            } else {\r\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\r\n            };\r\n\r\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\r\n        };\r\n\r\n        var cancelEvent;\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n        var cmdAll = {\r\n            beforeCreate: 'createAll',\r\n            beforeDelete: 'deleteAll',\r\n            beforeUpdate: 'modifyAll'\r\n        };\r\n\r\n        var callbackFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n\r\n                readyFn(cancel);\r\n                return;\r\n            }\r\n\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, (i < ies.length && !cancelEvent) ? callbackFn : readyFn, m);\r\n                } else if (r === false) {\r\n                    cancelEvent = (es.name + '.' + c);\r\n                    //all.forEach(function (it) {\r\n                    for (var index = 0; index < all.length; index++) {\r\n                        var it = all[index];\r\n\r\n                        var ix = changedEntities.indexOf(it);\r\n                        changedEntities.splice(ix, 1);\r\n                    }\r\n                    //});\r\n\r\n                    readyFn();\r\n                } else {\r\n                    if (i < ies.length && !cancelEvent) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length && !cancelEvent) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(access, this.user, sets, {\r\n                success: function () {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                },\r\n                error: clbWrapper.error\r\n            });\r\n        } else {\r\n            if (i < ies.length) callbackFn();\r\n            else readyFn();\r\n        }\r\n\r\n        return pHandlerResult;\r\n    },\r\n    discoverDependentItemEntityState: function (data) {\r\n        if (data.storeToken === this.storeToken) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else {\r\n            data.entityState = $data.EntityState.Added;\r\n        }\r\n    },\r\n\r\n    processEntityTypeBeforeEventHandler: function (skipItems, entityCachedItem) {\r\n        if (!entityCachedItem.skipSave) {\r\n            var entity = entityCachedItem.data;\r\n            var entityType = entity.getType();\r\n            var state = entity.entityState;\r\n\r\n            switch (true) {\r\n                case state === $data.EntityState.Added && entityType.onbeforeCreate instanceof $data.Event:\r\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Modified && entityType.onbeforeUpdate instanceof $data.Event:\r\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Deleted && entityType.onbeforeDelete instanceof $data.Event:\r\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    processEntityTypeAfterEventHandler: function (entityCachedItem) {\r\n        var entity = entityCachedItem.data;\r\n        var entityType = entity.getType();\r\n        var state = entity.entityState;\r\n\r\n        switch (true) {\r\n            case state === $data.EntityState.Added && entityType.onafterCreate instanceof $data.Event:\r\n                entityType.onafterCreate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Modified && entityType.onafterUpdate instanceof $data.Event:\r\n                entityType.onafterUpdate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Deleted && entityType.onafterDelete instanceof $data.Event:\r\n                entityType.onafterDelete.fire(entity);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    bulkInsert: function (entitySet, fields, datas, callback) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        if (typeof entitySet === 'string') {\r\n            var currentEntitySet;\r\n\r\n            for (var entitySetName in this._entitySetReferences) {\r\n                var actualEntitySet = this._entitySetReferences[entitySetName];\r\n                if (actualEntitySet.tableName === entitySet) {\r\n                    currentEntitySet = actualEntitySet;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!currentEntitySet)\r\n                currentEntitySet = this[entitySet];\r\n\r\n            entitySet = currentEntitySet;\r\n        }\r\n        if (entitySet) {\r\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\r\n        } else {\r\n            callback.error(new Exception('EntitySet not found'));\r\n        }\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    prepareRequest: function () { },\r\n    _postProcessSavedItems: function (callBack, changedEntities, transaction, returnTransaction) {\r\n        if (this.ChangeCollector && this.ChangeCollector instanceof $data.Notifications.ChangeCollectorBase)\r\n            this.ChangeCollector.processChangedData(changedEntities);\r\n\r\n        var eventData = {};\r\n        var ctx = this;\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (!entity.data.storeToken)\r\n                entity.data.storeToken = ctx.storeToken;\r\n\r\n            //type after events with items\r\n            this.processEntityTypeAfterEventHandler(entity);\r\n\r\n            var oes = entity.data.entityState;\r\n\r\n            entity.data.entityState = $data.EntityState.Unchanged;\r\n            entity.data.changedProperties = [];\r\n            entity.physicalData = undefined;\r\n\r\n            var n = entity.entitySet.elementType.name;\r\n            var es = ctx._entitySetReferences[n];\r\n\r\n\r\n            var eventName = undefined;\r\n            switch (oes) {\r\n                case $data.EntityState.Added:\r\n                    eventName = 'added';\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    eventName = 'deleted';\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    eventName = 'updated';\r\n                    break;\r\n            }\r\n            if (eventName) {\r\n                this.raiseEvent(eventName, entity);\r\n            }\r\n\r\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (oes) {\r\n                    case $data.EntityState.Added:\r\n                        if (es.afterCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        if (es.afterUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        if (es.afterDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(entity);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        //});\r\n\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var ctx = this;\r\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n        var cmdAll = {\r\n            afterCreate: 'createAll',\r\n            afterDelete: 'deleteAll',\r\n            afterUpdate: 'modifyAll'\r\n        };\r\n\r\n        var readyFn = function () {\r\n            if (!ctx.trackChanges) {\r\n                ctx.stateManager.reset();\r\n            }\r\n\r\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\r\n        };\r\n\r\n        var callbackFn = function () {\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\r\n                } else {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (i < ies.length) callbackFn();\r\n        else readyFn();\r\n    },\r\n    forEachEntitySet: function (fn, ctx) {\r\n        /// <summary>\r\n        ///     Iterates over the entity sets' of current EntityContext.\r\n        /// </summary>\r\n        /// <param name=\"fn\" type=\"Function\">\r\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\r\n        /// </param>\r\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\r\n        for (var entitySetName in this._entitySetReferences) {\r\n            var actualEntitySet = this._entitySetReferences[entitySetName];\r\n            fn.call(ctx, actualEntitySet);\r\n        }\r\n    },\r\n\r\n    loadItemProperty: function (entity, property, callback, transaction) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>C  allback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        Guard.requireType('entity', entity, $data.Entity);\r\n\r\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        if (entity[memberDefinition.name] != undefined) {\r\n\r\n            var pHandler = new $data.PromiseHandler();\r\n            var callBack = pHandler.createCallback(callback);\r\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\r\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        var isSingleSide = true;\r\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\r\n        var elementType = Container.resolveType(memberDefinition.dataType);\r\n        if (elementType === $data.Array || (elementType.isAssignableTo && elementType.isAssignableTo($data.EntitySet))) {\r\n            elementType = Container.resolveType(memberDefinition.elementType);\r\n\r\n            isSingleSide = false;\r\n\r\n        } else {\r\n            var associations;\r\n            for (var i = 0; i < storageModel.Associations.length; i++) {\r\n                var assoc = storageModel.Associations[i];\r\n                if (assoc.FromPropertyName == memberDefinition.name) {\r\n                    associations = assoc;\r\n                    break;\r\n                }\r\n            }\r\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\r\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\")\r\n                isSingleSide = false;\r\n        }\r\n\r\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\r\n        if (isSingleSide === true) {\r\n            //singleSide\r\n\r\n            var filterFunc = \"function (e) { return\";\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            return entitySet\r\n                .map('function (e) { return e.' + memberDefinition.name + ' }')\r\n                .single(filterFunc, filterParams, callback, transaction);\r\n        } else {\r\n            //multipleSide\r\n\r\n            var filterFunc = \"function (e) { return\"\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(elementType);\r\n            return entitySet\r\n                .filter(filterFunc, filterParams)\r\n                .toArray(callback, transaction);\r\n        }\r\n\r\n    },\r\n\r\n    getTraceString: function (queryable) {\r\n        /// <summary>\r\n        /// Returns a trace string. Used for debugging purposes!\r\n        /// </summary>\r\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\r\n        /// <returns>Trace string</returns>\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        return this.storageProvider.getTraceString(query);\r\n    },\r\n    log: function (logInfo) {\r\n        //noop as do nothing\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveFieldOperation: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\r\n    },\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\r\n    },\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\r\n    },\r\n\r\n    _generateServiceOperationQueryable: function (functionName, returnEntitySet, arg, parameters) {\r\n        if (typeof console !== 'undefined' && console.log)\r\n            console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\r\n\r\n        var params = [];\r\n        for (var i = 0; i < parameters.length; i++) {\r\n            var obj = {};\r\n            obj[parameters[i]] = Container.resolveType(Container.getTypeName(arg[i]));\r\n            params.push(obj);\r\n        }\r\n\r\n        var tempOperation = $data.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: $data.Queryable, elementType: this[returnEntitySet].elementType, params: params });\r\n        return tempOperation.apply(this, arg);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attach(entity, mode);\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attachOrGet(entity, mode);\r\n    },\r\n\r\n    addMany: function (entities) {\r\n        /// <summary>\r\n        ///     Adds several entities to their matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"Array\" />\r\n        /// <returns type=\"Array\">Returns the added entities.</returns>\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            self.add(entity);\r\n        });\r\n        return entities;\r\n    },\r\n\r\n    add: function (entity) {\r\n        /// <summary>\r\n        ///     Adds a new entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.add(entity);\r\n    },\r\n    remove: function (entity) {\r\n        /// <summary>\r\n        ///     Removes an entity from its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.remove(entity);\r\n    },\r\n    storeToken: { type: Object },\r\n\r\n    getFieldUrl: function (entity, member, collection) {\r\n        try {\r\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\r\n            var fieldName = typeof member === 'string' ? member : member.name;\r\n            if (entity instanceof $data.Entity) {\r\n                entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            } else if (!Guard.isNullOrUndefined(entity) && entity.constructor !== $data.Object) { //just a single key\r\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\r\n                var key = {};\r\n                key[keyDef.name] = entity;\r\n                entity = key;\r\n            }\r\n\r\n            //key object\r\n            if (!(entity instanceof $data.Entity)) {\r\n                entity = new entitySet.elementType(entity);\r\n            }\r\n\r\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\r\n        } catch (e) {}\r\n        return '#';\r\n    },\r\n\r\n    //xxxx\r\n    _applyRelatedEntityMethodsToContext: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                var es = this._entitySetReferences[esName];\r\n                var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + es.name;\r\n                //EntitiySets\r\n                if (!(newMemberName in es)) {\r\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n                //Context\r\n                if (!(newMemberName in this)) {\r\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _applyRelatedEntityMethodsToTypes: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                //add to Type\r\n                var elementType = this._entitySetReferences[esName].elementType;\r\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\r\n                for (var i = 0; i < members.length; i++) {\r\n                    var member = members[i];\r\n                    var memberElementType = null;\r\n                    if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                        memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                    {\r\n                        var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                        if (!elementType.getMemberDefinition(newMemberName)) {\r\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _createRelatedEntityProxyClass: function (type) {\r\n        var proxyClassName = type.namespace + $data.defaults.relatedEntityProxyPrefix + type.name;\r\n        if (!Container.isTypeRegistered(proxyClassName)) {\r\n            var definition = {};\r\n            var members = type.memberDefinitions.getPublicMappedProperties();\r\n            for (var i = 0; i < members.length; i++) {\r\n                var member = members[i];\r\n                var memberElementType = null;\r\n                if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                    memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                {\r\n                    var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member)\r\n                }\r\n            }\r\n            $data.Class.define(proxyClassName, $data.RelatedEntityProxy, null, definition, null);\r\n        }\r\n\r\n        return Container.resolveType(proxyClassName);\r\n    },\r\n    _relatedEntityGetMethod: function (targetType, navigation, context){\r\n        var that = this;\r\n        var keys = targetType.memberDefinitions.getKeyProperties();\r\n\r\n        return function (keyValue) {\r\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof $data.EntityContext ? this.context : undefined));\r\n            }\r\n        }\r\n    }\r\n}, {\r\n    inheritedTypeProcessor: function(type) {\r\n        if (type.resolveForwardDeclarations) {\r\n            type.resolveForwardDeclarations();\r\n        }\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity) {\r\n                    if (!cfg.method) {\r\n                        cfg.method = 'POST';\r\n                    }\r\n\r\n                    if (this.context) {\r\n                        context = this.context;\r\n                    } else {\r\n                        Guard.raise('entity not attached into context');\r\n                        return;\r\n                    }\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: context.getEntitySetFromElementType(this.getType())\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    for (var i = 0; i < cfg.params.length; i++) {\r\n                        //TODO: check params type\r\n                        for (var name in cfg.params[i]) {\r\n                            paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(cfg.params[i][name]), name));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (typeof clb !== 'function') {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = [];\r\n        if (cfg.params) {\r\n            for (var i = 0; i < cfg.params.length; i++) {\r\n                var param = cfg.params[i];\r\n                for (var name in param) {\r\n                    params.push({\r\n                        name: name,\r\n                        type: param[name]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    },\r\n    _convertLogicalTypeNameToPhysical: function (name) {\r\n        return name + '_$db$';\r\n    },\r\n    _storageModelCache: {\r\n        get: function () {\r\n            if (!this.__storageModelCache)\r\n                this.__storageModelCache = {};\r\n            return this.__storageModelCache;\r\n        },\r\n        set: function () {\r\n            //todo exception\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n///EntitySet is responsible for\r\n/// -creating and holding entityType through schema\r\n/// - provide Add method\r\n/// - provide Delete method\r\n/// - provide Update method\r\n/// - provide queryProvider for queryable\r\n\r\n$data.EntitySchemaConfig = function EntitySchemaConfig() {\r\n    this.Name = \"\";\r\n};\r\n$data.entitySetState = { created: 0, defined: 1, active: 2 };\r\n\r\n$data.Class.defineEx('$data.EntitySet',\r\n    [\r\n        { type: $data.Queryable, params: [new $data.Class.ConstructorParameter(1)] }\r\n    ], null,\r\n{\r\n    constructor: function (elementType, context, collectionName, eventHandlers, roles) {\r\n        /// <signature>\r\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\r\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\r\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\r\n        /// </signature>\r\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\r\n        var self = this;\r\n        context['createAdd' + elementType.name] = function (initData) {\r\n            var entity  = new elementType(initData);\r\n            return self.add(entity);\r\n        }\r\n        this.stateManager = new $data.EntityStateManager(this);\r\n\r\n        this.collectionName = collectionName;\r\n        this.roles = roles;\r\n\r\n        for (var i in eventHandlers){\r\n            this[i] = eventHandlers[i];\r\n        }\r\n    },\r\n\r\n    addNew: function(item, cb) {\r\n        var callback = $data.PromiseHandlerBase.createCallbackSettings(cb);\r\n        var _item = new this.createNew(item);\r\n        this.entityContext.saveChanges(cb);\r\n        return _item;\r\n    },\r\n\r\n    executeQuery: function (expression, on_ready) {\r\n        //var compiledQuery = this.entityContext\r\n        var callBack = $data.PromiseHandlerBase.createCallbackSettings(on_ready);\r\n        this.entityContext.executeQuery(expression, callBack);\r\n    },\r\n    getTraceString: function (expression) {\r\n        return this.entityContext.getTraceString(expression);\r\n    },\r\n    setContext: function (entityContext) {\r\n        this.entitySetState = $data.entitySetState.active;\r\n        this.entityContext = entityContext;\r\n        this.entityContext[this.schema.name] = this[this.schema.name];\r\n    },\r\n    _trackEntity: function (entity) {\r\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEntities.length; i++) {\r\n            if (trackedEntities[i].data === entity)\r\n                return;\r\n        }\r\n        trackedEntities.push({ entitySet: this, data: entity });\r\n    },\r\n    add: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds the given entity to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///\r\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///         Persons.add(person);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Added;\r\n        data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n\r\n    addMany: function(entities) {\r\n        var result = [];\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            result.push(self.add(entity));\r\n        });\r\n        return result;\r\n    },\r\n    remove: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\r\n        ///         Persons.remove({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Marks the given entity as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.remove(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Deleted;\r\n        data.changedProperties = undefined;\r\n        this._trackEntity(data);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Set an entity's related entities without loading\r\n        ///\r\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\r\n        ///         Category.attach(categoryPromo);\r\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\r\n        ///         Article.attach(article);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\r\n            var current = this.entityContext.stateManager.trackedEntities[i];\r\n            if (current.data === data)\r\n                break;\r\n            if (current.data.equals(data)) {\r\n                Guard.raise(new Exception(\"Context already contains this entity!!!\"));\r\n            }\r\n        }\r\n\r\n        if (mode === true) {\r\n            if (data.changedProperties && data.changedProperties.length > 0) {\r\n                data.entityState = $data.EntityState.Modified;\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n            }\r\n        } else {\r\n            if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n            var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n            if (typeof attachMode === \"function\") {\r\n                attachMode.call($data.EntityAttachMode, data);\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n                data.changedProperties = undefined;\r\n            }\r\n        }\r\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n    },\r\n    detach: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\r\n        ///         Persons.detach({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Detach from the context and sets state Detached.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.detach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\r\n            entity.entityState = $data.EntityState.Detached;\r\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\r\n            return;\r\n        }\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var person = Persons.attachOrGet({ Id: 5  });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///\r\n        ///         var attachedPerson = Persons.attachOrGet(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var p = new $news.Types.Person({ Id: 5 });\r\n        ///         var attachedPerson = Persons.attachOrGet(p);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            return existsItem.data;\r\n        }\r\n\r\n        if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n        var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n        if (typeof attachMode === \"function\") {\r\n            attachMode.call($data.EntityAttachMode, data);\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }\r\n        //data.entityState = $data.EntityState.Unchanged;\r\n        //data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n    //find: function (keys) {\r\n    //    //todo global scope\r\n    //    if (!this.entityKeys) {\r\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\r\n    //    }\r\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\r\n    //        if (item.entitySet == this) {\r\n    //            var isOk = true;\r\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\r\n    //            if (isOk) {\r\n    //                return item.data;\r\n    //            }\r\n    //        }\r\n    //    }, this);\r\n    //    //TODO: db call\r\n    //    return null;\r\n    //},\r\n    loadItemProperty: function (entity, memberDefinition, callback) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n\r\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\r\n    },\r\n    saveChanges: function () {\r\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\r\n    },\r\n    addProperty: function (name, getter, setter) {\r\n        return this.elementType.addProperty.apply(this.elementType, arguments);\r\n    },\r\n    expression: {\r\n        get: function () {\r\n            if (!this._expression) {\r\n                var ec = Container.createEntityContextExpression(this.entityContext);\r\n                //var name = entitySet.collectionName;\r\n                //var entitySet = this.entityContext[entitySetName];\r\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\r\n                var es = Container.createEntitySetExpression(ec,\r\n                    Container.createMemberInfoExpression(memberdef), null,\r\n                    this);\r\n                this._expression = es;\r\n            }\r\n\r\n            return this._expression;\r\n        },\r\n        set: function (value) {\r\n            this._expression = value;\r\n        }\r\n    },\r\n    getFieldUrl: function (keys, field) {\r\n        return this.entityContext.getFieldUrl(keys, field, this);\r\n    },\r\n    bulkInsert: function (fields, datas, callback) {\r\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.EntityState = {\r\n    Detached:0,\r\n    Unchanged: 10,\r\n    Added: 20,\r\n    Modified: 30,\r\n    Deleted: 40\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.EntityStateManager', null, null,\r\n{\r\n    constructor: function (entityContext) {\r\n        this.entityContext = null;\r\n        this.trackedEntities = [];\r\n        this.init(entityContext);\r\n    },\r\n    init: function (entityContext) {\r\n        this.entityContext = entityContext;\r\n    },\r\n    reset: function () {\r\n        this.trackedEntities = [];\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Base.extend('$data.EntityWrapper', {\r\n    getEntity: function () {\r\n        Guard.raise(\"pure object\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\n\r\n$data.createEnum = function (name, container, enumType, enumDefinition) {\r\n    return $data.Enum.extend(name, container, enumType, enumDefinition);\r\n}\r\n\r\n\r\n$data.Enum = $data.Class.define(\"$data.Enum\", null, null, {\r\n    constructor: function(){\r\n        return Guard.raise(new Exception(\"Type Error\", \"Cannot create instance from enum type!\"))  \r\n    }\r\n}, {\r\n    extend: function(name, container, enumType, enumDefinition){\r\n        if (!enumDefinition) {\r\n            if(!enumType){\r\n                enumDefinition = container;\r\n                container = undefined;    \r\n            } else {\r\n                enumDefinition = enumType;\r\n                enumType = container;\r\n                container = undefined;    \r\n            }\r\n        }\r\n        \r\n        enumType = enumType || $data.Integer;\r\n        enumType = Container.resolveType(enumType);\r\n        var classDefinition = {\r\n            __enumType: { get: function(){ return enumType }, set: function() { }, enumerable: false, writable: false }\r\n        };\r\n        \r\n        var getEnumDef = function(value, index){\r\n            return { get: function() { return value }, set: function() { }, enumMember: true, index: index }\r\n        }\r\n        \r\n        var defaultValue = 0;\r\n        var isValueCalculation = [$data.Byte, $data.SByte, $data.Int16, $data.Integer, $data.Int64].indexOf(enumType) >= 0;\r\n        var hasIndex = false;\r\n        \r\n        var enumDef = [];\r\n        if (Array.isArray(enumDefinition)) {\r\n            for(var i = 0; i < enumDefinition.length; i++){\r\n                var enumValA = enumDefinition[i];\r\n                if(typeof enumValA === \"object\" && typeof enumValA.name === \"string\"){\r\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\r\n                    if(typeof enumValA.index !== \"undefined\") {\r\n                         hasIndex = true;\r\n                    }\r\n                } else if(typeof enumValA === \"string\") {\r\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\r\n                } else {\r\n                    return Guard.raise(new Exception(\"Type Error\", \"Invalid enum member\"))  \r\n                }\r\n            }\r\n        } else if (typeof enumDefinition === \"object\"){\r\n            for(var enumName in enumDefinition){\r\n                var enumValO = enumDefinition[enumName];\r\n                if(typeof enumValO === \"object\"){\r\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\r\n                    if(typeof enumValO.index !== \"undefined\") { \r\n                        hasIndex = true;\r\n                    }\r\n                } else {\r\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(hasIndex){\r\n            enumDef.sort(function (a,b) {\r\n                if (a.index < b.index)\r\n                    return -1;\r\n                if (a.index > b.index)\r\n                    return 1;\r\n                return 0;\r\n            })\r\n        }\r\n        \r\n        var enumOptions = [];\r\n        for (var i = 0; i < enumDef.length; i++) {\r\n            var enumVal = enumDef[i]\r\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\r\n               enumVal.value = defaultValue;\r\n            }\r\n            if (typeof enumVal.value === \"number\") {\r\n               defaultValue = enumVal.value; \r\n            }\r\n            defaultValue++;\r\n            enumOptions.push(enumVal.name);\r\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\r\n        }\r\n        classDefinition.getEnumName = function(enumValue){\r\n            var def = enumDef.filter(d => d.value === enumValue)[0]\r\n            if(def){\r\n                return def.name\r\n            }\r\n        }\r\n        \r\n        var enumClass = $data.Base.extend.call(this, name, container, {}, classDefinition);\r\n        \r\n        $data.Container.registerConverter(name, {\r\n            'default': function (value) {\r\n                if(typeof value == \"string\" && enumOptions.indexOf(value) >= 0){\r\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\r\n                    if(enumMember){\r\n                        return enumMember.get();\r\n                    }\r\n                } \r\n                \r\n                for (var i = 0; i < enumDef.length; i++) {\r\n                    var enumVal = enumDef[i]\r\n                    if(enumVal.value === value)\r\n                        return value;\r\n                }\r\n        \r\n                throw 0;\r\n            }\r\n        });\r\n        \r\n        return enumClass;\r\n    },\r\n    \r\n    hasMetadata: function(key, property){\r\n        return typeof Reflect !== 'undefined' && Reflect.hasMetadata && Reflect.hasMetadata(key, this, property)\r\n    },\r\n    getAllMetadata: function(property){\r\n        var result = {};\r\n        if(typeof Reflect !== 'undefined' && Reflect.getMetadataKeys && Reflect.getMetadata){\r\n            var keys = Reflect.getMetadataKeys(this, property);\r\n            keys.forEach(key => {\r\n                result[key] = Reflect.getMetadata(key, this, property)\r\n            })\r\n        }\r\n        \r\n        return result;\r\n    },\r\n    getMetadata: function(key, property) {\r\n        return typeof Reflect !== 'undefined' && Reflect.getMetadata ? Reflect.getMetadata(key, this, property) : undefined\r\n    },\r\n    setMetadata: function(key, value, property) {\r\n        return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.defineMetadata(key, value, this, property)\r\n    }\r\n});\r\n\r\n\r\n\r\nexport var Enum = $data.Enum\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ArrayLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (items) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\r\n        this.items = items || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ArrayLiteral, writable: true },\r\n\r\n    items: { value: undefined, dataType: Array, elementType: $data.Expressions.ExpressionNode },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        ///<var nam\r\n        var result = \"[\" + this.items.map(function (item) { return item.toString(); }).join(\",\") + \"]\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CallExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member, args) {\r\n        ///<summary>Represents a call to an object or global method</summary>\r\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\r\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\r\n        this.expression = expression;\r\n        this.member = member;\r\n        this.args = args;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.Call\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(thisObj, method, args) {\r\n                if (typeof method !== 'function') {\r\n                    method = thisObj[method];\r\n                }\r\n                Guard.requireType(\"method\", method, Function);\r\n                return method.apply(thisObj, args);\r\n            };\r\n        },\r\n        set: function (value) { Guard.raise(\"Property can not be set\"); }\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeParser', null, null, {\r\n\r\n    constructor: function (scopeContext) {\r\n        ///<signature>\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///</signature>\r\n        this.scopeContext = scopeContext;\r\n        this.lambdaParams = [];\r\n    },\r\n\r\n    log: function(logInfo) {\r\n        if (this.scopeContext)\r\n            this.scopeContext.log(logInfo);\r\n    },\r\n\r\n    parseExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        if (typeof code === 'object') { code = ''; }\r\n        var result = {\r\n            success: true,\r\n            errorMessage: '',\r\n            errorDetails: ''\r\n        };\r\n        ///<var name=\"AST\" type=\"Date\" />\r\n\r\n        //console.log(code.toString());\r\n        if ($data.Acorn){\r\n            //console.log('using acorn.js');\r\n            return { success: true, expression: this.ParserBuild($data.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else if ($data.Esprima){\r\n            //console.log('using esprima.js');\r\n            return { success: true, expression: this.ParserBuild($data.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else{\r\n            //console.log('using JayLint');\r\n            var AST = $data.ASTParser.parseCode(code);\r\n            this.log({ event: \"AST\", data: AST });\r\n            if (!AST.success) {\r\n                return {\r\n                    success: false,\r\n                    error: \"ASTParser error\",\r\n                    errorMessage: (AST.errors) ? JSON.stringify(AST.errors) : \"could not get code\"\r\n                };\r\n            }\r\n            var b = this.Build2(AST.tree.first[0]);\r\n            result = { success: true, expression: b, errors: AST.errors };\r\n            return result;\r\n        }\r\n    },\r\n\r\n    createExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n\r\n        var result = this.parseExpression(code, resolver);\r\n        if (!result.success) {\r\n            Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\r\n        }\r\n        return result.expression;\r\n    },\r\n\r\n    ParserBuild: function(node){\r\n        //console.log(node);\r\n        return this['Parser' + node.type](node);\r\n    },\r\n\r\n    ParserExpressionStatement: function(node){\r\n        return this.ParserBuild(node.expression);\r\n    },\r\n\r\n    ParserBlockStatement: function(node){\r\n        return this.ParserBuild(node.body[0]);\r\n    },\r\n\r\n    ParserReturnStatement: function(node){\r\n        return this.ParserBuild(node.argument);\r\n    },\r\n\r\n    ParserMemberExpression: function(node){\r\n        return new $data.Expressions.PropertyExpression(\r\n            this.ParserBuild(node.object),\r\n            new $data.Expressions.ConstantExpression(node.property.name || node.property.value, typeof (node.property.name || node.property.value))\r\n        );\r\n    },\r\n\r\n    ParserIdentifier: function(node){\r\n        return this.ParserParameter(node,\r\n            this.lambdaParams.indexOf(node.name) > -1\r\n                ? $data.Expressions.ExpressionType.LambdaParameterReference\r\n                : $data.Expressions.ExpressionType.ParameterReference\r\n            );\r\n    },\r\n\r\n    ParserObjectExpression: function(node){\r\n        var props = new Array(node.properties.length);\r\n        for (var i = 0; i < node.properties.length; i++){\r\n            props[i] = this.ParserProperty(node.properties[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ObjectLiteralExpression(props);\r\n    },\r\n\r\n    ParserArrayExpression: function(node){\r\n        var items = new Array(node.elements.length);\r\n        for (var i = 0; i < node.elements.length; i++){\r\n            items[i] = this.ParserBuild(node.elements[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ArrayLiteralExpression(items);\r\n    },\r\n\r\n    ParserProperty: function(node){\r\n        return new $data.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\r\n    },\r\n\r\n    ParserArrowFunctionExpression: function(node){\r\n        return this.ParserFunctionExpression(node);\r\n    },\r\n\r\n    ParserFunctionExpression: function(node){\r\n        var params = new Array(node.params.length);\r\n        for (var i = 0; i < node.params.length; i++){\r\n            if(i === 0 || $data.defaults.parameterResolutionCompatibility){\r\n                this.lambdaParams.push(node.params[i].name);\r\n                params[i] = this.ParserParameter(node.params[i], $data.Expressions.ExpressionType.LambdaParameter);\r\n            } else {\r\n                params[i] = this.ParserParameter(node.params[i], $data.Expressions.ExpressionType.Parameter);\r\n            }\r\n            params[i].owningFunction = result;\r\n        }\r\n        var result = new $data.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserParameter: function(node, nodeType){\r\n        var result = new $data.Expressions.ParameterExpression(node.name, null, nodeType);\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference){\r\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserLogicalExpression: function(node){\r\n        return this.ParserBinaryExpression(node);\r\n    },\r\n\r\n    ParserOperators: {\r\n        value: {\r\n            \"==\": { expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n            \"===\": { expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n            \"!=\": { expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n            \"!==\": { expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n            \">\": { expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n            \">=\": { expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n            \"<=\": { expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n            \"<\": { expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n            \"&&\": { expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n            \"||\": { expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n            \"&\": { expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n            \"|\": { expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n            \"+\": { expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n            \"-\": { expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n            \"/\": { expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n            \"%\": { expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n            \"*\": { expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n            \"[\": { expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n            \"in\": { expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryOperators: {\r\n        value: {\r\n            \"+\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n            \"-\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n            \"++true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n            \"--true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n            \"++false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n            \"!\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n            \"--false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\r\n    },\r\n\r\n    ParserUpdateExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\r\n    },\r\n\r\n    ParserBinaryExpression: function(node){\r\n        return new $data.Expressions.SimpleBinaryExpression(\r\n            this.ParserBuild(node.left),\r\n            this.ParserBuild(node.right),\r\n            this.ParserOperators[node.operator].expressionType,\r\n            node.operator,\r\n            this.ParserOperators[node.operator].type\r\n        );\r\n    },\r\n\r\n    ParserThisExpression: function(node){\r\n        return new $data.Expressions.ThisExpression();\r\n    },\r\n\r\n    ParserLiteral: function(node){\r\n        return new $data.Expressions.ConstantExpression(node.value, typeof node.value);\r\n    },\r\n\r\n    ParserCallExpression: function(node){\r\n        var method = this.ParserBuild(node.callee);\r\n        var args = new Array(node.arguments.length);\r\n        for (var i = 0; i < node.arguments.length; i++){\r\n            args[i] = this.ParserBuild(node.arguments[i]);\r\n        }\r\n\r\n        var member;\r\n        var expression;\r\n        switch (true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = new $data.Expressions.ConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n        }\r\n\r\n        return new $data.Expressions.CallExpression(expression, member, args);\r\n    }/*,\r\n\r\n    Build2: function (node) {\r\n        ///<param name=\"node\" type=\"Lint\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"number\":\r\n            case \"string\":\r\n                n = this.BuildConstant(node);\r\n                break;\r\n            case \"prefix\":\r\n                switch (node.value) {\r\n                    case \"{\":\r\n                        n = this.BuildObjectLiteral(node);\r\n                        break;\r\n                    case \"[\":\r\n                        n = this.BuildArrayLiteral(node);\r\n                        break;\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    //TODO: default case\r\n                }\r\n                break;\r\n            case \"suffix\":\r\n                switch (node.value) {\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    default:\r\n                        Guard.raise(\"Unknown suffix: \" + node.value);\r\n                }\r\n                break;\r\n            case \"infix\":\r\n                switch (node.value) {\r\n                    case \"[\":\r\n                        n = this.BuildArray(node);\r\n                        break;\r\n                    case $data.binaryOperators.resolve(node.value):\r\n                        n = this.BuildSimpleBinary(node);\r\n                        break;\r\n                    case \"function\":\r\n                        Guard.raise(\"Unexpected function arity\");\r\n                    case \"(\":\r\n                        n = this.BuildCall(node);\r\n                        break;\r\n                    case \".\":\r\n                        n = this.BuildProperty(node);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        //TODO: remove debugger, throw exception or break\r\n                }\r\n                break;\r\n            case \"statement\":\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        //TODO: consider adding break\r\n                }\r\n                break;\r\n            default:\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        break;\r\n                    case \"true\":\r\n                    case \"false\":\r\n                    case \"null\":\r\n                        n = this.BuildConstant(node);\r\n                        break;\r\n                    case \"this\":\r\n                        n = this.BuildThis(node);\r\n                        break;\r\n                    default:\r\n                        n = this.BuildParameter(node);\r\n                        break;\r\n                }\r\n        }\r\n        return n;\r\n    },\r\n\r\n    BuildThis: function (node) {\r\n        var result = Container.createThisExpression();\r\n        return result;\r\n    },\r\n\r\n    BuildConstant: function (node) {\r\n        ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n        var value = node.value;\r\n        var type = node.type;\r\n        if (node.reserved === true) {\r\n            switch (node.value) {\r\n                case \"true\": value = true; type = typeof true; break;\r\n                case \"false\": value = false; type = typeof false; break;\r\n                case \"null\": value = null; type = typeof null; break;\r\n                //TODO: missing default case\r\n            }\r\n        }\r\n        var result = new $data.Expressions.ConstantExpression(value, type);\r\n        return result;\r\n    },\r\n\r\n    BuildFunctionParameter: function (node) {\r\n\r\n    },\r\n\r\n    BuildArray: function (node) {\r\n        switch (node.second.type) {\r\n            case \"string\":\r\n                return this.BuildProperty(node);\r\n            case \"number\":\r\n            default:\r\n                return this.BuildSimpleBinary(node);\r\n        }\r\n    },\r\n\r\n    BuildParameter: function (node) {\r\n        ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        var paramName = node.value;\r\n        //TODO\r\n        //var paramType = this.resolver.resolveParameterType(node);\r\n        var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                    this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n        var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n            result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    BuildArrayLiteral: function(node) {\r\n        var self = this;\r\n        var items = node.first.map(function (item) { return self.Build2(item); });\r\n        var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n        return result;\r\n    },\r\n\r\n    BuildObjectLiteral: function (node) {\r\n        var self = this;\r\n        var fields = node.first.map(function (item) {\r\n            var eItem = self.Build2(item.first);\r\n            var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n            return result;\r\n        });\r\n        var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n        return result;\r\n    },\r\n\r\n    BuildFunction: function (node) {\r\n        ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n        ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n        var self = this;\r\n        var paramStack = [];\r\n        var params = node.first && node.first.map(function (paramNode) {\r\n            //paramStack.push(paramNode.value);\r\n            this.lambdaParams.push(paramNode.value);\r\n            return self.BuildParameter(paramNode);\r\n        }, this);\r\n        params = params || [];\r\n\r\n        //skipping return for convenience\r\n        //Possible we should raise an error as predicates and selectors can\r\n        //not be code blocks just expressions\r\n\r\n        var hasReturn = node.block.length == 0 ? false :\r\n            node.block[0].value === \"return\" ? true : false;\r\n        var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n\r\n        paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n\r\n        var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n        params.forEach(function (param) {\r\n            param.owningFunction = result;\r\n        });\r\n\r\n        //TODO place on prototyope\r\n        result.name = node.name;\r\n        return result;\r\n    },\r\n\r\n    BuildCall: function (node) {\r\n        var self = this;\r\n        var method = self.Build2(node.first);\r\n        var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n        var member;\r\n        var expression;\r\n        switch(true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = Container.createConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n            //TODO: missing default case\r\n        }\r\n\r\n        var result = Container.createCallExpression(expression, member, args);\r\n        return result;\r\n    },\r\n\r\n    BuildProperty: function (node) {\r\n        ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n        ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n        ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Build2(node.first);\r\n        //TODO\r\n        //var type = expression.type;\r\n        //var member = type.getMemberDefinition()\r\n        //TODO how to not if?????\r\n        var member;\r\n        if (node.second.identifier) {\r\n            member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n        } else {\r\n            member = this.Build2(node.second);\r\n        }\r\n        var result = new $data.Expressions.PropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n\r\n    BuildUnary: function(node) {\r\n        var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n        var nodeType = operator.expressionType;\r\n        var operand = this.Build2(node.first);\r\n        var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n        return result;\r\n    },\r\n\r\n    BuildSimpleBinary: function (node) {\r\n        ///<param name=\"node\" type=\"LintInflixNode\" />\r\n\r\n        var operator = $data.binaryOperators.getOperator(node.value);\r\n        var nodeType = operator.expressionType;\r\n\r\n        var left = this.Build2(node.first || node.left);\r\n        var right = this.Build2(node.second || node.right);\r\n        var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n        return result;\r\n    }\r\n\r\n    //Build: function (node, expNode) {\r\n    //    var n;\r\n    //    switch (node.arity) {\r\n    //        case \"ternary\":\r\n    //            if (node.value == \"?\")\r\n    //                n = this.BuildDecision(node, expNode);\r\n    //            else\r\n    //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n    //            break;\r\n    //        case null:\r\n    //        default:\r\n    //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n    //    }\r\n    //    return n;\r\n    //},*/\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ConstantExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (value, type, name, elementType) {\r\n        this.value = value;\r\n        //TODO\r\n        //this.type = Container.getTypeName(value);\r\n\r\n        this.type = type;\r\n        this.name = name;\r\n        this.elementType = elementType;\r\n        if (!Guard.isNullOrUndefined(this.value)) {\r\n            this.type = Container.resolveType(this.type)\r\n            if ((this.type === $data.Array && this.elementType) || Container.resolveType(Container.getTypeName(this.value)) !== this.type)\r\n                this.value = Container.convertTo(value, this.type, this.elementType);\r\n        }\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Constant, enumerable: true },\r\n    type: { value: Object, writable: true },\r\n    elementType: { value: Object, writable: true },\r\n    value: { value: undefined, writable: true },\r\n    toString: function (debug) {\r\n        //return \"[constant: \" + this.value.toString() + \"]\";\r\n        return this.value.toString();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ContinuationExpressionBuilder', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (mode) {\r\n        this.mode = mode;\r\n    },\r\n    compile: function (query) {\r\n\r\n        var findContext = { mode: \"find\", skipExists: false };\r\n        this.Visit(query.expression, findContext);\r\n\r\n        var result = {\r\n            skip: findContext.skipSize,\r\n            take: findContext.pageSize,\r\n            message: ''\r\n        }\r\n\r\n\r\n        if ('pageSize' in findContext) {\r\n            var expression;\r\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\r\n\r\n            if (!findContext.skipExists && (findContext.pageSize)) {\r\n                context.append = true;\r\n                expression = this.Visit(query.expression, context);\r\n\r\n            } else if (findContext.skipExists) {\r\n                expression = this.Visit(query.expression, context)\r\n            }\r\n\r\n            if (!context.abort) {\r\n                result.expression = expression\r\n            }\r\n            else {\r\n                result.skip = (result.skip || 0) - result.take;\r\n                result.message = 'Invalid skip value!';\r\n            }\r\n        }else{\r\n            result.message = 'take expression not defined in the chain!';\r\n        }\r\n\r\n        return result;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n\r\n        switch (context.mode) {\r\n            case 'find':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Take) {\r\n                    context.pageSize = expression.amount.value;\r\n                } else {\r\n                    context.skipSize = expression.amount.value;\r\n                    context.skipExists = true;\r\n                }\r\n                break;\r\n            case 'prev':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = expression.amount.value - context.pageSize;\r\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\r\n\r\n                    var constExp = Container.createConstantExpression(Math.max(amount, 0), \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0, no prev\r\n                    context.abort = true;\r\n                }\r\n                break;\r\n            case 'next':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = context.pageSize + expression.amount.value;\r\n                    var constExp = Container.createConstantExpression(amount, \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0\r\n                    var constExp = Container.createConstantExpression(context.pageSize, \"number\");\r\n                    return Container.createPagingExpression(expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n\r\n        this.Visit(expression.source, context);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.AssociationInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (associationInfo) {\r\n        this.associationInfo = associationInfo;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.AssociationInfo, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, parameters) {\r\n        if (Container.resolveType(Container.getTypeName(source)) == $data.String && \r\n            source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\" && \r\n             !/^[^\\.]*(=>)/.test(source.replace(/^[\\s\\xA0]+/, \"\"))) \r\n        {\r\n            source = \"function (it) { return \" + source + \"; }\";\r\n        }\r\n\r\n        this.source = source;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Code, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeToEntityConverter', $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\r\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\r\n        this.scopeContext = scopeContext;\r\n        this.parameters = [];\r\n\r\n    },\r\n\r\n\r\n    VisitBinary: function (expression, context) {\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n\r\n        if ((!(left instanceof $data.Expressions.ConstantExpression) && right instanceof $data.Expressions.ConstantExpression) ||\r\n            (!(right instanceof $data.Expressions.ConstantExpression) && left instanceof $data.Expressions.ConstantExpression)) {\r\n\r\n            var refExpression, constExpr;\r\n            if (right instanceof $data.Expressions.ConstantExpression) {\r\n                refExpression = left;\r\n                constExpr = right;\r\n            } else {\r\n                refExpression = right;\r\n                constExpr = left;\r\n            }\r\n\r\n            var memInfo;\r\n            if ((memInfo = refExpression.selector) instanceof $data.Expressions.MemberInfoExpression ||\r\n                (memInfo = refExpression.operation) instanceof $data.Expressions.MemberInfoExpression) {\r\n\r\n\r\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\r\n                    var fieldType = Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\r\n                    var constExprType = Container.resolveType(constExpr.type);\r\n\r\n                    if (fieldType !== constExprType) {\r\n\r\n                        var value = constExpr.value;\r\n                        if (expression.operator === $data.Expressions.ExpressionType.In) {\r\n                            if (Array.isArray(value)) {\r\n                                var resultExp = [];\r\n                                for (var i = 0; i < value.length; i++) {\r\n                                    resultExp.push(new $data.Expressions.ConstantExpression(value[i], fieldType));\r\n                                }\r\n                                value = resultExp;\r\n                                fieldType = $data.Array;\r\n                            } else {\r\n                                fieldType = constExprType;\r\n                            }\r\n                        }\r\n\r\n                        if (right === constExpr) {\r\n                            right = new $data.Expressions.ConstantExpression(value, fieldType, right.name);\r\n                        } else {\r\n                            left = new $data.Expressions.ConstantExpression(value, fieldType, left.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitUnary: function (expression, context) {\r\n        var operand = this.Visit(expression.operand, context);\r\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitParameter: function (expression, context) {\r\n        Guard.requireValue(\"context\", context);\r\n        var et = $data.Expressions.ExpressionType;\r\n        switch (expression.nodeType) {\r\n            case et.LambdaParameterReference:\r\n                var result = Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\r\n                return result;\r\n            case et.LambdaParameter:\r\n                //TODO: throw descriptive exception or return a value\r\n                break;\r\n            default:\r\n                Guard.raise(\"Parameter '\" + expression.name + \"' is missing!\");\r\n                break;\r\n        }\r\n    },\r\n\r\n    VisitThis: function (expression, context) {\r\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\r\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\r\n        var result = Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\r\n        return result;\r\n    },\r\n\r\n    VisitFunction: function (expression, context) {\r\n        var result = $data.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\r\n        return result.body;\r\n    },\r\n\r\n    VisitCall: function (expression, context) {\r\n        //var exp = this.Visit(expression.expression);\r\n        var self = this;\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n        var args = expression.args.map(function (arg) {\r\n            if (arg instanceof $data.Expressions.FunctionExpression && \r\n               (exp instanceof $data.Expressions.EntitySetExpression || exp instanceof $data.Expressions.FrameOperationExpression))\r\n            {\r\n                var operation = self.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\r\n                if(!operation){\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                \r\n                var entitySet = self.scopeContext.getEntitySetFromElementType(exp.elementType)\r\n                var setExpr = null;\r\n                if(!entitySet){\r\n                    //TODO\r\n                    Guard.raise(\"Nested operations without entity set is not supported\");\r\n                } else {\r\n                    setExpr = entitySet.expression;\r\n                }\r\n                \r\n                var frameType = context.frameType;\r\n                context.frameType = operation.frameType;\r\n                context.lambdaParameters.push(setExpr);\r\n                var res = self.Visit(arg, context);\r\n                context.lambdaParameters.pop();\r\n                context.frameType = frameType;\r\n                \r\n                if (operation.frameTypeFactory) {\r\n                    return operation.frameTypeFactory(setExpr, res)\r\n                } else {\r\n                    return new operation.frameType(setExpr, res);\r\n                }\r\n            } else {\r\n                return self.Visit(arg, context);\r\n            }\r\n        });\r\n        var result;\r\n\r\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\r\n        switch (true) {\r\n            case exp instanceof $data.Expressions.QueryParameterExpression:\r\n                var argValues = args.map(function (a) { return a.value; });\r\n                result = expression.implementation(exp.value, member.value, argValues);\r\n                //var args = expressions\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result);\r\n            case exp instanceof $data.Expressions.EntityFieldExpression:\r\n\r\n            case exp instanceof $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntitySetExpression:\r\n            case exp instanceof $data.Expressions.FrameOperationExpression:\r\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntityExpression:\r\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            case exp instanceof $data.Expressions.EntityContextExpression:\r\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            default:\r\n                Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\r\n                //TODO we must not alter the visited tree\r\n        }\r\n\r\n    },\r\n    _resolveFunctionArguments: function (args, params) {\r\n        if (params) // remove current field poz\r\n            params = params.filter(function (p, i) { return p.name !== '@expression'; });\r\n\r\n        //objectArgs\r\n        if (args.length === 1 && args[0] instanceof $data.Expressions.ConstantExpression && typeof args[0].value === 'object' && args[0].value && params && params[0] &&\r\n            args[0].value.constructor === $data.Object && params.some(function (param) { return param.name in args[0].value })) {\r\n\r\n            return params.map(function (p) {\r\n                var type = p.type || p.dataType || args[0].type;\r\n                return new $data.Expressions.ConstantExpression(args[0].value[p.name], Container.resolveType(type), p.name);\r\n            });\r\n\r\n        } else {\r\n            return args.map(function (expr, i) {\r\n                if (expr instanceof $data.Expressions.ConstantExpression && params && params[i]) {\r\n                    var type = params[i].type || params[i].dataType || expr.type;\r\n                    return new $data.Expressions.ConstantExpression(expr.value, Container.resolveType(type), params[i].name);\r\n                } else {\r\n                    return expr;\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    VisitProperty: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n\r\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n        Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n\r\n        function isPrimitiveType(memberDefinitionArg) {\r\n\r\n            var t = memberDefinitionArg.dataType;\r\n            if (typeof t === 'function') { return false; }\r\n\r\n\t\t\t// suspicious code\r\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\r\n        }\r\n\r\n        switch (exp.expressionType) {\r\n            case $data.Expressions.EntitySetExpression:\r\n            case $data.Expressions.EntityExpression:\r\n                var memberDefinition = exp.getMemberDefinition(member.value);\r\n                if (!memberDefinition) {\r\n                    Guard.raise(new Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\r\n                }\r\n                //var storageMemberDefinition =\r\n                var storageField = memberDefinition.storageModel\r\n                                                   .PhysicalType.memberDefinitions.getMember(memberDefinition.name);\r\n                var res;\r\n                var memberDefinitionExp;\r\n                switch (storageField.kind) {\r\n                    case \"property\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createEntityFieldExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                    case \"navProperty\":\r\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\r\n                        var setExpression = Container.createEntitySetExpression(exp, Container.createAssociationInfoExpression(assocInfo));\r\n                        if (assocInfo.ToMultiplicity !== \"*\") {\r\n                            var ee = Container.createEntityExpression(setExpression, {});\r\n                            return ee;\r\n                        }/* else {\r\n                            context.lambdaParameters.push(setExpression);\r\n                        }*/\r\n                        return setExpression;\r\n                    case \"complexProperty\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createComplexTypeExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                        //TODO: missing default case\r\n                }\r\n\r\n                //s/switch => property or navigationproperty\r\n            case $data.Expressions.ComplexTypeExpression:\r\n                var memDef = exp.getMemberDefinition(member.value);\r\n                if (!(memDef)) {\r\n                    Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\r\n                }\r\n                var memDefExp = Container.createMemberInfoExpression(memDef);\r\n                var result;\r\n                //TODO!!!!\r\n                if (Container.isPrimitiveType(Container.resolveType(memDef.dataType))) {\r\n                    result = Container.createEntityFieldExpression(exp, memDefExp);\r\n                    return result;\r\n                }\r\n                result = Container.createComplexTypeExpression(exp, memDefExp);\r\n                return result;\r\n            case $data.Expressions.QueryParameterExpression:\r\n                var value = expression.implementation(exp.value, member.value);\r\n                this.parameters[exp.index].name += \"$\" + member.value;\r\n                this.parameters[exp.index].value = value;\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, Container.getTypeName(value));\r\n            case $data.Expressions.EntityFieldExpression:\r\n            case $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, []);\r\n\r\n                return result;\r\n            default:\r\n                Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ComplexTypeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityExpression, $data.Expressions.ComplexTypeExpression]);\r\n        Guard.requireType(\"selector\", selector, [$data.Expressions.EntityExpression, $data.Expressions.MemberInfoExpression]);\r\n        this.source = source;\r\n        this.selector = selector;\r\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\r\n        var t = Container.resolveType(dt);\r\n        this.entityType = t;\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Com }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityContextExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (instance) {\r\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\r\n        this.instance = instance;\r\n        //this.storage_type = {};\r\n        //this.typeName = this.type.name;\r\n    },\r\n    instance: { enumerable: false },\r\n    nodeType : { value: $data.Expressions.ExpressionType.EntityContext, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\r\n        ///</signature>\r\n        Guard.requireValue(\"source\", source);\r\n        Guard.requireValue(\"selector\", selector);\r\n        if (!(source instanceof $data.Expressions.EntitySetExpression) && !(source instanceof $data.Expressions.ServiceOperationExpression)) {\r\n            Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\r\n        }\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n\r\n        this.entityType = this.source.elementType;\r\n        this.storageModel = this.source.storageModel;\r\n\r\n        Guard.requireValue(\"entityType\", this.entityType);\r\n        Guard.requireValue(\"storageModel\", this.storageModel);\r\n\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        var memdef = this.entityType.getMemberDefinition(name);\r\n        if (!memdef) {\r\n            var findMember = function(type){\r\n                if (type.inheritedTo){\r\n                    for (var i = 0; i < type.inheritedTo.length; i++){\r\n                        memdef = type.inheritedTo[i].getMemberDefinition(name);\r\n                        if (!memdef) findMember(type.inheritedTo[i]);\r\n                        else break;\r\n                    }\r\n                }\r\n            };\r\n            findMember(this.entityType);\r\n            if (!memdef){\r\n                Guard.raise(new Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\r\n            }\r\n        };\r\n        memdef.storageModel = this.storageModel;\r\n        return memdef;\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpressionVisitor', null, null, {\r\n\r\n    constructor: function () {\r\n        this.lambdaTypes = [];\r\n    },\r\n\r\n    canVisit: function (expression) {\r\n        return expression instanceof $data.Expressions.ExpressionNode;\r\n    },\r\n\r\n    Visit: function (expression, context) {\r\n        if (!this.canVisit(expression))\r\n            return expression;\r\n\r\n        var visitorName = \"Visit\" + expression.getType().name;\r\n        if (visitorName in this) {\r\n            var fn = this[visitorName];\r\n            var result = fn.call(this, expression, context);\r\n            if (typeof result === 'undefined') {\r\n                return expression;\r\n            }\r\n            return result;\r\n        }\r\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\r\n        return expression;\r\n    },\r\n    VisitToArrayExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createToArrayExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitForEachExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createForEachExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitSingleExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSingleExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFirstExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFirstExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitSomeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSomeExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFindExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFindExpression(source, expression.params, expression.subMember);\r\n        return expression;\r\n    },\r\n\r\n    VisitEveryExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createEveryExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createCountExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchDeleteExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createBatchDeleteExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchExecuteQueryExpression: function (expression, context) {\r\n        var newQueries = expression.members.map(function (expr) {\r\n            return this.Visit(expr, context);\r\n        }, this);\r\n\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newQueries[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createBatchExecuteQueryExpression(newQueries);\r\n        }\r\n\r\n        return expression;\r\n    },\r\n\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        var newValues = expression.members.map(function (ofe) {\r\n            return this.Visit(ofe, context);\r\n        }, this);\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newValues[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createObjectLiteralExpression(newValues);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.expression, context);\r\n        if (expression.expression !== newExpression) {\r\n            return Container.createObjectFieldExpression(expression.fieldName, newExpression);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.source, context);\r\n        if (newExpression !== expression.source) {\r\n            return Container.createIncludeExpression(newExpression, expression.selector);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitUnaryExpression: function(expression, context) {\r\n\r\n    \t/// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\r\n    \t/// <param name=\"context\"></param>\r\n        var operand = this.Visit(expression.operand, context);\r\n        if (expression.operand !== operand) {\r\n            return Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\r\n        };\r\n        return expression;\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n        if (left !== expression.left || right !== expression.right) {\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, expression.nodeType,\r\n                expression.operator, expression.type, expression.resolution);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityContextExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\r\n        /// <param name=\"context\"></param>\r\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\r\n        return expression;\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createComplexTypeExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityFieldExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var operation = this.Visit(expression.operation, context);\r\n        var parameters = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createEntityFieldOperationExpression(source, operation, parameters);\r\n        return result;\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        var exp = this.Visit(expression.expression, context);\r\n        var args = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createParametricQueryExpression(exp, args);\r\n        return result;\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var amount = this.Visit(expression.amount, context);\r\n        if (source !== expression.source || amount !== expression.amount) {\r\n            return Container.createPagingExpression(source, amount, expression.nodeType);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\r\n        this.selector = selector;\r\n        this.source = source;\r\n\r\n\r\n        if (this.selector instanceof $data.Expressions.MemberInfoExpression ||  this.selector.name) {\r\n            this.memberName = this.selector.name;\r\n        }\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityField }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFieldOperation }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntitySetExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source,\r\n                    [$data.Expressions.EntityContextExpression, $data.Expressions.EntitySetExpression]);\r\n        Guard.requireType(\"selector\", source,\r\n                    [$data.Expressions.MemberInfoExpression, $data.Expressions.CodeExpression, $data.Expressions.ParametricQueryExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n        this.params = params;\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\r\n        this.instance = instance;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        ///TODO!!!\r\n        this.storage_type = {};\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.MemberInfoExpression);\r\n                this.elementType = selector.memberDefinition.elementType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntityExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.AssociationInfoExpression);\r\n                this.elementType = selector.associationInfo.ToType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntitySetExpression:\r\n                if (selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n                    this.elementType = selector.associationInfo.ToType,\r\n                    this.storageModel = c.instance._storageModel.getStorageModel(selector.associationInfo.ToType)\r\n                } else {\r\n                    this.elementType = this.source.elementType;\r\n                    this.storageModel = this.source.storageModel;\r\n                }\r\n                break;\r\n            case this.source instanceof $data.Expressions.ServiceOperationExpression:\r\n                this.elementType = this.source.elementType;//?????????\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n            case this.source instanceof $data.Expressions.FindExpression:\r\n                this.elementType = this.source.resultType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            default:\r\n                Guard.raise(\"take and skip must be the last expressions in the chain!\");\r\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\r\n                break;\r\n        }\r\n\r\n        // suspicious code\r\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\r\n        //EntityTypeInfo\r\n\r\n    },\r\n    getMemberDefinition: function (name) {\r\n        var memdef = this.elementType.getMemberDefinition(name);\r\n        if (!(memdef)) {\r\n            Guard.raise(new Exception(\"Unknown member \" + name + \" on type \"+ this.entityType.name, \"MemberNotFound\"));\r\n        };\r\n            memdef.storageModel = this.storageModel;\r\n        return memdef;\r\n    },\r\n    \r\n    instance: { enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntitySet, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionMonitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (monitorDefinition) {\r\n        this.Visit = function (expression, context) {\r\n\r\n            var result = expression;\r\n            var methodName;\r\n            if (this.canVisit(expression)) {\r\n\r\n                //if (monitorDefinition.FilterExpressionNode) {\r\n\r\n                //};\r\n\r\n                if (monitorDefinition.VisitExpressionNode) {\r\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\r\n                };\r\n\r\n                methodName = \"Visit\" + expression.getType().name;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\r\n                }\r\n            }\r\n\r\n\r\n            //apply is about 3-4 times faster then call on webkit\r\n\r\n            var args = arguments;\r\n            if (result !== expression) args = [result, context];\r\n            result = $data.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\r\n\r\n            args = [result, context];\r\n\r\n            if (this.canVisit(result)) {\r\n                var expressionTypeName = result.getType().name;\r\n                if (monitorDefinition.MonitorExpressionNode) {\r\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Monitor\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n                if (monitorDefinition.MutateExpressionNode) {\r\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Mutate\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FilterExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Filter, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.InlineCountExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.InlineCount, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchExecuteQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FrameOperator', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function () {\r\n        this.isTerminated = true;\r\n    }\r\n});\r\n\r\n$C('$data.Expressions.CountExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Count, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SingleExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Single, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FindExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source, params, subMember) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.params = params;\r\n        this.subMember = subMember;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Find, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FirstExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.First, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.ForEachExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ForEach, enumerable: true }\r\n});\r\n$C('$data.Expressions.ToArrayExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ToArray, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SomeExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.selector = selector;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Some, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.EveryExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.selector = selector;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Every, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchDeleteExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchDelete, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FrameOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n        \r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntitySetExpression:\r\n            case this.source instanceof $data.Expressions.FrameOperationExpression:\r\n                this.elementType = this.source.elementType;\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n        }\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.FrameOperation }\r\n\r\n});\r\n\r\n$C('$data.Expressions.EntityFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFunctionOperation }\r\n});\r\n\r\n$C('$data.Expressions.ContextFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.ContextFunctionOperation }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.IncludeExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Include, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.MemberInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n        this.memberName = memberDefinition.name;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.MemberInfo, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.OrderExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.source = source;\r\n        //this.selector = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.OrderBy, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParametricQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, parameters) {\r\n        this.expression = expression;\r\n        this.parameters = parameters || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ParametricQuery, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ProjectionExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Projection, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryExpressionCreator', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        Guard.requireValue(\"scopeContext\", scopeContext);\r\n        this.scopeContext = scopeContext;\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\r\n        var source = expression.source.toString();\r\n        var jsCodeTree = Container.createCodeParser(this.scopeContext).createExpression(source);\r\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\r\n\r\n        //TODO rename classes to reflex variable names\r\n        //TODO engage localValueResolver here\r\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\r\n        var constantResolver = Container.createConstantValueResolver(expression.parameters, $data.__global, this.scopeContext);\r\n        var parameterProcessor = Container.createParameterResolverVisitor();\r\n\r\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\r\n\r\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\r\n        var code2entity = Container.createCodeToEntityConverter(this.scopeContext);\r\n\r\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\r\n        var entityExpression = code2entity.Visit(jsCodeTree, {  queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\r\n\r\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\r\n        var result = Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\r\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\r\n\r\n        return result;\r\n    },\r\n\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    },\r\n    \r\n    VisitIncludeExpression: function(expression, context){\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createIncludeExpression(source, selector);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, index, value, type) {\r\n        this.name = name;\r\n        this.index = index;\r\n        this.value = value;\r\n        //TODO\r\n        this.type = Container.getTypeName(value);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.QueryParameter, writable: false }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.RepresentationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (kind) {\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ServiceOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, cfg, boundItem) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///<param name=\"params\" type=\"$data.Array\" />\r\n        ///<param name=\"cfg\" type=\"$data.Object\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityContextExpression]);\r\n        Guard.requireType(\"selector\", source, [$data.Expressions.MemberInfoExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector\r\n        this.params = params\r\n        this.cfg = cfg;\r\n        this.boundItem = boundItem;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                this.elementType = cfg.elementType ? Container.resolveType(cfg.elementType) : (this.elementType ? Container.resolveType(cfg.returnType) : null);\r\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(Container.resolveType(cfg.elementType)) : null;\r\n                break;\r\n            default:\r\n                Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\r\n        }\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ServiceOperation, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n $data.Class.define('$data.Expressions.ExpressionBuilder', null, null,\r\n{\r\n    constructor: function (context) {\r\n        this.context = context;\r\n    },\r\n    _isLambdaParam: function (name) {\r\n        var p = this.context.lambdaParams;\r\n        for (var i = 0; i < p.length; i++) {\r\n            if (p[i] == name)\r\n                return true;\r\n        }\r\n        return false;\r\n    },\r\n    _isParam: function (name) {\r\n        return this.context.paramContext[name] != undefined;\r\n    },\r\n    _isParamRoot: function (name) {\r\n        return this.context.paramsName == name;\r\n    },\r\n    Build: function (node, expNode) {\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"infix\":\r\n                if (\"(\" == node.value)\r\n                    n = this.BuildMethodCall(node, expNode);\r\n                else if (\".\" == node.value)\r\n                    n = this.BuildMember(node, expNode);\r\n                else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildEquality(node, expNode);\r\n                else if ([\"&&\", \"||\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if (\"[\" == node.value)\r\n                    n = this.BuildArrayAccess(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"prefix\":\r\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildUnary(node, expNode);\r\n                else if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else if (\"{\" == node.value/* && \"object\" == node.type*/) //TODO: check the second condition necessity\r\n                    n = this.BuildNewExpression(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"suffix\":\r\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"string\":\r\n            case \"number\":\r\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\r\n                break;\r\n            case \"ternary\":\r\n                if (node.value == \"?\")\r\n                    n = this.BuildDecision(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\"))\r\n                    n = this.BuildBoolLiteral(node, expNode);\r\n                else\r\n                    n = this.BuildVariable(node, expNode);\r\n                break;\r\n            default:\r\n                Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n        }\r\n        return n;\r\n    },\r\n    BuildNewExpression: function (node, expNode) {\r\n        var newExpression = $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\r\n        var n = node.first;\r\n        for (var i = 0; i < n.length; i++)\r\n            newExpression.values.push(this.Build(n[i], newExpression));\r\n        return newExpression;\r\n    },\r\n    BuildLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n    },\r\n    BuildBoolLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\r\n    },\r\n    BuildVariable: function (node, expNode) {\r\n        if (!node.first) {\r\n            if (expNode.type == MEMBERACCESS) {\r\n                var subType;\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else\r\n                    subType = \"PROPERTY\";\r\n            }\r\n            else {\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else if ($data.__global[node.value] != undefined)\r\n                    subType = \"GLOBALOBJECT\";\r\n                else\r\n\t\t\t\t\tGuard.raise(\r\n\t\t\t\t\t\tnew Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\",\r\n                        \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value })\r\n\t\t\t\t\t\t);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\r\n        }\r\n\r\n        var left = $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\r\n\r\n        var jsonAssign = $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\r\n        var right = this.Build(node.first, jsonAssign);\r\n        //left.parent = jsonAssign;\r\n        jsonAssign.left = left;\r\n        jsonAssign.right = right;\r\n\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n\r\n        return jsonAssign;\r\n    },\r\n    BuildMember: function (node, expNode) {\r\n        if (node.value != \".\" || node.arity != \"infix\") {\r\n            if (node.type == \"string\") { //TODO: more types?\r\n                return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\r\n        }\r\n        var result = $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\r\n        var expression = this.Build(node.first, result);\r\n        var member = this.Build(node.second, result);\r\n        result.expression = expression;\r\n        result.member = member;\r\n        return result;\r\n    },\r\n    BuildUnary: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildIncDec: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildBinary: function (node, expNode) {\r\n        if (!node.first) Guard.raise(\"Cannot build binary: node.first is null\");\r\n        if (!node.second) Guard.raise(\"Cannot build binary: node.second is null\");\r\n        var result = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildEquality: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildDecision: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\r\n        result.expression = this.Build(node.first, result);\r\n        result.left = this.Build(node.second, result);\r\n        result.right = this.Build(node.third, result);\r\n        return result;\r\n    },\r\n    BuildMethodCall: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\r\n        if (node.first.type == \"function\") {\r\n            //-- object's function\r\n            result.object = this.Build(node.first.first, result);\r\n            result.method = node.first.second.value;\r\n        }\r\n        else {\r\n            //-- global function\r\n            if (node.first.type != null)\r\n                Guard.raise(\"Cannot build MethodCall because type is \" + type);\r\n            result.object = null;\r\n            result.method = node.first.value;\r\n        }\r\n        var argNodes = node.second;\r\n        var args = [];\r\n        for (var i = 0; i < argNodes.length; i++) {\r\n            var arg = argNodes[i];\r\n            args[i] = this.Build(arg, result);\r\n        }\r\n        result.args = args;\r\n        return result;\r\n    },\r\n    BuildArrayAccess: function (node, expNode) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var result = $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\r\n        result.array = this.Build(node.first, result);\r\n        result.index = this.Build(node.second, result);\r\n        return result;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n//TODO: Finish refactoring ExpressionNode.js\r\n\r\n$data.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\r\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\r\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\r\n    MemberAccess: \"memberAccess\",    // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n    Call: \"call\",\r\n\r\n    /* binary operators */\r\n    Equal: \"equal\",\r\n    NotEqual: \"notEqual\",\r\n    EqualTyped: \"equalTyped\",\r\n    NotEqualTyped: \"notEqualTyped\",\r\n    GreaterThen: \"greaterThan\",\r\n    LessThen: \"lessThan\",\r\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\r\n    LessThenOrEqual: \"lessThenOrEqual\",\r\n    Or: \"or\",\r\n    OrBitwise: \"orBitwise\",\r\n    And: \"and\",\r\n    AndBitwise: \"andBitwise\",\r\n\r\n\r\n    In: \"in\",\r\n\r\n    Add: \"add\",\r\n    Divide: \"divide\",\r\n    Multiply: \"multiply\",\r\n    Subtract: \"subtract\",\r\n    Modulo: \"modulo\",\r\n    ArrayIndex: \"arrayIndex\",\r\n\r\n    /* unary operators */\r\n    New: \"new\",\r\n    Positive: \"positive\",\r\n    Negative: \"negative\",\r\n    Increment: \"increment\",\r\n    Decrement: \"decrement\",\r\n    Not: \"not\",\r\n\r\n\r\n    This: \"this\",\r\n    LambdaParameterReference: \"lambdaParameterReference\",\r\n    LambdaParameter: \"lambdaParameter\",\r\n    ParameterReference: \"parameterReference\",\r\n    Parameter: \"parameter\",\r\n\r\n    ArrayLiteral: \"arrayLiteral\",\r\n    ObjectLiteral: \"objectLiteral\",\r\n    ObjectField: \"objectField\",\r\n    Function: \"Function\",\r\n    Unknown: \"UNKNOWN\",\r\n\r\n    EntitySet: \"EntitySet\",\r\n    ServiceOperation: \"ServiceOperation\",\r\n    EntityField: \"EntityField\",\r\n    EntityContext: \"EntityContext\",\r\n    Entity: \"Entity\",\r\n    Filter: \"Filter\",\r\n    First: \"First\",\r\n    Count: \"Count\",\r\n    InlineCount: \"InlineCount\",\r\n    BatchExecuteQuery: \"BatchExecuteQuery\",\r\n    Single: \"Single\",\r\n    Find: \"Find\",\r\n    Some: \"Some\",\r\n    Every: \"Every\",\r\n    ToArray: \"ToArray\",\r\n    BatchDelete: \"BatchDelete\",\r\n    ForEach: \"ForEach\",\r\n    Projection: \"Projection\",\r\n    EntityMember: \"EntityMember\",\r\n    EntityFieldOperation: \"EntityFieldOperation\",\r\n    FrameOperation: \"FrameOperation\",\r\n    EntityFunctionOperation: \"EntityFunctionOperation\",\r\n    ContextFunctionOperation: \"ContextFunctionOperation\",\r\n    EntityBinary: \"EntityBinary\",\r\n    Code: \"Code\",\r\n    ParametricQuery: \"ParametricQuery\",\r\n    MemberInfo: \"MemberInfo\",\r\n    QueryParameter: \"QueryParameter\",\r\n    ComplexEntityField: \"ComplexEntityField\",\r\n\r\n    Take: \"Take\",\r\n    Skip: \"Skip\",\r\n    OrderBy: \"OrderBy\",\r\n    OrderByDescending: \"OrderByDescending\",\r\n    Include: \"Include\",\r\n\r\n    IndexedPhysicalAnd:\"IndexedDBPhysicalAndFilterExpression\",\r\n    IndexedLogicalAnd:\"IndexedDBLogicalAndFilterExpression\",\r\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\r\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\r\n});\r\n\r\n$data.BinaryOperator = function () {\r\n    ///<field name=\"operator\" type=\"string\" />\r\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\r\n    ///<field name=\"type\" type=\"string\" />\r\n}\r\n\r\n$data.binaryOperators = [\r\n    { operator: \"==\", expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n    { operator: \"===\", expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n    { operator: \"!=\", expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n    { operator: \"!==\", expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n    { operator: \">\", expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n    { operator: \">=\", expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n    { operator: \"<=\", expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n    { operator: \"<\", expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n    { operator: \"&&\", expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n    { operator: \"||\", expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n    { operator: \"&\", expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n    { operator: \"|\", expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n    { operator: \"+\", expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n    { operator: \"-\", expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n    { operator: \"/\", expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n    { operator: \"%\", expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n    { operator: \"*\", expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n    { operator: \"[\", expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n    { operator: \"in\", expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n];\r\n\r\n\r\n$data.binaryOperators.resolve = function (operator) {\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.binaryOperators.contains = function (operator) {\r\n    return $data.binaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.binaryOperators.getOperator = function (operator) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.unaryOperators = [\r\n    { operator: \"+\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n    { operator: \"-\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n    { operator: \"++\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n    { operator: \"--\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n    { operator: \"++\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n    { operator: \"!\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n    { operator: \"--\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n\r\n    //{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\r\n];\r\n\r\n$data.unaryOperators.resolve = function (operator) {\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.unaryOperators.contains = function (operator) {\r\n    return $data.unaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.unaryOperators.getOperator = function (operator, arity) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator && (!arity || item.arity == arity); });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.timeIt = function (fn, iterations) {\r\n    iterations = iterations || 1;\r\n\r\n    console.time(\"!\");\r\n    for (var i = 0; i < iterations; i++) {\r\n        fn();\r\n    }\r\n    console.timeEnd(\"!\");\r\n}\r\n\r\n$data.Expressions.OperatorTypes = {\r\n    UNARY: \"UNARY\",                  // { type:UNARY, executable:true, operator:, operand: }\r\n    INCDEC: \"INCDEC\",                // { type:INCDEC, executable:true, operator:, operand:, suffix: }\r\n    DECISION: \"DECISION\",            // { type:DECISION, executable:true, expression:, left:, right: }\r\n    METHODCALL: \"METHODCALL\",        // { type:METHODCALL, executable:true, object:, method:, args: }\r\n    NEW: \"NEW\",                      // { type:NEW, executable:true, values: [] };\r\n    JSONASSIGN: \"JSONASSIGN\",        // { type:JSONASSIGN, executable:true, left:, right: }\r\n    ARRAYACCESS: \"ARRAYACCESS\",      // { type:ARRAYACCESS, executable:true, array:, index: }\r\n    UNKNOWN: \"UNKNOWN\"\r\n};\r\n\r\n$data.executable = true;\r\n\r\nfunction jsonify(obj) { return JSON.stringify(obj, null, \"\\t\"); }\r\n\r\n$C('$data.Expressions.ExpressionNode', null, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for all Expressions.</summary>\r\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\r\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\r\n        ///</field>\r\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\r\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.type = type;\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\r\n        ///TODO\r\n        this.expressionType = this.constructor;\r\n    },\r\n    toJSON: function toJSON() {\r\n        var __proto__ = $data('$data.Expressions.ExpressionNode').prototype;\r\n        var origToJSON = __proto__.toJSON;\r\n        delete __proto__.toJSON;\r\n        var res = JSON.parse(JSON.stringify(this));\r\n        res.expressionType = Container.resolveName(this._expressionType);\r\n        __proto__.toJSON = origToJSON;\r\n        return res;\r\n    },\r\n    getJSON: function () { return jsonify(this); },\r\n\r\n    //TOBLOG maybe\r\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n\r\n                        if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n\r\n            this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\r\n    expressionType: {\r\n        set: function (value) {\r\n            if (typeof value === 'string') {\r\n                value = Container.resolveType(value);\r\n            }\r\n            this._expressionType = value;\r\n        },\r\n        get: function (value) {\r\n            //IE ommits listing JSON.stringify in call chain\r\n\r\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n            //     return Container.resolveName(this._expressionType);\r\n            // }\r\n            return this._expressionType;\r\n        },\r\n        enumerable: true\r\n    },\r\n    ///toString: function () { },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: false },\r\n\r\n    type: {},\r\n\r\n    isTerminated: { value: false },\r\n\r\n    toString: function () {\r\n        return this.value;\r\n    }\r\n}, null);\r\n\r\n\r\n$C('$data.Expressions.UnaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (operand, operator, nodeType, resolution) {\r\n        /// <summary>\r\n        /// Represents an operation with only one operand and an operator\r\n        /// </summary>\r\n        /// <param name=\"operand\"></param>\r\n        /// <param name=\"operator\"></param>\r\n        /// <param name=\"nodeType\"></param>\r\n        /// <param name=\"resolution\"></param>\r\n        this.operand = operand;\r\n        this.operator = operator;\r\n        this.nodeType = nodeType;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    operator: { value: undefined, writable: true },\r\n    operand: { value: undefined, writable: true },\r\n    nodeType: { value: undefined, writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FunctionExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, parameters, body) {\r\n        ///<signature>\r\n        ///<summary>Represents a function declaration.</summary>\r\n        ///<param name=\"name\" type=\"String\">Function name</param>\r\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\r\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///</signature>\r\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\r\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\r\n\r\n        this.parameters = parameters || [];\r\n        this.name = name;\r\n        this.body = body;\r\n    },\r\n\r\n    toString: function (debug) {\r\n        var paramStrings = this.parameters.map(function (p) {\r\n            return p.toString();\r\n        });\r\n        paramStrings = paramStrings.join(\",\");\r\n        var bodyString = (this.body ? this.body.toString(debug) : '');\r\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Function, writable: true },\r\n    parameters: { value: undefined, dataType: Array, elementType: $data.Expressions.ParameterExpression },\r\n    body: { value: undefined, dataType: $data.Expressions.ExpressionNode },\r\n    type: {}\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (fieldName, expression) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.fieldName = fieldName;\r\n        this.expression = expression;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectField, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\r\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectLiteral, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(namesAndValues) {\r\n                var result = { };\r\n                namesAndValues.forEach(function(item) {\r\n                    result[item.name] = item.value;\r\n                });\r\n                return result;\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PagingExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.source = source;\r\n        this.amount = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, type, nodeType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.writePropertyValue(\"name\", name);\r\n        //this.writePropertyValue(\"type\", type);\r\n        this.nodeType = nodeType || $data.Expressions.ExpressionType.Parameter;\r\n        this.name = name;\r\n        this.type = type || \"unknown\";\r\n        var _owningFunction;\r\n    },\r\n\r\n    owningFunction: { value: undefined, enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Parameter, writable: true },\r\n    name: { value: undefined, dataType: String, writable: true },\r\n    type: { value: undefined, dataType: \"object\", writable: true},\r\n    toString: function (debug) {\r\n        var result;\r\n        result = debug ? this.type + \" \" : \"\";\r\n        result = result + this.name;\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PropertyExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member) {\r\n        ///<summary>Represents accessing a property or field of an object</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\r\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\r\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\r\n\r\n        this.expression = expression;\r\n        this.member = member;\r\n\r\n        this.type = member.dataType;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.MemberAccess\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function (holder, memberName) {\r\n                if (holder[memberName] === undefined)\r\n                    Guard.raise(new Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\r\n                return holder[memberName];\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.expression.toString() + \".\" + this.member.toString();\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.SimpleBinaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (left, right, nodeType, operator, type, resolution) {\r\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\r\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\r\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\r\n        ///<field name=\"implementation\" type=\"function\" />\r\n        this.left = left;\r\n        this.right = right;\r\n        this.nodeType = nodeType;\r\n        this.operator = operator;\r\n        this.type = type;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return $data.binaryOperators.getOperator(this.operator).implementation;\r\n        },\r\n        set: function () { }\r\n\r\n    },\r\n    //nodeType: { value: $data.Expressions.ExpressionType },\r\n    type: { value: \"number\", writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ThisExpression', $data.Expressions.ExpressionNode, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.This }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExecutorVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    //--\r\n    VisitVariable: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var value = (eNode.name == context.paramsName) ? context.paramContext : $data.__global[eNode.name];\r\n        if (typeof value == 'undefined')\r\n\t\t\tGuard.raise(\r\n\t\t\t\tnew Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\",\r\n                \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name })\r\n\t\t\t\t);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var chain = this.GetMemberChain(eNode);\r\n        var value;\r\n        for (var i = 0; i < chain.length; i++) {\r\n            if (i == 0)\r\n                value = context.paramContext;\r\n            else\r\n                value = value[chain[i].name];\r\n        }\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n\r\n\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var operandValue = ((operand.valueType == \"string\") ? (\"'\" + operand.value + \"'\") : operand.value);\r\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        if (eNode.suffix)\r\n            value = eNode.operator == \"++\" ? operand.value++ : operand.value--;\r\n        else\r\n            value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value = expression.value ? left.value : right.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object !== eNode.object || args != eNode.args)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var a = [];\r\n        for (var i = 0; i < args.length; i++) {\r\n            var arg = args[i];\r\n            var t = typeof arg.value;\r\n            a.push((t == \"string\") ? (\"'\" + arg.value + \"'\") : arg.value);\r\n        }\r\n        var value;\r\n        var src = object ?\r\n\t\t\t\"value = object.value[eNode.method](\" + a.join(\",\") + \");\"\r\n\t\t\t:\r\n\t\t\t\"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var arrayNode = this.Visit(eNode.array, context);\r\n        var indexNode = this.Visit(eNode.index, context);\r\n        var value = arrayNode.value[indexNode.value];\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExpTreeVisitor',\r\n    null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            this._deep = this._deep + 1;\r\n            var result = null;\r\n            switch (eNode.type) {\r\n                case LITERAL: result = this.VisitLiteral(eNode, context); break;\r\n                case VARIABLE: result = this.VisitVariable(eNode, context); break;\r\n                case MEMBERACCESS: result = this.VisitMember(eNode, context); break;\r\n                case BINARY: result = this.VisitBinary(eNode, context); break;\r\n                case UNARY: result = this.VisitUnary(eNode, context); break;\r\n                case INCDEC: result = this.VisitIncDec(eNode, context); break;\r\n                case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                case NEW: result = this.VisitNew(eNode, context); break;\r\n                case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                default:\r\n                    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n            }\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n        VisitLiteral: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitVariable: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitMember: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            if (expression === eNode.expression && member === eNode.member)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\r\n        },\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        },\r\n        VisitIncDec: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        },\r\n        VisitEquality: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n        VisitMethodCall: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n\r\n            var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n            var args = this.VisitArray(eNode.args, context);\r\n            if (object === eNode.object && args === eNode.args)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        },\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitJsonAssign: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            left.JSONASSIGN = true;\r\n            right.JSONASSIGN = true;\r\n            return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionVisitor', null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNode\"/>\r\n\r\n            //this._deep = this._deep + 1;\r\n            if (!eNode) {\r\n                return eNode;\r\n            }\r\n\r\n            var result = null;\r\n\r\n                switch (eNode.expressionType) {\r\n                    case $data.Expressions.ParameterExpression:\r\n                        result = this.VisitParameter(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ConstantExpression:\r\n                        result = this.VisitConstant(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.FunctionExpression:\r\n                        result = this.VisitFunction(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.CallExpression:\r\n                        result = this.VisitCall(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.SimpleBinaryExpression:\r\n                        result = this.VisitBinary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.PropertyExpression:\r\n                        result = this.VisitProperty(eNode, context);\r\n                        break;\r\n                        //result = th\r\n                    case $data.Expressions.ThisExpression:\r\n                        if ($data.defaults.parameterResolutionCompatibility) {\r\n                            result = this.VisitThis(eNode, context);\r\n                        } else {\r\n                            Guard.raise(\"Keyword 'this' is not allowed. You should get value from parameter. (it, p1) => it.Title == p1\");\r\n                        }\r\n                        break;\r\n                    case $data.Expressions.ObjectLiteralExpression:\r\n                        result = this.VisitObjectLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ObjectFieldExpression:\r\n                        result = this.VisitObjectField(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ArrayLiteralExpression:\r\n                        result = this.VisitArrayLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.UnaryExpression:\r\n                        result = this.VisitUnary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.EntityContextExpression:\r\n                        result = this.VisitEntityContext(eNode, context);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        break;\r\n                    //case VARIABLE:\r\n\r\n                    //    result = this.VisitVariable(eNode, context);\r\n                    //    break;\r\n                    //case MEMBERACCESS:\r\n                    //    result = this.VisitMember(eNode, context);\r\n                    //    break;\r\n                    //case BINARY:\r\n                    //    result = this.VisitBinary(eNode, context);\r\n                    //    break;\r\n                    //case UNARY:\r\n                    //    result = this.VisitUnary(eNode, context);\r\n                    //    break;\r\n                    //case INCDEC:\r\n                    //    result = this.VisitIncDec(eNode, context);\r\n                    //    break;\r\n                    //case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                    //case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                    //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                    //case NEW: result = this.VisitNew(eNode, context); break;\r\n                    //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                    //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                    //default:\r\n                    //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n                }\r\n\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n\r\n        VisitArrayLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\r\n            var self = this;\r\n            var items = eNode.items.map(function (item) {\r\n                return self.Visit(item, context);\r\n            });\r\n            var result = Container.createArrayLiteralExpression(items);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var self = this;\r\n            var members = eNode.members.map(function (member) {\r\n                return self.Visit(member, context);\r\n            });\r\n            var result = Container.createObjectLiteralExpression(members);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectField: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var result = Container.createObjectFieldExpression(eNode.fieldName, expression);\r\n            return result;\r\n        },\r\n\r\n        VisitThis: function (eNode, context) {\r\n            return eNode;\r\n        },\r\n        VisitCall: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n            var self = this;\r\n            var args = eNode.args.map(function (arg) { return this.Visit(arg, context); }, this);\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.CallExpression(expression, member, args);\r\n        },\r\n\r\n        VisitParameter: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitConstant: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitFunction: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n            var self = this;\r\n\r\n            var params = eNode.parameters.map(function (p, i) {\r\n                return self.Visit(p, context);\r\n            });\r\n\r\n            var body = self.Visit(eNode.body, context);\r\n            var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n            return result;\r\n        },\r\n\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n        },\r\n\r\n        VisitProperty: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.PropertyExpression(expression, member);\r\n            //var member =\r\n        },\r\n\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            ///<returns type=\"$data.Expressions.UnaryExpression\"/>\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return new $data.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n        },\r\n\r\n        VisitEntityContext: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.EntityContextExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.GlobalContextProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (global) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.global = global;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        return (paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter || ($data.defaults.parameterResolutionCompatibility && paramExpression.nodeType == $data.Expressions.ExpressionType.ParameterReference)) && \r\n               this.global && typeof this.global === 'object' &&\r\n               paramExpression.name in this.global;\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var resultValue = this.global[paramExpression.name];\r\n        var expression = Container.createConstantExpression(resultValue, typeof resultValue, paramExpression.name);\r\n        return expression;\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n$C(\"$data.Expressions.ConstantValueResolver\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (paramsObject, global, scopeContext) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.globalResolver = Container.createGlobalContextProcessor(global);\r\n        this.paramResolver = Container.createGlobalContextProcessor(paramsObject);\r\n        this.paramsObject = paramsObject;\r\n        this.scopeContext = scopeContext;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        if($data.defaults.parameterResolutionCompatibility){\r\n            return (paramExpression.name === '$context') || (paramExpression.nodeType == $data.Expressions.ExpressionType.This && this.paramsObject)\r\n                    ? true : (this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression));\r\n        }\r\n        return (paramExpression.name === '$context') ? true : this.paramResolver.canResolve(paramExpression);\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        if (paramExpression.name === '$context') {\r\n            return Container.createEntityContextExpression(this.scopeContext);\r\n        }\r\n        if ($data.defaults.parameterResolutionCompatibility) {\r\n            if (paramExpression.nodeType == $data.Expressions.ExpressionType.This) {\r\n                return Container.createConstantExpression(this.paramsObject, typeof this.paramsObject, 'this');\r\n            }\r\n            return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\r\n        }\r\n        return this.paramResolver.resolve(paramExpression);\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LambdaParameterProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (lambdaParameterTypeInfos) {\r\n        ///<param name=\"global\" />\r\n        ///<param name=\"evalMethod\" />\r\n        var paramIndices = {};\r\n        var $idx = \"name\";\r\n\r\n        this.canResolve = function (paramExpression, context) {\r\n            if (paramExpression.nodeType == $data.Expressions.ExpressionType.LambdaParameter) {\r\n                var fnParams = paramExpression.owningFunction.parameters;\r\n\r\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\r\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\r\n                    return true;\r\n                }\r\n\r\n                for (var j = 0; j < fnParams.length; j++) {\r\n                    if (fnParams[j].name == paramExpression.name) {\r\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.resolve = function(paramExpression, context) {\r\n            var lambdaParamType = paramIndices[paramExpression.name];\r\n            var result = Container.createParameterExpression(paramExpression.name,\r\n                lambdaParamType,\r\n                $data.Expressions.ExpressionType.LambdaParameter);\r\n            result.owningFunction = paramExpression.owningFunction;\r\n            return result;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LocalContextProcessor\", $data.Expressions.GlobalContextProcessor, null, {\r\n    constructor: function (evalMethod) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.canResolve = function (paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            return paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter &&\r\n                (evalMethod(\"typeof \" + paramExpression.name) !== 'undefined');\r\n        };\r\n        this.resolve = function(paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n            var resultValue = evalMethod(paramExpression.name);\r\n            var expression = Container.createConstantExpression(resultValue, typeof resultValue);\r\n            return expression;\r\n        };\r\n\r\n    }\r\n    });\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n//\"use strict\"; // suspicious code\r\n\r\n$C('$data.Expressions.LogicalSchemaBinderVisitor',\r\n    $data.Expressions.ExpressionVisitor, null,\r\n    {\r\n        constructor: function (expression, binder) {\r\n\r\n        },\r\n\r\n        VisitProperty: function (expression, context) {\r\n            ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n            var exp = this.Visit(expression.expression, context);\r\n            var mem = this.Visit(expression.member, context);\r\n\r\n            var type = exp.type;\r\n            var memberType = context.memberResolver.resolve(type, mem.value);\r\n            mem.type = memberType;\r\n            return Container.createPropertyExpression(exp, mem);\r\n        }\r\n\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.ParameterProcessor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\r\n    },\r\n\r\n    Visit: function (node, context) {\r\n        if ((node instanceof $data.Expressions.ParameterExpression ||\r\n            node instanceof $data.Expressions.ThisExpression)\r\n            && this.canResolve(node)) {\r\n            var result = this.resolve(node, context);\r\n            if (result !== node)\r\n                result[\"resolvedBy\"] = this.constructor.name;\r\n            return result;\r\n        } else {\r\n            return node;\r\n        }\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<returns type=\"boolean\" />\r\n        Guard.raise(\"Pure method\");\r\n    },\r\n    resolve: function (paramExpression) {\r\n        ///<returns type=\"XXX\" />\r\n        Guard.raise(\"Pure method\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterResolverVisitor', $data.Expressions.ExpressionVisitor, null, {\r\n\r\n    constructor: function (expression, resolver) {\r\n    \t/// <summary>\r\n    \t/// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\r\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\r\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\r\n        /// is transformed into a constant that has the current href as its value\r\n    \t/// </summary>\r\n    \t/// <param name=\"expression\"></param>\r\n    \t/// <param name=\"resolver\"></param>\r\n        this.lambdaParamCache = {};\r\n        this.paramCache = {};\r\n    },\r\n\r\n    Visit: function (expression, resolver) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\r\n        //TODO base call is just ugly\r\n        return $data.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\r\n\r\n    },\r\n\r\n\r\n    VisitArrayLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var items = eNode.items.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = items.every(function (item) {\r\n            return item instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            items = items.map(function (item) { return item.value });\r\n            return Container.createConstantExpression(items, \"array\");\r\n        } else {\r\n            return Container.createArrayLiteralExpression(items);\r\n        }\r\n    },\r\n\r\n    VisitObjectLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var members = eNode.members.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = members.every(function (member) {\r\n            return member.expression instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            var params = members.map(function (member) { return { name: member.fieldName, value: member.expression.value }; });\r\n            var value = eNode.implementation(params);\r\n            return Container.createConstantExpression(value, typeof value);\r\n        } else {\r\n            return Container.createObjectLiteralExpression(members);\r\n        }\r\n    },\r\n\r\n    VisitThis: function(eNode, resolver) {\r\n        return resolver.Visit(eNode, resolver);\r\n    },\r\n\r\n    VisitParameter: function(eNode, resolver) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n\r\n        var node;\r\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\r\n        switch(eNode.nodeType){\r\n            case $data.Expressions.ExpressionType.Parameter:\r\n                node = resolver.Visit(eNode, resolver);\r\n                this.paramCache[node.name] = node;\r\n                return node;\r\n            case $data.Expressions.ExpressionType.ParameterReference:\r\n                if ($data.defaults.parameterResolutionCompatibility) {\r\n                    return resolver.Visit(eNode, resolver);\r\n                }\r\n            \r\n                var paramNode = this.paramCache[eNode.name];\r\n                if (paramNode) {\r\n                    return paramNode;\r\n                } else {\r\n                    Guard.raise(\"Missing parameter '\" + eNode.name + \"'\");\r\n                }\r\n                break;\r\n            case $data.Expressions.ExpressionType.LambdaParameter:\r\n                node = resolver.Visit(eNode, resolver);\r\n                this.lambdaParamCache[node.name] = node;\r\n                return node;\r\n            case $data.Expressions.ExpressionType.LambdaParameterReference:\r\n                var lambdaParam = this.lambdaParamCache[eNode.name];\r\n                if (lambdaParam) {\r\n                    node = Container.createParameterExpression(eNode.name,\r\n                            lambdaParam.type,\r\n                            $data.Expressions.ExpressionType.LambdaParameterReference);\r\n                    node.paramIndex = eNode.paramIndex;\r\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\r\n                    return node;\r\n                }\r\n                break;\r\n            default:\r\n                return eNode;\r\n\r\n        }\r\n\r\n\r\n        return eNode;\r\n    },\r\n\r\n    VisitConstant: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        return eNode;\r\n    },\r\n\r\n    VisitFunction: function(eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n\r\n        var self = this;\r\n        var params = eNode.parameters.map(function (p, i) {\r\n            var result = self.Visit(p, context);\r\n            return result;\r\n        });\r\n        var body = self.Visit(eNode.body, context);\r\n        var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n\r\n        return result;\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        var expr = $data.Expressions;\r\n\r\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.implementation(left.value, right.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n    },\r\n\r\n    VisitUnary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var operand = this.Visit(eNode.operand, context);\r\n        //var imp = $data.unaryOperators.getOperator(\r\n        var expr = $data.Expressions;\r\n        if (operand  instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.operator.implementation(operand.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n    },\r\n\r\n    VisitProperty: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var member = this.Visit(eNode.member, context);\r\n        var result;\r\n        if (expression instanceof $data.Expressions.ConstantExpression &&\r\n            member instanceof $data.Expressions.ConstantExpression) {\r\n            ///TODO implement checking for the member, throw on error\r\n            result = eNode.implementation(expression.value, member.value);\r\n\r\n            //Method call processed before\r\n            //if (typeof result === 'function') {\r\n            //    return new $data.Expressions.ConstantExpression(\r\n            //        function () { return result.apply(expression.value, arguments); });\r\n            //}\r\n            return Container.createConstantExpression(result, typeof result, expression.name + '$' + member.value);\r\n        }\r\n        if (expression === eNode.expression && member === eNode.member)\r\n            return eNode;\r\n\r\n        result = Container.createPropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n    VisitCall: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n        function isExecutable(args, body, obj) {\r\n            return body instanceof $data.Expressions.ConstantExpression &&\r\n                //global methods will not have a this.\r\n                (!obj || obj instanceof $data.Expressions.ConstantExpression) &&\r\n                args.every(function(item) {\r\n                    return item instanceof $data.Expressions.ConstantExpression;\r\n                });\r\n        }\r\n        var call = $data.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\r\n        var obj = call.expression;\r\n        var body  = call.member;\r\n        var args = call.args;\r\n\r\n        function convertToValue(arg) {\r\n            if (arg instanceof $data.Expressions.ConstantExpression)\r\n                return arg.value;\r\n            return arg;\r\n        };\r\n\r\n        if (isExecutable(args, body, obj)) {\r\n            var fn = body.value;\r\n            if (typeof fn === 'string' && obj.value) {\r\n                fn = obj.value[fn];\r\n            }\r\n            if (typeof fn !== 'function') {\r\n                //TODO dig that name out from somewhere\r\n                Guard.raise(\"Constant expression is not a method...\");\r\n            }\r\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\r\n            return new $data.Expressions.ConstantExpression(value, typeof value);\r\n        }\r\n        return call;\r\n    }\r\n}, {});\r\n$C(\"$data.Expressions.AggregatedVisitor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (visitors) {\r\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\r\n\r\n        this.Visit = function (node, context) {\r\n            for (var i = 0; i < visitors.length; i++) {\r\n                var n = visitors[i].Visit(node, context);\r\n                if (n !== node)\r\n                    return n;\r\n            }\r\n            return node;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.SetExecutableVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    Visit: function (eNode, context) {\r\n        switch (eNode.type) {\r\n            case LITERAL: return this.VisitLiteral(eNode, context);\r\n            case VARIABLE: return this.VisitVariable(eNode, context);\r\n            case MEMBERACCESS: return this.VisitMember(eNode, context);\r\n            case BINARY: return this.VisitBinary(eNode, context);\r\n            case UNARY: return this.VisitUnary(eNode, context);\r\n            case INCDEC: return this.VisitIncDec(eNode, context);\r\n            case EQUALITY: return this.VisitEquality(eNode, context);\r\n            case DECISION: return this.VisitDecision(eNode, context);\r\n            case METHODCALL: return this.VisitMethodCall(eNode, context);\r\n            case NEW: return this.VisitNew(eNode, context);\r\n            case JSONASSIGN: return this.VisitJsonAssign(eNode, context);\r\n            case ARRAYACCESS: return this.VisitArrayAccess(eNode, context);\r\n            default:\r\n                Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n        }\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && (left.executable && right.executable && expression.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object === eNode.object && args === eNode.args && ((object == null ? true : object.executable) == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\r\n    },\r\n    VisitNew: function (eNode, context) {\r\n        // { type:NEW, executable:true, values: [] };\r\n        var values = this.VisitArray(eNode.values, context);\r\n        if (values === eNode.values)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n    },\r\n    VisitJsonAssign: function (eNode, context) {\r\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right)\r\n            return eNode;\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n        return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var array = this.Visit(eNode.array, context);\r\n        var index = this.Visit(eNode.index, context);\r\n        if (array === eNode.array && index === eNode.index)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n    },\r\n    VisitArray: function (eNodes, context) {\r\n        var args = [];\r\n        var ok = true;\r\n        for (var i = 0; i < eNodes.length; i++) {\r\n            args[i] = this.Visit(eNodes[i], context);\r\n            ok = ok && args[i] === eNodes[i];\r\n        }\r\n        return ok ? eNodes : args;\r\n    },\r\n\r\n    VisitLiteral: function (eNode, context) {\r\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\r\n    },\r\n    VisitVariable: function (eNode, context) {\r\n        if (typeof context.paramContext[eNode.name] == undefined) // isn't param  //TODO: check ParamContext\r\n            Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\r\n        //this._setExecutable(eNode, true);\r\n        return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        var chain = this.GetMemberChain(eNode);\r\n        var firstMember = chain[0].name;\r\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\r\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\r\n        if (!isLocalParam && !isLambdaParam)\r\n            Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data from '../../TypeSystem/index.js';\r\n\r\n$data.defaults = $data.defaults || {};\r\n$data.defaults.parameterResolutionCompatibility = true;\r\n\r\n\r\nimport ExpressionNode2 from './ExpressionNode2.js';\r\nimport ArrayLiteralExpression from './ArrayLiteralExpression.js';\r\nimport CallExpression from './CallExpression.js';\r\nimport CodeParser from './CodeParser.js';\r\nimport ConstantExpression from './ConstantExpression.js';\r\nimport FunctionExpression from './FunctionExpression.js';\r\nimport ObjectFieldExpression from './ObjectFieldExpression.js';\r\nimport ObjectLiteralExpression from './ObjectLiteralExpression.js';\r\nimport PagingExpression from './PagingExpression.js';\r\nimport ParameterExpression from './ParameterExpression.js';\r\nimport PropertyExpression from './PropertyExpression.js';\r\nimport SimpleBinaryExpression from './SimpleBinaryExpression.js';\r\nimport ThisExpression from './ThisExpression.js';\r\nimport ExpressionVisitor from './Visitors/ExpressionVisitor.js';\r\nimport ParameterProcessor from './Visitors/ParameterProcessor.js';\r\nimport GlobalContextProcessor from './Visitors/GlobalContextProcessor.js';\r\nimport LocalContextProcessor from './Visitors/LocalContextProcessor.js';\r\nimport LambdaParameterProcessor from './Visitors/LambdaParameterProcessor.js';\r\nimport ParameterResolverVisitor from './Visitors/ParameterResolverVisitor.js';\r\nimport LogicalSchemaBinderVisitor from './Visitors/LogicalSchemaBinderVisitor.js';\r\nimport ExpTreeVisitor from './Visitors/ExpTreeVisitor.js';\r\nimport SetExecutableVisitor from './Visitors/SetExecutableVisitor.js';\r\nimport ExecutorVisitor from './Visitors/ExecutorVisitor.js';\r\nimport ExpressionBuilder from './ExpressionBuilder.js';\r\nimport AssociationInfoExpression from './EntityExpressions/AssociationInfoExpression.js';\r\nimport CodeExpression from './EntityExpressions/CodeExpression.js';\r\nimport CodeToEntityConverter from './EntityExpressions/CodeToEntityConverter.js';\r\nimport ComplexTypeExpression from './EntityExpressions/ComplexTypeExpression.js';\r\nimport EntityContextExpression from './EntityExpressions/EntityContextExpression.js';\r\nimport EntityExpression from './EntityExpressions/EntityExpression.js';\r\nimport EntityExpressionVisitor from './EntityExpressions/EntityExpressionVisitor.js';\r\nimport ExpressionMonitor from './EntityExpressions/ExpressionMonitor.js';\r\nimport EntityFieldExpression from './EntityExpressions/EntityFieldExpression.js';\r\nimport EntityFieldOperationExpression from './EntityExpressions/EntityFieldOperationExpression.js';\r\nimport EntitySetExpression from './EntityExpressions/EntitySetExpression.js';\r\nimport FrameOperationExpression from './EntityExpressions/FrameOperationExpression.js';\r\nimport FilterExpression from './EntityExpressions/FilterExpression.js';\r\nimport IncludeExpression from './EntityExpressions/IncludeExpression.js';\r\nimport MemberInfoExpression from './EntityExpressions/MemberInfoExpression.js';\r\nimport OrderExpression from './EntityExpressions/OrderExpression.js';\r\nimport ParametricQueryExpression from './EntityExpressions/ParametricQueryExpression.js';\r\nimport ProjectionExpression from './EntityExpressions/ProjectionExpression.js';\r\nimport QueryExpressionCreator from './EntityExpressions/QueryExpressionCreator.js';\r\nimport QueryParameterExpression from './EntityExpressions/QueryParameterExpression.js';\r\nimport RepresentationExpression from './EntityExpressions/RepresentationExpression.js';\r\nimport ServiceOperationExpression from './EntityExpressions/ServiceOperationExpression.js';\r\nimport ContinuationExpressionBuilder from './ContinuationExpressionBuilder.js';\r\n\r\n\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ItemStoreClass', null, null, {\r\n    constructor: function () {\r\n        var self = this;\r\n        self.itemStoreConfig = {\r\n            aliases: {},\r\n            contextTypes: {}\r\n        }\r\n\r\n        self.resetStoreToDefault('local', true);\r\n        $data.addStore = function () {\r\n            return self.addItemStoreAlias.apply(self, arguments);\r\n        };\r\n        $data.implementation = self.implementation;\r\n\r\n        $data.Entity.addMember('storeToken', {\r\n            get: function () {\r\n                if (this.storeConfigs && this.storeConfigs['default'])\r\n                    return this.storeConfigs.stores[this.storeConfigs['default']];\r\n            },\r\n            set: function (value) {\r\n                self._setTypeStoreConfig(this, 'default', value);\r\n            }\r\n        }, true);\r\n    },\r\n    itemStoreConfig: {},\r\n    attachMode: $data.EntityAttachMode ? $data.EntityAttachMode.KeepChanges : true,\r\n\r\n    addItemStoreAlias: function (name, contextFactoryOrToken, isDefault) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n\r\n        if ('string' === typeof name) {\r\n            //storeToken\r\n            if ('object' === typeof contextFactoryOrToken && 'factory' in contextFactoryOrToken) {\r\n                var type = Container.resolveType(contextFactoryOrToken.typeName);\r\n\r\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\r\n                self.itemStoreConfig.contextTypes[name] = type;\r\n                if (isDefault) {\r\n                    self.itemStoreConfig['default'] = name;\r\n                }\r\n\r\n                callback.success();\r\n                return promise.getPromise();\r\n            }\r\n                //contextFactory\r\n            else if ('function' === typeof contextFactoryOrToken) {\r\n                var preContext = contextFactoryOrToken();\r\n                var contextPromise;\r\n                if (preContext && preContext instanceof $data.EntityContext) {\r\n                    callback.success(preContext);\r\n                    contextPromise = promise.getPromise();\r\n                } else {\r\n                    contextPromise = preContext;\r\n                }\r\n\r\n                return contextPromise.then(function (ctx) {\r\n                    if (typeof ctx === 'function') {\r\n                        //factory resolve factory\r\n                        return self.addItemStoreAlias(name, ctx, isDefault);\r\n                    }\r\n\r\n                    if (ctx instanceof $data.EntityContext) {\r\n                        return ctx.onReady()\r\n                            .then(function (ctx) {\r\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\r\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\r\n                                if (isDefault) {\r\n                                    self.itemStoreConfig['default'] = name;\r\n                                }\r\n\r\n                                return ctx;\r\n                            });\r\n                    } else {\r\n                        promise = new $data.PromiseHandler();\r\n                        callback = promise.createCallback();\r\n                        callback.error(new Exception('factory dont have context instance', 'Invalid arguments'));\r\n                        return promise.getPromise();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        callback.error(new Exception('Name or factory missing', 'Invalid arguments'));\r\n        return promise.getPromise();\r\n    },\r\n    resetStoreToDefault: function (name, isDefault) {\r\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\r\n        delete this.itemStoreConfig.contextTypes[name];\r\n        if (isDefault) {\r\n            this.itemStoreConfig['default'] = name;\r\n        }\r\n    },\r\n    _setStoreAlias: function (entity, storeToken) {\r\n        if ('object' === typeof storeToken && !entity.storeToken)\r\n            entity.storeToken = storeToken\r\n        return entity;\r\n    },\r\n    _getStoreAlias: function (entity, storeAlias) {\r\n        var type;\r\n        if (entity instanceof $data.Entity) {\r\n            var alias = storeAlias || entity.storeToken;\r\n            if (alias) {\r\n                return alias;\r\n            } else {\r\n                type = entity.getType();\r\n            }\r\n        } else {\r\n            type = entity;\r\n        }\r\n\r\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\r\n    },\r\n    _getStoreContext: function (aliasOrToken, type, nullIfInvalid) {\r\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\r\n\r\n        if (!contextPromise || contextPromise instanceof $data.EntityContext) {\r\n            var promise = new $data.PromiseHandler();\r\n            var callback = promise.createCallback();\r\n            callback.success(contextPromise);\r\n            contextPromise = promise.getPromise();\r\n        }\r\n\r\n        return contextPromise.then(function (context) {\r\n            if (context instanceof $data.EntityContext) {\r\n                return context.onReady();\r\n            } else if (nullIfInvalid) {\r\n                return null;\r\n            } else {\r\n                var promise = new $data.PromiseHandler();\r\n                var callback = promise.createCallback();\r\n                callback.error(new Exception('factory return type error', 'Error'));\r\n                return promise.getPromise();\r\n            }\r\n        });\r\n    },\r\n    _getContextPromise: function (aliasOrToken, type) {\r\n        /*Token*/\r\n        if (aliasOrToken && 'object' === typeof aliasOrToken && 'function' === typeof aliasOrToken.factory) {\r\n            return aliasOrToken.factory(type);\r\n        } else if (aliasOrToken && 'object' === typeof aliasOrToken && 'object' === typeof aliasOrToken.args && 'string' === typeof aliasOrToken.typeName) {\r\n            var type = Container.resolveType(aliasOrToken.typeName);\r\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\r\n        }\r\n            /*resolve alias from type (Token)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\r\n            return type.storeConfigs.stores[aliasOrToken].factory();\r\n        }\r\n            /*resolve alias from type (constructor options)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\r\n            return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\r\n        }\r\n            /*resolve alias from ItemStore (factories)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\r\n            return this.itemStoreConfig.aliases[aliasOrToken](type);\r\n        }\r\n            /*token is factory*/\r\n        else if (aliasOrToken && 'function' === typeof aliasOrToken) {\r\n            return aliasOrToken();\r\n        }\r\n            /*default no hint*/\r\n        else {\r\n            return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\r\n        }\r\n\r\n    },\r\n    _getStoreEntitySet: function (storeAlias, instanceOrType) {\r\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\r\n        var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();;\r\n\r\n        return this._getStoreContext(aliasOrToken, type)\r\n            .then(function (ctx) {\r\n                var entitySet = ctx.getEntitySetFromElementType(type);\r\n                if (!entitySet) {\r\n                    var d = new $data.PromiseHandler();\r\n                    var callback = d.createCallback();\r\n                    callback.error(\"EntitySet not exist for \" + type.fullName);\r\n                    return d.getPromise();\r\n                }\r\n                return entitySet;\r\n            });\r\n    },\r\n    _getDefaultItemStoreFactory: function (instanceOrType, initStoreConfig) {\r\n        if (instanceOrType) {\r\n            var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();\r\n            var typeName = $data.Container.resolveName(type) + \"_items\";\r\n            var typeName = typeName.replace(/\\./g, \"_\");\r\n\r\n            var storeConfig = $data.typeSystem.extend({\r\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\r\n                tableName: typeName,\r\n                initParam: { provider: 'local', databaseName: typeName }\r\n            }, initStoreConfig);\r\n\r\n            var contextDef = {};\r\n            contextDef[storeConfig.collectionName] = { type: $data.EntitySet, elementType: type }\r\n            if (storeConfig.tableName)\r\n                contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\r\n\r\n            var inMemoryType = $data.EntityContext.extend(typeName, contextDef);\r\n            var ctx = new inMemoryType(storeConfig.initParam);\r\n            if (initStoreConfig && typeof initStoreConfig === 'object')\r\n                initStoreConfig.factory = ctx._storeToken.factory;\r\n            return ctx;\r\n        }\r\n        return undefined;\r\n    },\r\n    implementation: function (name, contextOrAlias) {\r\n        var self = $data.ItemStore;\r\n        var result;\r\n\r\n        if (typeof contextOrAlias === 'string') {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias]\r\n        } else if (contextOrAlias instanceof $data.EntityContext) {\r\n            contextOrAlias = contextOrAlias.getType();\r\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\r\n        }\r\n\r\n        if (contextOrAlias) {\r\n            result = self._resolveFromContext(contextOrAlias, name);\r\n        }\r\n\r\n        if (!result) {\r\n            result = Container.resolveType(name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _resolveFromContext: function (contextType, name) {\r\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            var memDef = memDefs[i];\r\n            if (memDef.type) {\r\n                var memDefType = Container.resolveType(memDef.type);\r\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(memDef.elementType);\r\n                    if (elementType.name === name) {\r\n                        return elementType;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n\r\n    //Entity Instance\r\n    EntityInstanceSave: function (storeAlias, hint, attachMode) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                return self._getSaveMode(entity, entitySet, hint, storeAlias)\r\n                    .then(function (mode) {\r\n                        mode = mode || 'add';\r\n                        switch (mode) {\r\n                            case 'add':\r\n                                entitySet.add(entity);\r\n                                break;\r\n                            case 'attach':\r\n                                entitySet.attach(entity, attachMode || true);\r\n                                break;\r\n                            default:\r\n                                var d = new $data.PromiseHandler();\r\n                                var callback = d.createCallback();\r\n                                callback.error('save mode not supported: ' + mode);\r\n                                return d.getPromise();\r\n                        }\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { self._setStoreAlias(entity, entitySet.entityContext.storeToken); return entity; });\r\n                    });\r\n            });\r\n    },\r\n    EntityInstanceRemove: function (storeAlias) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                entitySet.remove(entity);\r\n\r\n                return entitySet.entityContext.saveChanges()\r\n                    .then(function () { return entity; });\r\n            });\r\n    },\r\n    EntityInstanceRefresh: function (storeAlias, keepStore) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        var entityType = entity.getType();\r\n\r\n        var key = self._getKeyObjectFromEntity(entity, entityType);\r\n\r\n        return entityType.read(key, storeAlias)\r\n            .then(function (loadedEntity) {\r\n                entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                    entity[memDef.name] = loadedEntity[memDef.name];\r\n                });\r\n                entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\r\n                entity.changedProperties = undefined;\r\n                return entity;\r\n            });\r\n    },\r\n\r\n    //Entity Type\r\n    EntityInheritedTypeProcessor: function (type) {\r\n        var self = $data.ItemStore;\r\n        type.readAll = self.EntityTypeReadAll(type);\r\n        type.read = self.EntityTypeRead(type);\r\n        type.removeAll = self.EntityTypeRemoveAll(type);\r\n        type.remove = self.EntityTypeRemove(type);\r\n        type.get = self.EntityTypeGet(type); //Not complete\r\n        type.save = self.EntityTypeSave(type);\r\n        type.addMany = self.EntityTypeAddMany(type);\r\n        type.itemCount = self.EntityTypeItemCount(type);\r\n        type.query = self.EntityTypeQuery(type);\r\n        type.takeFirst = self.EntityTypeTakeFirst(type);\r\n\r\n        type.setStore = self.EntityTypeSetStore(type);\r\n    },\r\n    EntityTypeReadAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemoveAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.toArray().then(function (items) {\r\n                        items.forEach(function (item) {\r\n                            entitySet.remove(item);\r\n                        });\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { return items; });\r\n                    });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRead: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    try {\r\n                        var singleParam = self._findByIdQueryable(entitySet, key);\r\n                        return entitySet.single(singleParam.predicate, singleParam.thisArgs)\r\n                            .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                    } catch (e) {\r\n                        var d = new $data.PromiseHandler();\r\n                        var callback = d.createCallback();\r\n                        callback.error(e);\r\n                        return d.getPromise();\r\n                    }\r\n                });\r\n        };\r\n    },\r\n    EntityTypeGet: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var item = new type(self._getKeyObjectFromEntity(key));\r\n            item.refresh(storeAlias);\r\n            return item;\r\n        };\r\n    },\r\n    EntityTypeSave: function (type) {\r\n        return function (initData, storeAlias, hint) {\r\n\r\n            var self = $data.ItemStore;\r\n            var instance = new type(initData);\r\n            return instance.save(storeAlias, hint);\r\n        }\r\n    },\r\n    EntityTypeAddMany: function (type) {\r\n        return function (initDatas, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    var items = entitySet.addMany(initDatas);\r\n                    return entitySet.entityContext.saveChanges()\r\n                        .then(function () {\r\n                            return items;\r\n                        });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemove: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var entityPk = type.memberDefinitions.getKeyProperties();\r\n            var entity;\r\n            if (entityPk.length === 1) {\r\n                var obj = {};\r\n                obj[entityPk[0].name] = key;\r\n                entity = new type(obj);\r\n            } else {\r\n                entity = new type(key);\r\n            }\r\n            return entity.remove(storeAlias);\r\n        }\r\n    },\r\n    EntityTypeItemCount: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.length();\r\n                });\r\n        }\r\n    },\r\n    EntityTypeQuery: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.filter(predicate, thisArg).forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeTakeFirst: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.first(predicate, thisArg)\r\n                        .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n\r\n    EntityTypeSetStore: function (type) {\r\n        return function (name, config) {\r\n            if (typeof name === 'object' && typeof config === 'undefined') {\r\n                config = name;\r\n                name = 'default';\r\n            }\r\n\r\n            var self = $data.ItemStore;\r\n\r\n            var defStoreConfig = {};\r\n            if (config) {\r\n                if (config.tableName) {\r\n                    defStoreConfig.tableName = config.tableName;\r\n                    delete config.tableName;\r\n                }\r\n\r\n                if (config.collectionName) {\r\n                    defStoreConfig.collectionName = config.collectionName;\r\n                    delete config.collectionName;\r\n                }\r\n\r\n                if (typeof config.dataSource === 'string') {\r\n                    var ds = config.dataSource;\r\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\r\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\r\n                    }\r\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\r\n                    if (!defStoreConfig.tableName)\r\n                        defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\r\n\r\n                    var provider = config.provider || config.name;\r\n                    switch (provider) {\r\n                        case 'oData':\r\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\r\n                            break;\r\n                        case 'webApi':\r\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n\r\n            } else {\r\n                config = { name: 'local' };\r\n            }\r\n\r\n            defStoreConfig.initParam = config;\r\n            self._setTypeStoreConfig(type, name, defStoreConfig);\r\n\r\n            return type;\r\n        }\r\n    },\r\n    _setTypeStoreConfig: function(type, name, config){\r\n        if (!type.storeConfigs) {\r\n            type.storeConfigs = {\r\n                stores: {}\r\n            };\r\n        }\r\n        type.storeConfigs.stores[name] = config;\r\n        if (name === 'default') {\r\n            type.storeConfigs['default'] = name;\r\n        }\r\n    },\r\n\r\n    _findByIdQueryable: function (set, keys) {\r\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\r\n        if (keysProps.length > 1 && keys && 'object' === typeof keys) {\r\n            var predicate = \"\", thisArgs = {};\r\n            for (var i = 0; i < keysProps.length; i++) {\r\n                if (i > 0) predicate += \" && \";\r\n\r\n                var key = keysProps[i];\r\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\r\n                thisArgs[key.name] = keys[key.name];\r\n            }\r\n\r\n            return {\r\n                predicate: predicate,\r\n                thisArgs: thisArgs\r\n            };\r\n        } else if (keysProps.length === 1) {\r\n            return {\r\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\r\n                thisArgs: { value: keys }\r\n            };\r\n        } else {\r\n            throw 'invalid keys';\r\n        }\r\n    },\r\n    _getKeyObjectFromEntity: function (obj, entityType) {\r\n        var key;\r\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\r\n        if (keyDefs.length === 1)\r\n            key = obj && typeof obj === 'object' ? obj[keyDefs[0].name] : obj;\r\n        else {\r\n            key = {};\r\n\r\n            for (var i = 0; i < keyDefs.length; i++) {\r\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\r\n            }\r\n        }\r\n\r\n        return key;\r\n    },\r\n    _getSaveMode: function (entity, entitySet, hint, storeAlias) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n        var entityType = entity.getType();\r\n\r\n        switch (true) {\r\n            case hint === 'update':\r\n                callback.success('attach'); break;\r\n            case hint === 'new':\r\n                callback.success('add'); break;\r\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) { return entity[keyDef.name]; }):\r\n                callback.success('add'); break;\r\n            case !!entity.storeToken:\r\n                callback.success('attach'); break;\r\n                break;\r\n            default:\r\n                //use the current entity store informations\r\n                storeAlias = this._getStoreAlias(entity, storeAlias);\r\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias)\r\n                    .then(function () { callback.success('attach'); }, function () { callback.success('add'); });\r\n                break;\r\n        }\r\n\r\n        return promise.getPromise();\r\n    },\r\n\r\n    //EntityContext\r\n    ContextRegister: function (storageProviderCfg) {\r\n        //context instance\r\n        var self = this;\r\n        if (typeof storageProviderCfg.name === \"string\") {\r\n            storageProviderCfg.name = [storageProviderCfg.name];\r\n        }\r\n\r\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\r\n        this.storeToken = {\r\n            typeName: this.getType().fullName,\r\n            args: args,\r\n            factory: function () {\r\n                return new (self.getType())(args);\r\n            }\r\n        }\r\n\r\n        //set elementType storetoken\r\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < members.length; i++) {\r\n            var item = members[i];\r\n            if (item.type) {\r\n                var itemResolvedDataType = Container.resolveType(item.type);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    if (!elementType.storeToken) {\r\n                        elementType.storeToken = this.storeToken;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    QueryResultModifier: function (query) {\r\n        var self = $data.ItemStore;\r\n        var context = query.context;\r\n        var type = query.modelBinderConfig.$type;\r\n        if ('string' === typeof type) {\r\n            type = Container.resolveType(type);\r\n        }\r\n\r\n        if (type === $data.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\r\n            type = query.modelBinderConfig.$item.$type;\r\n        }\r\n\r\n        //TODO: runs when model binding missed (inmemory)\r\n        if ((typeof type === 'undefined' && query.result && query.result[0] instanceof $data.Entity)) {\r\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\r\n                return !!memDef.inverseProperty;\r\n            });\r\n\r\n            for (var i = 0; i < query.result.length; i++) {\r\n                self._setStoreAlias(query.result[i], context.storeToken);\r\n\r\n                for (var j = 0; j < navProps.length; j++) {\r\n                    var navProp = navProps[j];\r\n                    if (query.result[i][navProp.name] instanceof $data.Entity) {\r\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\r\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\r\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\r\n                            if (query.result[i][navProp.name][k] instanceof $data.Entity) {\r\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n$data.ItemStore = new $data.ItemStoreClass();\r\n\r\n$data.Entity.addMember('field', function (propName) {\r\n    var def = this.memberDefinitions.getMember(propName);\r\n    if (def) {\r\n        if (def.definedBy === this) {\r\n            return new $data.MemberWrapper(def);\r\n        } else {\r\n            Guard.raise(new Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\r\n        }\r\n    } else {\r\n        Guard.raise(new Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\r\n    }\r\n\r\n    return this;\r\n}, true);\r\n\r\n\r\n$data.Class.define('$data.MemberWrapper', null, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n    },\r\n    setKey: function (value) {\r\n        this.memberDefinition.key = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setComputed: function (value) {\r\n        this.memberDefinition.computed = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setRequired: function (value) {\r\n        this.memberDefinition.required = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setNullable: function (value) {\r\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    changeDefinition: function (attr, value) {\r\n        this.memberDefinition[attr] = value;\r\n        return this;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ModelBinder', null, null, {\r\n\r\n    constructor: function (context) {\r\n        this.context = context;\r\n        this.providerName = null;\r\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\r\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\r\n            this.providerName = this.context.storageProvider.providerName;\r\n            if (!this.providerName) {\r\n                for (var i in $data.RegisteredStorageProviders) {\r\n                    if ($data.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\r\n                        this.providerName = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    _deepExtend: function (o, r) {\r\n        if (o === null || o === undefined) {\r\n            return r;\r\n        }\r\n        for (var i in r) {\r\n            if (o.hasOwnProperty(i)) {\r\n                if (typeof r[i] === 'object') {\r\n                    if (Array.isArray(r[i])) {\r\n                        for (var j = 0; j < r[i].length; j++) {\r\n                            if (o[i].indexOf(r[i][j]) < 0) {\r\n                                o[i].push(r[i][j]);\r\n                            }\r\n                        }\r\n                    } else this._deepExtend(o[i], r[i]);\r\n                }\r\n            } else {\r\n                o[i] = r[i];\r\n            }\r\n        }\r\n        return this._finalize(o);\r\n    },\r\n\r\n    _finalize: function(o){\r\n        if (o instanceof $data.Entity) {\r\n            o.changedProperties = undefined;\r\n            o.storeToken = this.context.storeToken;\r\n        }\r\n        return o;\r\n    },\r\n\r\n    _buildSelector: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!(Array.isArray(meta.$selector))) {\r\n                meta.$selector = [meta.$selector];\r\n            }\r\n\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                var selector = meta.$selector[i].replace('json:', '');\r\n                context.src += 'if(';\r\n                var path = selector.split('.');\r\n                for (var j = 0; j < path.length; j++) {\r\n                    context.src += 'di[\"' + path.slice(0, j + 1).join('\"][\"') + '\"]' + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\r\n                }\r\n                context.src += '){di = di[\"' + path.join('\"][\"') + '\"];}' + (i < meta.$selector.length - 1 ? 'else ' : '');\r\n            }\r\n\r\n            context.src += 'if (di === null){';\r\n            if (context.iter) context.src += context.iter + ' = null;';\r\n            context.src += 'return null;';\r\n            context.src += '}';\r\n        }\r\n    },\r\n\r\n    _buildKey: function (name, type, keys, context, data) {\r\n        if (keys) {\r\n            var type = Container.resolveType(type);\r\n            var typeIndex = Container.getIndex(type);\r\n            type = type.fullName || type.name;\r\n            context.src += 'var ' + name + 'Fn = function(di){';\r\n            if (!(Array.isArray(keys)) || keys.length == 1) {\r\n                if (typeof keys !== 'string') keys = keys[0];\r\n                context.src += 'if (typeof di[\"' + keys + '\"] === \"undefined\") return undefined;';\r\n                context.src += 'if (di[\"' + keys + '\"] === null) return null;';\r\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di[\"' + keys + '\"]);';\r\n            } else {\r\n                context.src += 'var key = \"\";';\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var id = typeof keys[i] !== 'object' ? keys[i] : keys[i].$source;\r\n                    context.src += 'if (typeof di[\"' + id + '\"] === \"undefined\") return undefined;';\r\n                    context.src += 'if (di[\"' + id + '\"] === null) return null;';\r\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di[\"' + id + '\"]);';\r\n                }\r\n            }\r\n\r\n            context.src += 'return key;};';\r\n        }\r\n\r\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\r\n    },\r\n\r\n    build: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!Array.isArray(meta.$selector)) meta.$selector = [meta.$selector];\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\r\n            }\r\n        }\r\n\r\n        if (meta.$value) {\r\n            if (typeof meta.$value === 'function') {\r\n                context.src += 'var di = di || data;';\r\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\r\n                if (meta.$type) {\r\n                    var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                    var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                    if (converter) {\r\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\r\n                    } else {\r\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\r\n                    }\r\n                } else context.item = 'fn()';\r\n            } else if (meta.$type) {\r\n                var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\r\n                } else {\r\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\r\n                }\r\n            } else context.item = meta.$value;\r\n        } else if (meta.$source) {\r\n            var type = Container.resolveName(Container.resolveType(meta.$type));\r\n            var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (!context.forEach) context.src += 'var di = data;';\r\n            context.item = item;\r\n            this._buildSelector(meta, context);\r\n            if (converter) {\r\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta.$source + '\"]);';\r\n            } else {\r\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta.$source + '\"]);';\r\n            }\r\n            context.src += 'var ' + item + '_inheritance;';\r\n        } else if (meta.$item) {\r\n            context.meta.push('$item');\r\n            var iter = context.item && context.current ? context.item + '.' + context.current : context.item ? context.item : 'result';\r\n            context.iter = iter;\r\n            if (iter.indexOf('.') < 0){\r\n                context.src += 'var ' + iter + ';';\r\n                context.src += 'var ' + iter + '_inheritance;';\r\n            }\r\n            context.src += 'var fn = function(di){';\r\n            if (meta.$selector) {\r\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\r\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\r\n            if (this.references && meta.$item.$keys) {\r\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\r\n                context.src += 'var ' + keycacheName + ';';\r\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\r\n                context.src += 'if (kci < 0){';\r\n                context.src += keycacheName + ' = [];';\r\n                context.src += 'keycache.push(' + keycacheName + ');';\r\n                context.src += 'keycacheIter.push(' + iter + ');';\r\n                context.src += '}else{';\r\n                context.src += keycacheName + ' = keycache[kci];';\r\n                context.src += '}';\r\n            }\r\n            context.iter = undefined;\r\n            context.forEach = true;\r\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\r\n            context.src += 'var forEachFn = function(di, i){';\r\n            context.src += 'var diBackup = di;';\r\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\r\n            var item = context.item || 'iter';\r\n            context.item = item;\r\n            if (!meta.$item.$source) {\r\n                this._buildSelector(meta.$item, context);\r\n            }\r\n            this.build(meta.$item, context);\r\n            if (this.references && meta.$keys) {\r\n                context.src += 'if (forKey){';\r\n                context.src += 'if (cache[forKey]){';\r\n                context.src += iter + ' = cache[forKey];';\r\n                context.src += 'if (' + iter + '.indexOf(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ') < 0){';\r\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                context.src += 'cache[forKey] = ' + iter + ';';\r\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\r\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\r\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\r\n                context.src += '}';\r\n                context.src += '}else{';\r\n                context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                context.src += '}';\r\n                context.src += '}';\r\n                context.src += '}';\r\n            } else {\r\n                if (this.references && meta.$item.$keys) {\r\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\r\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\r\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\r\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');';\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                    context.src += '}';\r\n                } else {\r\n                    context.src += iter + '.push(' /*+ (context.item || item) + '_inheritance || '*/ + (context.item || item) + ');';\r\n                }\r\n            }\r\n            context.src += '};';\r\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\r\n            context.src += 'else forEachFn(di, 0);';\r\n            context.forEach = false;\r\n            context.item = null;\r\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);';\r\n            context.meta.pop();\r\n        } else if (meta.$type) {\r\n            if (!context.forEach) {\r\n                context.src += 'if (typeof di === \"undefined\"){';\r\n                context.src += 'var di = data;';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            var resolvedType = Container.resolveType(meta.$type);\r\n            var type = Container.resolveName(resolvedType);\r\n            var typeIndex = Container.getIndex(resolvedType);\r\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo($data.Entity);\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (context.item == item) item += 'new_';\r\n            context.item = item;\r\n\r\n            var isPrimitive = false;\r\n            if (!meta.$source && !meta.$value && resolvedType !== $data.Array && resolvedType !== $data.Object && !resolvedType.isAssignableTo) isPrimitive = true;\r\n            if (resolvedType === $data.Object || resolvedType === $data.Array) {\r\n                var keys = Object.keys(meta);\r\n                if (keys.length == 1 || keys.length == 2 && meta.$selector) isPrimitive = true;\r\n            }\r\n\r\n            if (isPrimitive) {\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\r\n                } else {\r\n                    context.src += 'var ' + item + ' = di;';\r\n                }\r\n                context.src += 'var ' + item + '_inheritance;';\r\n            } else {\r\n                if (this.references && meta.$keys) {\r\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\r\n                    context.src += 'if (itemKey === null) return null;';\r\n                    context.src += 'var ' + item + ';';\r\n                    context.src += 'var ' + item + '_inheritance;';\r\n                    context.src += 'if (itemKey && cache[itemKey]){';\r\n                    context.src += item + ' = cache[itemKey];';\r\n                    context.src += '}else{';\r\n                    if (resolvedType.inheritedTo){\r\n                        context.src += 'if (di && di[\"@odata.type\"]){';\r\n                        context.src += 'var odataTypeName = di[\"@odata.type\"].split(\"#\")[1];';\r\n                        context.src += 'var odataType = Container.resolveType(odataTypeName);';\r\n                        context.src += 'if (odataType){';\r\n                        context.src += item + '_inheritance = new odataType(undefined, { setDefaultValues: false });';//di);';\r\n                        context.src += '}';\r\n                        context.src += '}else{';\r\n                    }\r\n                    if (isEntityType) {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                    if (resolvedType.inheritedTo){ context.src += '}'; }\r\n                    context.src += 'if (itemKey){';\r\n                    context.src += 'cache[itemKey] = ' + item + ' || ' + item + '_inheritance;';\r\n                    context.src += '}';\r\n                    context.src += '}';\r\n                } else {\r\n                    var isEnum = resolvedType.isAssignableTo && resolvedType.isAssignableTo($data.Enum);\r\n                    context.src += 'var ' + item + ';';\r\n                    context.src += 'var ' + item + '_inheritance;';\r\n                    if (resolvedType.inheritedTo){\r\n                        context.src += 'if (di[\"' + context.current + '\"] && di[\"' + context.current + '\"][\"@odata.type\"]){';\r\n                        context.src += 'var odataType = Container.resolveType(di[\"' + context.current + '\"][\"@odata.type\"].split(\"#\")[1]);';\r\n                        context.src += 'if (odataType){';\r\n                        context.src += item + '_inheritance = new odataType(undefined, { setDefaultValues: false });';/*di[\"' + context.current + '\"])';*/\r\n                        context.src += '}';\r\n                        context.src += '}else{';\r\n                    }\r\n                    if (isEntityType) {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else if (isEnum) {\r\n                        context.src += item + ' = Container.resolveByIndex(' + typeIndex + ')[di[\"' + context.current + '\"]];';\r\n                    } else {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                    if (resolvedType.inheritedTo){ context.src += '}'; }\r\n                }\r\n            }\r\n            var openTypeProperty = null;\r\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType) {\r\n                openTypeProperty = resolvedType.openType === true ? $data.defaults.openTypeDefaultPropertyName : resolvedType.openType;\r\n                context.src += item + '.' + openTypeProperty + ' = {};';\r\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function (prop) {\r\n                    return '\"' + prop + '\"';\r\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\r\n            }\r\n            context.src += 'var ' + context.item + '_type;';\r\n            context.src += 'var ' + context.item + '_memberDefinitionNames;';\r\n            context.src += 'if (' + context.item + '_inheritance){';\r\n            context.src += context.item + ' = ' + context.item + '_inheritance;';\r\n            context.src += 'if (typeof ' + context.item + '.getType == \"function\"){';\r\n            context.src += context.item + '_type = ' + context.item + '.getType();';\r\n            context.src += context.item + '_memberDefinitionNames = ' + context.item + '_type' +\r\n                '.memberDefinitions.getPublicMappedProperties()' +\r\n                '.filter(function(it){ return it.definedBy == ' + context.item + '_type || it.definedBy == ' + context.item + '_type.inheritsFrom; })' +\r\n                '.map(function(it){ return it.name; });';\r\n            context.src += '}';\r\n            context.src += '}';\r\n            for (var i in meta) {\r\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\r\n                    context.src += 'if (!' + context.item + '_memberDefinitionNames || (' + context.item + '_memberDefinitionNames && ' + context.item + '_memberDefinitionNames.indexOf(\"' + i + '\") >= 0)){';\r\n                    context.current = i;\r\n                    if (!meta[i].$item) {\r\n                        if (meta[i].$value) {\r\n                            context.meta.push(i);\r\n                            var item = context.item;\r\n                            this.build(meta[i], context);\r\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta[i].$source) {\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            if (meta[i].$type) {\r\n                                var type = Container.resolveName(Container.resolveType(meta[i].$type));\r\n                                var typeIndex = Container.getIndex(Container.resolveType(meta[i].$type));\r\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                                if (converter) {\r\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i].$source + '\"]);';\r\n                                } else {\r\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i].$source + '\"]);';\r\n                                }\r\n                            } else {\r\n                                context.src += item + '.' + i + ' = di[\"' + meta[i].$source + '\"];';\r\n                            }\r\n                            context.src += '};';\r\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';else context.src += 'fn(di);';\r\n                        } else if (meta[i].$type) {\r\n                            context.meta.push(i);\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            this.build(meta[i], context);\r\n                            context.src += 'return ' + context.item + ';};';\r\n                            if (meta[i].$type === $data.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';else context.src += item + '.' + i + ' = fn(di);';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta.$type) {\r\n                            var memDef = Container.resolveType(meta.$type).memberDefinitions.getMember(i);\r\n                            var type = Container.resolveName(memDef.type);\r\n                            var entityType = Container.resolveType(meta.$type);\r\n                            var entityTypeIndex = Container.getIndex(meta.$type);\r\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                            if (entityType.inheritedTo){\r\n                                context.src += 'if (di[\"' + meta[i] + '\"] && di[\"' + meta[i] + '\"][\"@odata.type\"]){';\r\n                                context.src += 'var odataType = Container.resolveType(di[\"' + meta[i] + '\"][\"@odata.type\"].split(\"#\")[1]);';\r\n                                context.src += 'if (odataType){';\r\n                                context.src += item + '.' + i + ' = new odataType(undefined, { setDefaultValues: false });';//di[\"' + meta[i] + '\"])';\r\n                                context.src += '}';\r\n                                context.src += '}else{';\r\n                            }\r\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\r\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di[\"' + meta[i] + '\"], Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\r\n                            } else if (converter) {\r\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i] + '\"]);';\r\n                            } else {\r\n                                var typeIndex = Container.getIndex(Container.resolveType(type.memberDefinitions.getMember(i).type));\r\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i] + '\"]);';\r\n                            }\r\n                            if (entityType.inheritedTo){ context.src += '}'; }\r\n                        }\r\n                    } else {\r\n                        context.meta.push(i);\r\n                        this.build(meta[i], context);\r\n                        context.item = item;\r\n                        context.meta.pop();\r\n                    }\r\n                    context.src += '}';\r\n                }\r\n            }\r\n            context.src += item + ' = self._finalize(' + /*item + '_inheritance' + ' || ' +*/ item + ');';\r\n        }\r\n    },\r\n\r\n    call: function (data, meta) {\r\n        if (!Object.getOwnPropertyNames(meta).length) {\r\n            return data;\r\n        }\r\n        var context = {\r\n            src: '',\r\n            meta: []\r\n        };\r\n        context.src += 'var self = this;';\r\n        context.src += 'var result;';\r\n        context.src += 'var cache = {};';\r\n        context.src += 'var keycache = [];';\r\n        context.src += 'var keycacheIter = [];';\r\n        this.build(meta, context);\r\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\r\n        context.src += 'return result;';\r\n\r\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\r\n        var ret = fn(meta, data, Container);\r\n        return ret;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollector', $data.Notifications.ChangeCollectorBase, null, {\r\n    buildData: function (entities) {\r\n        var result = [];\r\n        entities.forEach(function (element) {\r\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\r\n            var enumerableMemDefCollection = [];\r\n\r\n            switch (element.data.entityState) {\r\n                case $data.EntityState.Added:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    enumerableMemDefCollection = element.data.changedProperties;\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            enumerableMemDefCollection.forEach(function (memDef) {\r\n                resObj[memDef.name] = element.data[memDef.name];\r\n            });\r\n\r\n            result.push(resObj);\r\n        });\r\n\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\r\n    buildData: function (entityContextData) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    processChangedData: function (entityData) {\r\n        if (this.Distrbutor && this.Distrbutor.distributeData)\r\n            this.Distrbutor.distributeData(this.buildData(entityData));\r\n    },\r\n    Distrbutor: { enumerable: false, dataType: $data.Notifications.ChangeDistributorBase, storeOnObject: true }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributor', $data.Notifications.ChangeDistributorBase, null, {\r\n    constructor: function (broadcastUrl) {\r\n        this.broadcastUrl = broadcastUrl;\r\n    },\r\n    distributeData: function (data) {\r\n        $data.ajax({\r\n            url: this.broadcastUrl,\r\n            type: \"POST\",\r\n            data: 'data=' + JSON.stringify(data),\r\n            succes: this.success,\r\n            error: this.error\r\n        });\r\n    },\r\n    broadcastUrl: { dataType: \"string\" },\r\n    success: function () { },\r\n    error: function () { }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\r\n    distributeData: function (collectorData) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.Query', null, null,\r\n{\r\n    constructor: function (expression, defaultType, context) {\r\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\r\n\r\n        this.expression = expression;\r\n        this.context = context;\r\n\r\n        //TODO: expressions get as JSON string?!\r\n\r\n        this.expressions = expression;\r\n        this.defaultType = defaultType;\r\n        this.result = [];\r\n        this.rawDataList = [];\r\n        this.modelBinderConfig = {};\r\n        this.context = context;\r\n    },\r\n\r\n    rawDataList: { dataType: \"Array\" },\r\n    result: { dataType: \"Array\" },\r\n    resultType: {},\r\n    buildResultSet: function (ctx) {\r\n        var converter = new $data.ModelBinder(this.context);\r\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\r\n        return;\r\n    },\r\n    getEntitySets: function(){\r\n        var ret = [];\r\n        var ctx = this.context;\r\n\r\n        var fn = function(expression){\r\n            if (expression instanceof $data.Expressions.EntitySetExpression){\r\n                if (ctx._entitySetReferences[expression.elementType.name] && ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0)\r\n                    ret.push(ctx._entitySetReferences[expression.elementType.name]);\r\n            }\r\n            if (expression.source) fn(expression.source);\r\n            if (expression.members) {\r\n                for (var i = 0; i < expression.members.length; i++) {\r\n                    fn(expression.members[i].expression);\r\n                }\r\n            }\r\n        };\r\n\r\n        fn(this.expression);\r\n\r\n        return ret;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.queryBuilder', null, null, {\r\n    constructor: function () {\r\n        this._fragments = {};\r\n        this.selectedFragment = null;\r\n        this._binderConfig = {};\r\n        this.modelBinderConfig = this._binderConfig;\r\n        this._binderConfigPropertyStack = [];\r\n    },\r\n    selectTextPart: function (name) {\r\n        if (!this._fragments[name]) {\r\n            this._fragments[name] = { text: '', params: [] };\r\n        }\r\n        this.selectedFragment = this._fragments[name];\r\n    },\r\n    getTextPart: function (name) {\r\n        return this._fragments[name];\r\n    },\r\n    addText: function (textParticle) {\r\n        this.selectedFragment.text += textParticle;\r\n    },\r\n    addParameter: function (param) {\r\n        this.selectedFragment.params.push(param);\r\n    },\r\n    selectModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\r\n        if (!(name in this.modelBinderConfig)) {\r\n            this.modelBinderConfig[name] = {};\r\n        }\r\n        this.modelBinderConfig = this.modelBinderConfig[name];\r\n    },\r\n    popModelBinderProperty: function () {\r\n        if (this._binderConfigPropertyStack.length === 0) {\r\n            this.modelBinderConfig = this._binderConfig();\r\n        } else {\r\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\r\n        }\r\n    },\r\n    resetModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack = [];\r\n        this.modelBinderConfig = this._binderConfig;\r\n    },\r\n    addKeyField: function (name) {\r\n        if(!this.modelBinderConfig['$keys']){\r\n            this.modelBinderConfig['$keys'] = new Array();\r\n        }\r\n        this.modelBinderConfig['$keys'].push(name);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.QueryProvider', null, null,\r\n{\r\n    //TODO: instance member?????\r\n    constructor: function () { this.requiresExpressions= false },\r\n    executeQuery: function (queryable, resultHandler) {\r\n    },\r\n    getTraceString: function (queryable) {\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Queryable', null, null,\r\n{\r\n    constructor: function (source, rootExpression) {\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n\r\n        var context = source instanceof $data.EntityContext ? source : source.entityContext;\r\n        this.defaultType = source instanceof $data.EntityContext ? null : source.defaultType;\r\n        this.entityContext = context;\r\n        this.expression = rootExpression;\r\n    },\r\n\r\n    filter: function (predicate, thisArg) {\r\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\r\n        ///<param name=\"predicate\" type=\"string\">\r\n        ///The expression body of the predicate function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: filter(\"it.Title == 'Hello'\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function and parameters&#10;\r\n        ///var draftables = Persons.filter( function( person ) {\r\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\r\n        /// }, { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\r\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\r\n        /// { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///</signature>\r\n        if (arguments.length === 3) {\r\n            predicate = \"it.\" + arguments[0] +\r\n                (arguments[1][0] === \".\" ? (arguments[1] + \"(param)\") : (\" \" + arguments[1] + \" param\"));\r\n            thisArg = { param : arguments[2] }\r\n        }\r\n        this._checkOperation('filter');\r\n        var expression = Container.createCodeExpression(predicate, thisArg);\r\n        var expressionSource = this.expression;\r\n        if (this.expression instanceof $data.Expressions.FilterExpression) {\r\n            expressionSource = this.expression.source;\r\n\r\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\r\n            expression = Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\r\n        }\r\n        var exp = Container.createFilterExpression(expressionSource, expression);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    where: function (predicate, params) {\r\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.filter(predicate, params);\r\n    },\r\n\r\n    map: function (projection, thisArg, mappedTo) {\r\n\t\t///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\r\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"string\">\r\n        ///\t\t\tThe expression body of the projection function in string. &#10;\r\n\t\t///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\r\n\t\t///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"Function\">\r\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///\t\t\tContains the projection parameters.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\r\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\r\n        ///\t\t\tvar custom = Persons.map( function( person ) {\r\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('map');\r\n        var codeExpression = Container.createCodeExpression(projection, thisArg);\r\n        var exp = Container.createProjectionExpression(this.expression, codeExpression);\r\n\r\n        if (mappedTo === 'default')\r\n            exp.projectionAs = this.defaultType;\r\n        else if (mappedTo)\r\n            exp.projectionAs = Container.resolveType(mappedTo);\r\n        else\r\n            exp.projectionAs = $data.Object;\r\n\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    select: function (projection, thisArg, mappedTo) {\r\n\t\t///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.map(projection, thisArg, mappedTo);\r\n    },\r\n\r\n    length: function (onResult, transaction) {\r\n\t\t///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet the count of Person entities. &#10;\r\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('length');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var countExpression = Container.createCountExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(countExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\tcount: function (onResult, transaction) {\r\n\t\t///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\r\n\t\t///<returns type=\"$data.Integer\" />\r\n\t    return this.length(onResult, transaction);\r\n    },\r\n\r\n\tforEach: function (iterator, transaction) {\r\n\t\t///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t\t<param name=\"iterator\" type=\"Function\">\r\n        ///\t\t\tIterator function to handle the result elements.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('forEach');\r\n        var pHandler = new $data.PromiseHandler();\r\n        function iteratorFunc(items) { items.forEach(iterator); }\r\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\r\n\r\n        var forEachExpression = Container.createForEachExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(forEachExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\ttoArray: function (onResult_items, transaction) {\r\n\t\t///\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet all Person entities. &#10;\r\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        if (onResult_items instanceof $data.Array)\r\n        {\r\n            return this.toArray(function (results) {\r\n                onResult_items.length = 0;\r\n                results.forEach(function (item, idx) {\r\n                    onResult_items.push(item);\r\n                });\r\n            });\r\n        }\r\n\r\n        this._checkOperation('toArray');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var toArrayExpression = Container.createToArrayExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(toArrayExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n\t},\r\n\ttoLiveArray: function (onResult, transaction) {\r\n\t    var self = this;\r\n\t    var result = [];\r\n\r\n\t    var doAction = function (action) {\r\n\t        return function (onResult) {\r\n\t            var pHandler = new $data.PromiseHandler();\r\n\t            var callback = pHandler.createCallback(onResult);\r\n\r\n\t            var successFunc = function (res) {\r\n\t                result.length = 0;\r\n\r\n\t                var data = res;\r\n\t                $data.typeSystem.extend(result, data);\r\n\r\n\t                result.prev = doAction(function (cb) {\r\n\t                    data.prev(cb);\r\n\t                });\r\n\t                result.next = doAction(function (cb) {\r\n\t                    data.next(cb);\r\n\t                });\r\n\r\n\t                callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\r\n\t            }\r\n\r\n\t            action({\r\n\t                success: successFunc,\r\n\t                error: callback.error\r\n\t            }, transaction);\r\n\r\n\t            var promise = pHandler.getPromise();\r\n\t            $data.typeSystem.extend(result, promise);\r\n\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    result.refresh = doAction(function (cb) {\r\n\t        self.toArray(cb);\r\n\t    });\r\n\r\n\t    return result.refresh.apply(result, arguments);\r\n\t},\r\n\r\n\tsingle: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n\t\t///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n\t\t///\t\t\t\terror: function () { ... }\r\n\t\t///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('single');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(2);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var singleExpression = Container.createSingleExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(singleExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tsome: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///         Is there any person who's first name is \"George\"? &#10;\r\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('some');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var someExpression = Container.createSomeExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(someExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tevery: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tResult is true when all person are married. &#10;\r\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('every');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var everyExpression = Container.createEveryExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(everyExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    take: function (amount) {\r\n\t\t///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('take');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Take);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n    skip: function (amount) {\r\n\t\t///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('skip');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n\r\n    order: function(selector) {\r\n       if (selector === '' || selector === undefined || selector === null) {\r\n           return this;\r\n       }\r\n       if(selector[0] === \"-\") {\r\n           var orderString = \"it.\" + selector.replace(\"-\",\"\");\r\n           return this.orderByDescending(orderString);\r\n       } else {\r\n           return this.orderBy(\"it.\" + selector);\r\n       }\r\n\r\n    },\r\n\r\n    orderBy: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderBy');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderBy);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    orderByDescending: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderByDescending');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderByDescending);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n\r\n    first: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('first');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var firstExpression = Container.createFirstExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(firstExpression);\r\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    find: function (keyValue, onResult, transaction) {\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\r\n\r\n        try {\r\n\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n\r\n\r\n                var parameters = [];\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var keyProp = keys[i];\r\n                    if (!(keyProp.name in keyValue)) {\r\n                        throw new Exception('Key value missing');\r\n                    }\r\n                    parameters.push(Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\r\n                }\r\n\r\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\r\n                if (operation) {\r\n\r\n                    var findExpression = Container.createFindExpression(this.expression, parameters);\r\n                    var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n                    try {\r\n                        var expression = preparator.Visit(findExpression);\r\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                        this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                } else {\r\n                    var predicate = '';\r\n                    var params = {}\r\n                    for (var i = 0; i < parameters.length; i++) {\r\n                        var param = parameters[i];\r\n                        params[param.name] = param.value;\r\n                        if (i > 0) predicate += ' && ';\r\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\r\n                    }\r\n\r\n                    this.single(predicate, params, cbWrapper, transaction);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    include: function (selector) {\r\n\t\t///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\r\n        ///\t\t\tThe name of the entity set you want to include in the query.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tInclude the Category on every Article. &#10;\r\n        ///\t\t\tArticles.include(\"Category\");\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n        \r\n        if(this.entityContext && this.entityContext.storageProvider && this.entityContext.storageProvider.name === \"oData\"){\r\n            return this.include2.apply(this, arguments);\r\n        }\r\n\r\n        this._checkOperation('include');\r\n        var constExp = Container.createConstantExpression(selector, \"string\");\r\n        var takeExp = Container.createIncludeExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n    include2: function (selector, thisArg) {\r\n\t\t///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\r\n        ///\t\t\tThe name of the entity set you want to include in the query.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tInclude the Category on every Article. &#10;\r\n        ///\t\t\tArticles.include(\"Category\");\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('include');\r\n        if(typeof selector === 'string' && (selector.length < 3 || selector.substr(0, 3) !== 'it.') && !/^[^\\.]*(=>)/.test(selector)){\r\n            selector = 'it.' + selector;\r\n        }\r\n        var expression = Container.createCodeExpression(selector, thisArg);\r\n        var includeExp = Container.createIncludeExpression(this.expression, expression);\r\n        \r\n        return Container.createQueryable(this, includeExp);\r\n    },\r\n\r\n    withInlineCount: function (selector) {\r\n        this._checkOperation('withInlineCount');\r\n        var constExp = Container.createConstantExpression(selector || 'allpages', \"string\");\r\n        var inlineCountExp = Container.createInlineCountExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, inlineCountExp);\r\n    },\r\n    withCount: function (selector) {\r\n        return this.withInlineCount(selector);\r\n    },\r\n\r\n    removeAll: function (onResult, transaction) {\r\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\r\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('batchDelete');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var batchDeleteExpression = Container.createBatchDeleteExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(batchDeleteExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    _runQuery: function (onResult_items, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(this.expression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    toTraceString: function (name) {\r\n\t\t///\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\r\n        ///\t<returns type=\"$data.String\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t\t<param name=\"name\" type=\"$data.String\">\r\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.String\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tGet the trace string for Articles.toArray() &#10;\r\n        ///\t\t\tArticles.toTraceString();\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        var expression = this.expression;\r\n\r\n        if (name) {\r\n            expression = Container['create' + name + 'Expression'](expression);\r\n        } else {\r\n            expression = Container.createToArrayExpression(expression);\r\n        }\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        expression = preparator.Visit(expression);\r\n\r\n        //this.expression = expression;\r\n        var q = Container.createQueryable(this, expression)\r\n        return q.entityContext.getTraceString(q);\r\n    },\r\n\r\n    _checkOperation: function (name) {\r\n        var operation = this.entityContext.resolveSetOperations(name);\r\n        if (operation.invokable != undefined && !operation.invokable)\r\n            Guard.raise(new Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\r\n    },\r\n    defaultType: {}\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.RelatedEntityProxy\", null, null, {\r\n    constructor: function (entityKeyObject, navigationProperty, type, parent, context) {\r\n        this._entityKeyObject = entityKeyObject;\r\n        this._navigationProperty = navigationProperty;\r\n        this._type = type;\r\n        this._parent = parent;\r\n        this._context = context;\r\n    },\r\n    _entityKeyObject: { type: $data.Object },\r\n    _ctxFactory: {},\r\n    _type: {},\r\n    _navigationProperty: { type: $data.String },\r\n    _parent: { type: '$data.RelatedEntityProxy' },\r\n    _context: { type: '$data.EntityContext' },\r\n\r\n    _getContext: function(proxyChains){\r\n        proxyChains = proxyChains || this._chainToArray();\r\n        var firstProxy = proxyChains[0];\r\n        var context = firstProxy._context;\r\n        if (!context) {\r\n            var storeToken = firstProxy._parent instanceof $data.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\r\n            if (storeToken && typeof storeToken.factory === 'function') {\r\n                context = storeToken.factory();\r\n            }\r\n        }\r\n\r\n        if (!context) throw new Exception('ContextNotExists');\r\n        return context;\r\n    },\r\n    _createQueryable: function(){\r\n        var proxyChains = this._chainToArray();\r\n        var firstProxy = proxyChains[0];\r\n        var context = this._getContext(proxyChains);\r\n\r\n        var entitySet = null;\r\n        var expression = null;\r\n        if (firstProxy._parent instanceof $data.Entity) {\r\n            entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\r\n\r\n            var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\r\n            proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\r\n        } else {\r\n            entitySet = context.getEntitySetFromElementType(firstProxy._type);\r\n        }\r\n\r\n        expression = entitySet.expression;\r\n        var returnType = null;\r\n\r\n        for (var i = 0; i < proxyChains.length; i++) {\r\n            var item = proxyChains[i];\r\n            var keys = item._type.memberDefinitions.getKeyProperties();\r\n\r\n            var parameters = [];\r\n            var missingKeyCount = 0;\r\n            for (var j = 0; j < keys.length; j++) {\r\n                var keyProp = keys[j];\r\n                if (!(keyProp.name in item._entityKeyObject) || typeof item._entityKeyObject[keyProp.name] == 'undefined') {\r\n                    missingKeyCount++;\r\n                }else parameters.push(Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\r\n            }\r\n            if (missingKeyCount > 0 && missingKeyCount < keys.length){\r\n                throw new Exception('Key value missing');\r\n            }\r\n\r\n            var member = undefined;\r\n            if (item._navigationProperty) {\r\n                member = Container.createMemberInfoExpression(item._navigationProperty);\r\n                returnType = item._navigationProperty.elementType;\r\n            }\r\n            if (missingKeyCount == 0){\r\n                expression = Container.createFindExpression(expression, parameters, member);\r\n                this._lastEntityKeys = item._entityKeyObject;\r\n            }else{\r\n                expression = Container.createEntitySetExpression(expression, member, null, context.getEntitySetFromElementType(returnType));\r\n                expression = Container.createToArrayExpression(expression);\r\n                this._lastEntityKeys = null;\r\n            }\r\n        }\r\n\r\n        var preparator = Container.createQueryExpressionCreator(context);\r\n        expression = preparator.Visit(expression);\r\n        //context.log({ event: \"EntityExpression\", data: expression });\r\n\r\n        var queryable = Container.createQueryable(entitySet, expression);\r\n        queryable.defaultType = returnType || queryable.defaultType;\r\n\r\n        return queryable;\r\n    },\r\n    _save: function(entity, method, onResult){\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n        \r\n        try {\r\n            var queryable = this._createQueryable();\r\n            var context = queryable.entityContext;\r\n            var returnType = queryable.defaultType;\r\n            if (entity instanceof $data.Entity){\r\n                queryable.defaultType = returnType = entity.getType();\r\n            }\r\n            var odataContext = queryable.toTraceString().queryText;\r\n\r\n            var originalEntity = entity;\r\n            var originalInitData = entity.initData || entity;\r\n            entity = new returnType();\r\n            entity[\"@odata.context\"] = odataContext;\r\n            if (entity.getType().inheritsFrom != $data.Entity){\r\n                entity[\"@odata.type\"] = '#' + returnType.fullName;\r\n            }\r\n            /*if (this._lastEntityKeys){\r\n                for (var key in this._lastEntityKeys){\r\n                    entity[key] = this._lastEntityKeys[key];\r\n                }\r\n            }*/\r\n            //console.log(entity);\r\n\r\n            if (method == 'update'){\r\n                context.attach(entity);\r\n                for (var prop in originalInitData){\r\n                    entity[prop] = originalInitData[prop];\r\n                }\r\n            }else if (method == 'create'){\r\n                /*for (var prop in originalEntity){\r\n                    entity[prop] = originalEntity[prop];\r\n                }*/\r\n                context.add(originalEntity);\r\n            }else if (method == 'delete'){\r\n                context.remove(entity);\r\n            }\r\n            context.saveChanges(cbWrapper);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    create: function(entity, onResult){\r\n        return this._save(entity, 'create', onResult);\r\n    },\r\n    read: function read(onResult) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        try {\r\n            this._getContext().executeQuery(this._createQueryable(), cbWrapper);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n        \r\n        return pHandler.getPromise();\r\n    },\r\n    update: function(entity, onResult){\r\n        this._save(entity, 'update', onResult);\r\n    },\r\n    delete: function(entity, onResult){\r\n        if (typeof entity == 'function') onResult = entity;\r\n        return this._save({}, 'delete', onResult);\r\n    },\r\n    _chainToArray: function (result) {\r\n        result = result || [];\r\n        if (this._parent instanceof $data.RelatedEntityProxy) {\r\n            this._parent._chainToArray(result);\r\n        }\r\n        \r\n        result.push(this);\r\n        return result;\r\n    }\r\n}, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ServiceOperation', null, null, {}, {\r\n    translateDefinition: function (propertyDef, name, definedBy) {\r\n        propertyDef.serviceName = name;\r\n        var memDef = new $data.MemberDefinition(this.generateServiceOperation(propertyDef), this);\r\n        memDef.name = name;\r\n        return memDef;\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n                var memberdef;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity || this instanceof $data.EntitySet) {\r\n                    var entitySet;\r\n                    if (this instanceof $data.Entity) {\r\n                        if (this.context) {\r\n                            context = this.context;\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\r\n                            context = this.storeToken.factory();\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else {\r\n                            Guard.raise(new Exception(\"entity can't resolve context\", 'Not Found!', this));\r\n                            return;\r\n                        }\r\n                    } else if (this instanceof $data.EntitySet) {\r\n                        context = this.entityContext;\r\n                        entitySet = this;\r\n\r\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\r\n                        memberdef = $data.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\r\n                    }\r\n\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: entitySet\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    //object as parameter\r\n                    //FIX: object type parameters with the same property name as the name of the first parameter\r\n                    if (arguments[0] && typeof arguments[0] === 'object' && arguments[0].constructor === $data.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\r\n                        var argObj = arguments[0];\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\r\n                                paramConstExpression.push(Container.createConstantExpression(argObj[paramConfig.name], Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\r\n                            }\r\n                        }\r\n                    }\r\n                    //arg params\r\n                    else {\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            if (typeof arguments[i] == 'function') break;\r\n\r\n                            //TODO: check params type\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\r\n                                paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                if (!memberdef) {\r\n                    if (boundItem && boundItem.data) {\r\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\r\n                    } else {\r\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\r\n                    }\r\n                }\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (!(typeof clb === 'function' || (typeof clb === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function')))) {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = cfg.params || [];\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceAction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'POST'; //default Action method is POST\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceFunction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'GET'; //default Function method is GET\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.storageProviders = {\r\n    DbCreationType: {\r\n        Merge: 10,\r\n        DropTableIfChanged: 20,\r\n        DropTableIfChange: 20,\r\n        DropAllExistingTables: 30,\r\n        ErrorIfChange: 40,\r\n        DropDbIfChange: 50\r\n    }\r\n}\r\n\r\n$data.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\r\n$data.Class.define('$data.StorageProviderBase', null, null,\r\n{\r\n    constructor: function (schemaConfiguration, context) {\r\n        this.providerConfiguration = schemaConfiguration || {};\r\n\r\n        this.name = this.getType().name;\r\n        if ($data.RegisteredStorageProviders) {\r\n            var keys = Object.keys($data.RegisteredStorageProviders);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                if (this instanceof $data.RegisteredStorageProviders[keys[i]]) {\r\n                    this.name = keys[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    providers: {},\r\n    supportedDataTypes: { value: [], writable: false },\r\n    initializeStore: function (callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n\r\n    executeQuery: function (queryable, callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    loadRawData: function (tableName, callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        callBack.error(new Exception('loadRawData is not supported', 'Invalid Operation'));\r\n    },\r\n\r\n    buildIndependentBlocks: function (changedItems) {\r\n        /// <summary>\r\n        /// Build and processes a dependency graph from the changed items,\r\n        /// and generates blocks that can be inserted to the database sequentially.\r\n        /// </summary>\r\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\r\n        var edgesTo = [];\r\n        var edgesFrom = [];\r\n\r\n        function hasOwnProperty(obj) {\r\n            /// <summary>\r\n            /// Returns true if object has own property (used for 'hashset'-like objects)\r\n            /// </summary>\r\n            /// <param name=\"obj\">Target object</param>\r\n            /// <returns>True if the object has own property</returns>\r\n            for (var p in obj) {\r\n                if (obj.hasOwnProperty(p))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\r\n        for (var i = 0; i < changedItems.length; i++) {\r\n            var current = changedItems[i];\r\n            if (!current.dependentOn || current.dependentOn.length == 0) {\r\n                // This item is independent\r\n                continue;\r\n            }\r\n\r\n            var to = null;\r\n            // Iterating over items 'current' depends on\r\n            for (var j = 0; j < current.dependentOn.length; j++) {\r\n                var currentDependency = current.dependentOn[j];\r\n                if (currentDependency.entityState == $data.EntityState.Unchanged) {\r\n                    continue;\r\n                }\r\n                to = to || {};\r\n                // Getting the index of current dependency\r\n                var ixDependendOn = -1;\r\n                for (var k = 0; k < changedItems.length; k++) {\r\n                    if (changedItems[k].data == currentDependency) {\r\n                        ixDependendOn = k;\r\n                        changedItems[k].referredBy = changedItems[k].referredBy || [];\r\n                        changedItems[k].referredBy.push(current.data)\r\n                        break;\r\n                    }\r\n                }\r\n                // Sanity check\r\n                if (ixDependendOn == -1) {\r\n                    Guard.raise(new Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\r\n                }\r\n                // Setting edge in 'to' array\r\n                to[ixDependendOn] = true;\r\n                // Setting edge in 'from' array\r\n                var from = edgesFrom[ixDependendOn] || {};\r\n                from[i] = true;\r\n                edgesFrom[ixDependendOn] = from;\r\n            }\r\n            // Persisting found edges in edgesTo array\r\n            if (to !== null)\r\n                edgesTo[i] = to;\r\n        }\r\n\r\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\r\n        var independentBlocks = [];\r\n        // Objects getting their dependency resolved in the current cycle.\r\n        var currentBlock = [];\r\n        // Filling currentBlock with initially independent objects.\r\n        for (var x = 0; x < changedItems.length; x++) {\r\n            if (!edgesTo.hasOwnProperty(x)) {\r\n                currentBlock.push(x);\r\n            }\r\n        }\r\n        while (currentBlock.length > 0) {\r\n            // Shifting currentBlock to cbix,\r\n            // and clearing currentBlock for next independent block\r\n            var cbix = [].concat(currentBlock);\r\n            currentBlock = [];\r\n            // Iterating over previous independent block, to generate the new one\r\n            for (var b = 0; b < cbix.length; b++) {\r\n                var dependentNodes = edgesFrom[cbix[b]];\r\n                if (typeof dependentNodes !== 'undefined') {\r\n                    for (var d in dependentNodes) {\r\n                        // Removing edge from 'edgesTo'\r\n                        delete edgesTo[d][cbix[b]];\r\n                        // Check if has any more dependency\r\n                        if (!hasOwnProperty(edgesTo[d])) {\r\n                            // It doesn't, so let's clean up a bit\r\n                            delete edgesTo[d];\r\n                            // and push the item to 'currentBlock'\r\n                            currentBlock.push(d);\r\n                        }\r\n                    }\r\n                }\r\n                // Clearing processed item from 'edgesFrom'\r\n                delete edgesFrom[cbix[b]];\r\n            }\r\n            // Push cbix t to independentBlocks\r\n            var cb = [];\r\n            for (var c = 0; c < cbix.length; c++) {\r\n                var item = changedItems[cbix[c]];\r\n                if (item.data.entityState != $data.EntityState.Unchanged)\r\n                    cb.push(item);\r\n            }\r\n            if (cb.length > 0)\r\n                independentBlocks.push(cb);\r\n        }\r\n        return independentBlocks;\r\n    },\r\n    getTraceString: function (queryable) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    setContext: function (ctx) {\r\n        this.context = ctx;\r\n    },\r\n\r\n    _buildContinuationFunction: function (context, query) {\r\n        if (Array.isArray(query.result)) {\r\n            query.result.next = this._buildPagingMethod(context, query, 'next');\r\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\r\n        }\r\n    },\r\n    _buildPagingMethod: function (context, query, mode) {\r\n        return function (onResult_items) {\r\n            var pHandler = new $data.PromiseHandler();\r\n            var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n            var continuation = new $data.Expressions.ContinuationExpressionBuilder(mode);\r\n            var continuationResult = continuation.compile(query);\r\n            if (continuationResult.expression) {\r\n                var queryable = Container.createQueryable(context, continuationResult.expression);\r\n                queryable.defaultType = query.defaultType;\r\n                context.executeQuery(queryable, cbWrapper);\r\n            } else {\r\n                cbWrapper.error(new Exception(continuationResult.message, 'Invalid Operation', continuationResult));\r\n            }\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n    },\r\n\r\n    buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) {\r\n        var buildDbType_copyPropertyDefinition = function (propertyDefinition, refProp) {\r\n            var cPropertyDef;\r\n            if (refProp) {\r\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\r\n                cPropertyDef.kind = propertyDefinition.kind;\r\n                cPropertyDef.name = propertyDefinition.name;\r\n                cPropertyDef.notMapped = false;\r\n            } else {\r\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\r\n            }\r\n\r\n            cPropertyDef.dataType = Container.resolveType(propertyDefinition.dataType);\r\n            cPropertyDef.type = cPropertyDef.dataType;\r\n            cPropertyDef.key = false;\r\n            cPropertyDef.computed = false;\r\n            return cPropertyDef;\r\n        };\r\n        var buildDbType_createConstrain = function (foreignType, dataType, propertyName, prefix, keyPropertyName) {\r\n            var constrain = new Object();\r\n            constrain[foreignType.name] = propertyName;\r\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\r\n            return constrain;\r\n        };\r\n\r\n        if (storageModel.Associations) {\r\n            storageModel.Associations.forEach(function (association) {\r\n                var addToEntityDef = false;\r\n                var foreignType = association.FromType;\r\n                var dataType = association.ToType;\r\n                var foreignPropName = association.ToPropertyName;\r\n\r\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\r\n                var keyProperties = [];\r\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\r\n                    keyProperties = [memDef.keys];\r\n                } else if (memDef && Array.isArray(memDef.keys)) {\r\n                    keyProperties = [].concat(memDef.keys);\r\n                }\r\n\r\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\r\n\r\n                if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                    foreignType = association.ToType;\r\n                    dataType = association.FromType;\r\n                    foreignPropName = association.FromPropertyName;\r\n                    addToEntityDef = true;\r\n                }\r\n\r\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) { return d.key }).forEach(function (d, i) {\r\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\r\n                    if (addToEntityDef) {\r\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n\r\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\r\n                        if (dependentMemDef) {\r\n                            dependentMemDef.isDependentProperty = true;\r\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\r\n                        }\r\n                    }\r\n                    association.ReferentialConstraint.push(constraint);\r\n                }, this);\r\n            }, this);\r\n        }\r\n        //Copy complex type properties\r\n        if (storageModel.ComplexTypes) {\r\n            storageModel.ComplexTypes.forEach(function (complexType) {\r\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\r\n\r\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\r\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\r\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\r\n                }, this);\r\n            }, this);\r\n        }\r\n    },\r\n    buildDbType_generateConvertToFunction: function (storageModel) {\r\n        return function (logicalEntity) {\r\n            var dbInstance = new storageModel.PhysicalType();\r\n            dbInstance.entityState = logicalEntity.entityState;\r\n\r\n            //logicalEntity.changedProperties.forEach(function(memberDef){\r\n            //}, this);\r\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\r\n                if (logicalEntity[property.name] !== undefined) {\r\n                    dbInstance[property.name] = logicalEntity[property.name];\r\n                }\r\n            }, this);\r\n\r\n            if (storageModel.Associations) {\r\n                storageModel.Associations.forEach(function (association) {\r\n                    if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                        var complexInstance = logicalEntity[association.FromPropertyName];\r\n                        if (complexInstance !== undefined) {\r\n                            association.ReferentialConstraint.forEach(function (constrain) {\r\n                                if (complexInstance !== null) {\r\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\r\n                                } else {\r\n                                    dbInstance[constrain[association.From]] = null;\r\n                                }\r\n                            }, this);\r\n                        }\r\n                    }\r\n                }, this);\r\n            }\r\n            if (storageModel.ComplexTypes) {\r\n                storageModel.ComplexTypes.forEach(function (cmpType) {\r\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\r\n                    if (complexInstance !== undefined) {\r\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\r\n                            if (complexInstance !== null) {\r\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\r\n                            } else {\r\n                                dbInstance[constrain[cmpType.From]] = null;\r\n                            }\r\n                        }, this);\r\n                    }\r\n                }, this);\r\n            }\r\n            return dbInstance;\r\n        };\r\n    },\r\n\r\n    bulkInsert: function (a, b, c, callback) {\r\n        callback.error(new Exception('Not Implemented'));\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\r\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\r\n            toLowerCase: { dataType: \"string\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveFieldOperation: function (operationName, expression, frameType) {\r\n        ///<summary></summary>\r\n        var result = this.supportedFieldOperations[operationName];\r\n        if (Array.isArray(result)) {\r\n            var i = 0;\r\n            for (; i < result.length; i++) {\r\n                if (result[i].allowedType === 'default' || Container.resolveType(result[i].allowedType) === Container.resolveType(expression.selector.memberDefinition.type) &&\r\n                    (frameType && result[i].allowedIn &&\r\n                        (\r\n                            (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function(type){ return frameType === Container.resolveType(type); })) ||\r\n                            (!Array.isArray(result[i].allowedIn) && (frameType === Container.resolveType(result[i].allowedIn)))\r\n                        )\r\n                    )\r\n                    ) {\r\n                    result = result[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (i === result.length) {\r\n                result = undefined;\r\n            }\r\n        }\r\n\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operationName + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operationName;\r\n        return result;\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedBinaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedUnaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedSetOperations: {\r\n        value: {\r\n            toArray: { invokable: true, allowedIn: [] }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        var result = this.supportedSetOperations[operation];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\r\n        };\r\n        var allowedIn = result.allowedIn || [];\r\n        if (frameType && allowedIn) {\r\n            if ((allowedIn instanceof Array && !allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(allowedIn instanceof Array) && frameType !== Container.resolveType(allowedIn))) {\r\n                Guard.raise(new Exception(operation + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    makePhysicalTypeDefinition: function (entityDefinition, association) {\r\n    },\r\n\r\n    _beginTran: function (tables, isWrite, callBack) {\r\n        callBack.success(new $data.Transaction());\r\n    },\r\n\r\n    getFieldUrl: function () {\r\n        return '#';\r\n    },\r\n\r\n    supportedAutoincrementKeys: {\r\n        value: { }\r\n    }\r\n},\r\n{\r\n    onRegisterProvider: { value: new $data.Event() },\r\n    registerProvider: function (name, provider) {\r\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || [];\r\n        $data.RegisteredStorageProviders[name] = provider;\r\n    },\r\n    getProvider: function (name) {\r\n        var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            console.warn(\"Provider not found: '\" + name + \"'\");\r\n        return provider;\r\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\r\n    },\r\n    isSupported: {\r\n        get: function () { return true; },\r\n        set: function () { }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.StorageProviderLoaderBase', null, null, {\r\n    isSupported: function (providerName) {\r\n        $data.Trace.log('Detecting ' + providerName + ' provider support');\r\n        var supported = true;\r\n        switch (providerName) {\r\n            case 'indexedDb':\r\n                supported = $data.__global.indexedDB || $data.__global.webkitIndexedDB || $data.__global.mozIndexedDB || ($data.__global.msIndexedDB && !(/^file:/.test($data.__global.location && $data.__global.location.href)));\r\n                break;\r\n            case 'storm':\r\n                supported = 'XMLHttpRequest' in $data.__global;\r\n                break;\r\n            case 'webSql':\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'LocalStore':\r\n                supported = 'localStorage' in $data.__global && $data.__global.localStorage ? true : false;\r\n                break;\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'mongoDB':\r\n                supported = $data.mongoDBDriver;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        $data.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\r\n        return supported;\r\n    },\r\n    scriptLoadTimeout: { type: 'int', value: 1000 },\r\n    scriptLoadInterval: { type: 'int', value: 50 },\r\n    npmModules: {\r\n        value: {\r\n            'indexedDb': 'jaydata-indexeddb',\r\n            'InMemory': 'jaydata-inmemory',\r\n            'LocalStore': 'jaydata-inmemory',\r\n            'mongoDB': 'jaydata-mongodb',\r\n            'oData': 'jaydata-odata',\r\n            'webApi': 'jaydata-webapi',\r\n            'sqLite': 'jaydata-sqlite',\r\n            'webSql': 'jaydata-sqlite',\r\n            'storm': 'jaydata-storm'\r\n        }\r\n    },\r\n    ProviderNames: {\r\n        value: {\r\n            'indexedDb': 'IndexedDb',\r\n            'InMemory': 'InMemory',\r\n            'LocalStore': 'InMemory',\r\n            'oData': 'oData',\r\n            'webApi': 'WebApi',\r\n            'sqLite': 'SqLite',\r\n            'webSql': 'SqLite',\r\n            'storm': 'Storm'\r\n        }\r\n    },\r\n    load: function (providerList, callback) {\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || {};\r\n\r\n        $data.Trace.log('Loading provider(s): ' + providerList);\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n\r\n        var self = this;\r\n        var cacheKey = providerList.join(',');\r\n        self._fallbackCache = self._fallbackCache || {};\r\n\r\n        if (self._fallbackCache[cacheKey]) {\r\n            callback.success(self._fallbackCache[cacheKey]);\r\n        } else {\r\n            this.find(providerList, {\r\n                success: function (provider, selectedProvider) {\r\n                    self._fallbackCache[cacheKey] = provider;\r\n                    callback.success.call(this, provider);\r\n                },\r\n                error: callback.error\r\n            });\r\n        }\r\n    },\r\n    find: function (providerList, callback) {\r\n        var currentProvider = providerList.shift();\r\n        var currentProvider = this.getVirtual(currentProvider);\r\n        if(Array.isArray(currentProvider)){\r\n            providerList = currentProvider;\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        while (currentProvider && !this.isSupported(currentProvider)) {\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        $data.Trace.log('First supported provider is ' + currentProvider);\r\n\r\n        if (!currentProvider){\r\n            $data.Trace.log('Provider fallback failed');\r\n            callback.error();\r\n        }\r\n\r\n        if ($data.RegisteredStorageProviders) {\r\n            $data.Trace.log('Is the ' + currentProvider + ' provider already registered?');\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback.success(provider)\r\n                return;\r\n            }else{\r\n                $data.Trace.log(currentProvider + ' provider not registered');\r\n            }\r\n        }\r\n\r\n        if (!process.browser) {\r\n            // NodeJS\r\n            $data.Trace.log('node.js detected trying to load NPM module');\r\n            this.loadNpmModule(currentProvider, providerList, callback);\r\n        } else {\r\n            $data.Trace.log('Browser detected trying to load provider');\r\n            this.loadProvider(currentProvider, providerList, callback);\r\n        }\r\n    },\r\n    loadProvider: function (currentProvider, providerList, callback) {\r\n        var self = this;\r\n        var mappedName = $data.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\r\n        $data.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\r\n        if (mappedName) {\r\n            var url = this.getUrl(mappedName);\r\n            $data.Trace.log(currentProvider + ' provider from URL: ' + url);\r\n\r\n            var loader = this.loadScript;\r\n            if (document && document.createElement) {\r\n                $data.Trace.log('document and document.createElement detected, using script element loader method');\r\n                loader = this.loadScriptElement;\r\n            }\r\n\r\n            loader.call(this, url, currentProvider, function (successful) {\r\n                var provider = $data.RegisteredStorageProviders[currentProvider];\r\n                if (successful && provider) {\r\n                    $data.Trace.log(currentProvider + ' provider successfully registered');\r\n                    callback.success(provider);\r\n                } else if (providerList.length > 0) {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\r\n                    self.find(providerList, callback);\r\n                } else {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load');\r\n                    callback.error();\r\n                }\r\n            });\r\n        }\r\n    },\r\n    getUrl: function (providerName) {\r\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\r\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\r\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';\r\n        else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';\r\n        else return 'jaydataproviders/' + providerName + 'Provider.js';\r\n    },\r\n    loadScript: function (url, currentProvider, callback) {\r\n        if (!url){\r\n            callback(false);\r\n            return;\r\n        }\r\n\r\n        function getHttpRequest() {\r\n            if ($data.__global.XMLHttpRequest)\r\n                return new XMLHttpRequest();\r\n            else if ($data.__global.ActiveXObject !== undefined)\r\n                return new ActiveXObject(\"MsXml2.XmlHttp\");\r\n            else{\r\n                $data.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\r\n                callback(false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        var oXmlHttp = getHttpRequest();\r\n        oXmlHttp.onreadystatechange = function () {\r\n            $data.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\r\n            if (oXmlHttp.readyState == 4) {\r\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\r\n                    $data.Trace.log('HTTP request succeeded');\r\n                    $data.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\r\n                    eval.call($data.__global, oXmlHttp.responseText);\r\n                    if (typeof callback === 'function')\r\n                        callback(true);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                } else {\r\n                    $data.Trace.log('HTTP request status: ', oXmlHttp.status);\r\n                    if (typeof callback === 'function')\r\n                        callback(false);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                }\r\n            }\r\n        };\r\n        oXmlHttp.open('GET', url, true);\r\n        oXmlHttp.send(null);\r\n    },\r\n    loadScriptElement: function (url, currentProvider, callback) {\r\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\r\n\r\n        var script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = url;\r\n        $data.Trace.log('Appending child ' + script + ' to ' + head);\r\n        head.appendChild(script);\r\n\r\n        var loadInterval = this.scriptLoadInterval || 50;\r\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\r\n        $data.Trace.log('Script element watcher iterating ' + iteration + ' times');\r\n        function watcher() {\r\n            $data.Trace.log('Script element watcher iteration ' + iteration);\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback(true);\r\n            } else {\r\n                iteration--;\r\n                if (iteration > 0) {\r\n                    $data.Trace.log('Script element watcher next iteration');\r\n                    setTimeout(watcher, loadInterval);\r\n                } else {\r\n                    $data.Trace.log('Script element loader failed');\r\n                    callback(false);\r\n                }\r\n            }\r\n        }\r\n        setTimeout(watcher, loadInterval);\r\n    },\r\n\r\n    loadNpmModule: function (currentProvider, providerList, callback) {\r\n        var provider = null;\r\n        try {\r\n            global[\"require\"](this.npmModules[currentProvider]);\r\n            provider = $data.RegisteredStorageProviders[currentProvider];\r\n            $data.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\r\n        } catch (e) {\r\n            $data.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\r\n        }\r\n\r\n        if (provider) {\r\n            callback.success(provider);\r\n        } else if (providerList.length > 0) {\r\n            this.find(providerList, callback);\r\n        } else {\r\n            callback.error();\r\n        }\r\n    },\r\n\r\n    virtualProviders: {\r\n        type: $data.Array,\r\n        value: {\r\n            local: {\r\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\r\n            }\r\n        }\r\n    },\r\n    getVirtual: function(name){\r\n        if(this.virtualProviders[name])\r\n            return [].concat(this.virtualProviders[name].fallbacks);\r\n\r\n        return name;\r\n    }\r\n});\r\n\r\n$data.StorageProviderLoader = new $data.StorageProviderLoaderBase();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.modelBinder.FindProjectionVisitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function(includes){\r\n        this._includes = includes;\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        this.projectionExpression = this.projectionExpression || expression;\r\n        context && (context.projectionExpression = context.projectionExpression || expression);\r\n        this.Visit(expression.source, context)\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context)\r\n        if(!(expression.selector instanceof $data.Expressions.ConstantExpression)) {\r\n            var selectorContext = {};\r\n            this.Visit(expression.selector.expression, selectorContext);\r\n            \r\n            if(selectorContext.hasIncludeProjectionExpression){\r\n                var include = this._includes.filter(function(it){ return it.name === selectorContext.includePath; })[0];\r\n                if(include){\r\n                    include.projectionExpression = selectorContext.includeProjectionExpression\r\n                }\r\n                \r\n                context && (context.hasIncludeProjectionExpression = true);\r\n            }\r\n        }\r\n    },\r\n    VisitFrameOperationExpression: function(expression, context){\r\n        this.Visit(expression.source, context);\r\n        \r\n        var opDef = expression.operation.memberDefinition;\r\n        if(opDef && opDef.frameType === $data.Expressions.ProjectionExpression){\r\n            var paramCounter = 0;\r\n            var params = opDef.parameters || [{ name: \"@expression\" }];\r\n            \r\n            var args = params.map(function (item, index) {\r\n                if (item.name === \"@expression\") {\r\n                    return expression.source;\r\n                } else {\r\n                    return expression.parameters[paramCounter++]\r\n                };\r\n            });\r\n            \r\n            for (var i = 0; i < args.length; i++) {\r\n                var arg = args[i];\r\n                \r\n                if (arg instanceof $data.Expressions.ConstantExpression && arg.value instanceof $data.Queryable) {\r\n                    var preparator = Container.createQueryExpressionCreator(arg.value.entityContext);\r\n                    arg = preparator.Visit(arg.value.expression);\r\n                    \r\n                }\r\n                \r\n                var visitor = new $data.modelBinder.FindProjectionVisitor(this._inculdes);\r\n                var visitorContext = { };\r\n                var compiled = visitor.Visit(arg, visitorContext);\r\n                \r\n                if(context && visitorContext.projectionExpression){\r\n                    context.hasIncludeProjectionExpression = true;\r\n                    context.includeProjectionExpression = visitorContext.projectionExpression;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        var propName = expression.associationInfo.FromPropertyName;\r\n        \r\n        if(context) {\r\n            context.includePath = context.includePath ? (context.includePath + '.') : \"\";\r\n            context.includePath += propName;\r\n        }\r\n    }\r\n});\r\n\r\n$C('$data.modelBinder.ModelBinderConfigCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (query, includes, oDataProvider) {\r\n        this._query = query;\r\n        this._includes = includes;\r\n        this._isoDataProvider = oDataProvider || false;\r\n        this.depth = [];\r\n    },\r\n    VisitSingleExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitSomeExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFindExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitEveryExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitToArrayExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFirstExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitForEachExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitServiceOperationExpression: function (expression) {\r\n        if (expression.cfg.returnType) {\r\n            var returnType = Container.resolveType(expression.cfg.returnType);\r\n            if ((typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Queryable)) || returnType === $data.Array) {\r\n                this._defaultModelBinder(expression);\r\n            } else {\r\n                var builder = Container.createqueryBuilder();\r\n                builder.modelBinderConfig['$type'] = returnType;\r\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Entity)) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = returnType;\r\n                    builder.modelBinderConfig['$value'] = function (a, v) {\r\n                        return (expression.cfg.serviceName in v) ? v[expression.cfg.serviceName] : v.value;\r\n                    }\r\n                }\r\n                this.VisitExpression(expression, builder);\r\n                builder.resetModelBinderProperty();\r\n                this._query.modelBinderConfig = builder.modelBinderConfig;\r\n            }\r\n        }\r\n    },\r\n    VisitCountExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitBatchDeleteExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitConstantExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.type;\r\n        builder.modelBinderConfig['$value'] = expression.value;\r\n    },\r\n\r\n    VisitExpression: function (expression, builder) {\r\n        var projVisitor = Container.createFindProjectionVisitor(this._includes);\r\n        var projContext = {};\r\n        projVisitor.Visit(expression, projContext);\r\n\r\n        if (projContext.projectionExpression) {\r\n            this.Visit(projContext.projectionExpression, builder);\r\n        } else {\r\n            this.DefaultSelection(builder, this._query.defaultType, this._includes, projContext.hasIncludeProjectionExpression);\r\n        }\r\n    },\r\n    _defaultModelBinder: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        if (this._isoDataProvider) {\r\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\r\n        }\r\n        builder.modelBinderConfig['$item'] = {};\r\n        builder.selectModelBinderProperty('$item');\r\n\r\n        this.VisitExpression(expression, builder);\r\n\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    _inheritanceMemberDefinitions: function(type, memdefs){\r\n        var self = this;\r\n        if (type.inheritedTo){\r\n            type.inheritedTo.forEach(function(it){\r\n                memdefs = self._inheritanceMemberDefinitions(it, memdefs.concat(it.memberDefinitions.getPublicMappedProperties()));\r\n            });\r\n        }\r\n        return memdefs;\r\n    },\r\n    _addPropertyToModelBinderConfig: function (elementType, builder) {\r\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\r\n        if (elementType.memberDefinitions) {\r\n            var memberDefinitions = this._inheritanceMemberDefinitions(elementType, elementType.memberDefinitions.getPublicMappedProperties());\r\n            memberDefinitions.forEach(function (prop) {\r\n                if ((!storageModel) || (storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name])) {\r\n\r\n                    var type = Container.resolveType(prop.dataType);\r\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\r\n                        //complex type\r\n                        builder.selectModelBinderProperty(prop.name);\r\n                        builder.modelBinderConfig['$type'] = type;\r\n                        if (this._isoDataProvider) {\r\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                        } else {\r\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                        }\r\n                        this._addPropertyToModelBinderConfig(type, builder);\r\n                        builder.popModelBinderProperty();\r\n                    } else {\r\n                        if (prop.key) {\r\n                            builder.addKeyField(prop.name);\r\n                        }\r\n                        if (prop.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                            builder.modelBinderConfig[prop.name] = { $source: '@odata.etag' }\r\n                        } else if (type === $data.Array && prop.elementType) {\r\n                            builder.selectModelBinderProperty(prop.name);\r\n                            builder.modelBinderConfig['$type'] = type;\r\n                            if (this._isoDataProvider) {\r\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                            } else {\r\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                            }\r\n                            builder.selectModelBinderProperty('$item');\r\n                            var arrayElementType = Container.resolveType(prop.elementType);\r\n                            builder.modelBinderConfig['$type'] = arrayElementType;\r\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\r\n                            builder.popModelBinderProperty();\r\n                            builder.popModelBinderProperty();\r\n                        } else {\r\n                            builder.modelBinderConfig[prop.name] = {\r\n                                $source: prop.name,\r\n                                $type: prop.type\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }, this);\r\n        } else {\r\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\r\n            if (builder._binderConfig.$type === $data.Array) {\r\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\r\n                builder.modelBinderConfig = builder._binderConfig.$item;\r\n            }\r\n\r\n\r\n        }\r\n        if (storageModel) {\r\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\r\n        }\r\n    },\r\n    _addComplexTypeProperties: function (complexTypes, builder) {\r\n        complexTypes.forEach(function (ct) {\r\n            if (ct.ToType !== $data.Array){\r\n                builder.selectModelBinderProperty(ct.FromPropertyName);\r\n                builder.modelBinderConfig['$type'] = ct.ToType;\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\r\n                }\r\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\r\n\r\n                builder.popModelBinderProperty();\r\n            }else{\r\n                var dt = ct.ToType;\r\n                var et = Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\r\n                if (dt === $data.Array && et && et.isAssignableTo && et.isAssignableTo($data.Entity)){\r\n                    config = {\r\n                        $type: $data.Array,\r\n                        $selector: 'json:' + ct.FromPropertyName,\r\n                        $item: {\r\n                            $type: et\r\n                        }\r\n                    };\r\n                    var md = et.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < md.length; i++){\r\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\r\n                    }\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\r\n                }else{\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\r\n                        $type: ct.ToType,\r\n                        $source: ct.FromPropertyName\r\n                    };\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n    DefaultSelection: function (builder, type, allIncludes, custom) {\r\n        //no projection, get all item from entitySet\r\n        builder.modelBinderConfig['$type'] = custom ? $data.Object : type;\r\n\r\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\r\n        this._addPropertyToModelBinderConfig(type, builder);\r\n        if (allIncludes) {\r\n            let excludeDeepInclude = [];\r\n            allIncludes.forEach(function (include) {\r\n                if(excludeDeepInclude.some(function(incName){ return include.name.length > incName.length && include.name.substr(0, incName.length) === incName })) {\r\n                    return;\r\n                }\r\n                this.depth.push(include.name);\r\n                \r\n                var includes = include.name.split('/').pop().split('.');\r\n                var association = null;\r\n                var tmpStorageModel = storageModel;\r\n                var itemCount = 0;\r\n                for (var i = 0; i < includes.length; i++) {\r\n                    if (builder.modelBinderConfig.$item) {\r\n                        builder.selectModelBinderProperty('$item');\r\n                        itemCount++;\r\n                    }\r\n                    builder.selectModelBinderProperty(includes[i]);\r\n                    association = tmpStorageModel.Associations[includes[i]];\r\n                    tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\r\n                }\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\r\n                }\r\n                if (association.ToMultiplicity === '*') {\r\n                    builder.modelBinderConfig['$type'] = $data.Array;\r\n                    builder.selectModelBinderProperty('$item');\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    if(include.projectionExpression){\r\n                        excludeDeepInclude.push(include.name);\r\n                        this.Visit(include.projectionExpression, builder);\r\n                    } else {\r\n                        this._addPropertyToModelBinderConfig(include.type, builder);\r\n                    }\r\n                    builder.popModelBinderProperty();\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    if(include.projectionExpression){\r\n                        excludeDeepInclude.push(include.name);\r\n                        this.Visit(include.projectionExpression, builder);\r\n                    } else {\r\n                        this._addPropertyToModelBinderConfig(include.type, builder);\r\n                    }\r\n                }\r\n\r\n                for (var i = 0; i < includes.length + itemCount; i++) {\r\n                    builder.popModelBinderProperty();\r\n                }\r\n                this.depth.pop();\r\n            }, this);\r\n        }\r\n    },\r\n    VisitProjectionExpression: function (expression, builder) {\r\n        this.hasProjection = true;\r\n        this.Visit(expression.selector, builder);\r\n\r\n        if (expression.selector && expression.selector.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || $data.Object;\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, builder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n\r\n    },\r\n    VisitEntityAsProjection: function (expression, builder) {\r\n        this.mapping = '';\r\n        this.Visit(expression.expression, builder);\r\n        this.depth.push(this.mapping);\r\n        this.mapping = this.depth.join('.');\r\n        \r\n        var includes;\r\n        var currentInclude;\r\n        if (this.mapping && this._includes instanceof Array) {\r\n            includes = this._includes.filter(function (inc) {\r\n                return inc.name.indexOf(this.mapping + '.') === 0\r\n            }, this);\r\n            includes = includes.map(function (inc) {\r\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\r\n            }, this);\r\n\r\n            // if (includes.length > 0){\r\n            //     this.DefaultSelection(builder, expression.expression.entityType, includes);\r\n            //     //console.warn('WARN: include for mapped properties is not supported!');\r\n            // }\r\n            \r\n            currentInclude = this._includes.filter(function (inc) {\r\n                return inc.name === this.mapping;\r\n            }, this)[0];\r\n        }\r\n        \r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            if(currentInclude && currentInclude.projectionExpression){\r\n                let tmpIncludes = this._includes;\r\n                this._includes = includes;\r\n                let tmpDepth = this.depth;\r\n                this.depth = [];\r\n                this.Visit(currentInclude.projectionExpression, builder);\r\n                this._includes = tmpIncludes;\r\n                this.depth = tmpDepth;\r\n            } else {\r\n                this.DefaultSelection(builder, expression.expression.entityType, includes)\r\n            }\r\n        } else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            builder.modelBinderConfig.$type = $data.Array;\r\n            builder.modelBinderConfig.$item = {};\r\n            builder.selectModelBinderProperty('$item');\r\n            if(currentInclude && currentInclude.projectionExpression){\r\n                let tmpIncludes = this._includes;\r\n                this._includes = includes;\r\n                let tmpDepth = this.depth;\r\n                this.depth = [];\r\n                this.Visit(currentInclude.projectionExpression, builder);\r\n                this._includes = tmpIncludes;\r\n                this.depth = tmpDepth;\r\n            } else {\r\n                this.DefaultSelection(builder, expression.expression.elementType, includes)\r\n            }\r\n            builder.popModelBinderProperty();\r\n        }\r\n        this.depth.pop();\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\r\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\r\n            this._addPropertyToModelBinderConfig(Container.resolveType(expression.memberDefinition.type), builder);\r\n        } else {\r\n            if (!(builder.modelBinderConfig.$type && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo($data.Entity)))\r\n                builder.modelBinderConfig['$source'] = expression.memberName;\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, builder) {\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, builder);\r\n            this.Visit(expression.selector, builder);\r\n        }\r\n\r\n    },\r\n    VisitComplexTypeExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n\r\n\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\r\n            }\r\n        }\r\n    },\r\n    VisitEntityExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, builder) {\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\r\n            }\r\n        }\r\n\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Object;\r\n        expression.members.forEach(function (of) {\r\n            this.Visit(of, builder);\r\n        }, this);\r\n    },\r\n    VisitObjectFieldExpression: function (expression, builder) {\r\n        builder.selectModelBinderProperty(expression.fieldName);\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n        builder.popModelBinderProperty();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Transaction', null, null, {\r\n    constructor: function () {\r\n        this._objectId = (new Date()).getTime();\r\n        $data.Trace.log(\"create: \", this._objectId);\r\n\r\n        this.oncomplete = new $data.Event(\"oncomplete\", this);\r\n        this.onerror = new $data.Event(\"onerror\", this);\r\n    },\r\n    abort: function () {\r\n        Guard.raise(new Exception('Not Implemented', 'Not Implemented', arguments));\r\n    },\r\n\r\n    _objectId: { type: $data.Integer },\r\n    transaction: { type: $data.Object },\r\n\r\n    oncomplete: { type: $data.Event },\r\n    onerror: { type: $data.Event }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.Defaults', null, null, null, {\r\n    validators: {\r\n        value: {\r\n            required: function (value, definedValue) { return !Guard.isNullOrUndefined(value); },\r\n            customValidator: function (value, definedValue) { return Guard.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true; },\r\n\r\n            minValue: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value >= definedValue; },\r\n            maxValue: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value <= definedValue; },\r\n\r\n            minLength: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length >= definedValue; },\r\n            maxLength: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length <= definedValue; },\r\n            length: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length == definedValue; },\r\n            regex: function (value, definedValue) {\r\n                return Guard.isNullOrUndefined(value) ||\r\n                    value.match(typeof definedValue === 'string'\r\n                        ? new RegExp((definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === (definedValue.length - 1)) ? definedValue.slice(1, -1) : definedValue)\r\n                        : definedValue)\r\n            }\r\n        }\r\n    },\r\n\r\n    _getGroupValidations: function (validations) {\r\n        var validators = {};\r\n        if (Array.isArray(validations)) {\r\n            for (var i = 0; i < validations.length; i++) {\r\n                var validator = validations[i];\r\n                if (typeof this.validators[validator] === 'function') {\r\n                    validators[validator] = this.validators[validator];\r\n                }\r\n            }\r\n        }\r\n\r\n        return validators;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.Validation.EntityValidation', $data.Validation.EntityValidationBase, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n\r\n        var errors = [];\r\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\r\n        }, this);\r\n        return errors;\r\n    },\r\n    ValidateEntityField: function (entity, memberDefinition, newValue, valueNotSet) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        var errors = [];\r\n        var resolvedType = Container.resolveType(memberDefinition.dataType);\r\n        var typeName = Container.resolveName(resolvedType);\r\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\r\n\r\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo($data.Entity)) {\r\n            typeName = $data.Entity.fullName;\r\n        }\r\n\r\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\r\n        return errors;\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        var value;\r\n        if (memberDefinition[validationName] && memberDefinition[validationName].value)\r\n            value = memberDefinition[validationName].value;\r\n        else\r\n            value = memberDefinition[validationName];\r\n\r\n        if (this.convertableValidation[validationName]) {\r\n            var typeToConvert;\r\n            if (this.convertableValidation[validationName] === true) {\r\n                typeToConvert = memberDefinition.type;\r\n            } else {\r\n                typeToConvert = this.convertableValidation[validationName];\r\n            }\r\n\r\n            if (typeToConvert)\r\n                value = Container.convertTo(value, typeToConvert, memberDefinition.elementType);\r\n        }\r\n\r\n        return value;\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        var eMessage = defaultMessage;\r\n        if (typeof memberDefinition[validationName] == \"object\" && memberDefinition[validationName].message)\r\n            eMessage = memberDefinition[validationName].message;\r\n        else if (memberDefinition.errorMessage)\r\n            eMessage = memberDefinition.errorMessage;\r\n\r\n        return eMessage;\r\n    },\r\n    createValidationError: function (memberDefinition, validationName, defaultMessage) {\r\n        return new $data.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\r\n    },\r\n\r\n    convertableValidation: {\r\n        value: {\r\n            required: '$data.Boolean',\r\n            minValue: true,\r\n            maxValue: true,\r\n            minLength: '$data.Integer',\r\n            maxLength: '$data.Integer',\r\n            length: '$data.Integer'\r\n        }\r\n\r\n    },\r\n    supportedValidations: {\r\n        value: {\r\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.ObjectID': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Byte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.SByte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Decimal': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Float': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Number': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int16': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Integer': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int32': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int64': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.String': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\r\n            '$data.Date': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.DateTimeOffset': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Time': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Day': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Duration': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Boolean': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Array': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\r\n            '$data.Object': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Guid': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Blob': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\r\n            '$data.GeographyPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\r\n        }\r\n    },\r\n\r\n    fieldValidate: function (entity, memberDefinition, value, errors, validationTypeName) {\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        ///<param name=\"value\" type=\"Object\" />\r\n        ///<param name=\"errors\" type=\"Array\" />\r\n        ///<param name=\"validationTypeName\" type=\"string\" />\r\n        if (entity.entityState == $data.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0)\r\n            return;\r\n\r\n        var validatonGroup = this.supportedValidations[validationTypeName];\r\n        if (validatonGroup) {\r\n            var validations = Object.keys(validatonGroup);\r\n            validations.forEach(function (validation) {\r\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation)))\r\n                    errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\r\n            }, this);\r\n\r\n            if (validationTypeName === $data.Entity.fullName && value instanceof $data.Entity && !value.isValid()) {\r\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\r\n            }\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation.Entity = new $data.Validation.EntityValidation();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.ValidationError', null, null, {\r\n    constructor: function (message, propertyDefinition, type) {\r\n        ///<param name=\"message\" type=\"string\" />\r\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\r\n\r\n        this.Message = message;\r\n        this.PropertyDefinition = propertyDefinition;\r\n        this.Type = type;\r\n    },\r\n    Type: { dataType: 'string' },\r\n    Message: { dataType: \"string\" },\r\n    PropertyDefinition: { dataType: $data.MemberDefinition }\r\n}, null);\r\n\r\n$data.Class.define('$data.Validation.EntityValidationBase', null, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        return [];\r\n    },\r\n\r\n    ValidateEntityField: function (entity, memberDefinition) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        return [];\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation = $data.Validation || {};\r\n$data.Validation.Entity = new $data.Validation.EntityValidationBase();\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem/index.js';\r\nimport expressions from './Expressions/index.js';\r\n\r\nimport EntityValidationBase from './Validation/EntityValidationBase.js';\r\nimport EntityValidation from './Validation/EntityValidation.js';\r\nimport ChangeDistributorBase from './Notifications/ChangeDistributorBase.js';\r\nimport ChangeCollectorBase from './Notifications/ChangeCollectorBase.js';\r\nimport ChangeDistributor from './Notifications/ChangeDistributor.js';\r\nimport ChangeCollector from './Notifications/ChangeCollector.js';\r\nimport Transaction from './Transaction.js';\r\nimport Access from './Access.js';\r\n//import Promise from './Promise.js';\r\nimport Entity from './Entity.js';\r\nimport Enum from './Enum.js';\r\nimport RelatedEntityProxy from './RelatedEntityProxy.js';\r\nimport EntityContext from './EntityContext.js';\r\nimport QueryProvider from './QueryProvider.js';\r\nimport ModelBinder from './ModelBinder.js';\r\nimport QueryBuilder from './QueryBuilder.js';\r\nimport Query from './Query.js';\r\nimport Queryable from './Queryable.js';\r\nimport EntitySet from './EntitySet.js';\r\nimport EntityState from './EntityState.js';\r\nimport EntityAttachModes from './EntityAttachModes.js';\r\nimport EntityStateManager from './EntityStateManager.js';\r\nimport ItemStore from './ItemStore.js';\r\nimport StorageProviderLoader from './StorageProviderLoader.js';\r\nimport StorageProviderBase from './StorageProviderBase.js';\r\nimport ServiceOperation from './ServiceOperation.js';\r\nimport EntityWrapper from './EntityWrapper.js';\r\nimport jQueryAjaxWrapper from './Ajax/jQueryAjaxWrapper.js';\r\nimport WinJSAjaxWrapper from './Ajax/WinJSAjaxWrapper.js';\r\nimport ExtJSAjaxWrapper from './Ajax/ExtJSAjaxWrapper.js';\r\nimport AjaxStub from './Ajax/AjaxStub.js';\r\nimport modelBinderConfigCompiler from './StorageProviders/modelBinderConfigCompiler.js';\r\nimport AuthenticationBase from './Authentication/AuthenticationBase.js';\r\nimport Anonymous from './Authentication/Anonymous.js';\r\nimport FacebookAuth from './Authentication/FacebookAuth.js';\r\nimport BasicAuth from './Authentication/BasicAuth.js';\r\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\r\n//import deferred from '../JayDataModules/deferred.js';\r\n//import JayStorm from './JayStorm.js';\r\n\r\n\r\n\r\nexport default $data\r\n","import $data from './TypeSystem/index.js';\r\nimport expressions from './Types/Expressions/index.js';\r\nimport jaysvcutil from './JaySvcUtil/index.js';\r\nimport types from './Types/index.js';\r\n\r\nexport default $data\r\n"],"sourceRoot":"/source/"}